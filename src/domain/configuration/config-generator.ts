/**
 * Configuration file generator for Minsky
 * 
 * Generates properly formatted YAML configuration files for both
 * repository (.minsky/config.yaml) and global user configs
 */

import { writeFileSync, mkdirSync, existsSync } from "fs";
import { dirname, join } from "path";
import { stringify as stringifyYaml } from "yaml";
import { RepositoryConfig, GlobalUserConfig, CONFIG_PATHS } from "./types";
import { homedir } from "os";

export interface RepositoryConfigOptions {
  backend: "markdown" | "json-file" | "github-issues";
  githubOwner?: string;
  githubRepo?: string;
  autoDetectBackend?: boolean;
}

export interface GlobalUserConfigOptions {
  githubToken?: string;
  githubTokenSource?: "environment" | "file" | "prompt";
}

export class ConfigurationGenerator {
  /**
   * Generate and write repository configuration file
   */
  generateRepositoryConfig(_workingDir: string, _options: RepositoryConfigOptions): void {
    const config: RepositoryConfig = {
      version: 1,
      backends: {
        default: options.backend
      }
    };

    // Add GitHub-specific configuration
    if (_options.backend === "github-issues") {
      if (!_options.githubOwner || !options.githubRepo) {
        throw new Error("GitHub owner and repo are required for github-issues backend");
      }
      config.backends!["github-issues"] = {
        owner: options.githubOwner,
        repo: options.githubRepo
      };
    }

    // Add repository-level settings
    config.repository = {
      auto_detect_backend: options.autoDetectBackend ?? true,
      detection_rules: [
        { condition: "github_remote_exists", backend: "github-issues" },
        { condition: "tasks_md_exists", backend: "markdown" },
        { condition: "always", backend: "json-file" }
      ]
    };

    this.writeRepositoryConfig(_workingDir, config);
  }

  /**
   * Generate and write global user configuration file
   */
  generateGlobalUserConfig(_options: GlobalUserConfigOptions): void {
    const config: GlobalUserConfig = {
      version: 1
    };

    if (_options.githubToken || options.githubTokenSource) {
      config.credentials = {
        github: {
          source: options.githubTokenSource || "file"
        }
      };

      if (_options.githubToken && options.githubTokenSource === "file") {
        config.credentials.github.token = options.githubToken;
      }
    }

    this.writeGlobalUserConfig(config);
  }

  /**
   * Write repository configuration file
   */
  private writeRepositoryConfig(_workingDir: string, config: RepositoryConfig): void {
    const configDir = join(_workingDir, ".minsky");
    const configPath = join(configDir, "config.yaml");

    // Ensure .minsky directory exists
    if (!existsSync(configDir)) {
      mkdirSync(configDir, { recursive: true });
    }

    const yamlContent = this.generateYamlHeader("Repository") + stringifyYaml(config, {
      indent: 2,
      lineWidth: 100,
      quotingType: '"'
    });

    writeFileSync(configPath, yamlContent, { encoding: "utf8" });
  }

  /**
   * Write global user configuration file
   */
  private writeGlobalUserConfig(config: GlobalUserConfig): void {
    const configPath = this.expandTilde(CONFIG_PATHS.GLOBAL_USER);
    const configDir = dirname(configPath);

    // Ensure config directory exists
    if (!existsSync(configDir)) {
      mkdirSync(configDir, { recursive: true });
    }

    const yamlContent = this.generateYamlHeader("Global User") + stringifyYaml(config, {
      indent: 2,
      lineWidth: 100,
      quotingType: '"'
    });

    writeFileSync(configPath, yamlContent, { encoding: "utf8" });
  }

  /**
   * Generate YAML file header comment
   */
  private generateYamlHeader(configType: string): string {
    return `# Minsky ${configType} Configuration
# This file was generated by the Minsky CLI
# Edit manually or use 'minsky config' commands

`;
  }

  /**
   * Expand tilde in file paths
   */
  private expandTilde(filePath: string): string {
    if (filePath.startsWith("~/")) {
      return join(homedir(), filePath.slice(2));
    }
    return filePath;
  }

  /**
   * Get the repository configuration file path
   */
  static getRepositoryConfigPath(_workingDir: string): string {
    return join(_workingDir, CONFIG_PATHS.REPOSITORY);
  }

  /**
   * Get the global user configuration file path
   */
  static getGlobalUserConfigPath(): string {
    const configPath = CONFIG_PATHS.GLOBAL_USER;
    if (configPath.startsWith("~/")) {
      return join(homedir(), configPath.slice(2));
    }
    return configPath;
  }
} 
