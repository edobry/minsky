/**
 * Configuration file generator for Minsky
 *
 * Generates properly formatted YAML configuration files for both
 * repository (.minsky/config.yaml) and global user configs
 */

import { writeFileSync, mkdirSync, existsSync } from "fs";
import { dirname, join } from "path";
import { stringify as stringifyYaml } from "yaml";
import { RepositoryConfig, GlobalUserConfig, CONFIG_PATHS } from "./types";
import { homedir } from "os";
import { createBackendDetectionErrorMessage } from "../../errors/enhanced-error-templates";

export interface RepositoryConfigOptions {
  backend: "markdown" | "json-file" | "github-issues";
  githubOwner?: string;
  githubRepo?: string;
  autoDetectBackend?: boolean;
}

export interface GlobalUserConfigOptions {
  githubToken?: string;
  githubTokenSource?: "environment" | "file" | "prompt";
}

export class ConfigurationGenerator {
  /**
   * Generate and write repository configuration file
   */
  generateRepositoryConfig(workingDir: string, options: RepositoryConfigOptions): void {
    const config: RepositoryConfig = {
      version: 1,
      backends: {
        default: (options as any)!.backend,
      },
    } as any;

    // Add GitHub-specific configuration
    if ((options as any)!.backend === "github-issues") {
      if (!(options as any)!.githubOwner || !(options as any)!.githubRepo) {
        const errorMessage = createBackendDetectionErrorMessage(
          "github-issues",
          ["markdown", "json-file", "github-issues"] as any[],
          {
            "github-issues": [
              ...((options as any)!.githubOwner ? [] : ["GitHub owner"]),
              ...((options as any)!.githubRepo ? [] : ["GitHub repository"])
            ]
          },
          workingDir
        );
        throw new Error(errorMessage as any);
      }
      (config as any)!.backends!["github-issues"] = {
        owner: (options as any)!.githubOwner,
        repo: (options as any)!.githubRepo,
      };
    }

    // Add repository-level settings
    (config as any)!.repository = {
      auto_detect_backend: (options as any)!.autoDetectBackend ?? true,
      detection_rules: [
        { condition: "tasks_md_exists", backend: "github-issues" },
        { condition: "tasks_md_exists", backend: "markdown" },
        { condition: "always", backend: "json-file" },
      ],
    };

    this.writeRepositoryConfig(workingDir, config as any);
  }

  /**
   * Generate and write global user configuration file
   */
  generateGlobalUserConfig(options: GlobalUserConfigOptions): void {
    const config: GlobalUserConfig = {
      version: 1,
    };

    if ((options as any)!.githubToken || (options as any)!.githubTokenSource) {
      (config as any)!.github = {
        credentials: {
          source: (options as any)!.githubTokenSource || "file",
        },
      };

      if ((options as any)!.githubToken && (options as any)!.githubTokenSource === "file") {
        (config!?.github?.credentials! as any).token = (options as any)!.githubToken;
      }
    }

    this.writeGlobalUserConfig(config as any);
  }

  /**
   * Write repository configuration file
   */
  private writeRepositoryConfig(workingDir: string, config: RepositoryConfig): void {
    const configDir = join(workingDir, ".minsky");
    const configPath = join(configDir, "config.yaml") as any;

    // Ensure .minsky directory exists
    if (!existsSync(configDir)) {
      mkdirSync(configDir, { recursive: true });
    }

    const yamlContent =
      this.generateYamlHeader("Repository") +
      stringifyYaml(config as any, {
        indent: 2,
        lineWidth: 100,
      });

    writeFileSync(configPath, yamlContent, { encoding: "utf8" });
  }

  /**
   * Write global user configuration file
   */
  private writeGlobalUserConfig(config: GlobalUserConfig): void {
    const configPath = this.expandTilde(CONFIG_PATHS.GLOBAL_USER);
    const configDir = dirname(configPath);

    // Ensure config directory exists
    if (!existsSync(configDir)) {
      mkdirSync(configDir, { recursive: true });
    }

    const yamlContent =
      this.generateYamlHeader("Global User") +
      stringifyYaml(config as any, {
        indent: 2,
        lineWidth: 100,
      });

    writeFileSync(configPath, yamlContent, { encoding: "utf8" });
  }

  /**
   * Generate YAML file header comment
   */
  private generateYamlHeader(configType: string): string {
    return `# Minsky ${configType} Configuration
# This file was generated by the Minsky CLI
# Edit manually or use 'minsky config' commands

`;
  }

  /**
   * Expand tilde in file paths
   */
  private expandTilde(filePath: string): string {
    if ((filePath as any).startsWith("~/")) {
      return join(homedir(), (filePath as any).slice(2));
    }
    return filePath;
  }

  /**
   * Get the repository configuration file path
   */
  static getRepositoryConfigPath(workingDir: string): string {
    return join(workingDir, CONFIG_PATHS.REPOSITORY);
  }

  /**
   * Get the global user configuration file path
   */
  static getGlobalUserConfigPath(): string {
    const configPath = CONFIG_PATHS.GLOBAL_USER;
    if ((configPath as any)!.startsWith("~/")) {
      return join(homedir(), (configPath as any)!.slice(2));
    }
    return configPath;
  }
}
