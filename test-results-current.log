bun test v1.2.15 (df017990)

syntax-test.test.ts:
(pass) Session Approve > should approve

session-approve.test.ts:
(pass) Session Approve > should approve session

test.test.ts:

test-verification/quoting.test.ts:
(pass) Rule description quoting fix > createRule should use double quotes for descriptions with special characters [1.78ms]
(pass) Rule description quoting fix > updateRule should use double quotes for descriptions with special characters [3.50ms]
(pass) Rule description quoting fix > createRule should not add quotes to simple descriptions [0.43ms]

codemods/session-approve-log-mock-fixer.test.ts:
(pass) Session Approve Log Mock Fixer > fixLogMockInFile > should skip non-test files for safety [8.59ms]
(pass) Session Approve Log Mock Fixer > fixLogMockInFile > should skip files that already have log.cli mock [0.99ms]
(pass) Session Approve Log Mock Fixer > fixLogMockInFile > should add cli method to existing log mock [7.24ms]
(pass) Session Approve Log Mock Fixer > fixLogMockInFile > should add complete log mock for session approve tests without existing mock [3.86ms]
(pass) Session Approve Log Mock Fixer > fixLogMockInFile > should not modify files that don't need log mocks [0.43ms]
(pass) Session Approve Log Mock Fixer > fixSessionApproveLogMocks > should process multiple files and return results [0.14ms]
‚ùå Error processing /nonexistent/file.test.ts: 331 | (function (errors) {
332 |     class BaseError extends Error {
333 |         constructor(message, node) {
334 |             const nodeLocation = node && getPrettyNodeLocation(node);
335 |             const messageWithLocation = nodeLocation ? `${message}\n\n${nodeLocation}` : message;
336 |             super(messageWithLocation);
                  ^
error: File not found: /nonexistent/file.test.ts
 path: "/nonexistent/file.test.ts",
 code: "ENOENT"

      at new BaseError (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/@ts-morph/common/dist/ts-morph-common.js:336:13)
      at new PathNotFoundError (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/@ts-morph/common/dist/ts-morph-common.js:368:13)
      at new FileNotFoundError (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/@ts-morph/common/dist/ts-morph-common.js:382:13)
      at addSourceFileAtPath (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/ts-morph/dist/ts-morph.js:19291:19)
      at fixSessionApproveLogMocks (/Users/edobry/.local/state/minsky/sessions/task#276/codemods/session-approve-log-mock-fixer.ts:214:34)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/codemods/session-approve-log-mock-fixer.test.ts:105:23)

(pass) Session Approve Log Mock Fixer > fixSessionApproveLogMocks > should handle file processing errors gracefully [2.15ms]
(pass) Session Approve Log Mock Fixer > boundary validation tests > should never modify production code files [0.39ms]
(pass) Session Approve Log Mock Fixer > boundary validation tests > should preserve existing complete log mocks without changes [0.33ms]
(pass) Session Approve Log Mock Fixer > boundary validation tests > should maintain valid TypeScript syntax after modifications [1.60ms]

codemods/fix-import-extensions.test.ts:
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 3
Export statements fixed: 0
Total transformations: 3
Processing time: 10ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753221586656-gtxfmuv9h/src/test.ts: 3 imports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Unit Tests - Individual Transformations > should remove .js extension from local imports [11.40ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 2
Export statements fixed: 0
Total transformations: 2
Processing time: 2ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753221586672-5hi9p2jov/src/test.ts: 2 imports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Unit Tests - Individual Transformations > should remove .ts extension from local imports [2.92ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 0
Export statements fixed: 3
Total transformations: 3
Processing time: 3ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753221586677-st57cvga4/src/test.ts: 3 exports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Unit Tests - Individual Transformations > should remove extensions from export statements [3.26ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 2ms
Success rate: 100.0%

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Unit Tests - Individual Transformations > should preserve external npm package imports [2.13ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 1ms
Success rate: 100.0%

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Unit Tests - Individual Transformations > should preserve non-.js/.ts extensions [1.74ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 2
Export statements fixed: 0
Total transformations: 2
Processing time: 3ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753221586689-o7nxx90s1/src/test.ts: 2 imports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Unit Tests - Individual Transformations > should handle mixed import types correctly [4.40ms]
üöÄ Starting import extension fixer...
üìÅ Found 3 files to process
üíæ Saving changes...
‚úÖ Saved 3 files

üìä Import Extension Fixer Report
================================
Files processed: 3
Files modified: 3
Import statements fixed: 2
Export statements fixed: 1
Total transformations: 3
Processing time: 10ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753221586695-i0c1sea3f/src/app.ts: 1 imports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753221586695-i0c1sea3f/src/components/Button.ts: 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753221586695-i0c1sea3f/src/utils/index.ts: 1 imports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Integration Tests - Full Codemod Execution > should process multiple files correctly [10.56ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 2
Export statements fixed: 1
Total transformations: 3
Processing time: 2ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753221586707-j8mzjwol1/src/test.ts: 2 imports, 1 exports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Integration Tests - Full Codemod Execution > should generate accurate metrics [1.88ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 1
Export statements fixed: 1
Total transformations: 2
Processing time: 4ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753221586711-8mkl31vft/src/test.ts: 1 imports, 1 exports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Integration Tests - Full Codemod Execution > should provide detailed results per file [4.02ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 1ms
Success rate: 100.0%

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Integration Tests - Full Codemod Execution > should handle files with no changes [1.88ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 0ms
Success rate: 100.0%

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Edge Cases and Error Handling > should handle empty files [0.94ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 1ms
Success rate: 100.0%

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Edge Cases and Error Handling > should handle files with only comments [1.74ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 1ms
Success rate: 100.0%

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Edge Cases and Error Handling > should handle imports without extensions [1.23ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 3
Export statements fixed: 3
Total transformations: 6
Processing time: 2ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753221586728-ug1fr94fu/src/complex.ts: 3 imports, 3 exports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Edge Cases and Error Handling > should handle complex import/export patterns [4.64ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 2ms
Success rate: 100.0%

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Edge Cases and Error Handling > should handle exports without module specifiers [1.96ms]
üöÄ Starting import extension fixer...
üìÅ Found 0 files to process
üíæ Saving changes...
‚úÖ Saved 0 files

üìä Import Extension Fixer Report
================================
Files processed: 0
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 0ms
Success rate: 100.0%

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Edge Cases and Error Handling > should exclude test files from processing [0.80ms]
üöÄ Starting import extension fixer...
üìÅ Found 0 files to process
üíæ Saving changes...
‚úÖ Saved 0 files

üìä Import Extension Fixer Report
================================
Files processed: 0
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 0ms
Success rate: 100.0%

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Edge Cases and Error Handling > should exclude spec files from processing [0.70ms]
üöÄ Starting import extension fixer...
üìÅ Found 10 files to process
üíæ Saving changes...
‚úÖ Saved 10 files

üìä Import Extension Fixer Report
================================
Files processed: 10
Files modified: 10
Import statements fixed: 10
Export statements fixed: 10
Total transformations: 20
Processing time: 5ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753221586743-22xg4r5y9/src/file0.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753221586743-22xg4r5y9/src/file1.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753221586743-22xg4r5y9/src/file2.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753221586743-22xg4r5y9/src/file3.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753221586743-22xg4r5y9/src/file4.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753221586743-22xg4r5y9/src/file5.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753221586743-22xg4r5y9/src/file6.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753221586743-22xg4r5y9/src/file7.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753221586743-22xg4r5y9/src/file8.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753221586743-22xg4r5y9/src/file9.ts: 1 imports, 1 exports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Performance Benchmarks > should process files efficiently [6.15ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 2
Export statements fixed: 0
Total transformations: 2
Processing time: 3ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753221586750-fvabty0nk/src/test.ts: 2 imports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Performance Benchmarks > should maintain high success rate [3.04ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 3
Export statements fixed: 0
Total transformations: 3
Processing time: 1ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753221586755-exkm5wcme/src/typescript.ts: 3 imports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > TypeScript Support > should handle TypeScript-specific imports [2.12ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 2
Export statements fixed: 0
Total transformations: 2
Processing time: 1ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753221586759-0wcvwppw0/src/component.tsx: 2 imports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > TypeScript Support > should handle JSX/TSX files [1.82ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 2
Export statements fixed: 0
Total transformations: 2
Processing time: 1ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753221586762-khb54k0c0/src/bun-example.ts: 2 imports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Real-world Scenarios > should handle Bun-style imports correctly [2.20ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 3
Export statements fixed: 0
Total transformations: 3
Processing time: 1ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753221586766-h4qya1uj8/src/nested/deep/component.ts: 3 imports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Real-world Scenarios > should handle nested directory imports [2.42ms]

codemods/bun-test-mocking-consistency-fixer.test.ts:

# Unhandled error between tests
-------------------------------
1 | (function (entry, fetcher)
              ^
SyntaxError: Export named 'fixBunTestMockingInFiles' not found in module '/Users/edobry/.local/state/minsky/sessions/task#276/codemods/bun-test-mocking-consistency-fixer.ts'.
      at loadAndEvaluateModule (1:11)
-------------------------------


codemods/fix-indentation.test.ts:
(pass) ESLint auto-fix codemod runs ONLY the correct ESLint command [0.05ms]
(pass) ESLint auto-fix uses only safe ESLint flags [0.02ms]
(pass) ESLint auto-fix handles error cases properly
(pass) ESLint auto-fix uses project configuration
(pass) ESLint auto-fix does NOT modify files directly [0.02ms]
(pass) ESLint auto-fix provides appropriate logging [0.02ms]
(pass) ESLint auto-fix has proper imports and dependencies [0.07ms]

codemods/comprehensive-as-unknown-fixer.test.ts:
(pass) ComprehensiveAsUnknownFixer > Session Object Property Access Patterns > should remove sessionProvider cast with non-null assertion [4.00ms]
(pass) ComprehensiveAsUnknownFixer > Session Object Property Access Patterns > should remove sessionRecord cast with non-null assertion [1.64ms]
(pass) ComprehensiveAsUnknownFixer > Session Object Property Access Patterns > should remove sessionInfo cast with non-null assertion [1.49ms]
(pass) ComprehensiveAsUnknownFixer > Dynamic Import Patterns > should fix relative import patterns [0.59ms]
(pass) ComprehensiveAsUnknownFixer > Dynamic Import Patterns > should NOT fix absolute import patterns (keep them safe) [0.30ms]
(pass) ComprehensiveAsUnknownFixer > Config Object Patterns > should remove config object casts [1.06ms]
(pass) ComprehensiveAsUnknownFixer > Config Object Patterns > should remove options object casts [0.08ms]
(pass) ComprehensiveAsUnknownFixer > Error Handling Patterns > should remove error object casts [0.38ms]
(pass) ComprehensiveAsUnknownFixer > Provider/Service Patterns > should remove provider/service/backend casts [1.10ms]
(pass) ComprehensiveAsUnknownFixer > Redundant Cast Patterns > should remove redundant double casts [0.29ms]
(pass) ComprehensiveAsUnknownFixer > Promise Return Patterns > should remove unnecessary Promise casts [1.00ms]
(pass) ComprehensiveAsUnknownFixer > Simple Variable Patterns > should remove simple variable casts [1.48ms]
(pass) ComprehensiveAsUnknownFixer > Edge Cases and Safety > should NOT transform complex expressions [0.82ms]
(pass) ComprehensiveAsUnknownFixer > Edge Cases and Safety > should handle mixed patterns in single file [1.69ms]
(pass) ComprehensiveAsUnknownFixer > Real Codebase Scenarios > should handle actual workspace.ts patterns [2.01ms]
(pass) ComprehensiveAsUnknownFixer > Real Codebase Scenarios > should handle actual repository.ts dynamic import patterns [1.06ms]

tests/verification-protocol.test.ts:
(pass) Verification Protocol > should prevent claiming resources don't exist without verification [0.01ms]
(pass) Verification Protocol > should document the self-improvement rule verification failure [0.68ms]
(pass) Verification Protocol > should enforce verification checklist for all negative existence claims [0.03ms]

src/types/project.test.ts:
(pass) ProjectContext > validateRepositoryPath > returns false for clearly invalid paths [0.02ms]
(pass) ProjectContext > validateRepositoryPath > returns true for current working directory [0.03ms]
(pass) ProjectContext > createProjectContext > creates a ProjectContext for current working directory [0.07ms]
{"level":"error","message":"Invalid repository path: /definitely/does/not/exist/path/12345","timestamp":"2025-07-22T21:59:46.808Z"}
(pass) ProjectContext > createProjectContext > throws an error for clearly invalid path [0.36ms]
(pass) ProjectContext > createProjectContextFromCwd > creates a ProjectContext from current working directory [0.03ms]

src/utils/package-manager.test.ts:
(pass) Package Manager Utilities > detectPackageManager > detects bun from bun.lock [0.02ms]
(pass) Package Manager Utilities > detectPackageManager > detects yarn from yarn.lock [0.06ms]
(pass) Package Manager Utilities > detectPackageManager > detects pnpm from pnpm-lock.yaml [0.02ms]
(pass) Package Manager Utilities > detectPackageManager > detects npm from package-lock.json [0.01ms]
(pass) Package Manager Utilities > detectPackageManager > defaults to npm if only package.json exists
(pass) Package Manager Utilities > detectPackageManager > returns undefined if no package files exist [0.01ms]
(pass) Package Manager Utilities > getInstallCommand > returns correct command for bun
(pass) Package Manager Utilities > getInstallCommand > returns correct command for npm
(pass) Package Manager Utilities > getInstallCommand > returns correct command for yarn
(pass) Package Manager Utilities > getInstallCommand > returns correct command for pnpm
(pass) Package Manager Utilities > getInstallCommand > returns undefined for unknown package manager [0.01ms]
(pass) Package Manager Utilities > installDependencies > successfully installs dependencies [0.06ms]
(pass) Package Manager Utilities > installDependencies > uses provided package manager if specified [0.05ms]
(pass) Package Manager Utilities > installDependencies > handles installation errors [0.05ms]
(pass) Package Manager Utilities > installDependencies > respects quiet option for stdio [0.04ms]

src/utils/param-schemas.test.ts:
(pass) Parameter Schemas > Schema Helpers > optionalString should create an optional string schema with description
(pass) Parameter Schemas > Schema Helpers > requiredString should create a required string schema with description
(pass) Parameter Schemas > Schema Helpers > optionalBoolean should create an optional boolean schema with description
(pass) Parameter Schemas > Common Parameters > all common parameter schemas should have descriptions [0.21ms]

src/utils/filter-messages.test.ts:
(pass) Filter Messages Utility > getStatusFilterMessage > returns correct message for a given status [0.04ms]
(pass) Filter Messages Utility > getStatusFilterMessage > includes the status in single quotes
(pass) Filter Messages Utility > getActiveTasksMessage > returns message about active tasks
(pass) Filter Messages Utility > getActiveTasksMessage > includes instruction about --all flag
(pass) Filter Messages Utility > generateFilterMessages > returns status filter message when status is provided [0.05ms]
(pass) Filter Messages Utility > generateFilterMessages > returns active tasks message when not showing all tasks [0.05ms]
(pass) Filter Messages Utility > generateFilterMessages > returns no messages when all is true
(pass) Filter Messages Utility > generateFilterMessages > prioritizes status filter over active tasks message [0.01ms]
(pass) Filter Messages Utility > generateFilterMessages > returns empty array when no filter options provided

src/utils/option-descriptions.test.ts:
(pass) Option Descriptions > all exported descriptions should be non-empty strings [0.06ms]
(pass) Option Descriptions > all descriptions should follow consistent naming pattern (UPPERCASE_WITH_DESCRIPTION suffix) [0.03ms]
(pass) Option Descriptions > all descriptions should end with proper punctuation [0.05ms]
(pass) Option Descriptions > repository resolution descriptions should be consistent
(pass) Option Descriptions > output format descriptions should be consistent
(pass) Option Descriptions > task descriptions should be consistent
(pass) Option Descriptions > backend descriptions should be consistent
(pass) Option Descriptions > force option descriptions should be consistent
(pass) Option Descriptions > git option descriptions should be consistent
(pass) Option Descriptions > rules option descriptions should be consistent

src/utils/logger.test.ts:
(pass) Logger > getLogMode > should return HUMAN when configuration mode is set to HUMAN [0.01ms]
(pass) Logger > getLogMode > should return STRUCTURED when configuration mode is set to STRUCTURED
(pass) Logger > getLogMode > should default to HUMAN when mode is auto and TTY is available [0.06ms]
(pass) Logger > getLogMode > should default to STRUCTURED when mode is auto and TTY is not available [0.01ms]
(pass) Logger > createConfigurableLogger > should create logger with configuration [0.41ms]
(pass) Logger > createConfigurableLogger > should create logger with STRUCTURED mode [0.24ms]
(pass) Logger > createConfigurableLogger > should expose logger methods [0.23ms]
(pass) Logger > createConfigurableLogger > should support dependency injection for testing [0.05ms]
(pass) Logger > createConfigurableLogger > should handle different log levels [0.37ms]
(pass) Logger > createConfigurableLogger > should isolate logger instances [0.27ms]
(pass) Logger > configuration integration > should maintain backward compatibility [0.09ms]
(pass) Logger > configuration integration > should support enableAgentLogs configuration [0.05ms]

src/mcp/command-mapper.test.ts:
(pass) CommandMapper > Schema Conversion > should convert simple object schema to flat JSON schema without $ref [1.51ms]
(pass) CommandMapper > Schema Conversion > should handle empty object schema [0.11ms]
(pass) CommandMapper > Schema Conversion > should handle complex nested schemas [0.64ms]
(pass) CommandMapper > Schema Conversion > should handle schema with validation rules [0.19ms]
(pass) CommandMapper > Schema Conversion > should ensure schema is MCP-compatible [0.03ms]
(pass) CommandMapper > Schema Conversion > should produce schema that passes MCP server validation [0.11ms]
(pass) CommandMapper > should initialize with server and project context
(pass) CommandMapper > should add tool to server when addCommand is called [0.28ms]

src/mcp/server.test.ts:
(pass) MCP Server > should import official MCP SDK module successfully [37.65ms]
(pass) MCP Server > should import stdio transport successfully [1.94ms]
(pass) MCP Server > should be able to import our server modules [18.26ms]
(pass) MCP Server > should create MinskyMCPServer instance [0.72ms]

src/errors/network-errors.test.ts:
(pass) Network Error handling > NetworkError class > should create a NetworkError with the correct properties [0.69ms]
(pass) Network Error handling > PortInUseError class > should create a PortInUseError with the correct message [0.07ms]
(pass) Network Error handling > PortInUseError class > should provide helpful suggestions [0.04ms]
(pass) Network Error handling > NetworkPermissionError class > should create a NetworkPermissionError with the correct message [0.02ms]
(pass) Network Error handling > NetworkPermissionError class > should provide helpful suggestions [0.01ms]
(pass) Network Error handling > isNetworkError function > should identify common network errors [0.05ms]
(pass) Network Error handling > createNetworkError function > should create a PortInUseError for EADDRINUSE errors [0.04ms]
(pass) Network Error handling > createNetworkError function > should create a NetworkPermissionError for EACCES errors
(pass) Network Error handling > createNetworkError function > should create a generic NetworkError for other errors [0.01ms]
(pass) Network Error handling > formatNetworkErrorMessage function > should format a PortInUseError with suggestions [0.04ms]
(pass) Network Error handling > formatNetworkErrorMessage function > should not include the debug hint when debug is true [0.02ms]

src/errors/enhanced-error-templates.test.ts:
(pass) Task 223 Enhanced Error Messages > createSessionPrBranchErrorMessage > should create helpful error message for PR branch restriction [0.10ms]
(pass) Task 223 Enhanced Error Messages > createSessionPrBranchErrorMessage > should handle undefined session name gracefully [0.06ms]
(pass) Task 223 Enhanced Error Messages > createSessionPrBranchErrorMessage > should include context information when provided [0.02ms]
(pass) Task 223 Enhanced Error Messages > createTaskIdParsingErrorMessage > should show supported task ID formats [0.04ms]
(pass) Task 223 Enhanced Error Messages > createTaskIdParsingErrorMessage > should include operation context
(pass) Task 223 Enhanced Error Messages > createVariableNamingErrorMessage > should identify underscore prefix mismatch (declaration has underscore, usage doesn't) [0.03ms]
(pass) Task 223 Enhanced Error Messages > createVariableNamingErrorMessage > should identify reverse underscore mismatch (declaration without underscore, usage has underscore) [0.02ms]
(pass) Task 223 Enhanced Error Messages > createVariableNamingErrorMessage > should include file path and line numbers when provided
(pass) Task 223 Enhanced Error Messages > createGitTimeoutErrorMessage > should provide troubleshooting steps for git timeouts [0.03ms]
(pass) Task 223 Enhanced Error Messages > createGitTimeoutErrorMessage > should include timeout duration in context [0.02ms]
(pass) Task 223 Enhanced Error Messages > createMergeConflictErrorMessage > should identify conflicting files with conflict types [0.04ms]
(pass) Task 223 Enhanced Error Messages > createMergeConflictErrorMessage > should provide resolution strategies [0.02ms]
(pass) Task 223 Enhanced Error Messages > createBackendDetectionErrorMessage > should show available backends and their requirements [0.09ms]
(pass) Task 223 Enhanced Error Messages > createBackendDetectionErrorMessage > should provide default backend list when no backends provided [0.02ms]
(pass) Task 223 Enhanced Error Messages > createBackendDetectionErrorMessage > should include workspace path in context [0.03ms]
(pass) Task 223 Enhanced Error Messages > Error Message Quality > should use consistent emoji patterns across all error types [0.06ms]
(pass) Task 223 Enhanced Error Messages > Error Message Quality > should provide actionable command suggestions [0.03ms]
(pass) Task 223 Enhanced Error Messages > Error Message Quality > should include context information when provided [0.03ms]

src/errors/message-templates.test.ts:
(pass) Error Message Templates > getErrorMessage > extracts message from Error object [0.66ms]
(pass) Error Message Templates > getErrorMessage > converts non-Error to string
(pass) Error Message Templates > formatCommandSuggestions > formats single suggestion [0.05ms]
(pass) Error Message Templates > formatCommandSuggestions > formats multiple suggestions [0.02ms]
(pass) Error Message Templates > formatContextInfo > returns empty string for no context [0.01ms]
(pass) Error Message Templates > formatContextInfo > formats single context info [0.01ms]
(pass) Error Message Templates > formatContextInfo > formats multiple context info
(pass) Error Message Templates > buildErrorMessage > builds basic error message [0.02ms]
(pass) Error Message Templates > buildErrorMessage > builds error message with description [0.01ms]
(pass) Error Message Templates > buildErrorMessage > builds error message with sections and emojis [0.01ms]
(pass) Error Message Templates > buildErrorMessage > includes context information
(pass) Error Message Templates > createResourceNotFoundMessage > creates session not found message [0.03ms]
(pass) Error Message Templates > createMissingInfoMessage > creates missing information message [0.02ms]
(pass) Error Message Templates > createValidationErrorMessage > creates validation error message [0.04ms]
(pass) Error Message Templates > createCommandFailureMessage > creates command failure message [0.03ms]
(pass) Error Message Templates > createSessionErrorMessage > creates not found session error [0.04ms]
(pass) Error Message Templates > createSessionErrorMessage > creates session exists error [0.01ms]
(pass) Error Message Templates > createSessionErrorMessage > creates invalid session error [0.02ms]
(pass) Error Message Templates > createGitErrorMessage > creates git conflict error [0.07ms]
(pass) Error Message Templates > createGitErrorMessage > creates general git error [0.02ms]
(pass) Error Message Templates > createConfigErrorMessage > creates configuration error message [0.02ms]
(pass) Error Message Templates > ErrorContextBuilder > builds empty context [0.04ms]
(pass) Error Message Templates > ErrorContextBuilder > adds current directory [0.02ms]
(pass) Error Message Templates > ErrorContextBuilder > adds session information [0.01ms]
(pass) Error Message Templates > ErrorContextBuilder > adds repository information [0.01ms]
(pass) Error Message Templates > ErrorContextBuilder > adds task information [0.01ms]
(pass) Error Message Templates > ErrorContextBuilder > adds command information [0.01ms]
(pass) Error Message Templates > ErrorContextBuilder > adds custom information [0.01ms]
(pass) Error Message Templates > ErrorContextBuilder > chains multiple context additions [0.02ms]
(pass) Error Message Templates > Error message consistency > all templates use consistent emoji patterns [0.04ms]
(pass) Error Message Templates > Error message consistency > all templates have consistent structure [0.04ms]

src/domain/session-lookup-bug-integration.test.ts:
{"error":"The \"path\" property must be of type string, got undefined","level":"error","message":"Error during git clone","repoUrl":"https://github.com/nonexistent/invalid-repo-12345.git","stack":"TypeError: The \"path\" property must be of type string, got undefined\n    at dirname (unknown)\n    at cloneImpl (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git/clone-operations.ts:61:22)\n    at cloneImpl (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git/clone-operations.ts:39:33)\n    at processTicksAndRejections (native:7:39)","timestamp":"2025-07-22T21:59:47.042Z"}
(pass) Session Lookup Bug Integration Test > should NOT create session directories when git clone fails [0.71ms]
(pass) Session Lookup Bug Integration Test > should create session directories when git clone succeeds

src/domain/rules.test.ts:
(pass) RuleService > listRules > lists rules from both formats when no format specified [1.77ms]
(pass) RuleService > listRules > filters rules by format [0.89ms]
(pass) RuleService > listRules > filters rules by tag [0.95ms]
(pass) RuleService > getRule > gets a rule by ID [0.45ms]
(pass) RuleService > getRule > throws error for non-existent rule [0.37ms]
(pass) RuleService > getRule > finds rule in specified format [0.71ms]
(pass) RuleService > createRule > creates a new rule with metadata [0.47ms]
(pass) RuleService > createRule > handles undefined metadata fields correctly [0.39ms]
(pass) RuleService > createRule > throws error if rule exists and overwrite is false [0.35ms]
(pass) RuleService > createRule > overwrites existing rule when overwrite is true [0.58ms]
(pass) RuleService > updateRule > updates metadata only [0.84ms]
(pass) RuleService > updateRule > updates content only [0.77ms]
(pass) RuleService > updateRule > updates both metadata and content [0.67ms]
(pass) RuleService > searchRules > searches for rules by content [0.70ms]
(pass) RuleService > searchRules > searches for rules by metadata [2.16ms]
(pass) RuleService > searchRules > filters search results by format and tag [1.56ms]

src/domain/git-pr-workflow.test.ts:
üîÑ Starting session approval...
üîÑ Switching to base branch...
üì° Fetching latest changes...
104 |       throw new MinskyError(errorMessage);
105 |     }
106 | 
107 |     // Re-throw other errors with additional context
108 |     const errorMessage = (error as any)?.message || "Unknown git command error";
109 |     const enhancedError = new MinskyError(
                                ^
MinskyError: Git fetch failed: ENOENT: no such file or directory, posix_spawn '/bin/sh'

Command: git -C /test/repo/path fetch origin
Working directory: /test/repo/path
Execution time: 1ms
 cause: undefined,

      at execGitWithTimeout (/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/git-exec.ts:109:27)
(fail) Session Approve Workflow > successfully approves and merges a PR branch with task ID [4.08ms]
üîÑ Starting session approval...
(pass) Session Approve Workflow > throws ValidationError when session parameter is missing [0.24ms]
üîÑ Starting session approval...
üîÑ Switching to base branch...
(pass) Session Approve Workflow > handles git command failures gracefully [0.43ms]

src/domain/session-lookup-bug-reproduction.test.ts:
73 |       // Bug setup: GitService.clone creates directories via mkdir BEFORE git operations
74 |       // If git clone fails after mkdir but before session DB registration,
75 |       // we get orphaned directories
76 | 
77 |       let cloneSpy = createMock();
78 |       cloneSpy = mock(async (options: any) => {
                      ^
ReferenceError: mock is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-lookup-bug-reproduction.test.ts:78:18)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-lookup-bug-reproduction.test.ts:72:90)
(fail) Session Lookup Bug Reproduction (Task #168) > Scenario 1: Git clone creates directory but fails before completion > should not leave orphaned session directories when git clone fails after mkdir
140 |     it("should not leave orphaned sessions when branch creation fails", async () => {
141 |       // Bug setup: Git clone succeeds, but branch creation fails
142 |       // Session directory exists but session never gets added to DB
143 | 
144 |       let cloneSpy = createMock();
145 |       cloneSpy = mock(async (options: any) => {
                       ^
ReferenceError: mock is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-lookup-bug-reproduction.test.ts:145:18)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-lookup-bug-reproduction.test.ts:140:73)
(fail) Session Lookup Bug Reproduction (Task #168) > Scenario 2: Git branch creation fails after clone succeeds > should not leave orphaned sessions when branch creation fails [0.07ms]
203 |       // Pre-create the session directory (simulating orphaned state)
204 |       await mkdir(sessionDir, { recursive: true });
205 | 
206 |       // Create spies for specific behaviors in this test
207 |       let getSessionSpy = createMock();
208 |       getSessionSpy = mock(() => Promise.resolve(null));
                            ^
ReferenceError: mock is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-lookup-bug-reproduction.test.ts:208:23)
(fail) Session Lookup Bug Reproduction (Task #168) > Scenario 3: Partial cleanup leaves inconsistent state > should handle the case where session directories exist but sessions are not in database [0.09ms]
233 |   describe("Expected behavior after fix", () => {
234 |     it("should either succeed completely or fail cleanly with no orphaned directories", async () => {
235 |       // This test documents the expected behavior after the fix
236 | 
237 |       let cloneSpy = createMock();
238 |       cloneSpy = mock(() => Promise.reject(new Error("git clone failed")));
                       ^
ReferenceError: mock is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-lookup-bug-reproduction.test.ts:238:18)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-lookup-bug-reproduction.test.ts:234:89)
(fail) Session Lookup Bug Reproduction (Task #168) > Expected behavior after fix > should either succeed completely or fail cleanly with no orphaned directories [0.05ms]

src/domain/session-pr-body-path.test.ts:
(pass) sessionPrFromParams bodyPath file reading functionality > should read body content from bodyPath when provided [0.17ms]
(pass) sessionPrFromParams bodyPath file reading functionality > should handle non-existent files correctly [0.08ms]
(pass) sessionPrFromParams bodyPath file reading functionality > should detect empty files correctly [0.16ms]
(pass) sessionPrFromParams bodyPath file reading functionality > should work with relative paths correctly [0.31ms]
(pass) sessionPrFromParams bodyPath file reading functionality > should validate bodyPath parameter priority logic [0.01ms]

src/domain/session-review.test.ts:
10 | 
11 | describe("sessionReviewFromParams", () => {
12 |   test("reviews session by name", async () => {
13 |     // Create trackable spies for methods we need to verify
14 |     let getSessionSpy = createMock();
15 |     getSessionSpy = mock((name: unknown) =>
                         ^
ReferenceError: mock is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-review.test.ts:15:21)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-review.test.ts:12:35)
(fail) sessionReviewFromParams > reviews session by name [0.02ms]
94 |   });
95 | 
96 |   test("reviews session by task ID", async () => {
97 |     // Create trackable spies for methods we need to verify
98 |     let getSessionByTaskIdSpy = createMock();
99 |     getSessionByTaskIdSpy = mock((taskId: unknown) =>
                                 ^
ReferenceError: mock is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-review.test.ts:99:29)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-review.test.ts:96:38)
(fail) sessionReviewFromParams > reviews session by task ID [0.19ms]
199 |     const mockWorkspaceUtils = createPartialMock<WorkspaceUtilsInterface>({
200 |       isSessionWorkspace: () => false,
201 |     });
202 | 
203 |     let getCurrentSessionSpy = createMock();
204 |     getCurrentSessionSpy = mock((_cwd?: unknown) => Promise.resolve(null));
                                 ^
ReferenceError: mock is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-review.test.ts:204:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-review.test.ts:189:59)
(fail) sessionReviewFromParams > throws ValidationError when no session detected [0.10ms]
(pass) sessionReviewFromParams > throws ResourceNotFoundError when session not found [0.50ms]

src/domain/session-git-clone-bug-regression.test.ts:
17 |   it("should not leave orphaned session records when git clone fails", async () => {
18 |     // Arrange - Simulate the exact error scenario that caused the bug using centralized factories
19 | 
20 |     // Create trackable spies for methods we need to verify
21 |     let addSessionSpy = createMock();
22 |     addSessionSpy = mock(() => Promise.resolve(undefined));
                         ^
ReferenceError: mock is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-git-clone-bug-regression.test.ts:22:21)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-git-clone-bug-regression.test.ts:17:72)
(fail) Session Git Clone Bug Regression Test > should not leave orphaned session records when git clone fails [0.14ms]
92 |   it("should successfully create session after fixing git directory issues", async () => {
93 |     // Arrange - Now simulate successful scenario after cleanup
94 | 
95 |     // Create trackable spies for methods we need to verify
96 |     let addSessionSpy = createMock();
97 |     addSessionSpy = mock(() => Promise.resolve(undefined));
                         ^
ReferenceError: mock is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-git-clone-bug-regression.test.ts:97:21)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-git-clone-bug-regression.test.ts:92:78)
(fail) Session Git Clone Bug Regression Test > should successfully create session after fixing git directory issues [0.11ms]

src/domain/git-default-branch.test.ts:
(pass) GitService Default Branch Detection > should detect default branch from origin HEAD ref [0.24ms]
46 | 
47 |     const gitService = new GitService();
48 |     const defaultBranch = await gitService.fetchDefaultBranch("/test/repo");
49 | 
50 |     // Verify result is trimmed and has prefix removed
51 |     expect(defaultBranch).toBe("custom-main");
                               ^
error: expect(received).toBe(expected)

Expected: "custom-main"
Received: ""

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git-default-branch.test.ts:51:27)
(fail) GitService Default Branch Detection > should properly remove origin prefix from branch name [0.20ms]
59 | 
60 |     const gitService = new GitService();
61 |     const defaultBranch = await gitService.fetchDefaultBranch("/test/repo");
62 | 
63 |     // Verify fallback branch
64 |     expect(defaultBranch).toBe("main");
                               ^
error: expect(received).toBe(expected)

Expected: "main"
Received: ""

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git-default-branch.test.ts:64:27)
(fail) GitService Default Branch Detection > should fall back to 'main' when command fails [0.04ms]

src/domain/gitServiceTaskStatusUpdate.test.ts:
(pass) GitService Task Status Update > should be able to update task status after PR creation

src/domain/rules-format.test.ts:
(pass) RuleService Format Compatibility > should get a rule in its original format when requested [0.58ms]
(pass) RuleService Format Compatibility > should get a rule in any format if no format specified [0.33ms]
(pass) RuleService Format Compatibility > should return rule with format note when requested in different format [0.33ms]
(pass) RuleService Format Compatibility > should prioritize the requested format for dual-format rules [0.38ms]
(pass) RuleService Format Compatibility > should throw specific error messages for non-existent rules [0.12ms]

src/domain/session-approve.test.ts:
104 |       throw new MinskyError(errorMessage);
105 |     }
106 | 
107 |     // Re-throw other errors with additional context
108 |     const errorMessage = (error as any)?.message || "Unknown git command error";
109 |     const enhancedError = new MinskyError(
                                ^
MinskyError: Git fetch failed: ENOENT: no such file or directory, posix_spawn '/bin/sh'

Command: git -C /test/repo/path fetch origin
Working directory: /test/repo/path
Execution time: 1ms
 cause: undefined,

      at execGitWithTimeout (/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/git-exec.ts:109:27)
(fail) Session Approve > branch cleanup after successful merge > should delete local PR branch and task branch after successful merge [0.66ms]
104 |       throw new MinskyError(errorMessage);
105 |     }
106 | 
107 |     // Re-throw other errors with additional context
108 |     const errorMessage = (error as any)?.message || "Unknown git command error";
109 |     const enhancedError = new MinskyError(
                                ^
MinskyError: Git fetch failed: ENOENT: no such file or directory, posix_spawn '/bin/sh'

Command: git -C /test/repo/path fetch origin
Working directory: /test/repo/path
Execution time: 0ms
 cause: undefined,

      at execGitWithTimeout (/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/git-exec.ts:109:27)
(fail) Session Approve > branch cleanup after successful merge > should handle branch cleanup failures gracefully without failing the operation [0.30ms]
104 |       throw new MinskyError(errorMessage);
105 |     }
106 | 
107 |     // Re-throw other errors with additional context
108 |     const errorMessage = (error as any)?.message || "Unknown git command error";
109 |     const enhancedError = new MinskyError(
                                ^
MinskyError: Git fetch failed: ENOENT: no such file or directory, posix_spawn '/bin/sh'

Command: git -C /test/repo/path fetch origin
Working directory: /test/repo/path
Execution time: 0ms
 cause: undefined,

      at execGitWithTimeout (/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/git-exec.ts:109:27)
(fail) Session Approve > branch cleanup after successful merge > should not attempt branch cleanup for already approved sessions [0.25ms]
104 |       throw new MinskyError(errorMessage);
105 |     }
106 | 
107 |     // Re-throw other errors with additional context
108 |     const errorMessage = (error as any)?.message || "Unknown git command error";
109 |     const enhancedError = new MinskyError(
                                ^
MinskyError: Git fetch failed: ENOENT: no such file or directory, posix_spawn '/bin/sh'

Command: git -C /test/repo/path fetch origin
Working directory: /test/repo/path
Execution time: 0ms
 cause: undefined,

      at execGitWithTimeout (/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/git-exec.ts:109:27)
(fail) Session Approve > branch cleanup after successful merge > should handle case where task branch doesn't exist but PR branch does [0.24ms]
104 |       throw new MinskyError(errorMessage);
105 |     }
106 | 
107 |     // Re-throw other errors with additional context
108 |     const errorMessage = (error as any)?.message || "Unknown git command error";
109 |     const enhancedError = new MinskyError(
                                ^
MinskyError: Git fetch failed: ENOENT: no such file or directory, posix_spawn '/bin/sh'

Command: git -C /test/repo/path fetch origin
Working directory: /test/repo/path
Execution time: 0ms
 cause: undefined,

      at execGitWithTimeout (/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/git-exec.ts:109:27)
(fail) Session Approve > successfully approves and merges a PR branch [0.29ms]
104 |       throw new MinskyError(errorMessage);
105 |     }
106 | 
107 |     // Re-throw other errors with additional context
108 |     const errorMessage = (error as any)?.message || "Unknown git command error";
109 |     const enhancedError = new MinskyError(
                                ^
MinskyError: Git fetch failed: ENOENT: no such file or directory, posix_spawn '/bin/sh'

Command: git -C /test/repo/path fetch origin
Working directory: /test/repo/path
Execution time: 0ms
 cause: undefined,

      at execGitWithTimeout (/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/git-exec.ts:109:27)
(fail) Session Approve > detects current session when repo path is provided [0.24ms]
(pass) Session Approve > throws error when session is not found [0.07ms]
(pass) Session Approve > throws error when no session or task is provided [0.34ms]
104 |       throw new MinskyError(errorMessage);
105 |     }
106 | 
107 |     // Re-throw other errors with additional context
108 |     const errorMessage = (error as any)?.message || "Unknown git command error";
109 |     const enhancedError = new MinskyError(
                                ^
MinskyError: Git fetch failed: ENOENT: no such file or directory, posix_spawn '/bin/sh'

Command: git -C /test/repo/path fetch origin
Working directory: /test/repo/path
Execution time: 0ms
 cause: undefined,

      at execGitWithTimeout (/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/git-exec.ts:109:27)
(fail) Session Approve > handles errors during task metadata update [0.42ms]
104 |       throw new MinskyError(errorMessage);
105 |     }
106 | 
107 |     // Re-throw other errors with additional context
108 |     const errorMessage = (error as any)?.message || "Unknown git command error";
109 |     const enhancedError = new MinskyError(
                                ^
MinskyError: Git fetch failed: ENOENT: no such file or directory, posix_spawn '/bin/sh'

Command: git -C /test/repo/path fetch origin
Working directory: /test/repo/path
Execution time: 0ms
 cause: undefined,

      at execGitWithTimeout (/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/git-exec.ts:109:27)
(fail) Session Approve > merges from local PR branch and handles missing remote branch gracefully [0.37ms]

src/domain/session-approve-branch-cleanup.test.ts:
104 |       throw new MinskyError(errorMessage);
105 |     }
106 | 
107 |     // Re-throw other errors with additional context
108 |     const errorMessage = (error as any)?.message || "Unknown git command error";
109 |     const enhancedError = new MinskyError(
                                ^
MinskyError: Git fetch failed: ENOENT: no such file or directory, posix_spawn '/bin/sh'

Command: git -C /test/repo/path fetch origin
Working directory: /test/repo/path
Execution time: 1ms
 cause: undefined,

      at execGitWithTimeout (/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/git-exec.ts:109:27)
(fail) Session Approve Branch Cleanup > should delete local PR branch and task branch after successful merge [1.28ms]
104 |       throw new MinskyError(errorMessage);
105 |     }
106 | 
107 |     // Re-throw other errors with additional context
108 |     const errorMessage = (error as any)?.message || "Unknown git command error";
109 |     const enhancedError = new MinskyError(
                                ^
MinskyError: Git fetch failed: ENOENT: no such file or directory, posix_spawn '/bin/sh'

Command: git -C /test/repo/path fetch origin
Working directory: /test/repo/path
Execution time: 0ms
 cause: undefined,

      at execGitWithTimeout (/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/git-exec.ts:109:27)
(fail) Session Approve Branch Cleanup > should handle branch cleanup failures gracefully without failing the operation [0.55ms]
104 |       throw new MinskyError(errorMessage);
105 |     }
106 | 
107 |     // Re-throw other errors with additional context
108 |     const errorMessage = (error as any)?.message || "Unknown git command error";
109 |     const enhancedError = new MinskyError(
                                ^
MinskyError: Git fetch failed: ENOENT: no such file or directory, posix_spawn '/bin/sh'

Command: git -C /test/repo/path fetch origin
Working directory: /test/repo/path
Execution time: 0ms
 cause: undefined,

      at execGitWithTimeout (/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/git-exec.ts:109:27)
(fail) Session Approve Branch Cleanup > should not attempt branch cleanup for already approved sessions [0.29ms]

src/domain/session-update.test.ts:
(pass) updateSessionFromParams > throws ValidationError when name is not provided [21.28ms]
65 |       expectToBeInstanceOf(error, ValidationError);
66 |     }
67 |   });
68 | 
69 |   test("throws ResourceNotFoundError when session does not exist", async () => {
70 |     mockSessionProvider.getSession = mock(() => Promise.resolve(null));
                                          ^
ReferenceError: mock is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-update.test.ts:70:38)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-update.test.ts:69:68)
(fail) updateSessionFromParams > throws ResourceNotFoundError when session does not exist [0.10ms]
897 |       name: sessionName,
898 |     });
899 |     if (error instanceof MinskyError) {
900 |       throw error;
901 |     } else {
902 |       throw new MinskyError(
                  ^
MinskyError: Failed to update session: Command failed: git -C /mock/session/workdir rev-list --left-right --count origin/main...main
fatal: cannot change to '/mock/session/workdir': No such file or directory

      at updateSessionFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session.ts:902:13)

941 |   if (!isURLInstance(fileURLOrPath))
942 |     return fileURLOrPath;
943 |   return Bun.fileURLToPath(fileURLOrPath);
944 | }
945 | var { Error, TypeError } = globalThis;
946 |   let err = new Error(message);
                  ^
error: Command failed: git -C /mock/session/workdir rev-list --left-right --count origin/main...main
fatal: cannot change to '/mock/session/workdir': No such file or directory

   code: 128,
 killed: false,
 signal: null,
    cmd: "git -C /mock/session/workdir rev-list --left-right --count origin/main...main",
 stdout: "",
 stderr: "fatal: cannot change to '/mock/session/workdir': No such file or directory\n",

      at genericNodeError (node:child_process:946:13)
      at exitHandler (node:child_process:102:28)
      at emit (node:events:96:22)
      at #maybeClose (node:child_process:737:16)
      at #handleOnExit (node:child_process:511:72)
(fail) updateSessionFromParams > returns session information when update is successful [7.61ms]
110 |     expectToHaveBeenCalled(mockGitService.popStash);
111 |   });
112 | 
113 |   test("throws error when workspace is dirty and force is not set", async () => {
114 |     // Mock dirty workspace
115 |     mockGitService.execInRepository = mock(() => Promise.resolve("M file.txt"));
                                            ^
ReferenceError: mock is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-update.test.ts:115:39)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-update.test.ts:113:69)
(fail) updateSessionFromParams > throws error when workspace is dirty and force is not set
129 |     }
130 |   });
131 | 
132 |   test("updates session when workspace is dirty and force is set", async () => {
133 |     // Mock dirty workspace
134 |     mockGitService.execInRepository = mock(() => Promise.resolve("M file.txt"));
                                            ^
ReferenceError: mock is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-update.test.ts:134:39)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-update.test.ts:132:68)
(fail) updateSessionFromParams > updates session when workspace is dirty and force is set [0.09ms]
897 |       name: sessionName,
898 |     });
899 |     if (error instanceof MinskyError) {
900 |       throw error;
901 |     } else {
902 |       throw new MinskyError(
                  ^
MinskyError: Failed to update session: Command failed: git -C /mock/session/workdir rev-list --left-right --count origin/main...main
fatal: cannot change to '/mock/session/workdir': No such file or directory

      at updateSessionFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session.ts:902:13)

941 |   if (!isURLInstance(fileURLOrPath))
942 |     return fileURLOrPath;
943 |   return Bun.fileURLToPath(fileURLOrPath);
944 | }
945 | var { Error, TypeError } = globalThis;
946 |   let err = new Error(message);
                  ^
error: Command failed: git -C /mock/session/workdir rev-list --left-right --count origin/main...main
fatal: cannot change to '/mock/session/workdir': No such file or directory

   code: 128,
 killed: false,
 signal: null,
    cmd: "git -C /mock/session/workdir rev-list --left-right --count origin/main...main",
 stdout: "",
 stderr: "fatal: cannot change to '/mock/session/workdir': No such file or directory\n",

      at genericNodeError (node:child_process:946:13)
      at exitHandler (node:child_process:102:28)
      at emit (node:events:96:22)
      at #maybeClose (node:child_process:737:16)
      at #handleOnExit (node:child_process:511:72)
(fail) updateSessionFromParams > skips stashing when noStash is true [7.97ms]
897 |       name: sessionName,
898 |     });
899 |     if (error instanceof MinskyError) {
900 |       throw error;
901 |     } else {
902 |       throw new MinskyError(
                  ^
MinskyError: Failed to update session: Command failed: git -C /mock/session/workdir rev-list --left-right --count origin/main...main
fatal: cannot change to '/mock/session/workdir': No such file or directory

      at updateSessionFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session.ts:902:13)

941 |   if (!isURLInstance(fileURLOrPath))
942 |     return fileURLOrPath;
943 |   return Bun.fileURLToPath(fileURLOrPath);
944 | }
945 | var { Error, TypeError } = globalThis;
946 |   let err = new Error(message);
                  ^
error: Command failed: git -C /mock/session/workdir rev-list --left-right --count origin/main...main
fatal: cannot change to '/mock/session/workdir': No such file or directory

   code: 128,
 killed: false,
 signal: null,
    cmd: "git -C /mock/session/workdir rev-list --left-right --count origin/main...main",
 stdout: "",
 stderr: "fatal: cannot change to '/mock/session/workdir': No such file or directory\n",

      at genericNodeError (node:child_process:946:13)
      at exitHandler (node:child_process:102:28)
      at emit (node:events:96:22)
      at #maybeClose (node:child_process:737:16)
      at #handleOnExit (node:child_process:511:72)
(fail) updateSessionFromParams > skips pushing when noPush is true [6.81ms]
192 |     expect(mockGitService.push.mock.calls.length).toBe(0);
193 |     expectToHaveBeenCalled(mockGitService.popStash);
194 |   });
195 | 
196 |   test("throws error when merge conflicts are detected", async () => {
197 |     mockGitService.mergeBranch = mock(() => Promise.resolve({ conflicts: true }));
                                       ^
ReferenceError: mock is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-update.test.ts:197:34)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-update.test.ts:196:58)
(fail) updateSessionFromParams > throws error when merge conflicts are detected

src/domain/session-pr-no-branch-switch.test.ts:
87 |     if (!result.success || !result.data) {
88 |       return null;
89 |     }
90 | 
91 |     return (
92 |       result.data!.sessions.find((session) => session.session === id) ||
                                 ^
TypeError: result.data.sessions.find is not a function. (In 'result.data.sessions.find((session) => session.session === id)', 'result.data.sessions.find' is undefined)
      at getEntity (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/backends/json-file-storage.ts:92:29)
(fail) Session PR Command Branch Behavior > should never switch user to PR branch during session pr creation [1.62ms]
161 |         session: "task#228",
162 |         title: "Test PR",
163 |         body: "Test body",
164 |         baseBranch: "main",
165 |       });
166 |     }).toThrow(/Failed to switch back to session branch/);
             ^
error: expect(received).toThrow(expected)

Expected pattern: /Failed to switch back to session branch/
Received message: "result.data.sessions.find is not a function. (In 'result.data.sessions.find((session) => session.session === id)', 'result.data.sessions.find' is undefined)"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-pr-no-branch-switch.test.ts:166:8)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-pr-no-branch-switch.test.ts:123:70)
(fail) Session PR Command Branch Behavior > should handle branch switch-back failure as critical error [0.10ms]
(pass) Session PR Command Branch Behavior > should document the behavioral change from switch -C to branch + switch pattern [0.03ms]

src/domain/session-auto-task-creation.test.ts:
108 |       "Fix the authentication bug",
109 |       "Auto-created task for session: Fix the authentication bug"
110 |     );
111 | 
112 |     // Verify session was created with task ID
113 |     expect(result.taskId).toBe("#001");
                                ^
error: expect(received).toBe(expected)

Expected: "#001"
Received: "001"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-auto-task-creation.test.ts:113:27)
(fail) Session Auto-Task Creation > should auto-create task when description is provided [1.18ms]
(pass) Session Auto-Task Creation > should not auto-create task when task ID is provided [0.09ms]
(pass) Session Auto-Task Creation > should use session name when provided with description [0.07ms]

src/domain/repository-uri.test.ts:

# Unhandled error between tests
-------------------------------
1 | (function (entry, fetcher)
              ^
SyntaxError: Export named 'expandGitHubShorthand' not found in module '/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/repository-uri.ts'.
      at loadAndEvaluateModule (1:11)
-------------------------------


src/domain/uri-utils.test.ts:
(pass) URI Utilities > normalizeRepositoryUri > normalizes HTTPS URLs
(pass) URI Utilities > normalizeRepositoryUri > normalizes SSH URLs [0.10ms]
(pass) URI Utilities > normalizeRepositoryUri > normalizes GitHub shorthand [0.01ms]
(pass) URI Utilities > convertRepositoryUri > converts HTTPS to SSH [0.04ms]
(pass) URI Utilities > convertRepositoryUri > converts SSH to HTTPS
(pass) URI Utilities > convertRepositoryUri > converts shorthand to HTTPS
(pass) URI Utilities > convertRepositoryUri > returns same URI if already in target format
(pass) URI Utilities > extractRepositoryInfo > extracts info from HTTPS URL [0.02ms]
(pass) URI Utilities > extractRepositoryInfo > extracts info from SSH URL [0.01ms]
(pass) URI Utilities > extractRepositoryInfo > extracts info from shorthand [0.01ms]

src/domain/workspace.test.ts:
(pass) resolveWorkspacePath > uses explicitly provided workspace path
(pass) resolveWorkspacePath > returns current directory when no workspace option is provided [0.25ms]
(pass) resolveWorkspacePath > returns sessionRepo when provided [0.02ms]
(pass) resolveWorkspacePath > validates that explicitly provided workspace exists [0.05ms]

src/domain/session-lookup-bug-simple.test.ts:
102 |     expect(sessionStartFailed)!.toBe(true); // Session creation should fail
103 | 
104 |     // CRITICAL: This assertion should PASS after fix but FAILS before fix
105 |     // Currently fails because git.clone creates directories before failing
106 |     const sessionDirPath = join(tempDir, "local-minsky", "sessions", "test-session");
107 |     expect(existsSync(sessionDirPath))!.toBe(false); // No orphaned directories should exist
                                              ^
error: expect(received).toBe(expected)

Expected: false
Received: true

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-lookup-bug-simple.test.ts:107:41)
(fail) Session Creation Bug Fix (TDD) > should NOT create session directory if git operations fail [0.99ms]

src/domain/repo-utils.test.ts:
(pass) Repo Utils > normalizeRepoName extracts repo name from URL
(pass) Repo Utils > resolveRepoPath uses provided repo path [0.19ms]
(pass) Repo Utils > resolveRepoPath resolves from session [0.06ms]
(pass) Repo Utils > resolveRepoPath falls back to git directory [0.05ms]
(pass) Repo Utils > resolveRepoPath falls back to current directory when git fails [0.07ms]

src/domain/github-backend.test.ts:
(pass) GitHub Repository Backend > constructor creates repository backend with correct settings
(pass) GitHub Repository Backend > getPath returns session workdir path [0.10ms]
(pass) GitHub Repository Backend > validate succeeds for a valid GitHub repository
(pass) GitHub Repository Backend > getConfig returns correct configuration

src/domain/tasks.specpath.test.ts:

src/domain/task-status-variables.test.ts:
(pass) Task Status Variables Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for TODO status [0.01ms]
(pass) Task Status Variables Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for IN-PROGRESS status [0.02ms]
(pass) Task Status Variables Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for DONE status [0.01ms]
(pass) Task Status Variables Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should not throw 'status is not defined' error [0.01ms]

src/domain/session-pr-title-duplication.test.ts:
(pass) Session PR Title Duplication Bug Tests > should reproduce title duplication in commit message parsing [0.12ms]
(pass) Session PR Title Duplication Bug Tests > should reproduce title duplication when body accidentally contains title [0.01ms]
(pass) Session PR Title Duplication Bug Tests > should fix title duplication with improved parsing [0.11ms]
(pass) Session PR Title Duplication Bug Tests > should handle empty body without duplication
(pass) Session PR Title Duplication Bug Tests > should handle multiline body with potential title duplication [0.06ms]

src/domain/repository.test.ts:
(pass) Repository backends > placeholder test to make CI pass - RepositoryBackend [0.01ms]
(pass) Repository backends > placeholder test for LocalGitBackend
(pass) Repository backends > placeholder test for RemoteGitBackend
(pass) Repository backends > placeholder test for GitHubBackend

src/domain/tasks.test.ts:
84 |       expect(result).toEqual([mockTask]);
85 |       // Mock call expectation updated - function may not call resolveRepoPath in all scenarios
86 |       // expect(mockResolveRepoPath.mock.calls.length > 0).toBe(true);
87 |       // Mock call expectation updated - function may not call resolveWorkspacePath in all scenarios
88 |       // expect(mockResolveWorkspacePath.mock.calls.length > 0).toBe(true);
89 |       expect(mockCreateTaskService).toHaveBeenCalledWith({
                                         ^
error: expect(received).toHaveBeenCalledWith(expected)

Number of calls: 1

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks.test.ts:89:37)
(fail) interface-agnostic task functions > listTasksFromParams > should list tasks with valid parameters
94 |         _status: TASK_STATUS.TODO,
95 |       });
96 |     });
97 | 
98 |     test("should filter out DONE tasks when all is false", async () => {
99 |       mockTaskService.listTasks = mock(() =>
                                       ^
ReferenceError: mock is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks.test.ts:99:35)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks.test.ts:98:60)
(fail) interface-agnostic task functions > listTasksFromParams > should filter out DONE tasks when all is false
172 |     }
173 | 
174 |     return task;
175 |   } catch (error) {
176 |     if (error instanceof z.ZodError) {
177 |       throw new ValidationError("Invalid parameters for getting task", (error as any).format(), error as any);
                  ^
ValidationError: Invalid parameters for getting task
 errors: {
  _errors: [],
  taskId: [Object ...],
},

      at getTaskFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskCommands.ts:177:13)
      at getTaskFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskCommands.ts:116:3)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks.test.ts:121:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks.test.ts:115:53)

24 | export class ZodError extends Error {
25 |     get errors() {
26 |         return this.issues;
27 |     }
28 |     constructor(issues) {
29 |         super();
             ^
ZodError: [
  {
    "code": "custom",
    "message": "Task ID must be a valid number (with or without # prefix, e.g., '283', '#283', 'task#283')",
    "path": [
      "taskId"
    ]
  }
]
    issues: [
  [Object ...]
],
  addIssue: [Function],
 addIssues: [Function],

      at new ZodError (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/zod/dist/esm/v3/ZodError.js:29:9)
      at error (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/zod/dist/esm/v3/types.js:51:31)
      at parse (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/zod/dist/esm/v3/types.js:126:15)
      at getTaskFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskCommands.ts:143:45)
      at getTaskFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskCommands.ts:116:3)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks.test.ts:121:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks.test.ts:115:53)
(fail) interface-agnostic task functions > getTaskFromParams > should get a task with valid parameters [0.87ms]
(pass) interface-agnostic task functions > getTaskFromParams > should throw ResourceNotFoundError when task is not found [0.12ms]
172 |     }
173 | 
174 |     return task;
175 |   } catch (error) {
176 |     if (error instanceof z.ZodError) {
177 |       throw new ValidationError("Invalid parameters for getting task", (error as any).format(), error as any);
                  ^
ValidationError: Invalid parameters for getting task
 errors: {
  _errors: [],
  taskId: [Object ...],
},

      at getTaskFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskCommands.ts:177:13)
      at getTaskFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskCommands.ts:116:3)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks.test.ts:147:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks.test.ts:141:91)

24 | export class ZodError extends Error {
25 |     get errors() {
26 |         return this.issues;
27 |     }
28 |     constructor(issues) {
29 |         super();
             ^
ZodError: [
  {
    "code": "custom",
    "message": "Task ID must be a valid number (with or without # prefix, e.g., '283', '#283', 'task#283')",
    "path": [
      "taskId"
    ]
  }
]
    issues: [
  [Object ...]
],
  addIssue: [Function],
 addIssues: [Function],

      at new ZodError (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/zod/dist/esm/v3/ZodError.js:29:9)
      at error (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/zod/dist/esm/v3/types.js:51:31)
      at parse (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/zod/dist/esm/v3/types.js:126:15)
      at getTaskFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskCommands.ts:143:45)
      at getTaskFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskCommands.ts:116:3)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks.test.ts:147:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks.test.ts:141:91)
(fail) interface-agnostic task functions > getTaskFromParams > should normalize non-canonical task IDs (e.g., 'TEST_VALUE' -> '#TEST_VALUE') [0.18ms]
151 |     });
152 | 
153 |     test("should handle task IDs without leading zeros", async () => {
154 |       // Modify mock implementation to return task with ID 'TEST_VALUE' for both '#TEST_VALUE' and '#23'
155 |       // This simulates the updated MarkdownTaskBackend.getTask behavior
156 |       mockTaskService.getTask = mock((id) =>
                                      ^
ReferenceError: mock is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks.test.ts:156:33)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks.test.ts:153:58)
(fail) interface-agnostic task functions > getTaskFromParams > should handle task IDs without leading zeros [0.02ms]
246 |     }
247 | 
248 |     return task.status;
249 |   } catch (error) {
250 |     if (error instanceof z.ZodError) {
251 |       throw new ValidationError(
                  ^
ValidationError: Invalid parameters for getting task status
 errors: {
  _errors: [],
  taskId: [Object ...],
},

      at getTaskStatusFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskCommands.ts:251:13)
      at getTaskStatusFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskCommands.ts:190:3)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks.test.ts:182:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks.test.ts:176:58)

24 | export class ZodError extends Error {
25 |     get errors() {
26 |         return this.issues;
27 |     }
28 |     constructor(issues) {
29 |         super();
             ^
ZodError: [
  {
    "code": "custom",
    "message": "Task ID must be a valid number (with or without # prefix, e.g., '283', '#283', 'task#283')",
    "path": [
      "taskId"
    ]
  }
]
    issues: [
  [Object ...]
],
  addIssue: [Function],
 addIssues: [Function],

      at new ZodError (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/zod/dist/esm/v3/ZodError.js:29:9)
      at error (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/zod/dist/esm/v3/types.js:51:31)
      at parse (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/zod/dist/esm/v3/types.js:126:15)
      at getTaskStatusFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskCommands.ts:217:51)
      at getTaskStatusFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskCommands.ts:190:3)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks.test.ts:182:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks.test.ts:176:58)
(fail) interface-agnostic task functions > getTaskStatusFromParams > should get task status with valid parameters [0.31ms]
(pass) interface-agnostic task functions > getTaskStatusFromParams > should throw ResourceNotFoundError when task status is not found [0.05ms]
201 |   });
202 | 
203 |   describe("setTaskStatusFromParams", () => {
204 |     test("should set task status with valid parameters", async () => {
205 |       // Reset getTask mock to its default implementation for this test
206 |       mockTaskService.getTask = mock(defaultGetTaskMock);
                                      ^
ReferenceError: mock is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks.test.ts:206:33)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks.test.ts:204:58)
(fail) interface-agnostic task functions > setTaskStatusFromParams > should set task status with valid parameters [0.08ms]
(pass) interface-agnostic task functions > setTaskStatusFromParams > should throw ValidationError when status is invalid [0.32ms]

src/domain/prepared-merge-commit-workflow.test.ts:
(pass) Prepared Merge Commit Workflow (Task #144) > Current Broken Behavior - preparePr method > SHOULD FAIL: preparePr creates PR branch from feature branch instead of base branch [0.40ms]
158 | 
159 |       // 2. Should create PR branch FROM base branch (not feature branch)
160 |       expect(gitCommands).toContain("git -C /test/repo switch -C pr/feature-branch origin/main");
161 | 
162 |       // 3. Should create PR title/body file
163 |       expect(gitCommands).toContain("echo \"Test PR\" > /test/repo/.pr_title");
                                ^
error: expect(received).toContain(expected)

Expected to contain: "echo \"Test PR\" > /test/repo/.pr_title"
Received: [ "git -C /test/repo fetch origin main", "git -C /test/repo switch -C pr/feature-branch origin/main",
  "echo \"undefined\" > /test/repo/.pr_title", "echo \"Test PR body\" >> /test/repo/.pr_title",
  "git -C /test/repo merge --no-ff feature-branch -F .pr_title", "git -C /test/repo push origin pr/feature-branch"
]

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/prepared-merge-commit-workflow.test.ts:163:27)
(fail) Prepared Merge Commit Workflow (Task #144) > Expected Correct Behavior - What SHOULD happen per Task #025 > preparePr SHOULD create PR branch from base branch and merge feature branch with --no-ff [0.28ms]
207 |           body: params.body,
208 |         };
209 |       });
210 | 
211 |       // Replace the preparePrFromParams function
212 |       const originalPreparePr = require("./git").preparePrFromParams;
                                                       ^
TypeError: Attempted to assign to readonly property.
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/prepared-merge-commit-workflow.test.ts:212:50)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/prepared-merge-commit-workflow.test.ts:181:79)
(fail) Prepared Merge Commit Workflow (Task #144) > Expected Correct Behavior - What SHOULD happen per Task #025 > sessionPrFromParams SHOULD call preparePr with correct parameters [0.15ms]
(pass) Prepared Merge Commit Workflow (Task #144) > Fast-Forward Merge Verification > Prepared merge commit SHOULD be fast-forward mergeable
(pass) Prepared Merge Commit Workflow (Task #144) > Error Handling > SHOULD handle merge conflicts during prepared merge commit creation

src/domain/session-pr-refresh.test.ts:

# Unhandled error between tests
-------------------------------
104 |       mockGitService.execInRepository = mock(() => Promise.resolve("not-exists")) = mock(() => Promise.resolve("")); //
                                              ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-pr-refresh.test.ts:104:41

130 |       mockGitService.execInRepository = mock(() => Promise.resolve("not-exists")) = mock(() => Promise.resolve("")); //
                                              ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-pr-refresh.test.ts:130:41

144 |       mockGitService.execInRepository = mock(() => Promise.resolve("not-exists")).mockImplementationOnce(() => Promise.r
                                              ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-pr-refresh.test.ts:144:41

157 |       mockGitService.execInRepository = mock(() => Promise.resolve("not-exists")).mockImplementationOnce(() => Promise.r
                                              ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-pr-refresh.test.ts:157:41

177 |       mockGitService.execInRepository = mock(() => Promise.resolve("not-exists")).mockImplementationOnce(() => Promise.r
                                              ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-pr-refresh.test.ts:177:41

199 |       mockGitService.execInRepository.mockImplementationOnce(() => Promise.resolve("no
            ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-pr-refresh.test.ts:199:7
-------------------------------


src/domain/git.test.ts:

# Unhandled error between tests
-------------------------------
1135 |     mockExecAsync = mock(() => Promise.resolve({ stdout: "main", stderr: "" })) = mock(() => Promise
                           ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git.test.ts:1135:21
-------------------------------


src/domain/session-pr-state-optimization.test.ts:
(pass) PR State Optimization (Task #275) > checkPrBranchExistsOptimized > should use cached PR state when available and not stale [0.20ms]
(pass) PR State Optimization (Task #275) > checkPrBranchExistsOptimized > should refresh stale PR state [0.15ms]
(pass) PR State Optimization (Task #275) > checkPrBranchExistsOptimized > should fall back to git operations when no session record exists [0.01ms]
(pass) PR State Optimization (Task #275) > checkPrBranchExistsOptimized > should provide significant performance improvement [0.05ms]
(pass) PR State Optimization (Task #275) > updatePrStateOnCreation > should create PR state when PR branch is created [0.06ms]
(pass) PR State Optimization (Task #275) > updatePrStateOnMerge > should update PR state when PR is merged [0.08ms]
(pass) PR State Optimization (Task #275) > updatePrStateOnMerge > should handle missing PR state gracefully [0.03ms]
(pass) PR State Optimization (Task #275) > Integration with existing workflow > should maintain backward compatibility [0.06ms]

src/domain/session-pr-branch-reference-bug.test.ts:
(pass) Session PR Branch Reference Bug Regression > should normalize branch references to prevent origin/origin/main [0.57ms]
(pass) Session PR Branch Reference Bug Regression > should detect origin/origin/main patterns in git commands [0.16ms]
(pass) Session PR Branch Reference Bug Regression > should validate git command construction prevents double-prefixing [0.06ms]
(pass) Session PR Branch Reference Bug Regression > should document the specific bug that was fixed

src/domain/github-basic.test.ts:
(pass) GitHub Basic Functionality > initializes with correct repository URL [0.07ms]
(pass) GitHub Basic Functionality > properly uses provided owner and repo values [0.03ms]
(pass) GitHub Basic Functionality > correctly identifies backend type [0.02ms]

src/domain/git.pr.test.ts:
(pass) GitService PR Functionality > isGitHubRepo should identify GitHub URLs correctly
(pass) GitService PR Functionality > should create a PR description [0.07ms]

src/domain/session-start-consistency.test.ts:
(pass) Session Start Consistency Tests > Successful session creation > should only add session to database after git operations succeed [0.37ms]
122 |           gitService: mockGitService,
123 |           taskService: mockTaskService,
124 |           workspaceUtils: mockWorkspaceUtils,
125 |           resolveRepoPath: mockResolveRepoPath,
126 |         })
127 |       ).rejects.toThrow("destination path already exists");
                      ^
error: 

Expected promise that rejects
Received promise that resolved: Promise { <resolved> }

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-start-consistency.test.ts:127:17)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-start-consistency.test.ts:105:67)
(fail) Session Start Consistency Tests > Git clone failure scenarios > should not add session to database when git clone fails [0.23ms]
150 |           gitService: mockGitService,
151 |           taskService: mockTaskService,
152 |           workspaceUtils: mockWorkspaceUtils,
153 |           resolveRepoPath: mockResolveRepoPath,
154 |         })
155 |       ).rejects.toThrow("failed to create branch");
                      ^
error: 

Expected promise that rejects
Received promise that resolved: Promise { <resolved> }

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-start-consistency.test.ts:155:17)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-start-consistency.test.ts:133:77)
(fail) Session Start Consistency Tests > Git clone failure scenarios > should not add session to database when git branch creation fails [0.13ms]
179 |           gitService: mockGitService,
180 |           taskService: mockTaskService,
181 |           workspaceUtils: mockWorkspaceUtils,
182 |           resolveRepoPath: mockResolveRepoPath,
183 |         })
184 |       ).rejects.toThrow("git operation failed");
                      ^
error: 

Expected promise that rejects
Received promise that resolved: Promise { <resolved> }

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-start-consistency.test.ts:184:17)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-start-consistency.test.ts:161:60)
(fail) Session Start Consistency Tests > Git clone failure scenarios > should propagate git errors without modification [0.08ms]
216 |           gitService: mockGitService,
217 |           taskService: mockTaskService,
218 |           workspaceUtils: mockWorkspaceUtils,
219 |           resolveRepoPath: mockResolveRepoPath,
220 |         })
221 |       ).rejects.toThrow("Session 'task#160' already exists");
                      ^
error: expect(received).toThrow(expected)

Expected substring: "Session 'task#160' already exists"
Received message: "Session 'task160' already exists"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-start-consistency.test.ts:221:17)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-start-consistency.test.ts:192:71)
(fail) Session Start Consistency Tests > Error handling edge cases > should prevent session creation when session already exists [0.10ms]
254 |           gitService: mockGitService,
255 |           taskService: mockTaskService,
256 |           workspaceUtils: mockWorkspaceUtils,
257 |           resolveRepoPath: mockResolveRepoPath,
258 |         })
259 |       ).rejects.toThrow("A session for task #160 already exists");
                      ^
error: expect(received).toThrow(expected)

Expected substring: "A session for task #160 already exists"
Received message: "A session for task 160 already exists: 'different-session'"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-start-consistency.test.ts:259:17)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-start-consistency.test.ts:228:85)
(fail) Session Start Consistency Tests > Error handling edge cases > should prevent session creation when another session exists for same task [0.13ms]
(pass) Session Start Consistency Tests > Error handling edge cases > should prevent session creation when task does not exist [0.06ms]
316 |           gitService: mockGitService,
317 |           taskService: mockTaskService,
318 |           workspaceUtils: mockWorkspaceUtils,
319 |           resolveRepoPath: mockResolveRepoPath,
320 |         })
321 |       ).rejects.toThrow("fatal: destination path");
                      ^
error: 

Expected promise that rejects
Received promise that resolved: Promise { <resolved> }

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-start-consistency.test.ts:321:17)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-start-consistency.test.ts:297:91)
(fail) Session Start Consistency Tests > Critical consistency verification > should never add session record before all git operations complete successfully [0.04ms]
351 | 
352 |       // Assert - verify session was properly added to database
353 |       expect(addSessionSpy).toHaveBeenCalledTimes(1);
354 | 
355 |       // Verify return value includes session information
356 |       expect(result).toMatchObject({
                           ^
error: expect(received).toMatchObject(expected)

  {
+   branch: "task160",
+   repoName: "local-minsky",
+   repoUrl: "local/minsky",
+   session: "task160",
+   taskId: "160",
-   session: "task#160",
-   taskId: "#160",
  }

- Expected  - 2
+ Received  + 5

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-start-consistency.test.ts:356:22)
(fail) Session Start Consistency Tests > Critical consistency verification > should successfully add session record only after all operations complete [0.19ms]

src/domain/task-status-bug-regression.test.ts:
(pass) Task Status Bug Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for TODO status [0.56ms]
(pass) Task Status Bug Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for IN-PROGRESS status [0.03ms]
(pass) Task Status Bug Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for IN-REVIEW status
(pass) Task Status Bug Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for DONE status
(pass) Task Status Bug Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for BLOCKED status
(pass) Task Status Bug Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should not throw 'status is not defined' error
(pass) Task Status Bug Regression Tests > Integration test with task status functionality > should handle all status transitions without variable naming errors [0.05ms]

src/eslint-rules/no-unsafe-git-network-operations.test.js:
859 | 			try {
860 | 				configs.normalizeSync();
861 | 				configs.getConfig("test.js");
862 | 			} catch (error) {
863 | 				error.message = `ESLint configuration in rule-tester is invalid: ${error.message}`;
864 | 				throw error;
                ^
ConfigError: ESLint configuration in rule-tester is invalid: Config (unnamed): Key "parserOptions": This appears to be in eslintrc format rather than flat config format.
      at runRuleForItem (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:864:11)
      at testValidTemplate (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:997:19)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1544:10)
(fail) no-unsafe-git-network-operations > valid > await gitPushWithTimeout("origin", "main", { workdir: "/path" }); [18.17ms]
859 | 			try {
860 | 				configs.normalizeSync();
861 | 				configs.getConfig("test.js");
862 | 			} catch (error) {
863 | 				error.message = `ESLint configuration in rule-tester is invalid: ${error.message}`;
864 | 				throw error;
                ^
ConfigError: ESLint configuration in rule-tester is invalid: Config (unnamed): Key "parserOptions": This appears to be in eslintrc format rather than flat config format.
      at runRuleForItem (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:864:11)
      at testValidTemplate (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:997:19)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1544:10)
(fail) no-unsafe-git-network-operations > valid > await gitPullWithTimeout("origin", "main", { workdir: "/path" }); [0.30ms]
859 | 			try {
860 | 				configs.normalizeSync();
861 | 				configs.getConfig("test.js");
862 | 			} catch (error) {
863 | 				error.message = `ESLint configuration in rule-tester is invalid: ${error.message}`;
864 | 				throw error;
                ^
ConfigError: ESLint configuration in rule-tester is invalid: Config (unnamed): Key "parserOptions": This appears to be in eslintrc format rather than flat config format.
      at runRuleForItem (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:864:11)
      at testValidTemplate (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:997:19)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1544:10)
(fail) no-unsafe-git-network-operations > valid > await gitFetchWithTimeout("origin", "main", { workdir: "/path" }); [0.16ms]
859 | 			try {
860 | 				configs.normalizeSync();
861 | 				configs.getConfig("test.js");
862 | 			} catch (error) {
863 | 				error.message = `ESLint configuration in rule-tester is invalid: ${error.message}`;
864 | 				throw error;
                ^
ConfigError: ESLint configuration in rule-tester is invalid: Config (unnamed): Key "parserOptions": This appears to be in eslintrc format rather than flat config format.
      at runRuleForItem (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:864:11)
      at testValidTemplate (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:997:19)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1544:10)
(fail) no-unsafe-git-network-operations > valid > await gitCloneWithTimeout("repo", "/path"); [0.28ms]
859 | 			try {
860 | 				configs.normalizeSync();
861 | 				configs.getConfig("test.js");
862 | 			} catch (error) {
863 | 				error.message = `ESLint configuration in rule-tester is invalid: ${error.message}`;
864 | 				throw error;
                ^
ConfigError: ESLint configuration in rule-tester is invalid: Config (unnamed): Key "parserOptions": This appears to be in eslintrc format rather than flat config format.
      at runRuleForItem (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:864:11)
      at testValidTemplate (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:997:19)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1544:10)
(fail) no-unsafe-git-network-operations > valid > await execGitWithTimeout("push", "push origin main", { workdir: "/path" }); [0.41ms]
859 | 			try {
860 | 				configs.normalizeSync();
861 | 				configs.getConfig("test.js");
862 | 			} catch (error) {
863 | 				error.message = `ESLint configuration in rule-tester is invalid: ${error.message}`;
864 | 				throw error;
                ^
ConfigError: ESLint configuration in rule-tester is invalid: Config (unnamed): Key "parserOptions": This appears to be in eslintrc format rather than flat config format.
      at runRuleForItem (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:864:11)
      at testValidTemplate (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:997:19)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1544:10)
(fail) no-unsafe-git-network-operations > valid > await execAsync("git status"); [0.16ms]
859 | 			try {
860 | 				configs.normalizeSync();
861 | 				configs.getConfig("test.js");
862 | 			} catch (error) {
863 | 				error.message = `ESLint configuration in rule-tester is invalid: ${error.message}`;
864 | 				throw error;
                ^
ConfigError: ESLint configuration in rule-tester is invalid: Config (unnamed): Key "parserOptions": This appears to be in eslintrc format rather than flat config format.
      at runRuleForItem (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:864:11)
      at testValidTemplate (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:997:19)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1544:10)
(fail) no-unsafe-git-network-operations > valid > await execAsync("git branch"); [0.17ms]
859 | 			try {
860 | 				configs.normalizeSync();
861 | 				configs.getConfig("test.js");
862 | 			} catch (error) {
863 | 				error.message = `ESLint configuration in rule-tester is invalid: ${error.message}`;
864 | 				throw error;
                ^
ConfigError: ESLint configuration in rule-tester is invalid: Config (unnamed): Key "parserOptions": This appears to be in eslintrc format rather than flat config format.
      at runRuleForItem (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:864:11)
      at testValidTemplate (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:997:19)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1544:10)
(fail) no-unsafe-git-network-operations > valid > await execAsync("git log"); [0.11ms]
859 | 			try {
860 | 				configs.normalizeSync();
861 | 				configs.getConfig("test.js");
862 | 			} catch (error) {
863 | 				error.message = `ESLint configuration in rule-tester is invalid: ${error.message}`;
864 | 				throw error;
                ^
ConfigError: ESLint configuration in rule-tester is invalid: Config (unnamed): Key "parserOptions": This appears to be in eslintrc format rather than flat config format.
      at runRuleForItem (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:864:11)
      at testValidTemplate (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:997:19)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1544:10)
(fail) no-unsafe-git-network-operations > valid > await execAsync("git diff"); [0.17ms]
859 | 			try {
860 | 				configs.normalizeSync();
861 | 				configs.getConfig("test.js");
862 | 			} catch (error) {
863 | 				error.message = `ESLint configuration in rule-tester is invalid: ${error.message}`;
864 | 				throw error;
                ^
ConfigError: ESLint configuration in rule-tester is invalid: Config (unnamed): Key "parserOptions": This appears to be in eslintrc format rather than flat config format.
      at runRuleForItem (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:864:11)
      at testValidTemplate (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:997:19)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1544:10)
(fail) no-unsafe-git-network-operations > valid > await execAsync("git add ."); [0.14ms]
859 | 			try {
860 | 				configs.normalizeSync();
861 | 				configs.getConfig("test.js");
862 | 			} catch (error) {
863 | 				error.message = `ESLint configuration in rule-tester is invalid: ${error.message}`;
864 | 				throw error;
                ^
ConfigError: ESLint configuration in rule-tester is invalid: Config (unnamed): Key "parserOptions": This appears to be in eslintrc format rather than flat config format.
      at runRuleForItem (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:864:11)
      at testValidTemplate (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:997:19)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1544:10)
(fail) no-unsafe-git-network-operations > valid > await execAsync("git commit -m \"message\""); [0.15ms]
859 | 			try {
860 | 				configs.normalizeSync();
861 | 				configs.getConfig("test.js");
862 | 			} catch (error) {
863 | 				error.message = `ESLint configuration in rule-tester is invalid: ${error.message}`;
864 | 				throw error;
                ^
ConfigError: ESLint configuration in rule-tester is invalid: Config (unnamed): Key "parserOptions": This appears to be in eslintrc format rather than flat config format.
      at runRuleForItem (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:864:11)
      at testValidTemplate (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:997:19)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1544:10)
(fail) no-unsafe-git-network-operations > valid > await execAsync("npm install"); [0.12ms]
859 | 			try {
860 | 				configs.normalizeSync();
861 | 				configs.getConfig("test.js");
862 | 			} catch (error) {
863 | 				error.message = `ESLint configuration in rule-tester is invalid: ${error.message}`;
864 | 				throw error;
                ^
ConfigError: ESLint configuration in rule-tester is invalid: Config (unnamed): Key "parserOptions": This appears to be in eslintrc format rather than flat config format.
      at runRuleForItem (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:864:11)
      at testValidTemplate (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:997:19)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1544:10)
(fail) no-unsafe-git-network-operations > valid > await execAsync("echo hello"); [0.08ms]
859 | 			try {
860 | 				configs.normalizeSync();
861 | 				configs.getConfig("test.js");
862 | 			} catch (error) {
863 | 				error.message = `ESLint configuration in rule-tester is invalid: ${error.message}`;
864 | 				throw error;
                ^
ConfigError: ESLint configuration in rule-tester is invalid: Config (unnamed): Key "parserOptions": This appears to be in eslintrc format rather than flat config format.
      at runRuleForItem (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:864:11)
      at testValidTemplate (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:997:19)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1544:10)
(fail) no-unsafe-git-network-operations > valid > await execGitWithTimeout("fetch", "fetch origin", { workdir }); [0.12ms]
859 | 			try {
860 | 				configs.normalizeSync();
861 | 				configs.getConfig("test.js");
862 | 			} catch (error) {
863 | 				error.message = `ESLint configuration in rule-tester is invalid: ${error.message}`;
864 | 				throw error;
                ^
ConfigError: ESLint configuration in rule-tester is invalid: Config (unnamed): Key "parserOptions": This appears to be in eslintrc format rather than flat config format.
      at runRuleForItem (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:864:11)
      at testInvalidTemplate (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1072:19)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1562:10)
(fail) no-unsafe-git-network-operations > invalid > await execAsync("git push origin main"); [0.47ms]
859 | 			try {
860 | 				configs.normalizeSync();
861 | 				configs.getConfig("test.js");
862 | 			} catch (error) {
863 | 				error.message = `ESLint configuration in rule-tester is invalid: ${error.message}`;
864 | 				throw error;
                ^
ConfigError: ESLint configuration in rule-tester is invalid: Config (unnamed): Key "parserOptions": This appears to be in eslintrc format rather than flat config format.
      at runRuleForItem (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:864:11)
      at testInvalidTemplate (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1072:19)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1562:10)
(fail) no-unsafe-git-network-operations > invalid > await execAsync("git pull origin main"); [0.11ms]
859 | 			try {
860 | 				configs.normalizeSync();
861 | 				configs.getConfig("test.js");
862 | 			} catch (error) {
863 | 				error.message = `ESLint configuration in rule-tester is invalid: ${error.message}`;
864 | 				throw error;
                ^
ConfigError: ESLint configuration in rule-tester is invalid: Config (unnamed): Key "parserOptions": This appears to be in eslintrc format rather than flat config format.
      at runRuleForItem (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:864:11)
      at testInvalidTemplate (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1072:19)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1562:10)
(fail) no-unsafe-git-network-operations > invalid > await execAsync("git fetch origin"); [0.19ms]
859 | 			try {
860 | 				configs.normalizeSync();
861 | 				configs.getConfig("test.js");
862 | 			} catch (error) {
863 | 				error.message = `ESLint configuration in rule-tester is invalid: ${error.message}`;
864 | 				throw error;
                ^
ConfigError: ESLint configuration in rule-tester is invalid: Config (unnamed): Key "parserOptions": This appears to be in eslintrc format rather than flat config format.
      at runRuleForItem (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:864:11)
      at testInvalidTemplate (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1072:19)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1562:10)
(fail) no-unsafe-git-network-operations > invalid > await execAsync("git clone https://github.com/user/repo.git /path"); [0.09ms]
859 | 			try {
860 | 				configs.normalizeSync();
861 | 				configs.getConfig("test.js");
862 | 			} catch (error) {
863 | 				error.message = `ESLint configuration in rule-tester is invalid: ${error.message}`;
864 | 				throw error;
                ^
ConfigError: ESLint configuration in rule-tester is invalid: Config (unnamed): Key "parserOptions": This appears to be in eslintrc format rather than flat config format.
      at runRuleForItem (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:864:11)
      at testInvalidTemplate (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1072:19)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1562:10)
(fail) no-unsafe-git-network-operations > invalid > await execAsync("git -C /repo push origin main"); [0.18ms]
859 | 			try {
860 | 				configs.normalizeSync();
861 | 				configs.getConfig("test.js");
862 | 			} catch (error) {
863 | 				error.message = `ESLint configuration in rule-tester is invalid: ${error.message}`;
864 | 				throw error;
                ^
ConfigError: ESLint configuration in rule-tester is invalid: Config (unnamed): Key "parserOptions": This appears to be in eslintrc format rather than flat config format.
      at runRuleForItem (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:864:11)
      at testInvalidTemplate (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1072:19)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1562:10)
(fail) no-unsafe-git-network-operations > invalid > await execAsync("git -C /repo fetch origin"); [0.08ms]
859 | 			try {
860 | 				configs.normalizeSync();
861 | 				configs.getConfig("test.js");
862 | 			} catch (error) {
863 | 				error.message = `ESLint configuration in rule-tester is invalid: ${error.message}`;
864 | 				throw error;
                ^
ConfigError: ESLint configuration in rule-tester is invalid: Config (unnamed): Key "parserOptions": This appears to be in eslintrc format rather than flat config format.
      at runRuleForItem (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:864:11)
      at testInvalidTemplate (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1072:19)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1562:10)
(fail) no-unsafe-git-network-operations > invalid > await execAsync(`git push origin ${branch}`); [0.10ms]
859 | 			try {
860 | 				configs.normalizeSync();
861 | 				configs.getConfig("test.js");
862 | 			} catch (error) {
863 | 				error.message = `ESLint configuration in rule-tester is invalid: ${error.message}`;
864 | 				throw error;
                ^
ConfigError: ESLint configuration in rule-tester is invalid: Config (unnamed): Key "parserOptions": This appears to be in eslintrc format rather than flat config format.
      at runRuleForItem (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:864:11)
      at testInvalidTemplate (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1072:19)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1562:10)
(fail) no-unsafe-git-network-operations > invalid > await execAsync(`git -C ${workdir} fetch ${remote}`); [0.15ms]
859 | 			try {
860 | 				configs.normalizeSync();
861 | 				configs.getConfig("test.js");
862 | 			} catch (error) {
863 | 				error.message = `ESLint configuration in rule-tester is invalid: ${error.message}`;
864 | 				throw error;
                ^
ConfigError: ESLint configuration in rule-tester is invalid: Config (unnamed): Key "parserOptions": This appears to be in eslintrc format rather than flat config format.
      at runRuleForItem (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:864:11)
      at testInvalidTemplate (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1072:19)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1562:10)
(fail) no-unsafe-git-network-operations > invalid > gitPushWithTimeout("origin", "main", { workdir }); [0.11ms]
859 | 			try {
860 | 				configs.normalizeSync();
861 | 				configs.getConfig("test.js");
862 | 			} catch (error) {
863 | 				error.message = `ESLint configuration in rule-tester is invalid: ${error.message}`;
864 | 				throw error;
                ^
ConfigError: ESLint configuration in rule-tester is invalid: Config (unnamed): Key "parserOptions": This appears to be in eslintrc format rather than flat config format.
      at runRuleForItem (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:864:11)
      at testInvalidTemplate (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1072:19)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1562:10)
(fail) no-unsafe-git-network-operations > invalid > execGitWithTimeout("fetch", "fetch origin", { workdir }); [0.16ms]
859 | 			try {
860 | 				configs.normalizeSync();
861 | 				configs.getConfig("test.js");
862 | 			} catch (error) {
863 | 				error.message = `ESLint configuration in rule-tester is invalid: ${error.message}`;
864 | 				throw error;
                ^
ConfigError: ESLint configuration in rule-tester is invalid: Config (unnamed): Key "parserOptions": This appears to be in eslintrc format rather than flat config format.
      at runRuleForItem (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:864:11)
      at testInvalidTemplate (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1072:19)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/eslint/lib/rule-tester/rule-tester.js:1562:10)
(fail) no-unsafe-git-network-operations > invalid > await execAsync("git ls-remote origin"); [0.07ms]

tests/consolidated-utilities/variable-naming-fixer.test.ts:
üè∑Ô∏è  Processing 1 TypeScript files for variable naming fixes...
‚úÖ Fixed 1 naming issues in /var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-ys1O52/test.ts

üéØ Variable Naming Fix Results:
   Files processed: 1/1
   Total fixes applied: 1
   Success rate: 100.0%

üìä Fix type breakdown:
   underscore-prefix-mismatch: 1 fixes
(pass) Variable Naming Fixer Consolidated > Underscore Prefix Mismatches > should fix parameter definitions with underscores when usage has no underscore [4.55ms]
üè∑Ô∏è  Processing 1 TypeScript files for variable naming fixes...
‚úÖ Fixed 1 naming issues in /var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-BEfVDn/test.ts

üéØ Variable Naming Fix Results:
   Files processed: 1/1
   Total fixes applied: 1
   Success rate: 100.0%

üìä Fix type breakdown:
   underscore-prefix-mismatch: 1 fixes
(pass) Variable Naming Fixer Consolidated > Underscore Prefix Mismatches > should fix variable declarations with underscores when usage has no underscore [1.85ms]
üè∑Ô∏è  Processing 1 TypeScript files for variable naming fixes...
‚úÖ Fixed 2 naming issues in /var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-Z2mLwJ/test.ts

üéØ Variable Naming Fix Results:
   Files processed: 1/1
   Total fixes applied: 2
   Success rate: 100.0%

üìä Fix type breakdown:
   underscore-prefix-mismatch: 2 fixes
(pass) Variable Naming Fixer Consolidated > Underscore Prefix Mismatches > should handle destructuring with underscore mismatches [2.45ms]
üè∑Ô∏è  Processing 1 TypeScript files for variable naming fixes...

üéØ Variable Naming Fix Results:
   Files processed: 0/1
   Total fixes applied: 0
   Success rate: 0.0%
(pass) Variable Naming Fixer Consolidated > Boundary Validation - Should NOT Change > should NOT change intentionally unused parameters with underscores [1.61ms]
üè∑Ô∏è  Processing 1 TypeScript files for variable naming fixes...

üéØ Variable Naming Fix Results:
   Files processed: 0/1
   Total fixes applied: 0
   Success rate: 0.0%
(pass) Variable Naming Fixer Consolidated > Boundary Validation - Should NOT Change > should NOT change variables that are used with underscores consistently [1.10ms]
üè∑Ô∏è  Processing 1 TypeScript files for variable naming fixes...

üéØ Variable Naming Fix Results:
   Files processed: 0/1
   Total fixes applied: 0
   Success rate: 0.0%
(pass) Variable Naming Fixer Consolidated > Boundary Validation - Should NOT Change > should NOT change underscore patterns in strings or comments [1.43ms]
üè∑Ô∏è  Processing 1 TypeScript files for variable naming fixes...
(pass) Variable Naming Fixer Consolidated > Boundary Validation - Should NOT Change > should handle scope correctly - same variable names in different scopes [2.14ms]
üè∑Ô∏è  Processing 1 TypeScript files for variable naming fixes...
(pass) Variable Naming Fixer Consolidated > Error Handling > should handle files with syntax errors gracefully [1.58ms]
Error saving /var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-N3SqqX/test.ts: ENOENT: no such file or directory, open '/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-N3SqqX/test.ts'
    path: "/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-N3SqqX/test.ts",
 syscall: "open",
   errno: -2,
    code: "ENOENT"



üéØ Variable Naming Fix Results:
   Files processed: 0/1
   Total fixes applied: 0
   Success rate: 0.0%

üìä Fix type breakdown:
   underscore-prefix-mismatch: 1 fixes
üè∑Ô∏è  Processing 1 TypeScript files for variable naming fixes...

üéØ Variable Naming Fix Results:
   Files processed: 0/1
   Total fixes applied: 0
   Success rate: 0.0%
(pass) Variable Naming Fixer Consolidated > Error Handling > should handle non-existent patterns gracefully [1.12ms]
Error saving /var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-t1DnEJ/broken.ts: ENOENT: no such file or directory, open '/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-t1DnEJ/broken.ts'
    path: "/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-t1DnEJ/broken.ts",
 syscall: "open",
   errno: -2,
    code: "ENOENT"



üéØ Variable Naming Fix Results:
   Files processed: 0/1
   Total fixes applied: 0
   Success rate: 0.0%

üìä Fix type breakdown:
   underscore-prefix-mismatch: 1 fixes
üè∑Ô∏è  Processing 1 TypeScript files for variable naming fixes...
‚úÖ Fixed 2 naming issues in /var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-NIiRWQ/mixed.ts

üéØ Variable Naming Fix Results:
   Files processed: 1/1
   Total fixes applied: 2
   Success rate: 100.0%

üìä Fix type breakdown:
   underscore-prefix-mismatch: 2 fixes
(pass) Variable Naming Fixer Consolidated > Complex Scenarios > should handle mixed scenarios correctly [4.78ms]
(pass) Variable Naming Fixer Consolidated > Performance and Metrics > should provide accurate metrics [3.06ms]
üè∑Ô∏è  Processing 1 TypeScript files for variable naming fixes...
‚úÖ Fixed 1 naming issues in /var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-KtBM07/complex-syntax.ts

üéØ Variable Naming Fix Results:
   Files processed: 1/1
   Total fixes applied: 1
   Success rate: 100.0%

üìä Fix type breakdown:
   underscore-prefix-mismatch: 1 fixes
(pass) Variable Naming Fixer Consolidated > Integration with AST Analysis > should properly parse TypeScript files with complex syntax [2.92ms]

src/utils/test-utils/assertions.test.ts:
(pass) Custom Assertion Helpers > expectToMatch > should match a string against a regex pattern
(pass) Custom Assertion Helpers > expectToHaveLength > should verify array length [0.02ms]
(pass) Custom Assertion Helpers > expectToHaveLength > should verify string length
(pass) Custom Assertion Helpers > expectToBeInstanceOf > should verify object instanceof [0.02ms]
(pass) Custom Assertion Helpers > expectToHaveProperty > should verify object has property [0.12ms]
(pass) Custom Assertion Helpers > expectToBeCloseTo > should compare floating point numbers with precision [0.03ms]
(pass) Custom Assertion Helpers > expectToContainEqual > should check if array contains an item with deep equality [0.07ms]

src/utils/test-utils/enhanced-utils.test.ts:
(pass) Enhanced Test Utilities > mockFunction > should create a type-safe mock function [0.07ms]
58 | 
59 |     test("should allow changing implementation", () => {
60 |       let mockFn = mockFunction<(n: unknown) => number>();
61 | 
62 |       // Set implementation
63 |       mockFn = mock((n) => n * 2);
                    ^
ReferenceError: mock is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/enhanced-utils.test.ts:63:16)
(fail) Enhanced Test Utilities > mockFunction > should allow changing implementation [0.12ms]
(pass) Enhanced Test Utilities > createPartialMock > should create a mock with provided implementations [0.10ms]
(pass) Enhanced Test Utilities > mockReadonlyProperty > should mock readonly properties [0.04ms]
(pass) Enhanced Test Utilities > createTestDeps > should create default test dependencies [0.04ms]
(pass) Enhanced Test Utilities > createTestDeps > should allow overriding specific methods [0.04ms]
(pass) Enhanced Test Utilities > withMockedDeps > should temporarily override dependencies [0.04ms]
(pass) Enhanced Test Utilities > Factory Functions > should create task data with defaults [0.04ms]
(pass) Enhanced Test Utilities > Factory Functions > should create task data with overrides
(pass) Enhanced Test Utilities > Factory Functions > should create an array of task data [0.08ms]
(pass) Enhanced Test Utilities > Factory Functions > should create session data [0.04ms]
(pass) Enhanced Test Utilities > Integration Example > should demonstrate a complex test scenario [0.04ms]

src/utils/test-utils/centralized-service-mocks.test.ts:
(pass) Centralized Service Mock Factories > createMockSessionProvider > should create a mock SessionProvider with all required methods
(pass) Centralized Service Mock Factories > createMockSessionProvider > should return default mock values [0.43ms]
(pass) Centralized Service Mock Factories > createMockSessionProvider > should allow method overrides [0.04ms]
(pass) Centralized Service Mock Factories > createMockGitService > should create a mock GitService with all required methods [0.04ms]
121 | 
122 |       const status = await mockGitService.getStatus();
123 |       expect(status).toEqual({ modified: [], untracked: [], deleted: [] });
124 | 
125 |       const currentBranch = await mockGitService.getCurrentBranch("/test");
126 |       expect(currentBranch).toBe("main");
                                  ^
error: expect(received).toBe(expected)

Expected: "main"
Received: undefined

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/centralized-service-mocks.test.ts:126:29)
(fail) Centralized Service Mock Factories > createMockGitService > should return default mock values [0.14ms]
(pass) Centralized Service Mock Factories > createMockGitService > should allow method overrides [0.04ms]
(pass) Centralized Service Mock Factories > createMockTaskService > should create a mock TaskService with all required methods [0.03ms]
187 | 
188 |       const createdTaskFromTitle = await mockTaskService.createTaskFromTitleAndDescription("Test Title", "Test Description");
189 |       expect(createdTaskFromTitle.title).toBe("Test Task");
190 | 
191 |       const deleted = await mockTaskService.deleteTask("test");
192 |       expect(deleted).toBe(true);
                            ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/centralized-service-mocks.test.ts:192:23)
(fail) Centralized Service Mock Factories > createMockTaskService > should return default mock values [0.05ms]
221 |       expect(tasks).toHaveLength(1);
222 |       expect(tasks[0].title).toBe("Custom Task");
223 |       expect(tasks[0].status).toBe("IN-PROGRESS");
224 | 
225 |       const task = await mockTaskService.getTask("test");
226 |       expect(task?.title).toBe("Custom Task");
                                ^
error: expect(received).toBe(expected)

Expected: "Custom Task"
Received: undefined

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/centralized-service-mocks.test.ts:226:27)
(fail) Centralized Service Mock Factories > createMockTaskService > should allow method overrides [0.18ms]

src/utils/test-utils/compatibility.test.ts:

# Unhandled error between tests
-------------------------------
220 |       foo: compat.createCompatMock() = mock(() => "mocked foo"),
                 ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/compatibility.test.ts:220:12

221 |       bar: compat.createCompatMock() = mock(() => "mocked bar"),
                 ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/compatibility.test.ts:221:12

236 |       baz: compat.createCompatMock() = mock(() => "mocked baz"),
                 ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/compatibility.test.ts:236:12
-------------------------------


src/utils/test-utils/mocking.test.ts:
(pass) Mocking Utilities > createMock creates a proper mock function [0.02ms]
(pass) Mocking Utilities > createMock without implementation returns a mock that returns undefined
(pass) Mocking Utilities > createSpyOn spies on object methods [0.10ms]
(pass) Mocking Utilities > createSpyOn throws error when trying to spy on non-function property [0.08ms]

src/utils/test-utils/individual-service-factories.test.ts:
(pass) Individual Service Mock Factories > createMockSessionProvider > creates a mock with default behavior
(pass) Individual Service Mock Factories > createMockSessionProvider > uses provided sessions array [0.07ms]
(pass) Individual Service Mock Factories > createMockSessionProvider > accepts method overrides [0.07ms]
(pass) Individual Service Mock Factories > createMockSessionProvider > supports empty options [0.02ms]
(pass) Individual Service Mock Factories > createMockGitService > creates a mock with default behavior [0.05ms]
(pass) Individual Service Mock Factories > createMockGitService > supports branch existence configuration [0.04ms]
(pass) Individual Service Mock Factories > createMockGitService > tracks git call count [0.04ms]
(pass) Individual Service Mock Factories > createMockGitService > accepts method overrides [0.04ms]
(pass) Individual Service Mock Factories > createMockGitService > handles non-PR git commands [0.02ms]
(pass) Individual Service Mock Factories > createMockTaskService > creates a mock with default behavior [0.05ms]
(pass) Individual Service Mock Factories > createMockTaskService > creates tasks with proper structure [0.04ms]
(pass) Individual Service Mock Factories > createMockTaskService > supports additional properties [0.02ms]
(pass) Individual Service Mock Factories > createMockTaskService > accepts method overrides [0.04ms]
(pass) Individual Service Mock Factories > createMockTaskService > supports custom task creation [0.04ms]
(pass) Individual Service Mock Factories > createMockTaskService > handles empty options [0.03ms]
(pass) Individual Service Mock Factories > Factory Integration > all factories work together in a test scenario [0.07ms]
(pass) Individual Service Mock Factories > Factory Integration > factories can be used independently [0.05ms]

src/utils/__tests__/auto-commit.test.ts:
(pass) autoCommitTaskChanges > should be a function
(pass) autoCommitTaskChanges > should accept workspacePath and message parameters [0.63ms]
(pass) autoCommitTaskChanges > should return a Promise<boolean> [0.95ms]

src/utils/__tests__/semantic-error-classifier-integration.test.ts:
38 |         operation: "read_file",
39 |         path: join(testDir, "existing-dir", "missing-file.txt")
40 |       };
41 | 
42 |       const fileResult = await SemanticErrorClassifier.classifyError(fileError, fileContext);
43 |       expect(fileResult.errorCode).toBe(SemanticErrorCode.FILE_NOT_FOUND);
                                        ^
error: expect(received).toBe(expected)

Expected: "FILE_NOT_FOUND"
Received: "DIRECTORY_NOT_FOUND"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/__tests__/semantic-error-classifier-integration.test.ts:43:36)
(fail) SemanticErrorClassifier Integration Tests > Real filesystem scenarios > should correctly classify file not found vs directory not found [0.55ms]
(pass) SemanticErrorClassifier Integration Tests > Real filesystem scenarios > should handle various real filesystem error formats [0.25ms]
(pass) SemanticErrorClassifier Integration Tests > Real filesystem scenarios > should provide context-aware solutions for real scenarios [0.06ms]

src/utils/__tests__/semantic-error-classifier.test.ts:
(pass) SemanticErrorClassifier > classifyError > should classify ENOENT file errors correctly [0.16ms]
(pass) SemanticErrorClassifier > classifyError > should classify ENOENT directory errors correctly [0.05ms]
(pass) SemanticErrorClassifier > classifyError > should classify permission errors correctly [0.05ms]
(pass) SemanticErrorClassifier > classifyError > should classify session errors correctly [0.05ms]
(pass) SemanticErrorClassifier > classifyError > should classify git errors correctly [0.05ms]
(pass) SemanticErrorClassifier > classifyError > should handle generic errors gracefully [0.05ms]
(pass) SemanticErrorClassifier > classifyError > should extract file paths from error messages [0.03ms]
(pass) SemanticErrorClassifier > classifyError > should enhance solutions based on context [0.02ms]

src/adapters/__tests__/session-context-resolver.test.ts:
(pass) Interface-Layer Session Context Resolution > CLI Session Context Resolver > should use explicit name when provided [0.52ms]
(pass) Interface-Layer Session Context Resolution > CLI Session Context Resolver > should auto-detect session from session workspace path [0.09ms]
(pass) Interface-Layer Session Context Resolution > CLI Session Context Resolver > should return params unchanged if no session can be detected
(pass) Interface-Layer Session Context Resolution > CLI Session Context Resolver > should prefer explicit name over auto-detection [0.01ms]
(pass) Interface-Layer Session Context Resolution > CLI Session Context Resolver > should use explicit task parameter for session identification
(pass) Interface-Layer Session Context Resolution > CLI Session Context Resolver > should prefer name over task when both are provided
(pass) Interface-Layer Session Context Resolution > MCP Session Context Resolver > should use explicit session when provided [0.02ms]
(pass) Interface-Layer Session Context Resolution > MCP Session Context Resolver > should throw ValidationError when no session provided [0.05ms]
(pass) Interface-Layer Session Context Resolution > MCP Session Context Resolver > should not auto-detect even in session workspace [0.02ms]
(pass) Interface-Layer Session Context Resolution > MCP Session Context Resolver > should use explicit task parameter for session identification
(pass) Interface-Layer Session Context Resolution > MCP Session Context Resolver > should prefer name over task when both are provided
(pass) Interface-Layer Session Context Resolution > Session Context Resolver Factory > should return CLI resolver for 'cli' interface [0.02ms]
(pass) Interface-Layer Session Context Resolution > Session Context Resolver Factory > should return MCP resolver for 'mcp' interface
(pass) Interface-Layer Session Context Resolution > Session Context Resolver Factory > should default to MCP resolver for unknown interfaces
(pass) Interface-Layer Session Context Resolution > Session Context Resolver Factory > should resolve session context based on interface type [0.03ms]
(pass) Interface-Layer Session Context Resolution > resolveSessionForInterface helper > should resolve CLI session context successfully [0.04ms]
(pass) Interface-Layer Session Context Resolution > resolveSessionForInterface helper > should resolve MCP session context with explicit session
(pass) Interface-Layer Session Context Resolution > resolveSessionForInterface helper > should throw ValidationError when MCP has no session [0.03ms]
(pass) Interface-Layer Session Context Resolution > resolveSessionForInterface helper > should throw ValidationError when CLI can't detect session [0.02ms]

src/domain/configuration/index.test.ts:
(pass) Custom Configuration System > CustomConfigurationProvider > should implement getConfig() method [0.28ms]
(pass) Custom Configuration System > CustomConfigurationProvider > should implement get() method with path access
(pass) Custom Configuration System > CustomConfigurationProvider > should implement has() method for path checking [0.05ms]
(pass) Custom Configuration System > CustomConfigurationProvider > should implement reload() method [0.65ms]
(pass) Custom Configuration System > CustomConfigurationProvider > should implement getMetadata() method [0.06ms]
(pass) Custom Configuration System > CustomConfigurationProvider > should implement validate() method [0.03ms]
(pass) Custom Configuration System > CustomConfigurationProvider > should provide consistent configuration structure
77 |       expect(config.ai).toBeDefined();
78 |     });
79 | 
80 |     test("should handle configuration overrides consistently", () => {
81 |       const config = provider.getConfig();
82 |       expect(config.backend).toBe("json-file"); // From overrides
                                  ^
error: expect(received).toBe(expected)

Expected: "json-file"
Received: "markdown"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/configuration/index.test.ts:82:30)
(fail) Custom Configuration System > CustomConfigurationProvider > should handle configuration overrides consistently [0.08ms]
(pass) Custom Configuration System > Configuration Initialization > should initialize with custom factory [0.31ms]
102 |       await initializeConfiguration(factory, {
103 |         overrides: { backend: "custom-override" }
104 |       });
105 | 
106 |       const config = getConfiguration();
107 |       expect(config.backend).toBe("custom-override");
                                   ^
error: expect(received).toBe(expected)

Expected: "custom-override"
Received: "markdown"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/configuration/index.test.ts:107:30)
(fail) Custom Configuration System > Configuration Initialization > should support configuration overrides [0.30ms]
Custom config load time: 0ms
(pass) Custom Configuration System > Performance > should load configuration within acceptable time limits [0.27ms]
Average access time: 0.000ms per operation
(pass) Custom Configuration System > Performance > should access configuration values efficiently [0.37ms]
(pass) Custom Configuration System > Error Handling > should handle missing configuration paths gracefully [0.08ms]
(pass) Custom Configuration System > Error Handling > should validate configuration structure
(pass) Custom Configuration System > Configuration Factory > should create provider with default options [0.22ms]
171 |         overrides: { backend: "test-backend" },
172 |         enableCache: false
173 |       });
174 | 
175 |       const config = provider.getConfig();
176 |       expect(config.backend).toBe("test-backend");
                                   ^
error: expect(received).toBe(expected)

Expected: "test-backend"
Received: "markdown"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/configuration/index.test.ts:176:30)
(fail) Custom Configuration System > Configuration Factory > should create provider with custom options [0.23ms]

src/domain/tasks/task-service-interface.test.ts:
(pass) TaskService Interface Compatibility > should provide setTaskStatus method [1.21ms]
(pass) TaskService Interface Compatibility > should have getTaskStatus method (ensures interface completeness) [0.06ms]
(pass) TaskService Interface Compatibility > should validate task status in setTaskStatus method [0.33ms]
(pass) TaskService Interface Compatibility > should maintain interface compatibility with existing commands [0.15ms]

src/domain/tasks/utils.test.ts:
(pass) normalizeTaskId > should normalize "#064" to "#064" (with # and leading zero) [1.05ms]
(pass) normalizeTaskId > should normalize "#64" to "#64" (with #, no leading zero)
(pass) normalizeTaskId > should normalize "064" to "#064" (no #, with leading zero)
(pass) normalizeTaskId > should normalize "64" to "#64" (no #, no leading zero)
(pass) normalizeTaskId > should normalize "task#064" to "#064" (with task# and leading zero)
(pass) normalizeTaskId > should normalize "task#64" to "#64" (with task#, no leading zero)
(pass) normalizeTaskId > should normalize "TASK#64" to "#64" (with TASK# (uppercase), no leading zero)
(pass) normalizeTaskId > should normalize "  #64  " to "#64" (with whitespace)
(pass) normalizeTaskId > should normalize "task#0" to "#0" (task ID zero)
(pass) normalizeTaskId > should normalize "0" to "#0" (task ID zero numeric)
(pass) normalizeTaskId > should return null for invalid input "abc" (non-numeric)
(pass) normalizeTaskId > should return null for invalid input "#abc" (# with non-numeric)
(pass) normalizeTaskId > should return null for invalid input "task#abc" (task# with non-numeric)
(pass) normalizeTaskId > should return null for invalid input "64a" (numeric followed by alpha)
(pass) normalizeTaskId > should return null for invalid input "a64" (alpha followed by numeric)
(pass) normalizeTaskId > should return null for invalid input "#" (only #)
(pass) normalizeTaskId > should return null for invalid input "task#" (only task#)
(pass) normalizeTaskId > should return null for invalid input "" (empty string)
(pass) normalizeTaskId > should return null for invalid input "   " (whitespace only)
(pass) normalizeTaskId > should return null for invalid input "null" (null input)
(pass) normalizeTaskId > should return null for invalid input "undefined" (undefined input)
(pass) normalizeTaskId > should return null for invalid input "123" (number input type)

src/domain/tasks/taskService-jsonFile-integration.test.ts:
(pass) TaskService JsonFile Integration (Enhanced) > Basic Task Operations > should create and retrieve tasks [0.88ms]
(pass) TaskService JsonFile Integration (Enhanced) > Basic Task Operations > should handle multiple tasks [0.45ms]
(pass) TaskService JsonFile Integration (Enhanced) > Basic Task Operations > should update task status [0.21ms]
154 | 
155 |       const task = await taskServiceInstance.getTask(invalidId);
156 |       expect(task).toBe(null);
157 | 
158 |       const status = await taskServiceInstance.getTaskStatus(invalidId);
159 |       expect(status).toBeUndefined();
                           ^
error: expect(received).toBeUndefined()

Received: null

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskService-jsonFile-integration.test.ts:159:22)
(fail) TaskService JsonFile Integration (Enhanced) > Error Handling > should handle invalid task IDs gracefully
(pass) TaskService JsonFile Integration (Enhanced) > Error Handling > should validate task status values [0.06ms]
(pass) TaskService JsonFile Integration (Enhanced) > Data Persistence > should persist changes across service instances [0.16ms]
(pass) TaskService JsonFile Integration (Enhanced) > Test Isolation Validation > should maintain proper test isolation [0.06ms]
(pass) TaskService JsonFile Integration (Enhanced) > Test Isolation Validation > should cleanup properly after each test

src/domain/tasks/jsonFileTaskBackend.test.ts:
(pass) JsonFileTaskBackend > storage operations > should initialize storage correctly [0.01ms]
(pass) JsonFileTaskBackend > storage operations > should store and retrieve tasks
(pass) JsonFileTaskBackend > storage operations > should update tasks [0.39ms]
(pass) JsonFileTaskBackend > storage operations > should delete tasks [0.37ms]
(pass) JsonFileTaskBackend > TaskBackend interface compliance > should implement getTasksData
(pass) JsonFileTaskBackend > TaskBackend interface compliance > should implement saveTasksData
(pass) JsonFileTaskBackend > TaskBackend interface compliance > should implement parseTasks [0.05ms]
(pass) JsonFileTaskBackend > TaskBackend interface compliance > should implement formatTasks [0.84ms]
(pass) JsonFileTaskBackend > TaskBackend interface compliance > should handle task spec operations [0.17ms]
(pass) JsonFileTaskBackend > markdown compatibility > should parse markdown task format [0.23ms]
(pass) JsonFileTaskBackend > helper methods > should generate correct task spec paths
(pass) JsonFileTaskBackend > helper methods > should return correct workspace path

src/domain/tasks/special-workspace-integration.test.ts:
(pass) Enhanced Workspace Integration > Enhanced TaskService Integration > should create TaskService with workspace resolution [2.24ms]
43 |       const taskService = await TaskService.createMarkdownWithRepo({
44 |         repoUrl: "https://github.com/test/repo.git"
45 |       });
46 | 
47 |       expect(taskService).toBeDefined();
48 |       expect(taskService.getWorkspacePath()).toContain("task-operations");
                                                  ^
error: expect(received).toContain(expected)

Expected to contain: "task-operations"
Received: "/Users/edobry/.local/state/minsky/sessions/task#276"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/special-workspace-integration.test.ts:48:46)
(fail) Enhanced Workspace Integration > Enhanced TaskService Integration > should handle repository-based workspace creation [12.09ms]
(pass) Enhanced Workspace Integration > Enhanced TaskService Integration > should support traditional TaskService creation [0.10ms]
(pass) Enhanced Workspace Integration > Architectural Benefits > should validate elimination of complex routing patterns [0.02ms]
(pass) Enhanced Workspace Integration > Architectural Benefits > should demonstrate simplified workspace resolution [0.06ms]

src/domain/tasks/task-id-utils.test.ts:
(pass) Task ID Utilities for Task 283 > normalizeTaskIdForStorage > should convert display format to storage format [0.02ms]
(pass) Task ID Utilities for Task 283 > normalizeTaskIdForStorage > should keep storage format as-is [0.04ms]
(pass) Task ID Utilities for Task 283 > normalizeTaskIdForStorage > should handle task# prefix format [0.04ms]
(pass) Task ID Utilities for Task 283 > normalizeTaskIdForStorage > should strip multiple # prefixes
(pass) Task ID Utilities for Task 283 > normalizeTaskIdForStorage > should handle whitespace [0.02ms]
(pass) Task ID Utilities for Task 283 > normalizeTaskIdForStorage > should return null for invalid input [0.02ms]
(pass) Task ID Utilities for Task 283 > normalizeTaskIdForStorage > should handle edge cases
(pass) Task ID Utilities for Task 283 > formatTaskIdForDisplay > should add # prefix to storage format [0.03ms]
(pass) Task ID Utilities for Task 283 > formatTaskIdForDisplay > should keep display format as-is
(pass) Task ID Utilities for Task 283 > formatTaskIdForDisplay > should handle invalid input [0.02ms]
(pass) Task ID Utilities for Task 283 > formatTaskIdForDisplay > should handle edge cases
(pass) Task ID Utilities for Task 283 > isStorageFormat > should identify storage format correctly [0.02ms]
(pass) Task ID Utilities for Task 283 > isStorageFormat > should reject display format
(pass) Task ID Utilities for Task 283 > isStorageFormat > should reject invalid formats
(pass) Task ID Utilities for Task 283 > isStorageFormat > should handle whitespace
(pass) Task ID Utilities for Task 283 > isDisplayFormat > should identify display format correctly [0.01ms]
(pass) Task ID Utilities for Task 283 > isDisplayFormat > should reject storage format [0.01ms]
(pass) Task ID Utilities for Task 283 > isDisplayFormat > should reject invalid formats [0.01ms]
(pass) Task ID Utilities for Task 283 > isDisplayFormat > should handle whitespace
(pass) Task ID Utilities for Task 283 > convertTaskIdFormat > should convert to storage format [0.04ms]
(pass) Task ID Utilities for Task 283 > convertTaskIdFormat > should convert to display format
(pass) Task ID Utilities for Task 283 > convertTaskIdFormat > should return null for invalid input
(pass) Task ID Utilities for Task 283 > isValidTaskIdInput > should accept valid formats [0.01ms]
(pass) Task ID Utilities for Task 283 > isValidTaskIdInput > should reject invalid formats
(pass) Task ID Utilities for Task 283 > getTaskIdNumber > should extract numbers from valid formats [0.02ms]
(pass) Task ID Utilities for Task 283 > getTaskIdNumber > should return null for invalid formats
(pass) Task ID Utilities for Task 283 > getTaskIdNumber > should handle leading zeros correctly
(pass) Task ID Utilities for Task 283 > integration scenarios > should handle full workflow: input -> storage -> display [0.05ms]
(pass) Task ID Utilities for Task 283 > integration scenarios > should maintain data consistency [0.04ms]

src/domain/tasks/json-backend.test.ts:
19 |       // Ignore cleanup errors
20 |     }
21 |   });
22 | 
23 |   test("should create backend with explicit workspace path", async () => {
24 |     const backend = await createWorkspaceResolvingJsonBackend({
                               ^
ReferenceError: createWorkspaceResolvingJsonBackend is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/json-backend.test.ts:24:27)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/json-backend.test.ts:23:62)
(fail) Enhanced JSON Backend > should create backend with explicit workspace path [0.32ms]
30 |     expect(backend.name).toBe("json-file");
31 |     expect(backend.getWorkspacePath()).toBe(testDir);
32 |   });
33 | 
34 |   test("should resolve workspace using current directory", async () => {
35 |     const backend = await createWorkspaceResolvingJsonBackend({
                               ^
ReferenceError: createWorkspaceResolvingJsonBackend is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/json-backend.test.ts:35:27)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/json-backend.test.ts:34:60)
(fail) Enhanced JSON Backend > should resolve workspace using current directory [0.05ms]
40 |     expect(typeof backend.getWorkspacePath()).toBe("string");
41 |   });
42 | 
43 |   test("should handle database file path configuration", async () => {
44 |     const customDbPath = join(testDir, "my-tasks.json");
45 |     const backend = await createWorkspaceResolvingJsonBackend({
                               ^
ReferenceError: createWorkspaceResolvingJsonBackend is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/json-backend.test.ts:45:27)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/json-backend.test.ts:43:58)
(fail) Enhanced JSON Backend > should handle database file path configuration [0.04ms]
50 | 
51 |     expect(backend.getStorageLocation()).toBe(customDbPath);
52 |   });
53 | 
54 |   test("should identify as in-tree backend when using special workspace", async () => {
55 |     const backend = await createWorkspaceResolvingJsonBackend({
                               ^
ReferenceError: createWorkspaceResolvingJsonBackend is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/json-backend.test.ts:55:27)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/json-backend.test.ts:54:75)
(fail) Enhanced JSON Backend > should identify as in-tree backend when using special workspace [0.04ms]

src/domain/tasks/real-world-workflow.test.ts:
(pass) Real-World Workflow Testing > JSON Backend Real Storage > should actually create and store data in the correct location [0.32ms]
(pass) Real-World Workflow Testing > JSON Backend Real Storage > should default to process/tasks.json when no explicit path provided [0.02ms]
(pass) Real-World Workflow Testing > TaskService Integration > should work with JSON backend for complete task operations [0.25ms]
(pass) Real-World Workflow Testing > Error Handling > should handle missing process directory gracefully [0.04ms]

src/domain/tasks/taskService.test.ts:
(pass) TaskService > listTasks > should get tasks data and parse it
(pass) TaskService > listTasks > should filter tasks by status if provided [0.05ms]
(pass) TaskService > listTasks > should return empty array if data retrieval fails [0.05ms]
(pass) TaskService > getTask > should find a task by ID [0.03ms]
(pass) TaskService > getTask > should find a task by ID without # prefix [0.03ms]
(pass) TaskService > getTask > should return null if task not found [0.02ms]
(pass) TaskService > getTaskStatus > should get a task's status [0.02ms]
(pass) TaskService > getTaskStatus > should return null if task not found [0.02ms]
(pass) TaskService > setTaskStatus > should update a task's status [0.09ms]
(pass) TaskService > setTaskStatus > should throw error for invalid status [0.03ms]
(pass) TaskService > setTaskStatus > should throw error if task not found [0.03ms]
(pass) TaskService > createTask > should create a new task from spec file [0.03ms]
(pass) TaskService > createTask > should throw error if spec file read fails [0.05ms]
(pass) TaskService > createTaskFromTitleAndDescription > should store proper spec path instead of temporary path [0.07ms]
133 | 
134 |   async createTask(specPath: string, _options?: CreateTaskOptions): Promise<Task> {
135 |     // Read and parse the spec file
136 |     const specResult = await this.getTaskSpecData(specPath);
137 |     if (!specResult.success || !specResult.content) {
138 |       throw new Error(`Failed to read spec file: ${specPath}`);
                  ^
error: Failed to read spec file: /var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/temp-task-integration-test-task-1753221587756.md
      at createTask (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/markdownTaskBackend.ts:138:13)
(fail) TaskService > createTaskFromTitleAndDescription > integration: should create task with proper spec path using real backend [1.39ms]
(pass) TaskService > backend handling > should throw error for non-existent backend [0.03ms]
(pass) TaskService > backend handling > should use markdown backend by default [0.03ms]

src/domain/tasks/backend-workspace-integration.test.ts:

# Unhandled error between tests
-------------------------------
error: Cannot find module '../markdownTaskBackend' from '/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/backend-workspace-integration.test.ts'
-------------------------------


src/domain/tasks/taskFunctions.test.ts:
(pass) Task Functions > normalizeTaskId > should return canonical form for valid IDs [0.99ms]
(pass) Task Functions > normalizeTaskId > should handle various prefix patterns [0.05ms]
(pass) Task Functions > normalizeTaskId > should return undefined for non-numeric input [0.01ms]
(pass) Task Functions > normalizeTaskId > should extract numeric portion from mixed formats [0.01ms]
(pass) Task Functions > normalizeTaskId > should handle alphanumeric task IDs [0.01ms]
(pass) Task Functions > parseTasksFromMarkdown > should return empty array for empty content [0.08ms]
(pass) Task Functions > parseTasksFromMarkdown > should parse tasks from markdown content [0.20ms]
(pass) Task Functions > parseTasksFromMarkdown > should ignore tasks in code blocks [0.02ms]
(pass) Task Functions > formatTasksToMarkdown > should return empty string for empty array [0.04ms]
(pass) Task Functions > formatTasksToMarkdown > should format tasks to markdown with one-liner format only [0.05ms]
(pass) Task Functions > formatTasksToMarkdown > should use task specPath if available [0.02ms]
(pass) Task Functions > getTaskById > should return null for empty input [0.05ms]
(pass) Task Functions > getTaskById > should find task by exact ID match [0.02ms]
(pass) Task Functions > getTaskById > should find task by ID without # prefix [0.02ms]
(pass) Task Functions > getTaskById > should handle numeric equivalence [0.02ms]
(pass) Task Functions > getNextTaskId > should return 001 for empty tasks array [0.02ms]
(pass) Task Functions > getNextTaskId > should find the maximum ID and increment it [0.03ms]
(pass) Task Functions > getNextTaskId > should handle non-sequential IDs
(pass) Task Functions > getNextTaskId > should pad with zeros [0.02ms]
(pass) Task Functions > setTaskStatus > should update a task's status [0.05ms]
(pass) Task Functions > setTaskStatus > should work with task ID variations [0.02ms]
(pass) Task Functions > setTaskStatus > should return original array if task not found [0.01ms]
(pass) Task Functions > setTaskStatus > should return original array if status is invalid
(pass) Task Functions > addTask > should add a new task to the array [0.03ms]
(pass) Task Functions > addTask > should replace an existing task with the same ID [0.01ms]
(pass) Task Functions > addTask > should generate an ID if not provided [0.02ms]
(pass) Task Functions > filterTasks > should return all tasks if no filter provided [0.03ms]
(pass) Task Functions > filterTasks > should filter by status [0.06ms]
(pass) Task Functions > filterTasks > should filter by ID [0.02ms]
(pass) Task Functions > filterTasks > should filter by title (string match) [0.02ms]
(pass) Task Functions > filterTasks > should filter by title (regex match) [0.02ms]
(pass) Task Functions > filterTasks > should filter by specPath existence [0.02ms]
(pass) Task Functions > filterTasks > should combine multiple filter criteria [0.03ms]
(pass) Task Functions > parseTaskSpecFromMarkdown > should parse task spec from markdown [0.08ms]
(pass) Task Functions > parseTaskSpecFromMarkdown > should handle specs without task ID [0.04ms]
(pass) Task Functions > parseTaskSpecFromMarkdown > should handle general heading format [0.01ms]
(pass) Task Functions > parseTaskSpecFromMarkdown > should return empty values for invalid input [0.01ms]
(pass) Task Functions > formatTaskSpecToMarkdown > should format task spec to markdown with ID [0.03ms]
(pass) Task Functions > formatTaskSpecToMarkdown > should format task spec without ID
(pass) Task Functions > isValidTaskStatus > should validate correct statuses [0.01ms]
(pass) Task Functions > isValidTaskStatus > should reject invalid statuses [0.01ms]

src/domain/tasks/configuration-integration.test.ts:
(pass) Configuration Integration > createConfiguredTaskService should use configuration to resolve backend [1.54ms]
(pass) Configuration Integration > createConfiguredTaskService should fall back to default when configuration fails [0.06ms]
(pass) Configuration Integration > createConfiguredTaskService should respect explicit backend parameter [0.48ms]

src/domain/tasks/githubIssuesTaskBackend.test.ts:
(pass) GitHubIssuesTaskBackend > configuration > should create instance with correct configuration [0.02ms]
(pass) GitHubIssuesTaskBackend > configuration > should initialize with custom status labels [0.10ms]
(pass) GitHubIssuesTaskBackend > parseTasks > should parse GitHub issues into TaskData objects [0.26ms]
(pass) GitHubIssuesTaskBackend > parseTasks > should handle invalid JSON gracefully [0.02ms]
(pass) GitHubIssuesTaskBackend > formatTasks > should format TaskData objects for GitHub API [0.05ms]
(pass) GitHubIssuesTaskBackend > parseTaskSpec > should parse task specification content [0.07ms]
(pass) GitHubIssuesTaskBackend > formatTaskSpec > should format task specification data [0.04ms]
(pass) GitHubIssuesTaskBackend > getTaskSpecPath > should generate correct spec path
(pass) GitHubIssuesTaskBackend > getTaskSpecPath > should handle task ID without # prefix
(pass) GitHubIssuesTaskBackend > getTaskSpecPath > should normalize title for filename

src/domain/tasks/taskConstants.test.ts:
(pass) Task Constants and Utilities > Basic Constants > should have all required task statuses
(pass) Task Constants and Utilities > Basic Constants > should have bidirectional mapping between status and checkbox [0.02ms]
(pass) Task Constants and Utilities > Regex Patterns > should match valid task lines [0.05ms]
(pass) Task Constants and Utilities > Regex Patterns > should not match invalid task lines [0.02ms]
(pass) Task Constants and Utilities > Parsing Utilities > should parse valid task lines correctly [0.04ms]
(pass) Task Constants and Utilities > Parsing Utilities > should return null for invalid task lines [0.01ms]
(pass) Task Constants and Utilities > Parsing Utilities > should replace checkbox status correctly [0.03ms]
(pass) Task Constants and Utilities > Parsing Utilities > should get status from checkbox correctly [0.01ms]
(pass) Task Constants and Utilities > Parsing Utilities > should get checkbox from status correctly [0.01ms]
(pass) Task Constants and Utilities > Parsing Utilities > should validate task-like lines correctly [0.02ms]
(pass) Task Constants and Utilities > Status Validation > should validate valid statuses [0.01ms]
(pass) Task Constants and Utilities > Status Validation > should reject invalid statuses
(pass) Task Constants and Utilities > Dynamic Pattern Generation > should generate patterns that include all status characters [0.01ms]
(pass) Task Constants and Utilities > Dynamic Pattern Generation > should handle new status additions gracefully [0.02ms]

src/domain/tasks/taskCommands.test.ts:
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should return BLOCKED status for task 155 with [~] checkbox [0.14ms]
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should return TODO status for task 156 with [ ] checkbox [0.05ms]
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should return IN_PROGRESS status for task 157 with [+] checkbox [0.06ms]
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should return DONE status for task 158 with [x] checkbox [0.04ms]
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should throw error when task not found [0.12ms]
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should handle task ID normalization [0.06ms]
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should handle custom repo path [0.19ms]
(pass) Interface-Agnostic Task Command Functions > getTaskFromParams > should get task by ID [0.12ms]
(pass) Interface-Agnostic Task Command Functions > getTaskFromParams > should throw error when task not found [0.06ms]
(pass) Interface-Agnostic Task Command Functions > getTaskFromParams > should handle task ID normalization [0.07ms]
(pass) Interface-Agnostic Task Command Functions > getTaskFromParams > should handle custom repo path [0.10ms]
(pass) Interface-Agnostic Task Command Functions > listTasksFromParams > should list all tasks when no filter is provided [0.09ms]
(pass) Interface-Agnostic Task Command Functions > listTasksFromParams > should filter tasks by status [0.08ms]
(pass) Interface-Agnostic Task Command Functions > listTasksFromParams > should filter out DONE tasks when all is false [0.07ms]
(pass) Interface-Agnostic Task Command Functions > setTaskStatusFromParams > should set task status [8.24ms]
(pass) Interface-Agnostic Task Command Functions > setTaskStatusFromParams > should throw error when task not found [0.17ms]
(pass) Interface-Agnostic Task Command Functions > setTaskStatusFromParams > should handle task ID normalization [7.06ms]
(pass) Interface-Agnostic Task Command Functions > Parameter Validation > should validate task ID format
(pass) Interface-Agnostic Task Command Functions > Parameter Validation > should handle empty task ID [0.05ms]
(pass) Interface-Agnostic Task Command Functions > Parameter Validation > should handle backend parameter [0.16ms]

src/domain/tasks/markdown-backend-workspace-architecture.test.ts:

# Unhandled error between tests
-------------------------------
error: Cannot find module '../markdownTaskBackend' from '/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/markdown-backend-workspace-architecture.test.ts'
-------------------------------


src/domain/workspace/session-path-resolver.test.ts:
(pass) SessionPathResolver > validateAndResolvePath > should resolve relative paths within session [0.56ms]
(pass) SessionPathResolver > validateAndResolvePath > should resolve current directory reference [0.26ms]
(pass) SessionPathResolver > validateAndResolvePath > should throw error for path traversal outside session [0.10ms]
(pass) SessionPathResolver > validateAndResolvePath > should throw error for absolute paths outside session [0.01ms]
(pass) SessionPathResolver > validateAndResolvePath > should handle complex path traversal attempts
(pass) SessionPathResolver > validateAndResolvePath > should allow absolute paths within session
(pass) SessionPathResolver > isPathWithinSession > should return true for paths within session [0.02ms]
(pass) SessionPathResolver > isPathWithinSession > should return false for paths outside session
(pass) SessionPathResolver > isPathWithinSession > should return true for session root
(pass) SessionPathResolver > absoluteToRelative > should convert absolute path to relative [0.02ms]
(pass) SessionPathResolver > absoluteToRelative > should return null for paths outside session
(pass) SessionPathResolver > absoluteToRelative > should return '.' for session root
(pass) SessionPathResolver > getRelativePathFromSession > should get relative path from user input [0.01ms]
(pass) SessionPathResolver > getRelativePathFromSession > should normalize relative path from user input
(pass) SessionPathResolver > getRelativePathFromSession > should return '.' for session root reference
(pass) SessionPathResolver > validateMultiplePaths > should validate multiple valid paths [0.03ms]
(pass) SessionPathResolver > validateMultiplePaths > should throw error if any path is invalid [0.04ms]
(pass) SessionPathResolver > createSafePath > should create safe path from components [0.02ms]
(pass) SessionPathResolver > createSafePath > should throw error for unsafe path components [0.02ms]

src/domain/utils/package-manager.test.ts:

# Unhandled error between tests
-------------------------------
error: Cannot find module '../utils/constants' from '/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/errors/network-errors.ts'
-------------------------------


src/domain/utils/logger.test.ts:
(pass) Logger > getLogMode > should return HUMAN when configuration mode is set to HUMAN [1.00ms]
(pass) Logger > getLogMode > should return STRUCTURED when configuration mode is set to STRUCTURED [0.01ms]
(pass) Logger > getLogMode > should default to HUMAN when mode is auto and TTY is available [0.03ms]
(pass) Logger > getLogMode > should default to STRUCTURED when mode is auto and TTY is not available
(pass) Logger > createConfigurableLogger > should create logger with configuration [0.67ms]
(pass) Logger > createConfigurableLogger > should create logger with STRUCTURED mode [0.11ms]
(pass) Logger > createConfigurableLogger > should expose logger methods [0.12ms]
(pass) Logger > createConfigurableLogger > should support dependency injection for testing [0.07ms]
(pass) Logger > createConfigurableLogger > should handle different log levels [0.45ms]
(pass) Logger > createConfigurableLogger > should isolate logger instances [0.19ms]
(pass) Logger > configuration integration > should maintain backward compatibility [0.19ms]
(pass) Logger > configuration integration > should support enableAgentLogs configuration [0.10ms]

src/domain/storage/database-integrity-checker.test.ts:
75 |   });
76 | 
77 |   describe("File Format Detection", () => {
78 |     test("should detect valid SQLite format", async () => {
79 |       // Create a valid SQLite file
80 |       const db = new Database(testDbPath);
                      ^
SQLiteError: unable to open database file
      errno: 14,
 byteOffset: -1,
       code: "SQLITE_CANTOPEN"

      at new Database (bun:sqlite:240:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/database-integrity-checker.test.ts:80:18)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/database-integrity-checker.test.ts:78:47)
(fail) DatabaseIntegrityChecker > File Format Detection > should detect valid SQLite format [1.99ms]
(pass) DatabaseIntegrityChecker > File Format Detection > should detect valid JSON format [0.29ms]
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id FF8A:153092:11EE55E:23B29AF:688009D3 in 87ms
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id FF86:1998E8:105BB28:208E1A9:688009D3 in 87ms
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id FF85:370788:11933EE:22FA60F:688009D3 in 87ms
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id FF83:3F8A5A:10AAEFB:212D495:688009D3 in 90ms
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id FF8D:10486C:10A8086:21347AB:688009D3 in 93ms
(pass) DatabaseIntegrityChecker > File Format Detection > should detect corrupted JSON format [0.22ms]
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id FF88:3287FE:1144D86:2263FC4:688009D3 in 94ms
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id FF89:370788:11933EE:22FA610:688009D3 in 96ms
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id FF84:20B221:FF5555:1FCCD33:688009D3 in 98ms
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id FF87:104FA5:11364E3:2235478:688009D3 in 99ms
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id FF8C:2B6B90:10E2038:219FBE3:688009D3 in 103ms
(pass) DatabaseIntegrityChecker > File Format Detection > should detect empty file [0.17ms]
GET /repos/test-owner/test-repo/labels/custom%3Atodo - 401 with id FF8B:104FA5:11364E3:2235477:688009D3 in 105ms
(pass) DatabaseIntegrityChecker > File Format Detection > should detect missing file [0.14ms]
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id FF86:1998E8:105BB4B:208E1E7:688009D3 in 35ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id FF8A:153092:11EE58D:23B2A1D:688009D3 in 39ms
(pass) DatabaseIntegrityChecker > Format Mismatch Detection > should detect JSON file when SQLite expected [0.20ms]
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id FF83:3F8A5A:10AAF21:212D50A:688009D3 in 35ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id FF88:3287FE:1144DBB:2264027:688009D3 in 35ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id FF8D:10486C:10A80B7:2134803:688009D3 in 43ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id FF87:104FA5:1136509:22354BE:688009D3 in 37ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id FF89:370788:1193425:22FA673:688009D3 in 40ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id FF85:370788:119341C:22FA662:688009D3 in 48ms
153 |       expect(migrationAction?.priority).toBe("high");
154 |     });
155 | 
156 |     test("should detect SQLite file when JSON expected", async () => {
157 |       const sqlitePath = join(testDirPath, "fake-json.json");
158 |       const db = new Database(sqlitePath);
                       ^
SQLiteError: unable to open database file
      errno: 14,
 byteOffset: -1,
       code: "SQLITE_CANTOPEN"

      at new Database (bun:sqlite:240:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/database-integrity-checker.test.ts:158:18)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/database-integrity-checker.test.ts:156:58)
(fail) DatabaseIntegrityChecker > Format Mismatch Detection > should detect SQLite file when JSON expected [0.94ms]
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id FF84:20B221:FF557B:1FCCD7C:688009D3 in 40ms
GET /repos/test-owner/test-repo/labels/custom%3Ain-progress - 401 with id FF8B:104FA5:1136510:22354D2:688009D3 in 44ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id FF8C:2B6B90:10E2061:219FC38:688009D3 in 46ms
(pass) DatabaseIntegrityChecker > Backup File Detection > should find backup files with standard patterns [0.29ms]
(pass) DatabaseIntegrityChecker > Backup File Detection > should detect session count in JSON backups [0.16ms]
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id FF8A:153092:11EE5BC:23B2A79:688009D3 in 36ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id FF86:1998E8:105BB6B:208E23B:688009D3 in 40ms
213 |   });
214 | 
215 |   describe("SQLite Integrity Validation", () => {
216 |     test("should validate SQLite database integrity", async () => {
217 |       // Create valid SQLite database
218 |       const db = new Database(testDbPath);
                       ^
SQLiteError: unable to open database file
      errno: 14,
 byteOffset: -1,
       code: "SQLITE_CANTOPEN"

      at new Database (bun:sqlite:240:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/database-integrity-checker.test.ts:218:18)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/database-integrity-checker.test.ts:216:55)
(fail) DatabaseIntegrityChecker > SQLite Integrity Validation > should validate SQLite database integrity [0.35ms]
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id FF83:3F8A5A:10AAF47:212D552:688009D3 in 44ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id FF88:3287FE:1144DE7:2264075:688009D3 in 43ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id FF8D:10486C:10A80DE:213485C:688009D3 in 37ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id FF87:104FA5:1136532:223551F:688009D3 in 37ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id FF89:370788:119345A:22FA6DF:688009D3 in 39ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id FF85:370788:1193459:22FA6DE:688009D3 in 42ms
241 |       expect(result.issues).toHaveLength(0);
242 |     });
243 | 
244 |     test("should detect SQLite database without sessions table", async () => {
245 |       // Create SQLite database without sessions table
246 |       const db = new Database(testDbPath);
                       ^
SQLiteError: unable to open database file
      errno: 14,
 byteOffset: -1,
       code: "SQLITE_CANTOPEN"

      at new Database (bun:sqlite:240:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/database-integrity-checker.test.ts:246:18)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/database-integrity-checker.test.ts:244:66)
(fail) DatabaseIntegrityChecker > SQLite Integrity Validation > should detect SQLite database without sessions table [0.48ms]
GET /repos/test-owner/test-repo/labels/custom%3Ain-review - 401 with id FF8B:104FA5:1136545:2235534:688009D3 in 36ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id FF84:20B221:FF55AE:1FCCDD2:688009D3 in 48ms
255 |       );
256 |     });
257 | 
258 |     test("should detect empty SQLite database", async () => {
259 |       // Create empty SQLite database
260 |       const db = new Database(testDbPath);
                       ^
SQLiteError: unable to open database file
      errno: 14,
 byteOffset: -1,
       code: "SQLITE_CANTOPEN"

      at new Database (bun:sqlite:240:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/database-integrity-checker.test.ts:260:18)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/database-integrity-checker.test.ts:258:49)
(fail) DatabaseIntegrityChecker > SQLite Integrity Validation > should detect empty SQLite database [0.39ms]
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id FF8C:2B6B90:10E2089:219FC87:688009D3 in 47ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id FF8A:153092:11EE5E7:23B2ADE:688009D3 in 35ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id FF86:1998E8:105BB94:208E297:688009D3 in 39ms
(pass) DatabaseIntegrityChecker > JSON Validation > should validate JSON structure [0.21ms]
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id FF89:370788:1193484:22FA721:688009D3 in 35ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id FF83:3F8A5A:10AAF7F:212D5A9:688009D3 in 40ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id FF88:3287FE:1144E12:22640C6:688009D3 in 38ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id FF87:104FA5:1136560:2235577:688009D3 in 37ms
(pass) DatabaseIntegrityChecker > JSON Validation > should detect JSON without sessions array [0.12ms]
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id FF85:370788:1193487:22FA72B:688009D3 in 44ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id FF84:20B221:FF55D2:1FCCE29:688009D3 in 34ms
(pass) DatabaseIntegrityChecker > JSON Validation > should detect empty JSON sessions array [0.20ms]
(pass) DatabaseIntegrityChecker > Suggested Actions > should suggest repair for corrupted database [0.30ms]
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id FF8C:2B6B90:10E20C3:219FCDE:688009D3 in 41ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id FF8D:10486C:10A8108:21348C4:688009D3 in 64ms
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id FF86:1998E8:105BBBB:208E2D9:688009D3 in 37ms
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id FF8A:153092:11EE60B:23B2B46:688009D3 in 42ms
(pass) DatabaseIntegrityChecker > Suggested Actions > should suggest initialization for missing database [0.23ms]
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id FF89:370788:11934AD:22FA77D:688009D3 in 39ms
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id FF87:104FA5:1136588:22355DA:688009D3 in 44ms
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id FF88:3287FE:1144E4C:2264127:688009D3 in 44ms
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id FF84:20B221:FF55F5:1FCCE7A:688009D4 in 32ms
(pass) DatabaseIntegrityChecker > Suggested Actions > should prioritize high-priority actions [0.23ms]
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id FF83:3F8A5A:10AAFA7:212D5FD:688009D3 in 49ms
(pass) DatabaseIntegrityChecker > Integrity Report Formatting > should format comprehensive integrity report [2.53ms]
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id FF85:370788:11934B7:22FA796:688009D4 in 46ms
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id FF86:1998E8:105BBE1:208E330:688009D4 in 36ms
366 |       expect(report).toContain("BACKUP FILES FOUND:");
367 |       expect(report).toContain("SUGGESTED ACTIONS:");
368 |     });
369 | 
370 |     test("should format report for valid database", async () => {
371 |       const db = new Database(testDbPath);
                       ^
SQLiteError: unable to open database file
      errno: 14,
 byteOffset: -1,
       code: "SQLITE_CANTOPEN"

      at new Database (bun:sqlite:240:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/database-integrity-checker.test.ts:371:18)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/database-integrity-checker.test.ts:370:53)
(fail) DatabaseIntegrityChecker > Integrity Report Formatting > should format report for valid database [0.18ms]
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id FF8D:10486C:10A814F:2134955:688009D4 in 46ms
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id FF8C:2B6B90:10E20EC:219FD2F:688009D4 in 47ms
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id FF84:20B221:FF561B:1FCCEC3:688009D4 in 33ms
(pass) DatabaseIntegrityChecker > Error Handling > should handle permission errors gracefully [0.15ms]
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id FF89:370788:11934D1:22FA7FD:688009D4 in 40ms
GET /repos/test-owner/test-repo/labels/custom%3Adone - 401 with id FF8B:104FA5:113656D:2235593:688009D3 in 111ms
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id FF8A:153092:11EE63F:23B2BAD:688009D4 in 58ms
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id FF83:3F8A5A:10AAFE3:212D66B:688009D4 in 36ms
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id FF87:104FA5:11365C5:2235621:688009D4 in 44ms
(pass) DatabaseIntegrityChecker > Error Handling > should handle invalid file paths gracefully [0.07ms]
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id FF85:370788:11934DF:22FA846:688009D4 in 35ms
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id FF88:3287FE:1144E79:2264196:688009D4 in 52ms
(pass) DatabaseIntegrityChecker > Edge Cases > should handle extremely large backup directories [0.65ms]
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id FF8D:10486C:10A8180:21349AF:688009D4 in 36ms
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id FF86:1998E8:105BC17:208E387:688009D4 in 37ms
(pass) DatabaseIntegrityChecker > Edge Cases > should handle backup files with different extensions

src/domain/storage/json-file-storage.test.ts:
(pass) JsonFileStorage Core Tests > Core CRUD Operations > should create and retrieve entities [0.14ms]
GET /repos/test-owner/test-repo/labels/custom%3Ablocked - 401 with id FF84:20B221:FF564B:1FCCF12:688009D4 in 51ms
(pass) JsonFileStorage Core Tests > Core CRUD Operations > should update entities [0.16ms]
(pass) JsonFileStorage Core Tests > Core CRUD Operations > should delete entities [0.16ms]
(pass) JsonFileStorage Core Tests > Core CRUD Operations > should get all entities [0.19ms]
(pass) JsonFileStorage Core Tests > State Management > should read and write state [0.21ms]
GET /repos/test-owner/test-repo/labels/custom%3Aclosed - 401 with id FF8A:153092:11EE6D1:23B2CA4:688009D4 in 35ms
(pass) JsonFileStorage Core Tests > Error Handling > should handle non-existent entities gracefully [0.11ms]
(pass) JsonFileStorage Core Tests > Persistence > should persist data across storage instances [0.16ms]
(pass) JsonFileStorage Core Tests > Persistence > should handle storage location correctly [0.08ms]

src/domain/__tests__/git-pr-workflow.test.ts:
(pass) PR Workflow with Dependencies > should generate PR markdown with proper dependency injection [0.97ms]
(pass) PR Workflow with Dependencies > should handle missing session in PR workflow [0.28ms]
(pass) PR Workflow with Dependencies > should resolve taskId to session in PR workflow
(pass) PR Workflow with Dependencies > should throw error when taskId has no associated session [0.18ms]
(pass) PR Workflow with Dependencies > should throw error when getSessionByTaskId dependency is not available [0.01ms]
(pass) PR Workflow with Dependencies > should prioritize session over taskId when both are provided [0.03ms]
(pass) PR Workflow with Dependencies > should handle git command failures gracefully in PR workflow [0.21ms]

src/domain/__tests__/git-service.test.ts:
(pass) GitService > should be able to create an instance
(pass) GitService > should get repository status
(pass) GitService > getSessionWorkdir should return the correct path
(pass) GitService > execInRepository should execute git commands in the specified repository [0.03ms]
(pass) GitService > execInRepository should propagate errors [0.11ms]
(pass) GitService > should use session-ID-based storage in getSessionWorkdir

src/domain/__tests__/tasks.test.ts:
71 |       };
72 | 
73 |       const result = await listTasksFromParams(params, mockDeps);
74 | 
75 |       expect(result).toEqual([mockTask]);
76 |       expect(mockResolveMainWorkspacePath.mock.calls.length > 0).toBe(true);
                                                                      ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/__tests__/tasks.test.ts:76:66)
(fail) interface-agnostic task functions > listTasksFromParams > should list tasks with valid parameters [0.89ms]
80 |       });
81 |       expect(mockTaskService.listTasks).toHaveBeenCalledWith();
82 |     });
83 | 
84 |     test("should filter out DONE tasks when all is false", async () => {
85 |       mockTaskService.listTasks = mock(() =>
                                       ^
ReferenceError: mock is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/__tests__/tasks.test.ts:85:35)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/__tests__/tasks.test.ts:84:60)
(fail) interface-agnostic task functions > listTasksFromParams > should filter out DONE tasks when all is false
172 |     }
173 | 
174 |     return task;
175 |   } catch (error) {
176 |     if (error instanceof z.ZodError) {
177 |       throw new ValidationError("Invalid parameters for getting task", (error as any).format(), error as any);
                  ^
ValidationError: Invalid parameters for getting task
 errors: {
  _errors: [],
  taskId: [Object ...],
},

      at getTaskFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskCommands.ts:177:13)
      at getTaskFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskCommands.ts:116:3)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/__tests__/tasks.test.ts:107:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/__tests__/tasks.test.ts:101:53)

24 | export class ZodError extends Error {
25 |     get errors() {
26 |         return this.issues;
27 |     }
28 |     constructor(issues) {
29 |         super();
             ^
ZodError: [
  {
    "code": "custom",
    "message": "Task ID must be a valid number (with or without # prefix, e.g., '283', '#283', 'task#283')",
    "path": [
      "taskId"
    ]
  }
]
    issues: [
  [Object ...]
],
  addIssue: [Function],
 addIssues: [Function],

      at new ZodError (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/zod/dist/esm/v3/ZodError.js:29:9)
      at error (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/zod/dist/esm/v3/types.js:51:31)
      at parse (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/zod/dist/esm/v3/types.js:126:15)
      at getTaskFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskCommands.ts:143:45)
      at getTaskFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskCommands.ts:116:3)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/__tests__/tasks.test.ts:107:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/__tests__/tasks.test.ts:101:53)
(fail) interface-agnostic task functions > getTaskFromParams > should get a task with valid parameters [0.51ms]
(pass) interface-agnostic task functions > getTaskFromParams > should throw ResourceNotFoundError when task is not found [0.13ms]
172 |     }
173 | 
174 |     return task;
175 |   } catch (error) {
176 |     if (error instanceof z.ZodError) {
177 |       throw new ValidationError("Invalid parameters for getting task", (error as any).format(), error as any);
                  ^
ValidationError: Invalid parameters for getting task
 errors: {
  _errors: [],
  taskId: [Object ...],
},

      at getTaskFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskCommands.ts:177:13)
      at getTaskFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskCommands.ts:116:3)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/__tests__/tasks.test.ts:133:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/__tests__/tasks.test.ts:127:91)

24 | export class ZodError extends Error {
25 |     get errors() {
26 |         return this.issues;
27 |     }
28 |     constructor(issues) {
29 |         super();
             ^
ZodError: [
  {
    "code": "custom",
    "message": "Task ID must be a valid number (with or without # prefix, e.g., '283', '#283', 'task#283')",
    "path": [
      "taskId"
    ]
  }
]
    issues: [
  [Object ...]
],
  addIssue: [Function],
 addIssues: [Function],

      at new ZodError (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/zod/dist/esm/v3/ZodError.js:29:9)
      at error (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/zod/dist/esm/v3/types.js:51:31)
      at parse (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/zod/dist/esm/v3/types.js:126:15)
      at getTaskFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskCommands.ts:143:45)
      at getTaskFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskCommands.ts:116:3)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/__tests__/tasks.test.ts:133:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/__tests__/tasks.test.ts:127:91)
(fail) interface-agnostic task functions > getTaskFromParams > should normalize non-canonical task IDs (e.g., 'TEST_VALUE' -> '#TEST_VALUE') [0.01ms]
137 |     });
138 | 
139 |     test("should handle task IDs without leading zeros", async () => {
140 |       // Modify mock implementation to return task with ID 'TEST_VALUE' for both '#TEST_VALUE' and '#23'
141 |       // This simulates the updated MarkdownTaskBackend.getTask behavior
142 |       mockTaskService.getTask = mock((id) =>
                                      ^
ReferenceError: mock is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/__tests__/tasks.test.ts:142:33)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/__tests__/tasks.test.ts:139:58)
(fail) interface-agnostic task functions > getTaskFromParams > should handle task IDs without leading zeros
246 |     }
247 | 
248 |     return task.status;
249 |   } catch (error) {
250 |     if (error instanceof z.ZodError) {
251 |       throw new ValidationError(
                  ^
ValidationError: Invalid parameters for getting task status
 errors: {
  _errors: [],
  taskId: [Object ...],
},

      at getTaskStatusFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskCommands.ts:251:13)
      at getTaskStatusFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskCommands.ts:190:3)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/__tests__/tasks.test.ts:168:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/__tests__/tasks.test.ts:162:58)

24 | export class ZodError extends Error {
25 |     get errors() {
26 |         return this.issues;
27 |     }
28 |     constructor(issues) {
29 |         super();
             ^
ZodError: [
  {
    "code": "custom",
    "message": "Task ID must be a valid number (with or without # prefix, e.g., '283', '#283', 'task#283')",
    "path": [
      "taskId"
    ]
  }
]
    issues: [
  [Object ...]
],
  addIssue: [Function],
 addIssues: [Function],

      at new ZodError (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/zod/dist/esm/v3/ZodError.js:29:9)
      at error (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/zod/dist/esm/v3/types.js:51:31)
      at parse (/Users/edobry/.local/state/minsky/sessions/task#276/node_modules/zod/dist/esm/v3/types.js:126:15)
      at getTaskStatusFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskCommands.ts:217:51)
      at getTaskStatusFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskCommands.ts:190:3)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/__tests__/tasks.test.ts:168:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/__tests__/tasks.test.ts:162:58)
(fail) interface-agnostic task functions > getTaskStatusFromParams > should get task status with valid parameters [0.23ms]
(pass) interface-agnostic task functions > getTaskStatusFromParams > should throw ResourceNotFoundError when task status is not found
187 |   });
188 | 
189 |   describe("setTaskStatusFromParams", () => {
190 |     test("should set task status with valid parameters", async () => {
191 |       // Reset getTask mock to its default implementation for this test
192 |       mockTaskService.getTask = mock(defaultGetTaskMock);
                                      ^
ReferenceError: mock is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/__tests__/tasks.test.ts:192:33)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/__tests__/tasks.test.ts:190:58)
(fail) interface-agnostic task functions > setTaskStatusFromParams > should set task status with valid parameters [0.15ms]
(pass) interface-agnostic task functions > setTaskStatusFromParams > should throw ValidationError when status is invalid

src/domain/git/clone-operations.test.ts:
(pass) Clone Operations > should handle clone operations with filesystem validation [7.75ms]
(pass) Clone Operations > should handle clone with empty repository URL validation
(pass) Clone Operations > should handle clone with existing non-empty directory [8.98ms]
(pass) Clone Operations > should handle clone failure during git command execution [6.97ms]
(pass) Clone Operations > should handle clone success verification failure [7.19ms]
(pass) Clone Operations > should handle clone with local repository normalization [6.21ms]
(pass) Clone Operations > should handle clone error scenarios with proper error propagation [6.56ms]

src/domain/git/repository-operations.test.ts:
(pass) Repository Operations with Dependency Injection > should have commitWithDependencies method available
(pass) Repository Operations with Dependency Injection > should have stashChangesWithDependencies method available [0.02ms]
(pass) Repository Operations with Dependency Injection > should have popStashWithDependencies method available [0.02ms]
(pass) Repository Operations with Dependency Injection > should have mergeBranchWithDependencies method available
(pass) Repository Operations with Dependency Injection > should have stageAllWithDependencies method available
(pass) Repository Operations with Dependency Injection > should have stageModifiedWithDependencies method available [0.01ms]
(pass) Repository Operations with Dependency Injection > should have pullLatestWithDependencies method available
49 |     expect(gitService.pullLatestWithDependencies).toBeDefined();
50 |     expect(typeof gitService.pullLatestWithDependencies).toBe("function");
51 |   });
52 | 
53 |   test("should have cloneWithDependencies method available", () => {
54 |     expect(gitService.cloneWithDependencies).toBeDefined();
                                                  ^
error: expect(received).toBeDefined()

Received: undefined

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git/repository-operations.test.ts:54:46)
(fail) Repository Operations with Dependency Injection > should have cloneWithDependencies method available [0.04ms]
(pass) Repository Operations with Dependency Injection > should create GitService with base directory [0.01ms]

src/domain/git/conflict-detection.test.ts:

# Unhandled error between tests
-------------------------------
162 |       mockExecAsync.mockImplementationOnce(() => Promise.resolve({ stdout: "1\t1", std
            ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git/conflict-detection.test.ts:162:7

276 |       mockExecAsync = mock(() => Promise.resolve({ stdout: "2\t0", stderr: "" })).mockImplementationOn
                            ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git/conflict-detection.test.ts:276:23
-------------------------------


src/domain/git/git-service-core.test.ts:
(pass) GitService > should be able to create an instance [0.05ms]
(pass) GitService > should get repository status [0.11ms]
(pass) GitService > execInRepository should execute git commands in the specified repository
(pass) GitService > execInRepository should propagate errors [0.09ms]

src/domain/git/parameter-based-functions.test.ts:
(pass) Parameter-Based Git Functions > commitChangesFromParams > should commit changes with all parameters [0.11ms]
(pass) Parameter-Based Git Functions > commitChangesFromParams > should handle commit with minimal parameters
(pass) Parameter-Based Git Functions > commitChangesFromParams > should handle commit with amend option
(pass) Parameter-Based Git Functions > commitChangesFromParams > should handle commit with noStage option
(pass) Parameter-Based Git Functions > pushFromParams > should push changes with all parameters
(pass) Parameter-Based Git Functions > pushFromParams > should handle push with minimal parameters [0.01ms]
(pass) Parameter-Based Git Functions > pushFromParams > should handle push with force option
(pass) Parameter-Based Git Functions > pushFromParams > should handle push with custom remote
(pass) commitChangesFromParams - Detailed Tests > should commit changes with message and all flag [0.22ms]
(pass) commitChangesFromParams - Detailed Tests > should commit changes with just message [0.15ms]
(pass) commitChangesFromParams - Detailed Tests > should handle commit with custom repo path [0.05ms]
(pass) commitChangesFromParams - Detailed Tests > should handle commit errors gracefully [0.02ms]
(pass) pushFromParams - Detailed Tests > should push changes successfully [0.06ms]
(pass) pushFromParams - Detailed Tests > should handle push with custom remote [0.03ms]
(pass) pushFromParams - Detailed Tests > should handle push with branch specification [0.05ms]
(pass) pushFromParams - Detailed Tests > should handle push errors gracefully

src/domain/git/push-operations.test.ts:
(pass) pushImpl > should be defined
(pass) pushImpl > should require dependencies

src/domain/git/pr-workflow.test.ts:
(pass) PR Workflow Operations > should have prWithDependencies method available
(pass) PR Workflow Operations > should have GitService constructor available [0.26ms]
(pass) PR Workflow Operations > should create GitService with base directory

src/domain/git/commit-operations.test.ts:
(pass) commitChangesFromParams > should be defined
(pass) commitChangesFromParams > should be a function

src/domain/git/architecture-analysis.test.ts:
(pass) GitService - Core Methods with Dependency Injection > Architecture Analysis - Testing Limitations > should demonstrate the core testing challenge

src/domain/git/session-workdir.test.ts:
(pass) GitService - Session Workdir Tests > getSessionWorkdir should return the correct path
(pass) GitService - Session Workdir Tests > should use session-ID-based storage in getSessionWorkdir

src/domain/git/factory-function.test.ts:
(pass) createGitService Factory Function > should handle undefined options parameter without throwing runtime error
(pass) createGitService Factory Function > should handle null options parameter without throwing runtime error
(pass) createGitService Factory Function > should handle options with undefined baseDir property [0.64ms]
(pass) createGitService Factory Function > should create GitService with custom baseDir when provided [0.10ms]
(pass) createGitService Factory Function > should create GitService with default baseDir when no options provided

src/domain/git/conflict-detection.integration.test.ts:
(pass) ConflictDetectionService Integration > should handle basic service instantiation and static methods [0.03ms]
(pass) ConflictDetectionService Integration > should have correct enum values defined [0.03ms]
(pass) ConflictDetectionService Integration > should provide proper interface structure for ConflictPrediction
(pass) ConflictDetectionService Integration > should provide proper interface structure for BranchDivergenceAnalysis
(pass) ConflictDetectionService Integration > should provide proper interface structure for enhanced results [0.05ms]
(skip) ConflictDetectionService Integration > should detect conflicts in real git repository

src/domain/session/session-approve-bugfix-regression.test.ts:
92 | 
93 |     try {
94 |       const task = await taskService.getTask(taskIdToUse);
95 |       if (!task) {
96 |         // Task doesn't exist - provide clear, concise error
97 |         throw new ResourceNotFoundError(
                   ^
ResourceNotFoundError: ‚ùå Task not found: 123

The specified task does not exist.

üí° Available options:
‚Ä¢ Run 'minsky tasks list' to see all available tasks
‚Ä¢ Check your task ID for typos
‚Ä¢ Use 'minsky session list' to see tasks with active sessions
      cause: undefined,
 resourceType: "task",
 resourceId: "123",

      at approveSessionImpl (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/session-approve-operations.ts:97:15)
(fail) Session Approve - Bug Regression Tests > Bug #1: Untracked Files Auto-Stash > should stash untracked files that would be overwritten by merge [1.52ms]
(pass) Session Approve - Bug Regression Tests > Bug #1: Untracked Files Auto-Stash > should include -u flag in git stash command for untracked files [0.06ms]
159 |             sessionDB: mockSessionDB,
160 |             gitService: mockGitService,
161 |             taskService: mockTaskService
162 |           }
163 |         )
164 |       ).rejects.toThrow("Diverging branches can't be fast-forwarded");
                      ^
error: expect(received).toThrow(expected)

Expected substring: "Diverging branches can't be fast-forwarded"
Received message: "‚ùå Task not found: 123\n\nThe specified task does not exist.\n\nüí° Available options:\n‚Ä¢ Run 'minsky tasks list' to see all available tasks\n‚Ä¢ Check your task ID for typos\n‚Ä¢ Use 'minsky session list' to see tasks with active sessions"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/session-approve-bugfix-regression.test.ts:164:17)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/session-approve-bugfix-regression.test.ts:114:70)
(fail) Session Approve - Bug Regression Tests > Bug #2: Fail-Fast on Merge Errors > should fail fast when fast-forward merge is not possible [0.12ms]
92 | 
93 |     try {
94 |       const task = await taskService.getTask(taskIdToUse);
95 |       if (!task) {
96 |         // Task doesn't exist - provide clear, concise error
97 |         throw new ResourceNotFoundError(
                   ^
ResourceNotFoundError: ‚ùå Task not found: 123

The specified task does not exist.

üí° Available options:
‚Ä¢ Run 'minsky tasks list' to see all available tasks
‚Ä¢ Check your task ID for typos
‚Ä¢ Use 'minsky session list' to see tasks with active sessions
      cause: undefined,
 resourceType: "task",
 resourceId: "123",

      at approveSessionImpl (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/session-approve-operations.ts:97:15)
(fail) Session Approve - Bug Regression Tests > Bug #2: Fail-Fast on Merge Errors > should continue processing when PR is genuinely already merged [0.18ms]
281 |       } catch (error) {
282 |         // Expected to fail
283 |       }
284 | 
285 |       // Assert: Stash should be restored even after failure
286 |       expect(mockGitService.stashChanges).toHaveBeenCalled();
                                                ^
error: expect(received).toHaveBeenCalled()

Expected number of calls: >= 1
Received number of calls: 0

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/session-approve-bugfix-regression.test.ts:286:43)
(fail) Session Approve - Bug Regression Tests > Bug #2: Fail-Fast on Merge Errors > should restore stash even when merge fails [0.08ms]

src/domain/session/session-context-resolver.test.ts:
(pass) resolveSessionContext > explicit session resolution > resolves existing session by name [0.07ms]
(pass) resolveSessionContext > explicit session resolution > throws error for non-existent session [0.04ms]
(pass) resolveSessionContext > task ID resolution > resolves session by task ID [0.05ms]
(pass) resolveSessionContext > task ID resolution > throws error for non-existent task [0.03ms]
(pass) resolveSessionContext > no session provided > throws error when no session detected and auto-detection disabled [0.02ms]
(pass) resolveSessionContext > precedence > explicit session takes precedence over task [0.03ms]
(pass) resolveSessionName > returns just the session name [0.05ms]
(pass) validateSessionContext > returns true for valid session [0.03ms]
(pass) validateSessionContext > returns false for invalid session

src/domain/session/session-path-resolver.test.ts:
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should validate and resolve relative paths correctly [0.02ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should validate and resolve dot paths correctly [0.02ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should validate and resolve root path correctly
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should block path traversal attempts [0.02ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should block multiple path traversal attempts
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should handle absolute paths within session workspace [0.06ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should block absolute paths outside session workspace [0.04ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > getRelativePathFromSession > should return relative path from session root [0.02ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > getRelativePathFromSession > should return dot for session root [0.01ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > getRelativePathFromSession > should handle nested paths [0.03ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > createSafePath > should create safe path from components
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > createSafePath > should prevent unsafe path creation [0.05ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateMultiplePaths > should validate multiple valid paths [0.05ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateMultiplePaths > should throw error when any path is invalid [0.04ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > normalizeRelativePath > should normalize relative path correctly [0.01ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > normalizeRelativePath > should prevent directory traversal in relative paths [0.01ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > absoluteToRelative > should convert absolute path to relative
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > absoluteToRelative > should return null for paths outside session [0.01ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > absoluteToRelative > should return dot for session root [0.03ms]

src/domain/session/session-adapter.test.ts:
(pass) SessionAdapter > should initialize with empty sessions
(pass) SessionAdapter > should add and retrieve a session [0.51ms]
(pass) SessionAdapter > should retrieve a session by task ID [0.13ms]
(pass) SessionAdapter > should update a session [0.23ms]
(pass) SessionAdapter > should delete a session [0.05ms]
(pass) SessionAdapter > should return false when deleting a non-existent session
(pass) SessionAdapter > should get repository path for a session [0.09ms]
(pass) SessionAdapter > should get working directory for a session

src/domain/session/session-approval-error-handling.test.ts:

# Unhandled error between tests
-------------------------------
error: Cannot find module '../session-approve-operations' from '/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/session-approval-error-handling.test.ts'
-------------------------------


src/domain/session/session-approve-task-status-commit.test.ts:
92 | 
93 |     try {
94 |       const task = await taskService.getTask(taskIdToUse);
95 |       if (!task) {
96 |         // Task doesn't exist - provide clear, concise error
97 |         throw new ResourceNotFoundError(
                   ^
ResourceNotFoundError: ‚ùå Task not found: 123

The specified task does not exist.

üí° Available options:
‚Ä¢ Run 'minsky tasks list' to see all available tasks
‚Ä¢ Check your task ID for typos
‚Ä¢ Use 'minsky session list' to see tasks with active sessions
      cause: undefined,
 resourceType: "task",
 resourceId: "123",

      at approveSessionImpl (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/session-approve-operations.ts:97:15)
(fail) Session Approve Task Status Commit > should commit task status update after successful merge [1.43ms]
92 | 
93 |     try {
94 |       const task = await taskService.getTask(taskIdToUse);
95 |       if (!task) {
96 |         // Task doesn't exist - provide clear, concise error
97 |         throw new ResourceNotFoundError(
                   ^
ResourceNotFoundError: ‚ùå Task not found: 124

The specified task does not exist.

üí° Available options:
‚Ä¢ Run 'minsky tasks list' to see all available tasks
‚Ä¢ Check your task ID for typos
‚Ä¢ Use 'minsky session list' to see tasks with active sessions
      cause: undefined,
 resourceType: "task",
 resourceId: "124",

      at approveSessionImpl (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/session-approve-operations.ts:97:15)
(fail) Session Approve Task Status Commit > should handle case where no task status update is needed [0.17ms]
92 | 
93 |     try {
94 |       const task = await taskService.getTask(taskIdToUse);
95 |       if (!task) {
96 |         // Task doesn't exist - provide clear, concise error
97 |         throw new ResourceNotFoundError(
                   ^
ResourceNotFoundError: ‚ùå Task not found: 125

The specified task does not exist.

üí° Available options:
‚Ä¢ Run 'minsky tasks list' to see all available tasks
‚Ä¢ Check your task ID for typos
‚Ä¢ Use 'minsky session list' to see tasks with active sessions
      cause: undefined,
 resourceType: "task",
 resourceId: "125",

      at approveSessionImpl (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/session-approve-operations.ts:97:15)
(fail) Session Approve Task Status Commit > should skip task status update when task is already DONE [0.16ms]
92 | 
93 |     try {
94 |       const task = await taskService.getTask(taskIdToUse);
95 |       if (!task) {
96 |         // Task doesn't exist - provide clear, concise error
97 |         throw new ResourceNotFoundError(
                   ^
ResourceNotFoundError: ‚ùå Task not found: 266

The specified task does not exist.

üí° Available options:
‚Ä¢ Run 'minsky tasks list' to see all available tasks
‚Ä¢ Check your task ID for typos
‚Ä¢ Use 'minsky session list' to see tasks with active sessions
      cause: undefined,
 resourceType: "task",
 resourceId: "266",

      at approveSessionImpl (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/session-approve-operations.ts:97:15)
(fail) Session Approve Task Status Commit > should exit early when task is DONE and PR branch doesn't exist (bug reproduction) [0.10ms]

src/domain/session/session-auto-detection-integration.test.ts:

# Unhandled error between tests
-------------------------------
-------------------------------


src/domain/session/pr-validation.test.ts:
(pass) PR Validation Utilities > validatePrContent > should validate normal PR content without issues [0.07ms]
(pass) PR Validation Utilities > validatePrContent > should detect and remove title duplication in body [0.05ms]
(pass) PR Validation Utilities > validatePrContent > should reject empty title [0.01ms]
(pass) PR Validation Utilities > validatePrContent > should handle empty body gracefully
(pass) PR Validation Utilities > isDuplicateContent > should detect identical content [0.04ms]
(pass) PR Validation Utilities > isDuplicateContent > should detect content with different whitespace
(pass) PR Validation Utilities > isDuplicateContent > should detect content with different case
(pass) PR Validation Utilities > isDuplicateContent > should not match different content
(pass) PR Validation Utilities > isDuplicateContent > should handle empty strings [0.01ms]
(pass) PR Validation Utilities > sanitizePrBody > should remove lines that duplicate the title [0.04ms]
(pass) PR Validation Utilities > sanitizePrBody > should preserve non-duplicate content
(pass) PR Validation Utilities > sanitizePrBody > should handle empty body
(pass) PR Validation Utilities > preparePrContent > should prepare normal content without changes [0.02ms]
(pass) PR Validation Utilities > preparePrContent > should sanitize content with duplication and provide warnings [0.02ms]
(pass) PR Validation Utilities > preparePrContent > should throw error for empty title [0.03ms]
(pass) PR Validation Utilities > preparePrContent > should handle undefined body

src/domain/session/session-db.test.ts:
(pass) SessionDB Functional Implementation > initializeSessionDbState > should initialize state with default values [1.11ms]
(pass) SessionDB Functional Implementation > initializeSessionDbState > should initialize state with custom baseDir [0.02ms]
(pass) SessionDB Functional Implementation > initializeSessionDbState > should handle undefined options parameter without throwing runtime error [0.02ms]
(pass) SessionDB Functional Implementation > initializeSessionDbState > should handle null options parameter without throwing runtime error [0.02ms]
(pass) SessionDB Functional Implementation > initializeSessionDbState > should handle options with undefined baseDir property [0.02ms]
(pass) SessionDB Functional Implementation > listSessionsFn > should return all sessions [0.04ms]
(pass) SessionDB Functional Implementation > getSessionFn > should return the session by name [0.02ms]
(pass) SessionDB Functional Implementation > getSessionFn > should return null if session not found
(pass) SessionDB Functional Implementation > getSessionByTaskIdFn > should return the session by task ID
(pass) SessionDB Functional Implementation > getSessionByTaskIdFn > should return the session when task ID includes #
(pass) SessionDB Functional Implementation > getSessionByTaskIdFn > should return null if no session exists for the task ID
(pass) SessionDB Functional Implementation > addSessionFn > should add a new session to the state [0.01ms]
(pass) SessionDB Functional Implementation > updateSessionFn > should update an existing session [0.02ms]
(pass) SessionDB Functional Implementation > updateSessionFn > should not modify state if session not found [0.01ms]
(pass) SessionDB Functional Implementation > updateSessionFn > should ignore session property in updates
(pass) SessionDB Functional Implementation > deleteSessionFn > should delete an existing session
(pass) SessionDB Functional Implementation > deleteSessionFn > should not modify state if session not found
(pass) SessionDB Functional Implementation > getRepoPathFn > should return the repository path for a session record
(pass) SessionDB Functional Implementation > getRepoPathFn > should handle session records with repoPath already set
(pass) SessionDB Functional Implementation > getRepoPathFn > should throw error for invalid input [0.02ms]
(pass) SessionDB Functional Implementation > getSessionWorkdirFn > should return the working directory for a session
(pass) SessionDB Functional Implementation > getSessionWorkdirFn > should return null if session not found

src/domain/session/session-db-io.test.ts:
(pass) Session DB I/O Functions > readSessionDbFile > should read existing session database file [0.09ms]
(pass) Session DB I/O Functions > readSessionDbFile > should return initialized state when database file doesn't exist [0.01ms]
(pass) Session DB I/O Functions > readSessionDbFile > should handle undefined options parameter without throwing runtime error
(pass) Session DB I/O Functions > readSessionDbFile > should handle null options parameter without throwing runtime error
(pass) Session DB I/O Functions > readSessionDbFile > should handle options with undefined dbPath and baseDir properties
(pass) Session DB I/O Functions > writeSessionsToFile > should write session database file successfully
(pass) Session DB I/O Functions > writeSessionsToFile > should handle undefined options parameter without throwing runtime error [0.18ms]
(pass) Session DB I/O Functions > writeSessionsToFile > should handle null options parameter without throwing runtime error [0.16ms]
(pass) Session DB I/O Functions > writeSessionsToFile > should handle options with undefined dbPath property [0.04ms]

tests/adapters/mcp/session-edit-tools.test.ts:
(pass) Session Edit Tools > session_edit_file > should be registered with correct schema
(pass) Session Edit Tools > session_edit_file > should create new file when it doesn't exist [0.03ms]
132 |         instructions: "Bad edit",
133 |         content: "malicious content",
134 |         createDirs: false,
135 |       });
136 | 
137 |       expect(result.success).toBe(false);
                                   ^
error: expect(received).toBe(expected)

Expected: false
Received: true

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/tests/adapters/mcp/session-edit-tools.test.ts:137:30)
(fail) Session Edit Tools > session_edit_file > should handle errors gracefully
(pass) Session Edit Tools > session_search_replace > should be registered with correct schema
180 |         path: "test.ts",
181 |         search: "oldText",
182 |         replace: "newText",
183 |       });
184 | 
185 |       expect(result.success).toBe(true);
                                   ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/tests/adapters/mcp/session-edit-tools.test.ts:185:30)
(fail) Session Edit Tools > session_search_replace > should replace single occurrence successfully [0.20ms]
208 |         search: "notFound",
209 |         replace: "newText",
210 |       });
211 | 
212 |       expect(result.success).toBe(false);
213 |       expect(result.error).toContain("Search text not found");
                                 ^
error: expect(received).toContain(expected)

Expected to contain: "Search text not found"
Received: "undefined is not an object (evaluating '(await readFile(resolvedPath, \"utf8\")).toString')"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/tests/adapters/mcp/session-edit-tools.test.ts:213:28)
(fail) Session Edit Tools > session_search_replace > should error when text not found [0.09ms]
230 |         search: "oldText",
231 |         replace: "newText",
232 |       });
233 | 
234 |       expect(result.success).toBe(false);
235 |       expect(result.error).toContain("found 2 times");
                                 ^
error: expect(received).toContain(expected)

Expected to contain: "found 2 times"
Received: "undefined is not an object (evaluating '(await readFile(resolvedPath, \"utf8\")).toString')"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/tests/adapters/mcp/session-edit-tools.test.ts:235:28)
(fail) Session Edit Tools > session_search_replace > should error when multiple occurrences found [0.19ms]

tests/adapters/cli/rules.test.ts:
(pass) Rules CLI Core Functionality > readContentFromFileIfExists function > returns input string when path doesn't exist [1.08ms]
(pass) Rules CLI Core Functionality > parseGlobs function > handles comma-separated glob patterns [0.19ms]
(pass) Rules CLI Core Functionality > parseGlobs function > handles JSON array glob patterns [0.02ms]
(pass) Rules CLI Core Functionality > parseGlobs function > returns undefined for undefined input [0.01ms]
(pass) Rules CLI Core Functionality > parseGlobs function > returns undefined for empty string

tests/adapters/cli/cli-rules-integration.test.ts:
(pass) Rules CLI Helper Functions Integration > parseGlobs handles different format patterns
(pass) Rules CLI Helper Functions Integration > readContentFromFileIfExists returns input when not a file [0.08ms]

tests/adapters/cli/session-remaining.test.ts:
(pass) session workspace detection > TASK #168 FIX: should correctly parse session name from path structure
(pass) session workspace detection > TASK #168 FIX: should handle various session name formats [0.06ms]
(pass) session inspect command > placeholder test for inspect command [0.01ms]
(pass) session list operations > placeholder test for list operations
(skip) session pr command > REAL TEST: preparePr should execute switch back command
(pass) session pr command > CORRECT BEHAVIOR: session pr should return to session branch after creating PR [0.18ms]

tests/adapters/cli/session-directory.test.ts:
(pass) session dir command > should return correct session directory for task ID [0.26ms]
(pass) session dir command > should normalize task IDs correctly (with and without # prefix) [0.06ms]
(pass) session dir command > should handle null taskId sessions correctly [0.02ms]
(pass) session dir command > BUG REGRESSION: SQLite filtering implementation [0.09ms]
(pass) session dir command > EDGE CASE: multiple sessions with same task ID but different formats [0.03ms]

tests/adapters/cli/session-update.test.ts:
(pass) session update command > TASK #168 FIX: should auto-detect session name from current directory when not provided [0.52ms]
(pass) session update command > TASK #168 FIX: should automatically register orphaned session when directory exists but not in database [0.15ms]
(pass) session update command > TASK #168 FIX: should handle self-repair failure gracefully [0.26ms]
(pass) session update command > TASK #168 FIX: should extract task ID from session name during self-repair [0.05ms]
(pass) session update command > TASK #168 FIX: should provide clear error message when session workspace directory is missing [0.09ms]
(pass) session update command > TASK #168 FIX: should provide clear error message for uncommitted changes [0.08ms]

tests/adapters/cli/rules-helpers.test.ts:
(pass) Rules CLI Helper Functions > parseGlobs > returns undefined for undefined input
(pass) Rules CLI Helper Functions > parseGlobs > parses comma-separated string into array [0.15ms]
(pass) Rules CLI Helper Functions > parseGlobs > trims whitespace in comma-separated strings
(pass) Rules CLI Helper Functions > parseGlobs > parses JSON array string format
(pass) Rules CLI Helper Functions > parseGlobs > falls back to comma handling if JSON parsing fails
(pass) Rules CLI Helper Functions > parseGlobs > returns undefined for empty string

tests/adapters/cli/session.test.ts:
(pass) Session CLI Commands > session dir command > should return correct session directory for task ID
(pass) Session CLI Commands > session dir command > should normalize task IDs correctly (with and without # prefix)
(pass) Session CLI Commands > session dir command > should handle null taskId sessions correctly
(pass) Session CLI Commands > session dir command > BUG REGRESSION: SQLite filtering implementation [0.05ms]
(pass) Session CLI Commands > session dir command > EDGE CASE: multiple sessions with same task ID but different formats
(pass) Session CLI Commands > session update command > TASK #168 FIX: should auto-detect session name from current directory when not provided [0.19ms]
(pass) Session CLI Commands > session update command > TASK #168 FIX: should automatically register orphaned session when directory exists but not in database [0.27ms]
(pass) Session CLI Commands > session update command > TASK #168 FIX: should handle self-repair failure gracefully [0.24ms]
(pass) Session CLI Commands > session update command > TASK #168 FIX: should extract task ID from session name during self-repair [0.15ms]
(pass) Session CLI Commands > session update command > TASK #168 FIX: should provide clear error message when session workspace directory is missing
(pass) Session CLI Commands > session update command > TASK #168 FIX: should provide clear error message for uncommitted changes
(pass) Session CLI Commands > session workspace detection > TASK #168 FIX: should correctly parse session name from path structure
(pass) Session CLI Commands > session workspace detection > TASK #168 FIX: should handle various session name formats
(pass) Session CLI Commands > session inspect command > placeholder test for inspect command
(pass) Session CLI Commands > session list operations > placeholder test for list operations [0.01ms]
(skip) Session CLI Commands > session pr command > REAL TEST: preparePr should execute switch back command
(pass) Session CLI Commands > session pr command > CORRECT BEHAVIOR: session pr should return to session branch after creating PR [0.15ms]

tests/domain/commands/workspace.commands.test.ts:
(pass) Workspace Domain Methods > isSessionRepository (async workspace checking) > returns true for a path in a session repository
(pass) Workspace Domain Methods > isSessionRepository (async workspace checking) > returns false for a path not in a session repository [0.59ms]
(pass) Workspace Domain Methods > isSessionRepository (async workspace checking) > returns false when an error occurs during check [0.05ms]
(pass) Workspace Domain Methods > isSessionRepository (async workspace checking) > verifies isSessionRepository consistency [0.04ms]
(pass) Workspace Domain Methods > getSessionFromWorkspace (getSessionFromRepo) > gets session information for a valid session repository [0.10ms]
(pass) Workspace Domain Methods > getSessionFromWorkspace (getSessionFromRepo) > returns null for a non-session repository [0.02ms]
(pass) Workspace Domain Methods > getSessionFromWorkspace (getSessionFromRepo) > returns null when session record is not found [0.03ms]
(pass) Workspace Domain Methods > getSessionFromWorkspace (getSessionFromRepo) > verifies getSessionFromRepo is an alias for getSessionFromWorkspace [0.05ms]
(pass) Workspace Domain Methods > getCurrentSession > returns session name when in a session directory [0.04ms]
(pass) Workspace Domain Methods > getCurrentSession > returns null when not in a session directory [0.02ms]
(pass) Workspace Domain Methods > resolveWorkspacePath > returns explicitly provided workspace path [0.02ms]
(pass) Workspace Domain Methods > resolveWorkspacePath > throws error for invalid workspace path [0.04ms]
(pass) Workspace Domain Methods > resolveWorkspacePath > uses sessionRepo if provided (backwards compatibility) [0.02ms]
(pass) Workspace Domain Methods > resolveWorkspacePath > falls back to current directory when no options provided [0.01ms]
(pass) Workspace Domain Methods > resolveWorkspacePath > uses provided sessionWorkspace path
(pass) Workspace Domain Methods > isSessionWorkspace returns true for session workspace > returns true for session workspace [0.03ms]
(pass) Workspace Domain Methods > isSessionWorkspace returns true for session workspace > returns false for non-session workspace

src/domain/session/__tests__/session-pr-body-validation.test.ts:
32 |       // If we get here, the bug still exists (no error thrown)
33 |       throw new Error("Expected ValidationError for new PR without body, but none was thrown");
34 | 
35 |     } catch (error) {
36 |       // After our fix, this should be a ValidationError about missing body
37 |       expect(error).toBeInstanceOf(ValidationError);
                         ^
error: expect(received).toBeInstanceOf(expected)

Expected constructor: [class ValidationError extends MinskyError]
Received value: 54 |       "session pr command must be run from within a session workspace. Use 'minsky session start' first."
55 |     );
56 |   }
57 | 
58 |   // Get current git branch
59 |   const currentBranch = await deps.gitService.getCurrentBranch(currentDir);
                                        ^
TypeError: undefined is not an object (evaluating 'deps.gitService.getCurrentBranch')
      at sessionPrImpl (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/session-pr-operations.ts:59:36)


      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/__tests__/session-pr-body-validation.test.ts:37:21)
(fail) Session PR Body Validation Bug Fix > should throw ValidationError for new PR without body [2.10ms]

src/adapters/shared/commands/__tests__/session-context-resolution.test.ts:
70 | 
71 |       // This demonstrates the problem - domain layer should NOT auto-detect
72 |       expect(result.sessionName).toBe("task#158");
73 | 
74 |       // Force test failure to show this is the problem we need to fix
75 |       expect("Domain layer should not auto-detect session").toBe("This is the architectural problem");
                                                                 ^
error: expect(received).toBe(expected)

Expected: "This is the architectural problem"
Received: "Domain layer should not auto-detect session"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/shared/commands/__tests__/session-context-resolution.test.ts:75:61)
(fail) Session Context Resolution Architecture Issues > üö© PROBLEM: Mixed Concerns in Domain Layer > should NOT require different validation logic based on working directory [0.25ms]
127 |       // üö© ARCHITECTURAL PROBLEM: Same function, different behavior based on cwd
128 |       expect(mainWorkspaceError).toBeInstanceOf(Error);
129 |       expect(sessionWorkspaceResult?.success).toBe(true);
130 | 
131 |       // Force failure to demonstrate this inconsistency is the problem
132 |       expect("Same function should have consistent behavior").toBe("This demonstrates the architecture problem");
                                                                    ^
error: expect(received).toBe(expected)

Expected: "This demonstrates the architecture problem"
Received: "Same function should have consistent behavior"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/shared/commands/__tests__/session-context-resolution.test.ts:132:63)
(fail) Session Context Resolution Architecture Issues > üö© PROBLEM: Mixed Concerns in Domain Layer > should NOT have different behavior based on working directory context [0.21ms]
(pass) Session Context Resolution Architecture Issues > ‚úÖ TARGET: Clean Architecture with Interface-Layer Resolution > should ALWAYS require session parameter in domain layer [0.07ms]
(pass) Session Context Resolution Architecture Issues > ‚úÖ TARGET: Clean Architecture with Interface-Layer Resolution > should handle session resolution in interface adapters [0.04ms]

src/domain/git/commands/__tests__/simple-function.test.ts:
(pass) Git Commands Function Tests > should be able to define simple git command functions
(pass) Git Commands Function Tests > should be able to call git command functions [0.06ms]

src/domain/git/commands/__tests__/integration.test.ts:
(pass) Git Commands Integration Tests > cloneFromParams > should clone repository successfully [179.33ms]
(pass) Git Commands Integration Tests > branchFromParams > should create branch successfully [4.41ms]
(pass) Git Commands Integration Tests > commitChangesFromParams > should commit changes successfully [7.69ms]
(pass) Git Commands Integration Tests > pushFromParams > should push changes successfully [7.77ms]
(pass) Git Commands Integration Tests > mergeFromParams > should merge changes successfully [0.68ms]
(pass) Git Commands Integration Tests > checkoutFromParams > should checkout branch successfully [6.97ms]
(pass) Git Commands Integration Tests > rebaseFromParams > should rebase changes successfully [7.08ms]
(pass) Git Commands Integration Tests > createPullRequestFromParams > should generate PR successfully [70.94ms]
(pass) Git Commands Integration Tests > Command Integration > should execute a complete workflow [183.74ms]

src/domain/git/commands/__tests__/basic-imports.test.ts:
(pass) Git Commands Import Tests > should be able to import git command index [0.09ms]
(pass) Git Commands Import Tests > should be able to import git types [0.36ms]
(pass) Git Commands Import Tests > should be able to import individual command files [0.08ms]
(pass) Git Commands Import Tests > should be able to import subcommands [1.43ms]

3 tests skipped:
(skip) ConflictDetectionService Integration > should detect conflicts in real git repository
(skip) session pr command > REAL TEST: preparePr should execute switch back command
(skip) Session CLI Commands > session pr command > REAL TEST: preparePr should execute switch back command


130 tests failed:
(fail) Session Approve Workflow > successfully approves and merges a PR branch with task ID [4.08ms]
(fail) Session Lookup Bug Reproduction (Task #168) > Scenario 1: Git clone creates directory but fails before completion > should not leave orphaned session directories when git clone fails after mkdir
(fail) Session Lookup Bug Reproduction (Task #168) > Scenario 2: Git branch creation fails after clone succeeds > should not leave orphaned sessions when branch creation fails [0.07ms]
(fail) Session Lookup Bug Reproduction (Task #168) > Scenario 3: Partial cleanup leaves inconsistent state > should handle the case where session directories exist but sessions are not in database [0.09ms]
(fail) Session Lookup Bug Reproduction (Task #168) > Expected behavior after fix > should either succeed completely or fail cleanly with no orphaned directories [0.05ms]
(fail) sessionReviewFromParams > reviews session by name [0.02ms]
(fail) sessionReviewFromParams > reviews session by task ID [0.19ms]
(fail) sessionReviewFromParams > throws ValidationError when no session detected [0.10ms]
(fail) Session Git Clone Bug Regression Test > should not leave orphaned session records when git clone fails [0.14ms]
(fail) Session Git Clone Bug Regression Test > should successfully create session after fixing git directory issues [0.11ms]
(fail) GitService Default Branch Detection > should properly remove origin prefix from branch name [0.20ms]
(fail) GitService Default Branch Detection > should fall back to 'main' when command fails [0.04ms]
(fail) Session Approve > branch cleanup after successful merge > should delete local PR branch and task branch after successful merge [0.66ms]
(fail) Session Approve > branch cleanup after successful merge > should handle branch cleanup failures gracefully without failing the operation [0.30ms]
(fail) Session Approve > branch cleanup after successful merge > should not attempt branch cleanup for already approved sessions [0.25ms]
(fail) Session Approve > branch cleanup after successful merge > should handle case where task branch doesn't exist but PR branch does [0.24ms]
(fail) Session Approve > successfully approves and merges a PR branch [0.29ms]
(fail) Session Approve > detects current session when repo path is provided [0.24ms]
(fail) Session Approve > handles errors during task metadata update [0.42ms]
(fail) Session Approve > merges from local PR branch and handles missing remote branch gracefully [0.37ms]
(fail) Session Approve Branch Cleanup > should delete local PR branch and task branch after successful merge [1.28ms]
(fail) Session Approve Branch Cleanup > should handle branch cleanup failures gracefully without failing the operation [0.55ms]
(fail) Session Approve Branch Cleanup > should not attempt branch cleanup for already approved sessions [0.29ms]
(fail) updateSessionFromParams > throws ResourceNotFoundError when session does not exist [0.10ms]
(fail) updateSessionFromParams > returns session information when update is successful [7.61ms]
(fail) updateSessionFromParams > throws error when workspace is dirty and force is not set
(fail) updateSessionFromParams > updates session when workspace is dirty and force is set [0.09ms]
(fail) updateSessionFromParams > skips stashing when noStash is true [7.97ms]
(fail) updateSessionFromParams > skips pushing when noPush is true [6.81ms]
(fail) updateSessionFromParams > throws error when merge conflicts are detected
(fail) Session PR Command Branch Behavior > should never switch user to PR branch during session pr creation [1.62ms]
(fail) Session PR Command Branch Behavior > should handle branch switch-back failure as critical error [0.10ms]
(fail) Session Auto-Task Creation > should auto-create task when description is provided [1.18ms]
(fail) Session Creation Bug Fix (TDD) > should NOT create session directory if git operations fail [0.99ms]
(fail) interface-agnostic task functions > listTasksFromParams > should list tasks with valid parameters
(fail) interface-agnostic task functions > listTasksFromParams > should filter out DONE tasks when all is false
(fail) interface-agnostic task functions > getTaskFromParams > should get a task with valid parameters [0.87ms]
(fail) interface-agnostic task functions > getTaskFromParams > should normalize non-canonical task IDs (e.g., 'TEST_VALUE' -> '#TEST_VALUE') [0.18ms]
(fail) interface-agnostic task functions > getTaskFromParams > should handle task IDs without leading zeros [0.02ms]
(fail) interface-agnostic task functions > getTaskStatusFromParams > should get task status with valid parameters [0.31ms]
(fail) interface-agnostic task functions > setTaskStatusFromParams > should set task status with valid parameters [0.08ms]
(fail) Prepared Merge Commit Workflow (Task #144) > Expected Correct Behavior - What SHOULD happen per Task #025 > preparePr SHOULD create PR branch from base branch and merge feature branch with --no-ff [0.28ms]
(fail) Prepared Merge Commit Workflow (Task #144) > Expected Correct Behavior - What SHOULD happen per Task #025 > sessionPrFromParams SHOULD call preparePr with correct parameters [0.15ms]
(fail) Session Start Consistency Tests > Git clone failure scenarios > should not add session to database when git clone fails [0.23ms]
(fail) Session Start Consistency Tests > Git clone failure scenarios > should not add session to database when git branch creation fails [0.13ms]
(fail) Session Start Consistency Tests > Git clone failure scenarios > should propagate git errors without modification [0.08ms]
(fail) Session Start Consistency Tests > Error handling edge cases > should prevent session creation when session already exists [0.10ms]
(fail) Session Start Consistency Tests > Error handling edge cases > should prevent session creation when another session exists for same task [0.13ms]
(fail) Session Start Consistency Tests > Critical consistency verification > should never add session record before all git operations complete successfully [0.04ms]
(fail) Session Start Consistency Tests > Critical consistency verification > should successfully add session record only after all operations complete [0.19ms]
(fail) no-unsafe-git-network-operations > valid > await gitPushWithTimeout("origin", "main", { workdir: "/path" }); [18.17ms]
(fail) no-unsafe-git-network-operations > valid > await gitPullWithTimeout("origin", "main", { workdir: "/path" }); [0.30ms]
(fail) no-unsafe-git-network-operations > valid > await gitFetchWithTimeout("origin", "main", { workdir: "/path" }); [0.16ms]
(fail) no-unsafe-git-network-operations > valid > await gitCloneWithTimeout("repo", "/path"); [0.28ms]
(fail) no-unsafe-git-network-operations > valid > await execGitWithTimeout("push", "push origin main", { workdir: "/path" }); [0.41ms]
(fail) no-unsafe-git-network-operations > valid > await execAsync("git status"); [0.16ms]
(fail) no-unsafe-git-network-operations > valid > await execAsync("git branch"); [0.17ms]
(fail) no-unsafe-git-network-operations > valid > await execAsync("git log"); [0.11ms]
(fail) no-unsafe-git-network-operations > valid > await execAsync("git diff"); [0.17ms]
(fail) no-unsafe-git-network-operations > valid > await execAsync("git add ."); [0.14ms]
(fail) no-unsafe-git-network-operations > valid > await execAsync("git commit -m \"message\""); [0.15ms]
(fail) no-unsafe-git-network-operations > valid > await execAsync("npm install"); [0.12ms]
(fail) no-unsafe-git-network-operations > valid > await execAsync("echo hello"); [0.08ms]
(fail) no-unsafe-git-network-operations > valid > await execGitWithTimeout("fetch", "fetch origin", { workdir }); [0.12ms]
(fail) no-unsafe-git-network-operations > invalid > await execAsync("git push origin main"); [0.47ms]
(fail) no-unsafe-git-network-operations > invalid > await execAsync("git pull origin main"); [0.11ms]
(fail) no-unsafe-git-network-operations > invalid > await execAsync("git fetch origin"); [0.19ms]
(fail) no-unsafe-git-network-operations > invalid > await execAsync("git clone https://github.com/user/repo.git /path"); [0.09ms]
(fail) no-unsafe-git-network-operations > invalid > await execAsync("git -C /repo push origin main"); [0.18ms]
(fail) no-unsafe-git-network-operations > invalid > await execAsync("git -C /repo fetch origin"); [0.08ms]
(fail) no-unsafe-git-network-operations > invalid > await execAsync(`git push origin ${branch}`); [0.10ms]
(fail) no-unsafe-git-network-operations > invalid > await execAsync(`git -C ${workdir} fetch ${remote}`); [0.15ms]
(fail) no-unsafe-git-network-operations > invalid > gitPushWithTimeout("origin", "main", { workdir }); [0.11ms]
(fail) no-unsafe-git-network-operations > invalid > execGitWithTimeout("fetch", "fetch origin", { workdir }); [0.16ms]
(fail) no-unsafe-git-network-operations > invalid > await execAsync("git ls-remote origin"); [0.07ms]
(fail) Enhanced Test Utilities > mockFunction > should allow changing implementation [0.12ms]
(fail) Centralized Service Mock Factories > createMockGitService > should return default mock values [0.14ms]
(fail) Centralized Service Mock Factories > createMockTaskService > should return default mock values [0.05ms]
(fail) Centralized Service Mock Factories > createMockTaskService > should allow method overrides [0.18ms]
(fail) SemanticErrorClassifier Integration Tests > Real filesystem scenarios > should correctly classify file not found vs directory not found [0.55ms]
(fail) Custom Configuration System > CustomConfigurationProvider > should handle configuration overrides consistently [0.08ms]
(fail) Custom Configuration System > Configuration Initialization > should support configuration overrides [0.30ms]
(fail) Custom Configuration System > Configuration Factory > should create provider with custom options [0.23ms]
(fail) TaskService JsonFile Integration (Enhanced) > Error Handling > should handle invalid task IDs gracefully
(fail) Enhanced Workspace Integration > Enhanced TaskService Integration > should handle repository-based workspace creation [12.09ms]
(fail) Enhanced JSON Backend > should create backend with explicit workspace path [0.32ms]
(fail) Enhanced JSON Backend > should resolve workspace using current directory [0.05ms]
(fail) Enhanced JSON Backend > should handle database file path configuration [0.04ms]
(fail) Enhanced JSON Backend > should identify as in-tree backend when using special workspace [0.04ms]
(fail) TaskService > createTaskFromTitleAndDescription > integration: should create task with proper spec path using real backend [1.39ms]
(fail) DatabaseIntegrityChecker > File Format Detection > should detect valid SQLite format [1.99ms]
(fail) DatabaseIntegrityChecker > Format Mismatch Detection > should detect SQLite file when JSON expected [0.94ms]
(fail) DatabaseIntegrityChecker > SQLite Integrity Validation > should validate SQLite database integrity [0.35ms]
(fail) DatabaseIntegrityChecker > SQLite Integrity Validation > should detect SQLite database without sessions table [0.48ms]
(fail) DatabaseIntegrityChecker > SQLite Integrity Validation > should detect empty SQLite database [0.39ms]
(fail) DatabaseIntegrityChecker > Integrity Report Formatting > should format report for valid database [0.18ms]
(fail) interface-agnostic task functions > listTasksFromParams > should list tasks with valid parameters [0.89ms]
(fail) interface-agnostic task functions > listTasksFromParams > should filter out DONE tasks when all is false
(fail) interface-agnostic task functions > getTaskFromParams > should get a task with valid parameters [0.51ms]
(fail) interface-agnostic task functions > getTaskFromParams > should normalize non-canonical task IDs (e.g., 'TEST_VALUE' -> '#TEST_VALUE') [0.01ms]
(fail) interface-agnostic task functions > getTaskFromParams > should handle task IDs without leading zeros
(fail) interface-agnostic task functions > getTaskStatusFromParams > should get task status with valid parameters [0.23ms]
(fail) interface-agnostic task functions > setTaskStatusFromParams > should set task status with valid parameters [0.15ms]
(fail) Repository Operations with Dependency Injection > should have cloneWithDependencies method available [0.04ms]
(fail) Session Approve - Bug Regression Tests > Bug #1: Untracked Files Auto-Stash > should stash untracked files that would be overwritten by merge [1.52ms]
(fail) Session Approve - Bug Regression Tests > Bug #2: Fail-Fast on Merge Errors > should fail fast when fast-forward merge is not possible [0.12ms]
(fail) Session Approve - Bug Regression Tests > Bug #2: Fail-Fast on Merge Errors > should continue processing when PR is genuinely already merged [0.18ms]
(fail) Session Approve - Bug Regression Tests > Bug #2: Fail-Fast on Merge Errors > should restore stash even when merge fails [0.08ms]
(fail) Session Approve Task Status Commit > should commit task status update after successful merge [1.43ms]
(fail) Session Approve Task Status Commit > should handle case where no task status update is needed [0.17ms]
(fail) Session Approve Task Status Commit > should skip task status update when task is already DONE [0.16ms]
(fail) Session Approve Task Status Commit > should exit early when task is DONE and PR branch doesn't exist (bug reproduction) [0.10ms]
(fail) Session Edit Tools > session_edit_file > should handle errors gracefully
(fail) Session Edit Tools > session_search_replace > should replace single occurrence successfully [0.20ms]
(fail) Session Edit Tools > session_search_replace > should error when text not found [0.09ms]
(fail) Session Edit Tools > session_search_replace > should error when multiple occurrences found [0.19ms]
(fail) Session PR Body Validation Bug Fix > should throw ValidationError for new PR without body [2.10ms]
(fail) Session Context Resolution Architecture Issues > üö© PROBLEM: Mixed Concerns in Domain Layer > should NOT require different validation logic based on working directory [0.25ms]
(fail) Session Context Resolution Architecture Issues > üö© PROBLEM: Mixed Concerns in Domain Layer > should NOT have different behavior based on working directory context [0.21ms]

 880 pass
 3 skip
 130 fail
 11 errors
 2593 expect() calls
Ran 1013 tests across 129 files. [2.70s]
