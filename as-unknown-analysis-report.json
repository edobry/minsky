{
  "totalCount": 909,
  "byCategory": {
    "error-masking": 604,
    "test-mocking": 110,
    "suspicious": 172,
    "type-bridging": 23
  },
  "byPriority": {
    "high": 604,
    "medium": 224,
    "low": 81
  },
  "matches": [
    {
      "file": "fix-syntax-errors.ts",
      "line": 16,
      "content": "// Fix (this as unknown)?.name = \"ErrorName\"; -> (this as unknown).name = \"ErrorName\";",
      "context": "    const originalContent = content;\n    \n    // Fix (this as unknown)?.name = \"ErrorName\"; -> (this as unknown).name = \"ErrorName\";\n    let fixedContent = content.replace(/\\(this as unknown\\)\\?\\.name = /g, \"(this as unknown).name = \");\n    ",
      "category": "error-masking",
      "priority": "high",
      "reason": "This context masking - likely type error"
    },
    {
      "file": "fix-syntax-errors.ts",
      "line": 17,
      "content": "let fixedContent = content.replace(/\\(this as unknown\\)\\?\\.name = /g, \"(this as unknown).name = \");",
      "context": "    \n    // Fix (this as unknown)?.name = \"ErrorName\"; -> (this as unknown).name = \"ErrorName\";\n    let fixedContent = content.replace(/\\(this as unknown\\)\\?\\.name = /g, \"(this as unknown).name = \");\n    \n    // Fix other potential ?. assignment issues",
      "category": "error-masking",
      "priority": "high",
      "reason": "This context masking - likely type error"
    },
    {
      "file": "fix-syntax-errors.ts",
      "line": 20,
      "content": "fixedContent = fixedContent.replace(/\\(this as unknown\\)\\?\\.([a-zA-Z_][a-zA-Z0-9_]*) = /g, \"(this as unknown).$1 = \");",
      "context": "    \n    // Fix other potential ?. assignment issues\n    fixedContent = fixedContent.replace(/\\(this as unknown\\)\\?\\.([a-zA-Z_][a-zA-Z0-9_]*) = /g, \"(this as unknown).$1 = \");\n    \n    if (fixedContent !== originalContent) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "This context masking - likely type error"
    },
    {
      "file": "fix-syntax-errors.ts",
      "line": 24,
      "content": "const fixes = (originalContent.match(/\\(this as unknown\\)\\?\\./g) || []).length;",
      "context": "    if (fixedContent !== originalContent) {\n      writeFileSync(file, fixedContent);\n      const fixes = (originalContent.match(/\\(this as unknown\\)\\?\\./g) || []).length;\n      console.log(`✅ Fixed ${fixes} syntax errors in ${file}`);\n      totalFixes += fixes;",
      "category": "error-masking",
      "priority": "high",
      "reason": "This context masking - likely type error"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 64,
      "content": "return null as unknown;",
      "context": "      createTestFile(\"return-statements.ts\", `\n        function test1(): string | null {\n          return null as unknown;\n        }\n",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 68,
      "content": "return undefined as unknown;",
      "context": "\n        function test2(): string | undefined {\n          return undefined as unknown;\n        }\n",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 73,
      "content": "return null as unknown;",
      "context": "        function test3(): any {\n          if (condition) {\n            return null as unknown;\n          }\n          return undefined as unknown;",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 75,
      "content": "return undefined as unknown;",
      "context": "            return null as unknown;\n          }\n          return undefined as unknown;\n        }\n      `);",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 84,
      "content": "expect(result).not.toContain(\"as unknown\");",
      "context": "      expect(result).toContain(\"return null;\");\n      expect(result).toContain(\"return undefined;\");\n      expect(result).not.toContain(\"as unknown\");\n      expect((fixer as any).metrics.issuesFixed).toBeGreaterThan(0);\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 90,
      "content": "const value1 = null as unknown;",
      "context": "    test(\"should fix null/undefined assignment patterns\", async () => {\n      createTestFile(\"null-undefined.ts\", `\n        const value1 = null as unknown;\n        const value2 = undefined as unknown;\n        let value3: any = null as unknown;",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 91,
      "content": "const value2 = undefined as unknown;",
      "context": "      createTestFile(\"null-undefined.ts\", `\n        const value1 = null as unknown;\n        const value2 = undefined as unknown;\n        let value3: any = null as unknown;\n        let value4: any = undefined as unknown;",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 92,
      "content": "let value3: any = null as unknown;",
      "context": "        const value1 = null as unknown;\n        const value2 = undefined as unknown;\n        let value3: any = null as unknown;\n        let value4: any = undefined as unknown;\n        ",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 93,
      "content": "let value4: any = undefined as unknown;",
      "context": "        const value2 = undefined as unknown;\n        let value3: any = null as unknown;\n        let value4: any = undefined as unknown;\n        \n        const obj = {",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 96,
      "content": "prop1: null as unknown,",
      "context": "        \n        const obj = {\n          prop1: null as unknown,\n          prop2: undefined as unknown\n        };",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 97,
      "content": "prop2: undefined as unknown",
      "context": "        const obj = {\n          prop1: null as unknown,\n          prop2: undefined as unknown\n        };\n      `);",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 110,
      "content": "expect(result).not.toContain(\"as unknown\");",
      "context": "      expect(result).toContain(\"prop1: null,\");\n      expect(result).toContain(\"prop2: undefined\");\n      expect(result).not.toContain(\"as unknown\");\n    });\n  });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 118,
      "content": "return [...(state as unknown).sessions];",
      "context": "      createTestFile(\"state-access.ts\", `\n        function listSessions(state: any): any[] {\n          return [...(state as unknown).sessions];\n        }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 122,
      "content": "return (state.sessions as unknown).find(s => s.name === sessionName);",
      "context": "\n        function getSession(state: any, sessionName: string): any {\n          return (state.sessions as unknown).find(s => s.name === sessionName);\n        }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 126,
      "content": "return (sessions as unknown).find(s => s.id === id);",
      "context": "\n        function getSessionById(sessions: any[], id: string): any {\n          return (sessions as unknown).find(s => s.id === id);\n        }\n      `);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 136,
      "content": "expect(result).not.toContain(\"as unknown\");",
      "context": "      expect(result).toContain(\"return state.sessions.find(s => s.name === sessionName);\");\n      expect(result).toContain(\"return sessions.find(s => s.id === id);\");\n      expect(result).not.toContain(\"as unknown\");\n    });\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 148,
      "content": "return await (this.sessionProvider as unknown).getSession(name);",
      "context": "\n          async getSession(name: string) {\n            return await (this.sessionProvider as unknown).getSession(name);\n          }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 152,
      "content": "return (this.pathResolver as unknown).getRelativePathFromSession(dir, path);",
      "context": "\n          getPath(dir: string, path: string) {\n            return (this.pathResolver as unknown).getRelativePathFromSession(dir, path);\n          }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 156,
      "content": "return (this.workspaceBackend as unknown).readFile(dir, path);",
      "context": "\n          readFile(dir: string, path: string) {\n            return (this.workspaceBackend as unknown).readFile(dir, path);\n          }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 160,
      "content": "return (this.config as unknown).path;",
      "context": "\n          getConfigPath() {\n            return (this.config as unknown).path;\n          }\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 172,
      "content": "expect(result).not.toContain(\"as unknown\");",
      "context": "      expect(result).toContain(\"return this.workspaceBackend.readFile(dir, path);\");\n      expect(result).toContain(\"return this.config.path;\");\n      expect(result).not.toContain(\"as unknown\");\n    });\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 178,
      "content": "const found = (items as unknown).find(item => item.id === 1);",
      "context": "      createTestFile(\"array-methods.ts\", `\n        function processItems(items: any[]): any {\n          const found = (items as unknown).find(item => item.id === 1);\n          const length = (items as unknown).length;\n          (items as unknown).push({ id: 2 });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 179,
      "content": "const length = (items as unknown).length;",
      "context": "        function processItems(items: any[]): any {\n          const found = (items as unknown).find(item => item.id === 1);\n          const length = (items as unknown).length;\n          (items as unknown).push({ id: 2 });\n          const filtered = (items as unknown).filter(item => item.active);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 180,
      "content": "(items as unknown).push({ id: 2 });",
      "context": "          const found = (items as unknown).find(item => item.id === 1);\n          const length = (items as unknown).length;\n          (items as unknown).push({ id: 2 });\n          const filtered = (items as unknown).filter(item => item.active);\n          const mapped = (items as unknown).map(item => item.name);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 181,
      "content": "const filtered = (items as unknown).filter(item => item.active);",
      "context": "          const length = (items as unknown).length;\n          (items as unknown).push({ id: 2 });\n          const filtered = (items as unknown).filter(item => item.active);\n          const mapped = (items as unknown).map(item => item.name);\n          const index = (items as unknown).findIndex(item => item.id === 3);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 182,
      "content": "const mapped = (items as unknown).map(item => item.name);",
      "context": "          (items as unknown).push({ id: 2 });\n          const filtered = (items as unknown).filter(item => item.active);\n          const mapped = (items as unknown).map(item => item.name);\n          const index = (items as unknown).findIndex(item => item.id === 3);\n          (items as unknown).splice(0, 1);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 183,
      "content": "const index = (items as unknown).findIndex(item => item.id === 3);",
      "context": "          const filtered = (items as unknown).filter(item => item.active);\n          const mapped = (items as unknown).map(item => item.name);\n          const index = (items as unknown).findIndex(item => item.id === 3);\n          (items as unknown).splice(0, 1);\n          ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 184,
      "content": "(items as unknown).splice(0, 1);",
      "context": "          const mapped = (items as unknown).map(item => item.name);\n          const index = (items as unknown).findIndex(item => item.id === 3);\n          (items as unknown).splice(0, 1);\n          \n          return { found, length, filtered, mapped, index };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 190,
      "content": "const keys = (Object as unknown).keys(obj);",
      "context": "\n        function processObject(obj: any): any {\n          const keys = (Object as unknown).keys(obj);\n          const values = (Object as unknown).values(obj);\n          const entries = (Object as unknown).entries(obj);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 191,
      "content": "const values = (Object as unknown).values(obj);",
      "context": "        function processObject(obj: any): any {\n          const keys = (Object as unknown).keys(obj);\n          const values = (Object as unknown).values(obj);\n          const entries = (Object as unknown).entries(obj);\n          ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 192,
      "content": "const entries = (Object as unknown).entries(obj);",
      "context": "          const keys = (Object as unknown).keys(obj);\n          const values = (Object as unknown).values(obj);\n          const entries = (Object as unknown).entries(obj);\n          \n          return { keys, values, entries };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 208,
      "content": "expect(result).not.toContain(\"as unknown\");",
      "context": "      expect(result).toContain(\"const index = items.findIndex(item => item.id === 3);\");\n      expect(result).toContain(\"items.splice(0, 1);\");\n      expect(result).not.toContain(\"as unknown\");\n    });\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 216,
      "content": "(this as unknown).name = \"CustomError\";",
      "context": "          constructor(message: string) {\n            super(message);\n            (this as unknown).name = \"CustomError\";\n          }\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 223,
      "content": "(this as unknown).name = \"SessionError\";",
      "context": "          constructor(sessionId: string) {\n            super(\\`Session error: \\${sessionId}\\`);\n            (this as unknown).name = \"SessionError\";\n          }\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 233,
      "content": "expect(result).not.toContain(\"as unknown\");",
      "context": "      expect(result).toContain(\"this.name = \\\"CustomError\\\";\");\n      expect(result).toContain(\"this.name = \\\"SessionError\\\";\");\n      expect(result).not.toContain(\"as unknown\");\n    });\n  });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 240,
      "content": "const homeDir = (process.env as unknown).HOME;",
      "context": "    test(\"should fix environment variable access\", async () => {\n      createTestFile(\"env-vars.ts\", `\n        const homeDir = (process.env as unknown).HOME;\n        const nodeEnv = (process.env as unknown).NODE_ENV;\n        const customVar = (process.env as unknown).CUSTOM_VAR;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 241,
      "content": "const nodeEnv = (process.env as unknown).NODE_ENV;",
      "context": "      createTestFile(\"env-vars.ts\", `\n        const homeDir = (process.env as unknown).HOME;\n        const nodeEnv = (process.env as unknown).NODE_ENV;\n        const customVar = (process.env as unknown).CUSTOM_VAR;\n      `);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 242,
      "content": "const customVar = (process.env as unknown).CUSTOM_VAR;",
      "context": "        const homeDir = (process.env as unknown).HOME;\n        const nodeEnv = (process.env as unknown).NODE_ENV;\n        const customVar = (process.env as unknown).CUSTOM_VAR;\n      `);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 251,
      "content": "expect(result).not.toContain(\"as unknown\");",
      "context": "      expect(result).toContain(\"const nodeEnv = process.env.NODE_ENV;\");\n      expect(result).toContain(\"const customVar = process.env.CUSTOM_VAR;\");\n      expect(result).not.toContain(\"as unknown\");\n    });\n  });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 260,
      "content": "return null as unknown;",
      "context": "        // Critical patterns\n        function criticalTest() {\n          return null as unknown;\n          const val = undefined as unknown;\n        }",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 261,
      "content": "const val = undefined as unknown;",
      "context": "        function criticalTest() {\n          return null as unknown;\n          const val = undefined as unknown;\n        }\n",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 266,
      "content": "const sessions = (state as unknown).sessions;",
      "context": "        // High priority patterns\n        function highPriorityTest(state: any, service: any) {\n          const sessions = (state as unknown).sessions;\n          const result = (service.provider as unknown).getSession(\"test\");\n          const length = (sessions as unknown).length;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 267,
      "content": "const result = (service.provider as unknown).getSession(\"test\");",
      "context": "        function highPriorityTest(state: any, service: any) {\n          const sessions = (state as unknown).sessions;\n          const result = (service.provider as unknown).getSession(\"test\");\n          const length = (sessions as unknown).length;\n          (this as unknown).name = \"TestError\";",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 268,
      "content": "const length = (sessions as unknown).length;",
      "context": "          const sessions = (state as unknown).sessions;\n          const result = (service.provider as unknown).getSession(\"test\");\n          const length = (sessions as unknown).length;\n          (this as unknown).name = \"TestError\";\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 269,
      "content": "(this as unknown).name = \"TestError\";",
      "context": "          const result = (service.provider as unknown).getSession(\"test\");\n          const length = (sessions as unknown).length;\n          (this as unknown).name = \"TestError\";\n        }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 274,
      "content": "const home = (process.env as unknown).HOME;",
      "context": "        // Medium priority patterns\n        function mediumPriorityTest() {\n          const home = (process.env as unknown).HOME;\n        }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 279,
      "content": "const complex = (someComplexExpression() as unknown).someProperty;",
      "context": "        // Unmatched patterns (should be flagged for manual review)\n        function unmatchedTest() {\n          const complex = (someComplexExpression() as unknown).someProperty;\n        }\n      `);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 307,
      "content": "sessions: (state as unknown).sessions,",
      "context": "        function complexTest() {\n          const result = {\n            sessions: (state as unknown).sessions,\n            count: (state as unknown).sessions.length,\n            first: (state as unknown).sessions.find(s => s.active)",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 308,
      "content": "count: (state as unknown).sessions.length,",
      "context": "          const result = {\n            sessions: (state as unknown).sessions,\n            count: (state as unknown).sessions.length,\n            first: (state as unknown).sessions.find(s => s.active)\n          };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 309,
      "content": "first: (state as unknown).sessions.find(s => s.active)",
      "context": "            sessions: (state as unknown).sessions,\n            count: (state as unknown).sessions.length,\n            first: (state as unknown).sessions.find(s => s.active)\n          };\n          ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 312,
      "content": "const chained = (obj as unknown).prop1.prop2.prop3;",
      "context": "          };\n          \n          const chained = (obj as unknown).prop1.prop2.prop3;\n          const multiLine = (veryLongVariableName as unknown)\n            .someMethod()",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 313,
      "content": "const multiLine = (veryLongVariableName as unknown)",
      "context": "          \n          const chained = (obj as unknown).prop1.prop2.prop3;\n          const multiLine = (veryLongVariableName as unknown)\n            .someMethod()\n            .anotherMethod();",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 332,
      "content": "return null as unknown;",
      "context": "      createTestFile(\"syntax-error.ts\", `\n        function broken() {\n          return null as unknown;\n          // Missing closing brace\n      `);",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 352,
      "content": "test(\"should handle files with no as unknown patterns\", async () => {",
      "context": "    });\n\n    test(\"should handle files with no as unknown patterns\", async () => {\n      createTestFile(\"no-patterns.ts\", `\n        function clean() {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 380,
      "content": "const value = null as unknown; // inline comment",
      "context": "        function test() {\n          // This is another comment\n          const value = null as unknown; // inline comment\n          \n          return value;",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 401,
      "content": "return null as unknown;",
      "context": "      const originalContent = `\n        function test() {\n          return null as unknown;\n        }\n      `;",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 420,
      "content": "const a = null as unknown;",
      "context": "      createTestFile(\"metrics-test.ts\", `\n        function test() {\n          const a = null as unknown;\n          const b = undefined as unknown;\n          const c = (state as unknown).sessions;",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 421,
      "content": "const b = undefined as unknown;",
      "context": "        function test() {\n          const a = null as unknown;\n          const b = undefined as unknown;\n          const c = (state as unknown).sessions;\n          const d = (items as unknown).length;",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 422,
      "content": "const c = (state as unknown).sessions;",
      "context": "          const a = null as unknown;\n          const b = undefined as unknown;\n          const c = (state as unknown).sessions;\n          const d = (items as unknown).length;\n          return null as unknown;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 423,
      "content": "const d = (items as unknown).length;",
      "context": "          const b = undefined as unknown;\n          const c = (state as unknown).sessions;\n          const d = (items as unknown).length;\n          return null as unknown;\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 424,
      "content": "return null as unknown;",
      "context": "          const c = (state as unknown).sessions;\n          const d = (items as unknown).length;\n          return null as unknown;\n        }\n      `);",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 440,
      "content": "const a = null as unknown;",
      "context": "      createTestFile(\"success-rate.ts\", `\n        function fixablePatterns() {\n          const a = null as unknown;\n          const b = (state as unknown).sessions;\n          return undefined as unknown;",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 441,
      "content": "const b = (state as unknown).sessions;",
      "context": "        function fixablePatterns() {\n          const a = null as unknown;\n          const b = (state as unknown).sessions;\n          return undefined as unknown;\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 442,
      "content": "return undefined as unknown;",
      "context": "          const a = null as unknown;\n          const b = (state as unknown).sessions;\n          return undefined as unknown;\n        }\n      `);",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 469,
      "content": "return (this.config as unknown).path;",
      "context": "\n          getPath(): string {\n            return (this.config as unknown).path;\n          }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 473,
      "content": "return (this.config as unknown).timeout;",
      "context": "\n          getTimeout(): number {\n            return (this.config as unknown).timeout;\n          }\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 483,
      "content": "expect(result).not.toContain(\"as unknown\");",
      "context": "      expect(result).toContain(\"return this.config.path;\");\n      expect(result).toContain(\"return this.config.timeout;\");\n      expect(result).not.toContain(\"as unknown\");\n      \n      // Should maintain interface and class structure",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "analyze-as-unknown.ts",
      "line": 29,
      "content": "console.log(\"🔍 Scanning for \\\"as unknown\\\" assertions...\");",
      "context": "\n  async analyzeCodebase(): Promise<AnalysisReport> {\n    console.log(\"🔍 Scanning for \\\"as unknown\\\" assertions...\");\n    \n    // Find all TypeScript files",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "analyze-as-unknown.ts",
      "line": 52,
      "content": "if (line.includes(\"as unknown\")) {",
      "context": "      \n      lines.forEach((line, index) => {\n        if (line.includes(\"as unknown\")) {\n          const match = this.categorizeAssertion(filepath, index + 1, line, lines);\n          if (match) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "analyze-as-unknown.ts",
      "line": 89,
      "content": "} else if (trimmed.includes(\"undefined as unknown\") ||",
      "context": "        priority = \"low\";\n        reason = \"Test mocking - may be legitimate for test setup\";\n      } else if (trimmed.includes(\"undefined as unknown\") || \n                 trimmed.includes(\"null as unknown\")) {\n        category = \"test-mocking\";",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "analyze-as-unknown.ts",
      "line": 90,
      "content": "trimmed.includes(\"null as unknown\")) {",
      "context": "        reason = \"Test mocking - may be legitimate for test setup\";\n      } else if (trimmed.includes(\"undefined as unknown\") || \n                 trimmed.includes(\"null as unknown\")) {\n        category = \"test-mocking\";\n        priority = \"medium\";",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "analyze-as-unknown.ts",
      "line": 101,
      "content": "if (trimmed.includes(\"undefined as unknown\") ||",
      "context": "    } else {\n      // Production code patterns\n      if (trimmed.includes(\"undefined as unknown\") || \n          trimmed.includes(\"null as unknown\")) {\n        category = \"error-masking\";",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "analyze-as-unknown.ts",
      "line": 102,
      "content": "trimmed.includes(\"null as unknown\")) {",
      "context": "      // Production code patterns\n      if (trimmed.includes(\"undefined as unknown\") || \n          trimmed.includes(\"null as unknown\")) {\n        category = \"error-masking\";\n        priority = \"high\";",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "analyze-as-unknown.ts",
      "line": 111,
      "content": "} else if (trimmed.includes(\"this as unknown\")) {",
      "context": "        priority = \"medium\";\n        reason = \"JSON parsing - may need proper type guards\";\n      } else if (trimmed.includes(\"this as unknown\")) {\n        category = \"error-masking\";\n        priority = \"high\";",
      "category": "error-masking",
      "priority": "high",
      "reason": "This context masking - likely type error"
    },
    {
      "file": "analyze-as-unknown.ts",
      "line": 116,
      "content": "trimmed.includes(\"as unknown\") && trimmed.includes(\".\")) {",
      "context": "        reason = \"This context masking - likely type error\";\n      } else if (trimmed.includes(\"(\") && trimmed.includes(\")\") && \n                 trimmed.includes(\"as unknown\") && trimmed.includes(\".\")) {\n        category = \"error-masking\";\n        priority = \"high\";",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "analyze-as-unknown.ts",
      "line": 194,
      "content": "console.log(`Total \"as unknown\" assertions found: ${report.totalCount}`);",
      "context": "  console.log(\"\\n📊 ANALYSIS REPORT\");\n  console.log(\"==================\");\n  console.log(`Total \"as unknown\" assertions found: ${report.totalCount}`);\n  \n  console.log(\"\\n📂 By Category:\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "analyze-as-unknown.ts",
      "line": 222,
      "content": "return `# \"as unknown\" Analysis Report",
      "context": "\nfunction generateMarkdownSummary(report: AnalysisReport): string {\n  return `# \"as unknown\" Analysis Report\n\n## Summary",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 19,
      "content": "console.log(\"🔧 Starting automated as unknown fixes...\");",
      "context": "\n  async fixCodebase(): Promise<void> {\n    console.log(\"🔧 Starting automated as unknown fixes...\");\n    \n    // Find all TypeScript files",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 80,
      "content": "return (content.match(/as unknown/g) || []).length;",
      "context": "\n  private countAsUnknown(content: string): number {\n    return (content.match(/as unknown/g) || []).length;\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 87,
      "content": "pattern: /\\(state as unknown\\)\\.sessions/g,",
      "context": "      // State and session object access\n      {\n        pattern: /\\(state as unknown\\)\\.sessions/g,\n        replacement: \"state.sessions\",\n        description: \"Fixed state.sessions access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 92,
      "content": "pattern: /\\(state\\.sessions as unknown\\)/g,",
      "context": "      },\n      {\n        pattern: /\\(state\\.sessions as unknown\\)/g,\n        replacement: \"state.sessions\",\n        description: \"Fixed state.sessions wrapper\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 97,
      "content": "pattern: /\\(s as unknown\\)\\.session/g,",
      "context": "      },\n      {\n        pattern: /\\(s as unknown\\)\\.session/g,\n        replacement: \"s.session\",\n        description: \"Fixed session record access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 102,
      "content": "pattern: /\\(s as unknown\\)\\.taskId/g,",
      "context": "      },\n      {\n        pattern: /\\(s as unknown\\)\\.taskId/g,\n        replacement: \"s.taskId\",\n        description: \"Fixed taskId access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 107,
      "content": "pattern: /\\(session as unknown\\)\\.session/g,",
      "context": "      },\n      {\n        pattern: /\\(session as unknown\\)\\.session/g,\n        replacement: \"session.session\",\n        description: \"Fixed session property access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 112,
      "content": "pattern: /\\(session as unknown\\)\\.taskId/g,",
      "context": "      },\n      {\n        pattern: /\\(session as unknown\\)\\.taskId/g,\n        replacement: \"session.taskId\",\n        description: \"Fixed session taskId access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 117,
      "content": "pattern: /\\(workspace as unknown\\)\\.workspaceDir/g,",
      "context": "      },\n      {\n        pattern: /\\(workspace as unknown\\)\\.workspaceDir/g,\n        replacement: \"workspace.workspaceDir\",\n        description: \"Fixed workspace directory access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 122,
      "content": "pattern: /\\(workspace as unknown\\)\\.sessionName/g,",
      "context": "      },\n      {\n        pattern: /\\(workspace as unknown\\)\\.sessionName/g,\n        replacement: \"workspace.sessionName\",\n        description: \"Fixed workspace session name access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 128,
      "content": "pattern: /\\(this\\.config as unknown\\)\\.path/g,",
      "context": "      // Config and environment access\n      {\n        pattern: /\\(this\\.config as unknown\\)\\.path/g,\n        replacement: \"this.config.path\",\n        description: \"Fixed config path access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 133,
      "content": "pattern: /\\(process\\.env as unknown\\)\\.([A-Z_]+)/g,",
      "context": "      },\n      {\n        pattern: /\\(process\\.env as unknown\\)\\.([A-Z_]+)/g,\n        replacement: \"process.env.$1\",\n        description: \"Fixed environment variable access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 139,
      "content": "pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.length/g,",
      "context": "      // Array and object method access\n      {\n        pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.length/g,\n        replacement: \"$1.length\",\n        description: \"Fixed array length access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 144,
      "content": "pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.push/g,",
      "context": "      },\n      {\n        pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.push/g,\n        replacement: \"$1.push\",\n        description: \"Fixed array push access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 149,
      "content": "pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.find/g,",
      "context": "      },\n      {\n        pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.find/g,\n        replacement: \"$1.find\",\n        description: \"Fixed array find access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 154,
      "content": "pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.findIndex/g,",
      "context": "      },\n      {\n        pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.findIndex/g,\n        replacement: \"$1.findIndex\",\n        description: \"Fixed array findIndex access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 159,
      "content": "pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.splice/g,",
      "context": "      },\n      {\n        pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.splice/g,\n        replacement: \"$1.splice\",\n        description: \"Fixed array splice access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 164,
      "content": "pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.filter/g,",
      "context": "      },\n      {\n        pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.filter/g,\n        replacement: \"$1.filter\",\n        description: \"Fixed array filter access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 169,
      "content": "pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.map/g,",
      "context": "      },\n      {\n        pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.map/g,\n        replacement: \"$1.map\",\n        description: \"Fixed array map access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 174,
      "content": "pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.split/g,",
      "context": "      },\n      {\n        pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.split/g,\n        replacement: \"$1.split\",\n        description: \"Fixed string split access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 179,
      "content": "pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.trim/g,",
      "context": "      },\n      {\n        pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.trim/g,\n        replacement: \"$1.trim\",\n        description: \"Fixed string trim access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 184,
      "content": "pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.replace/g,",
      "context": "      },\n      {\n        pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.replace/g,\n        replacement: \"$1.replace\",\n        description: \"Fixed string replace access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 205,
      "content": "pattern: /\\[\\.\\.\\.\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.([a-zA-Z_][a-zA-Z0-9_]*)\\]/g,",
      "context": "    const patterns = [\n      {\n        pattern: /\\[\\.\\.\\.\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.([a-zA-Z_][a-zA-Z0-9_]*)\\]/g,\n        replacement: \"[...$1.$2]\",\n        description: \"Fixed array spread with property access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 210,
      "content": "pattern: /\\[\\.\\.\\.\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\]/g,",
      "context": "      },\n      {\n        pattern: /\\[\\.\\.\\.\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\]/g,\n        replacement: \"[...$1]\",\n        description: \"Fixed array spread\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 231,
      "content": "pattern: /\\(this\\.sessionProvider as unknown\\)\\.getSession/g,",
      "context": "    const patterns = [\n      {\n        pattern: /\\(this\\.sessionProvider as unknown\\)\\.getSession/g,\n        replacement: \"this.sessionProvider.getSession\",\n        description: \"Fixed sessionProvider.getSession call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 236,
      "content": "pattern: /\\(this\\.sessionProvider as unknown\\)\\.getSessionByTaskId/g,",
      "context": "      },\n      {\n        pattern: /\\(this\\.sessionProvider as unknown\\)\\.getSessionByTaskId/g,\n        replacement: \"this.sessionProvider.getSessionByTaskId\",\n        description: \"Fixed sessionProvider.getSessionByTaskId call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 241,
      "content": "pattern: /\\(this\\.sessionProvider as unknown\\)\\.listSessions/g,",
      "context": "      },\n      {\n        pattern: /\\(this\\.sessionProvider as unknown\\)\\.listSessions/g,\n        replacement: \"this.sessionProvider.listSessions\",\n        description: \"Fixed sessionProvider.listSessions call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 246,
      "content": "pattern: /\\(this\\.sessionProvider as unknown\\)\\.getSessionWorkdir/g,",
      "context": "      },\n      {\n        pattern: /\\(this\\.sessionProvider as unknown\\)\\.getSessionWorkdir/g,\n        replacement: \"this.sessionProvider.getSessionWorkdir\",\n        description: \"Fixed sessionProvider.getSessionWorkdir call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 251,
      "content": "pattern: /\\(this\\.pathResolver as unknown\\)\\.getRelativePathFromSession/g,",
      "context": "      },\n      {\n        pattern: /\\(this\\.pathResolver as unknown\\)\\.getRelativePathFromSession/g,\n        replacement: \"this.pathResolver.getRelativePathFromSession\",\n        description: \"Fixed pathResolver.getRelativePathFromSession call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 256,
      "content": "pattern: /\\(this\\.pathResolver as unknown\\)\\.validateAndResolvePath/g,",
      "context": "      },\n      {\n        pattern: /\\(this\\.pathResolver as unknown\\)\\.validateAndResolvePath/g,\n        replacement: \"this.pathResolver.validateAndResolvePath\",\n        description: \"Fixed pathResolver.validateAndResolvePath call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 261,
      "content": "pattern: /\\(this\\.workspaceBackend as unknown\\)\\.readFile/g,",
      "context": "      },\n      {\n        pattern: /\\(this\\.workspaceBackend as unknown\\)\\.readFile/g,\n        replacement: \"this.workspaceBackend.readFile\",\n        description: \"Fixed workspaceBackend.readFile call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 266,
      "content": "pattern: /\\(this\\.workspaceBackend as unknown\\)\\.writeFile/g,",
      "context": "      },\n      {\n        pattern: /\\(this\\.workspaceBackend as unknown\\)\\.writeFile/g,\n        replacement: \"this.workspaceBackend.writeFile\",\n        description: \"Fixed workspaceBackend.writeFile call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 271,
      "content": "pattern: /\\(this\\.workspaceBackend as unknown\\)\\.deleteFile/g,",
      "context": "      },\n      {\n        pattern: /\\(this\\.workspaceBackend as unknown\\)\\.deleteFile/g,\n        replacement: \"this.workspaceBackend.deleteFile\",\n        description: \"Fixed workspaceBackend.deleteFile call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 276,
      "content": "pattern: /\\(this\\.workspaceBackend as unknown\\)\\.listDirectory/g,",
      "context": "      },\n      {\n        pattern: /\\(this\\.workspaceBackend as unknown\\)\\.listDirectory/g,\n        replacement: \"this.workspaceBackend.listDirectory\",\n        description: \"Fixed workspaceBackend.listDirectory call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 281,
      "content": "pattern: /\\(this\\.workspaceBackend as unknown\\)\\.exists/g,",
      "context": "      },\n      {\n        pattern: /\\(this\\.workspaceBackend as unknown\\)\\.exists/g,\n        replacement: \"this.workspaceBackend.exists\",\n        description: \"Fixed workspaceBackend.exists call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 286,
      "content": "pattern: /\\(this\\.workspaceBackend as unknown\\)\\.createDirectory/g,",
      "context": "      },\n      {\n        pattern: /\\(this\\.workspaceBackend as unknown\\)\\.createDirectory/g,\n        replacement: \"this.workspaceBackend.createDirectory\",\n        description: \"Fixed workspaceBackend.createDirectory call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 307,
      "content": "pattern: /return null as unknown;/g,",
      "context": "    const patterns = [\n      {\n        pattern: /return null as unknown;/g,\n        replacement: \"return null;\",\n        description: \"Fixed return null statement\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 312,
      "content": "pattern: /return undefined as unknown;/g,",
      "context": "      },\n      {\n        pattern: /return undefined as unknown;/g,\n        replacement: \"return undefined;\",\n        description: \"Fixed return undefined statement\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 333,
      "content": "pattern: /\\(this as unknown\\)\\.name = \"([^\"]+)\";/g,",
      "context": "    const patterns = [\n      {\n        pattern: /\\(this as unknown\\)\\.name = \"([^\"]+)\";/g,\n        replacement: \"this.name = \\\"$1\\\";\",\n        description: \"Fixed this.name assignment\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "This context masking - likely type error"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 354,
      "content": "pattern: /: undefined as unknown/g,",
      "context": "    const patterns = [\n      {\n        pattern: /: undefined as unknown/g,\n        replacement: \": undefined\",\n        description: \"Fixed undefined type annotation\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 359,
      "content": "pattern: /\\? undefined as unknown/g,",
      "context": "      },\n      {\n        pattern: /\\? undefined as unknown/g,\n        replacement: \"? undefined\",\n        description: \"Fixed ternary undefined\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 364,
      "content": "pattern: /undefined as unknown,/g,",
      "context": "      },\n      {\n        pattern: /undefined as unknown,/g,\n        replacement: \"undefined,\",\n        description: \"Fixed undefined in parameter list\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 380,
      "content": "/null as unknown/g,",
      "context": "    // Track remaining dangerous patterns\n    const dangerousPatterns = [\n      /null as unknown/g,\n      /undefined as unknown/g\n    ];",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 381,
      "content": "/undefined as unknown/g",
      "context": "    const dangerousPatterns = [\n      /null as unknown/g,\n      /undefined as unknown/g\n    ];\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 6,
      "content": "* Systematically removes excessive 'as unknown' type assertions throughout the codebase",
      "context": " * AS-UNKNOWN AST Codemod for Task #280\n * \n * Systematically removes excessive 'as unknown' type assertions throughout the codebase\n * to improve TypeScript effectiveness and reduce technical debt.\n * ",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 10,
      "content": "* The codebase contains 2,728 'as unknown' assertions, with 2,461 classified as high priority.",
      "context": " * \n * PROBLEM STATEMENT:\n * The codebase contains 2,728 'as unknown' assertions, with 2,461 classified as high priority.\n * These assertions mask real type errors, reduce TypeScript effectiveness, and create technical debt.\n * ",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 22,
      "content": "*    BEFORE: (state as unknown).sessions",
      "context": " * \n * 1. Property Access Patterns (HIGH PRIORITY)\n *    BEFORE: (state as unknown).sessions\n *    AFTER:  state.sessions\n *    ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 25,
      "content": "*    BEFORE: (this.sessionProvider as unknown).getSession(name)",
      "context": " *    AFTER:  state.sessions\n *    \n *    BEFORE: (this.sessionProvider as unknown).getSession(name)\n *    AFTER:  this.sessionProvider.getSession(name)\n * ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 29,
      "content": "*    BEFORE: (sessions as unknown).find(s => s.id === id)",
      "context": " * \n * 2. Array/Object Method Access (HIGH PRIORITY)\n *    BEFORE: (sessions as unknown).find(s => s.id === id)\n *    AFTER:  sessions.find(s => s.id === id)\n * ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 33,
      "content": "*    BEFORE: return null as unknown;",
      "context": " * \n * 3. Return Statement Patterns (CRITICAL PRIORITY)\n *    BEFORE: return null as unknown;\n *    AFTER:  return null;\n * ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 37,
      "content": "*    BEFORE: const result = undefined as unknown;",
      "context": " * \n * 4. Null/Undefined Patterns (CRITICAL PRIORITY)\n *    BEFORE: const result = undefined as unknown;\n *    AFTER:  const result = undefined;\n * ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 41,
      "content": "*    BEFORE: (this as unknown).name = \"ErrorName\";",
      "context": " * \n * 5. This Context Patterns (HIGH PRIORITY)\n *    BEFORE: (this as unknown).name = \"ErrorName\";\n *    AFTER:  this.name = \"ErrorName\";\n * ",
      "category": "error-masking",
      "priority": "high",
      "reason": "This context masking - likely type error"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 70,
      "content": "* - Task #280: Cleanup excessive 'as unknown' assertions",
      "context": " * \n * RELATED TASKS:\n * - Task #280: Cleanup excessive 'as unknown' assertions\n * - Task #276: Test suite optimization (identified the problem)\n * - Task #271: Risk-aware type cast fixing (similar patterns)",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 291,
      "content": "description: \"Remove 'as unknown' from return statements with null/undefined\",",
      "context": "      {\n        name: \"Return Statement Null/Undefined\",\n        description: \"Remove 'as unknown' from return statements with null/undefined\",\n        riskLevel: \"critical\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 296,
      "content": "(text.includes(\"null as unknown\") || text.includes(\"undefined as unknown\"));",
      "context": "          const text = node.getText();\n          return context.includes(\"return\") && \n                 (text.includes(\"null as unknown\") || text.includes(\"undefined as unknown\"));\n        },\n        canAutoFix: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 304,
      "content": "description: \"Remove 'as unknown' from null/undefined assignments\",",
      "context": "      {\n        name: \"Null/Undefined Assignment\",\n        description: \"Remove 'as unknown' from null/undefined assignments\",\n        riskLevel: \"critical\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 308,
      "content": "return text === \"null as unknown\" || text === \"undefined as unknown\";",
      "context": "        detector: (node: AsExpression, context: string) => {\n          const text = node.getText();\n          return text === \"null as unknown\" || text === \"undefined as unknown\";\n        },\n        canAutoFix: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 316,
      "content": "description: \"Remove 'as unknown' from state/session property access\",",
      "context": "      {\n        name: \"State/Session Property Access\",\n        description: \"Remove 'as unknown' from state/session property access\",\n        riskLevel: \"high\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 320,
      "content": "return text.includes(\"state as unknown\") ||",
      "context": "        detector: (node: AsExpression, context: string) => {\n          const text = node.getText();\n          return text.includes(\"state as unknown\") || \n                 text.includes(\"session as unknown\") ||\n                 text.includes(\"sessions as unknown\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 321,
      "content": "text.includes(\"session as unknown\") ||",
      "context": "          const text = node.getText();\n          return text.includes(\"state as unknown\") || \n                 text.includes(\"session as unknown\") ||\n                 text.includes(\"sessions as unknown\");\n        },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 322,
      "content": "text.includes(\"sessions as unknown\");",
      "context": "          return text.includes(\"state as unknown\") || \n                 text.includes(\"session as unknown\") ||\n                 text.includes(\"sessions as unknown\");\n        },\n        canAutoFix: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 330,
      "content": "description: \"Remove 'as unknown' from service method calls\",",
      "context": "      {\n        name: \"Service Method Calls\",\n        description: \"Remove 'as unknown' from service method calls\",\n        riskLevel: \"high\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 334,
      "content": "return text.includes(\"this.sessionProvider as unknown\") ||",
      "context": "        detector: (node: AsExpression, context: string) => {\n          const text = node.getText();\n          return text.includes(\"this.sessionProvider as unknown\") ||\n                 text.includes(\"this.pathResolver as unknown\") ||\n                 text.includes(\"this.workspaceBackend as unknown\") ||",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 335,
      "content": "text.includes(\"this.pathResolver as unknown\") ||",
      "context": "          const text = node.getText();\n          return text.includes(\"this.sessionProvider as unknown\") ||\n                 text.includes(\"this.pathResolver as unknown\") ||\n                 text.includes(\"this.workspaceBackend as unknown\") ||\n                 text.includes(\"this.config as unknown\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 336,
      "content": "text.includes(\"this.workspaceBackend as unknown\") ||",
      "context": "          return text.includes(\"this.sessionProvider as unknown\") ||\n                 text.includes(\"this.pathResolver as unknown\") ||\n                 text.includes(\"this.workspaceBackend as unknown\") ||\n                 text.includes(\"this.config as unknown\");\n        },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 337,
      "content": "text.includes(\"this.config as unknown\");",
      "context": "                 text.includes(\"this.pathResolver as unknown\") ||\n                 text.includes(\"this.workspaceBackend as unknown\") ||\n                 text.includes(\"this.config as unknown\");\n        },\n        canAutoFix: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 345,
      "content": "description: \"Remove 'as unknown' from array/object method calls\",",
      "context": "      {\n        name: \"Array/Object Method Access\",\n        description: \"Remove 'as unknown' from array/object method calls\",\n        riskLevel: \"high\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 382,
      "content": "description: \"Remove 'as unknown' from this context property access\",",
      "context": "      {\n        name: \"This Context Access\",\n        description: \"Remove 'as unknown' from this context property access\",\n        riskLevel: \"high\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 386,
      "content": "return text.includes(\"this as unknown\");",
      "context": "        detector: (node: AsExpression, context: string) => {\n          const text = node.getText();\n          return text.includes(\"this as unknown\");\n        },\n        canAutoFix: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "This context masking - likely type error"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 394,
      "content": "description: \"Remove 'as unknown' from process.env access\",",
      "context": "      {\n        name: \"Environment Variable Access\",\n        description: \"Remove 'as unknown' from process.env access\",\n        riskLevel: \"medium\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 398,
      "content": "return text.includes(\"process.env as unknown\");",
      "context": "        detector: (node: AsExpression, context: string) => {\n          const text = node.getText();\n          return text.includes(\"process.env as unknown\");\n        },\n        canAutoFix: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 406,
      "content": "description: \"Remove 'as unknown' from method calls on external objects\",",
      "context": "      {\n        name: \"External Object Method Calls\",\n        description: \"Remove 'as unknown' from method calls on external objects\",\n        riskLevel: \"high\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 420,
      "content": "// Match patterns like (format as unknown).timestamp(), (z.string() as unknown).optional()",
      "context": "          if (parent && parent.getKind() === SyntaxKind.PropertyAccessExpression) {\n            const text = node.getText();\n            // Match patterns like (format as unknown).timestamp(), (z.string() as unknown).optional()\n            return text.includes(\"format\") || text.includes(\"z.\") || text.includes(\"Date\") || \n                   text.includes(\"Math\") || text.includes(\"JSON\") || text.includes(\"Object\") ||",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 433,
      "content": "description: \"Remove 'as unknown' from property access on constants\",",
      "context": "      {\n        name: \"Constant Property Access\",\n        description: \"Remove 'as unknown' from property access on constants\",\n        riskLevel: \"high\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 447,
      "content": "// Match patterns like (descriptions as unknown).SESSION_DESCRIPTION",
      "context": "          if (parent && parent.getKind() === SyntaxKind.PropertyAccessExpression) {\n            const text = node.getText();\n            // Match patterns like (descriptions as unknown).SESSION_DESCRIPTION\n            return text.includes(\"descriptions\") || text.includes(\"constants\") || \n                   text.includes(\"config\") || text.includes(\"options\") || text.includes(\"params\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 459,
      "content": "description: \"Remove 'as unknown' from object property access\",",
      "context": "      {\n        name: \"Object Property Access\",\n        description: \"Remove 'as unknown' from object property access\",\n        riskLevel: \"high\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 473,
      "content": "// Match patterns like (logInfo as unknown).message, (result as unknown).status",
      "context": "          if (parent && parent.getKind() === SyntaxKind.PropertyAccessExpression) {\n            const text = node.getText();\n            // Match patterns like (logInfo as unknown).message, (result as unknown).status\n            return !text.includes(\"process.env\") && // Already handled above\n                   !text.includes(\"format\") && // Already handled above",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 488,
      "content": "this.log(\"🔍 Analyzing 'as unknown' assertions...\");",
      "context": "\n  protected findIssues(): void {\n    this.log(\"🔍 Analyzing 'as unknown' assertions...\");\n    \n    const sourceFiles = this.project.getSourceFiles();",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 502,
      "content": "// Check if it's 'as unknown'",
      "context": "          const typeNode = asExpression.getType();\n          \n          // Check if it's 'as unknown'\n          if (asExpression.getText().includes(\"as unknown\")) {\n            this.analyzeAsUnknownExpression(asExpression, filePath);",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 503,
      "content": "if (asExpression.getText().includes(\"as unknown\")) {",
      "context": "          \n          // Check if it's 'as unknown'\n          if (asExpression.getText().includes(\"as unknown\")) {\n            this.analyzeAsUnknownExpression(asExpression, filePath);\n          }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 510,
      "content": "this.log(`📊 Found ${this.asUnknownIssues.length} 'as unknown' assertions`);",
      "context": "    }\n\n    this.log(`📊 Found ${this.asUnknownIssues.length} 'as unknown' assertions`);\n    this.metrics.issuesFound = this.asUnknownIssues.length;\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 528,
      "content": "description: \"Unmatched 'as unknown' pattern - needs manual review\",",
      "context": "        line,\n        column,\n        description: \"Unmatched 'as unknown' pattern - needs manual review\",\n        context,\n        type: \"as_unknown_unmatched\",",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 552,
      "content": "suggestedFix: \"Extract expression from 'as unknown' assertion\"",
      "context": "      transformationType: this.getTransformationType(pattern.name),\n      canAutoFix: pattern.canAutoFix,\n      suggestedFix: \"Extract expression from 'as unknown' assertion\"\n    });\n  }",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 575,
      "content": "this.log(\"🔧 Applying 'as unknown' transformations...\");",
      "context": "\n  protected fixIssues(): void {\n    this.log(\"🔧 Applying 'as unknown' transformations...\");\n    \n    const autoFixableIssues = this.asUnknownIssues.filter(issue => issue.canAutoFix);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 641,
      "content": "// For 'as unknown' expressions, we want to extract the expression part",
      "context": "  private transformAsExpression(node: AsExpression, pattern: TransformationPattern): boolean {\n    try {\n      // For 'as unknown' expressions, we want to extract the expression part\n      // and replace the entire AsExpression with just the expression\n      let expression = node.getExpression();",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 646,
      "content": "// This handles cases like (state as unknown) -> state instead of (state)",
      "context": "      \n      // If the expression is parenthesized, extract the inner expression\n      // This handles cases like (state as unknown) -> state instead of (state)\n      if (expression.getKind() === SyntaxKind.ParenthesizedExpression) {\n        const parenthesizedExpr = expression as ParenthesizedExpression;",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/fix-explicit-any-types-proven.ts",
      "line": 96,
      "content": "return match.replace(\"as any\", \"as unknown\");",
      "context": "    console.log(`  Fixed JSON.parse cast: any → unknown`);\n    changes++;\n    return match.replace(\"as any\", \"as unknown\");\n  });\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/fix-explicit-any-types-proven.ts",
      "line": 135,
      "content": "to: \"as unknown[]\",",
      "context": "    {\n      from: /\\bas\\s*any\\s*\\[\\]/g,\n      to: \"as unknown[]\",\n      description: \"as any[] → as unknown[]\",\n    },",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/fix-explicit-any-types-proven.ts",
      "line": 136,
      "content": "description: \"as any[] → as unknown[]\",",
      "context": "      from: /\\bas\\s*any\\s*\\[\\]/g,\n      to: \"as unknown[]\",\n      description: \"as any[] → as unknown[]\",\n    },\n    {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 82,
      "content": "return match.replace('as any', 'as unknown');",
      "context": "          if (match.includes('Bun.argv')) return 'process.argv';\n          if (match.includes('process.env')) return 'process.env';\n          return match.replace('as any', 'as unknown');\n        },\n        requiresManualReview: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 99,
      "content": "return match.replace('as any', 'as unknown');",
      "context": "            return match.replace('as any', '').replace('(', '').replace(')', '');\n          }\n          return match.replace('as any', 'as unknown');\n        },\n        requiresManualReview: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 160,
      "content": "return match.replace('as any', 'as unknown');",
      "context": "            return match.replace(' as any', '');\n          }\n          return match.replace('as any', 'as unknown');\n        },\n        requiresManualReview: false",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 173,
      "content": "replacement: 'as unknown',",
      "context": "          /\\([^)]+Config as any\\)/g\n        ],\n        replacement: 'as unknown',\n        requiresManualReview: false\n      },",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 200,
      "content": "replacement: 'as unknown',",
      "context": "          /\\(bun\\.expect as any\\)/g\n        ],\n        replacement: 'as unknown',\n        requiresManualReview: false\n      },",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 212,
      "content": "replacement: 'as unknown',",
      "context": "          /as any\\b/g\n        ],\n        replacement: 'as unknown',\n        requiresManualReview: false\n      }",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 251,
      "content": "// Find all 'as unknown' patterns that might be inappropriate",
      "context": "      }\n      \n      // Find all 'as unknown' patterns that might be inappropriate\n      const asUnknownMatches = content.matchAll(/\\bas unknown\\b/g);\n      for (const match of asUnknownMatches) {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 252,
      "content": "const asUnknownMatches = content.matchAll(/\\bas unknown\\b/g);",
      "context": "      \n      // Find all 'as unknown' patterns that might be inappropriate\n      const asUnknownMatches = content.matchAll(/\\bas unknown\\b/g);\n      for (const match of asUnknownMatches) {\n        const position = sourceFile.getLineAndColumnAtPos(match.index!);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 257,
      "content": "// Only flag as unknown casts that might benefit from more specific types",
      "context": "        const context = this.getContextAroundMatch(content, match.index!, 50);\n        \n        // Only flag as unknown casts that might benefit from more specific types\n        if (this.shouldReviewUnknownCast(context)) {\n          this.castIssues.push({",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 323,
      "content": "suggestedFix: 'as unknown',",
      "context": "        riskLevel: 'low',\n        pattern: 'test_infrastructure',\n        suggestedFix: 'as unknown',\n        requiresManualReview: false\n      };",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 332,
      "content": "suggestedFix: 'as unknown',",
      "context": "        riskLevel: 'high',\n        pattern: 'domain_logic',\n        suggestedFix: 'as unknown',\n        requiresManualReview: true\n      };",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 340,
      "content": "suggestedFix: 'as unknown',",
      "context": "      riskLevel: 'medium',\n      pattern: 'general_infrastructure',\n      suggestedFix: 'as unknown',\n      requiresManualReview: false\n    };",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 346,
      "content": "// Flag 'as unknown' casts that might benefit from more specific types",
      "context": "\n  private shouldReviewUnknownCast(context: string): boolean {\n    // Flag 'as unknown' casts that might benefit from more specific types\n    const reviewPatterns = [\n      /Promise\\.resolve\\([^)]+\\) as unknown/,",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 348,
      "content": "/Promise\\.resolve\\([^)]+\\) as unknown/,",
      "context": "    // Flag 'as unknown' casts that might benefit from more specific types\n    const reviewPatterns = [\n      /Promise\\.resolve\\([^)]+\\) as unknown/,\n      /JSON\\.parse\\([^)]+\\) as unknown/,\n      /Object\\.keys\\([^)]+\\) as unknown/",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 349,
      "content": "/JSON\\.parse\\([^)]+\\) as unknown/,",
      "context": "    const reviewPatterns = [\n      /Promise\\.resolve\\([^)]+\\) as unknown/,\n      /JSON\\.parse\\([^)]+\\) as unknown/,\n      /Object\\.keys\\([^)]+\\) as unknown/\n    ];",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 350,
      "content": "/Object\\.keys\\([^)]+\\) as unknown/",
      "context": "      /Promise\\.resolve\\([^)]+\\) as unknown/,\n      /JSON\\.parse\\([^)]+\\) as unknown/,\n      /Object\\.keys\\([^)]+\\) as unknown/\n    ];\n    ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/explicit-any-types-fixer-consolidated.ts",
      "line": 282,
      "content": "replacement: (match) => match.replace(\"as any\", \"as unknown\"),",
      "context": "        description: \"JSON.parse() cast as any\",\n        pattern: /JSON\\.parse\\([^)]+\\)\\s*as\\s*any/g,\n        replacement: (match) => match.replace(\"as any\", \"as unknown\"),\n        category: \"api-patterns\"\n      },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/explicit-any-types-fixer-consolidated.ts",
      "line": 298,
      "content": "replacement: \"as unknown[]\",",
      "context": "        description: \"Type assertion as any[]\",\n        pattern: /\\bas\\s*any\\s*\\[\\]/g,\n        replacement: \"as unknown[]\",\n        category: \"type-assertions\"\n      },",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 6,
      "content": "* Systematically removes excessive 'as unknown' type assertions throughout the codebase",
      "context": " * AS-UNKNOWN AST Codemod for Task #280\n * \n * Systematically removes excessive 'as unknown' type assertions throughout the codebase\n * to improve TypeScript effectiveness and reduce technical debt.\n * ",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 10,
      "content": "* The codebase contains 2,728 'as unknown' assertions, with 2,461 classified as high priority.",
      "context": " * \n * PROBLEM STATEMENT:\n * The codebase contains 2,728 'as unknown' assertions, with 2,461 classified as high priority.\n * These assertions mask real type errors, reduce TypeScript effectiveness, and create technical debt.\n * ",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 22,
      "content": "*    BEFORE: (state as unknown).sessions",
      "context": " * \n * 1. Property Access Patterns (HIGH PRIORITY)\n *    BEFORE: (state as unknown).sessions\n *    AFTER:  state.sessions\n *    ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 25,
      "content": "*    BEFORE: (this.sessionProvider as unknown).getSession(name)",
      "context": " *    AFTER:  state.sessions\n *    \n *    BEFORE: (this.sessionProvider as unknown).getSession(name)\n *    AFTER:  this.sessionProvider.getSession(name)\n * ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 29,
      "content": "*    BEFORE: (sessions as unknown).find(s => s.id === id)",
      "context": " * \n * 2. Array/Object Method Access (HIGH PRIORITY)\n *    BEFORE: (sessions as unknown).find(s => s.id === id)\n *    AFTER:  sessions.find(s => s.id === id)\n * ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 33,
      "content": "*    BEFORE: return null as unknown;",
      "context": " * \n * 3. Return Statement Patterns (CRITICAL PRIORITY)\n *    BEFORE: return null as unknown;\n *    AFTER:  return null;\n * ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 37,
      "content": "*    BEFORE: const result = undefined as unknown;",
      "context": " * \n * 4. Null/Undefined Patterns (CRITICAL PRIORITY)\n *    BEFORE: const result = undefined as unknown;\n *    AFTER:  const result = undefined;\n * ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 41,
      "content": "*    BEFORE: (this as unknown).name = \"ErrorName\";",
      "context": " * \n * 5. This Context Patterns (HIGH PRIORITY)\n *    BEFORE: (this as unknown).name = \"ErrorName\";\n *    AFTER:  this.name = \"ErrorName\";\n * ",
      "category": "error-masking",
      "priority": "high",
      "reason": "This context masking - likely type error"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 70,
      "content": "* - Task #280: Cleanup excessive 'as unknown' assertions",
      "context": " * \n * RELATED TASKS:\n * - Task #280: Cleanup excessive 'as unknown' assertions\n * - Task #276: Test suite optimization (identified the problem)\n * - Task #271: Risk-aware type cast fixing (similar patterns)",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 291,
      "content": "description: \"Remove 'as unknown' from return statements with null/undefined\",",
      "context": "      {\n        name: \"Return Statement Null/Undefined\",\n        description: \"Remove 'as unknown' from return statements with null/undefined\",\n        riskLevel: \"critical\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 296,
      "content": "(text.includes(\"null as unknown\") || text.includes(\"undefined as unknown\"));",
      "context": "          const text = node.getText();\n          return context.includes(\"return\") && \n                 (text.includes(\"null as unknown\") || text.includes(\"undefined as unknown\"));\n        },\n        canAutoFix: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 304,
      "content": "description: \"Remove 'as unknown' from null/undefined assignments\",",
      "context": "      {\n        name: \"Null/Undefined Assignment\",\n        description: \"Remove 'as unknown' from null/undefined assignments\",\n        riskLevel: \"critical\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 308,
      "content": "return text === \"null as unknown\" || text === \"undefined as unknown\";",
      "context": "        detector: (node: AsExpression, context: string) => {\n          const text = node.getText();\n          return text === \"null as unknown\" || text === \"undefined as unknown\";\n        },\n        canAutoFix: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 316,
      "content": "description: \"Remove 'as unknown' from state/session property access\",",
      "context": "      {\n        name: \"State/Session Property Access\",\n        description: \"Remove 'as unknown' from state/session property access\",\n        riskLevel: \"high\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 320,
      "content": "return text.includes(\"state as unknown\") ||",
      "context": "        detector: (node: AsExpression, context: string) => {\n          const text = node.getText();\n          return text.includes(\"state as unknown\") || \n                 text.includes(\"session as unknown\") ||\n                 text.includes(\"sessions as unknown\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 321,
      "content": "text.includes(\"session as unknown\") ||",
      "context": "          const text = node.getText();\n          return text.includes(\"state as unknown\") || \n                 text.includes(\"session as unknown\") ||\n                 text.includes(\"sessions as unknown\");\n        },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 322,
      "content": "text.includes(\"sessions as unknown\");",
      "context": "          return text.includes(\"state as unknown\") || \n                 text.includes(\"session as unknown\") ||\n                 text.includes(\"sessions as unknown\");\n        },\n        canAutoFix: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 330,
      "content": "description: \"Remove 'as unknown' from service method calls\",",
      "context": "      {\n        name: \"Service Method Calls\",\n        description: \"Remove 'as unknown' from service method calls\",\n        riskLevel: \"high\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 334,
      "content": "return text.includes(\"this.sessionProvider as unknown\") ||",
      "context": "        detector: (node: AsExpression, context: string) => {\n          const text = node.getText();\n          return text.includes(\"this.sessionProvider as unknown\") ||\n                 text.includes(\"this.pathResolver as unknown\") ||\n                 text.includes(\"this.workspaceBackend as unknown\") ||",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 335,
      "content": "text.includes(\"this.pathResolver as unknown\") ||",
      "context": "          const text = node.getText();\n          return text.includes(\"this.sessionProvider as unknown\") ||\n                 text.includes(\"this.pathResolver as unknown\") ||\n                 text.includes(\"this.workspaceBackend as unknown\") ||\n                 text.includes(\"this.config as unknown\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 336,
      "content": "text.includes(\"this.workspaceBackend as unknown\") ||",
      "context": "          return text.includes(\"this.sessionProvider as unknown\") ||\n                 text.includes(\"this.pathResolver as unknown\") ||\n                 text.includes(\"this.workspaceBackend as unknown\") ||\n                 text.includes(\"this.config as unknown\");\n        },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 337,
      "content": "text.includes(\"this.config as unknown\");",
      "context": "                 text.includes(\"this.pathResolver as unknown\") ||\n                 text.includes(\"this.workspaceBackend as unknown\") ||\n                 text.includes(\"this.config as unknown\");\n        },\n        canAutoFix: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 345,
      "content": "description: \"Remove 'as unknown' from array/object method calls\",",
      "context": "      {\n        name: \"Array/Object Method Access\",\n        description: \"Remove 'as unknown' from array/object method calls\",\n        riskLevel: \"high\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 382,
      "content": "description: \"Remove 'as unknown' from this context property access\",",
      "context": "      {\n        name: \"This Context Access\",\n        description: \"Remove 'as unknown' from this context property access\",\n        riskLevel: \"high\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 386,
      "content": "return text.includes(\"this as unknown\");",
      "context": "        detector: (node: AsExpression, context: string) => {\n          const text = node.getText();\n          return text.includes(\"this as unknown\");\n        },\n        canAutoFix: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "This context masking - likely type error"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 394,
      "content": "description: \"Remove 'as unknown' from process.env access\",",
      "context": "      {\n        name: \"Environment Variable Access\",\n        description: \"Remove 'as unknown' from process.env access\",\n        riskLevel: \"medium\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 398,
      "content": "return text.includes(\"process.env as unknown\");",
      "context": "        detector: (node: AsExpression, context: string) => {\n          const text = node.getText();\n          return text.includes(\"process.env as unknown\");\n        },\n        canAutoFix: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 406,
      "content": "description: \"Remove 'as unknown' from method calls on external objects\",",
      "context": "      {\n        name: \"External Object Method Calls\",\n        description: \"Remove 'as unknown' from method calls on external objects\",\n        riskLevel: \"high\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 420,
      "content": "// Match patterns like (format as unknown).timestamp(), (z.string() as unknown).optional()",
      "context": "          if (parent && parent.getKind() === SyntaxKind.PropertyAccessExpression) {\n            const text = node.getText();\n            // Match patterns like (format as unknown).timestamp(), (z.string() as unknown).optional()\n            return text.includes(\"format\") || text.includes(\"z.\") || text.includes(\"Date\") || \n                   text.includes(\"Math\") || text.includes(\"JSON\") || text.includes(\"Object\") ||",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 433,
      "content": "description: \"Remove 'as unknown' from property access on constants\",",
      "context": "      {\n        name: \"Constant Property Access\",\n        description: \"Remove 'as unknown' from property access on constants\",\n        riskLevel: \"high\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 447,
      "content": "// Match patterns like (descriptions as unknown).SESSION_DESCRIPTION",
      "context": "          if (parent && parent.getKind() === SyntaxKind.PropertyAccessExpression) {\n            const text = node.getText();\n            // Match patterns like (descriptions as unknown).SESSION_DESCRIPTION\n            return text.includes(\"descriptions\") || text.includes(\"constants\") || \n                   text.includes(\"config\") || text.includes(\"options\") || text.includes(\"params\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 459,
      "content": "description: \"Remove 'as unknown' from object property access\",",
      "context": "      {\n        name: \"Object Property Access\",\n        description: \"Remove 'as unknown' from object property access\",\n        riskLevel: \"high\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 473,
      "content": "// Match patterns like (logInfo as unknown).message, (result as unknown).status",
      "context": "          if (parent && parent.getKind() === SyntaxKind.PropertyAccessExpression) {\n            const text = node.getText();\n            // Match patterns like (logInfo as unknown).message, (result as unknown).status\n            return !text.includes(\"process.env\") && // Already handled above\n                   !text.includes(\"format\") && // Already handled above",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 488,
      "content": "this.log(\"🔍 Analyzing 'as unknown' assertions...\");",
      "context": "\n  protected findIssues(): void {\n    this.log(\"🔍 Analyzing 'as unknown' assertions...\");\n    \n    const sourceFiles = this.project.getSourceFiles();",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 502,
      "content": "// Check if it's 'as unknown'",
      "context": "          const typeNode = asExpression.getType();\n          \n          // Check if it's 'as unknown'\n          if (asExpression.getText().includes(\"as unknown\")) {\n            this.analyzeAsUnknownExpression(asExpression, filePath);",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 503,
      "content": "if (asExpression.getText().includes(\"as unknown\")) {",
      "context": "          \n          // Check if it's 'as unknown'\n          if (asExpression.getText().includes(\"as unknown\")) {\n            this.analyzeAsUnknownExpression(asExpression, filePath);\n          }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 510,
      "content": "this.log(`📊 Found ${this.asUnknownIssues.length} 'as unknown' assertions`);",
      "context": "    }\n\n    this.log(`📊 Found ${this.asUnknownIssues.length} 'as unknown' assertions`);\n    this.metrics.issuesFound = this.asUnknownIssues.length;\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 528,
      "content": "description: \"Unmatched 'as unknown' pattern - needs manual review\",",
      "context": "        line,\n        column,\n        description: \"Unmatched 'as unknown' pattern - needs manual review\",\n        context,\n        type: \"as_unknown_unmatched\",",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 552,
      "content": "suggestedFix: \"Extract expression from 'as unknown' assertion\"",
      "context": "      transformationType: this.getTransformationType(pattern.name),\n      canAutoFix: pattern.canAutoFix,\n      suggestedFix: \"Extract expression from 'as unknown' assertion\"\n    });\n  }",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 575,
      "content": "this.log(\"🔧 Applying 'as unknown' transformations...\");",
      "context": "\n  protected fixIssues(): void {\n    this.log(\"🔧 Applying 'as unknown' transformations...\");\n    \n    const autoFixableIssues = this.asUnknownIssues.filter(issue => issue.canAutoFix);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 641,
      "content": "// For 'as unknown' expressions, we want to extract the expression part",
      "context": "  private transformAsExpression(node: AsExpression, pattern: TransformationPattern): boolean {\n    try {\n      // For 'as unknown' expressions, we want to extract the expression part\n      // and replace the entire AsExpression with just the expression\n      let expression = node.getExpression();",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 646,
      "content": "// This handles cases like (state as unknown) -> state instead of (state)",
      "context": "      \n      // If the expression is parenthesized, extract the inner expression\n      // This handles cases like (state as unknown) -> state instead of (state)\n      if (expression.getKind() === SyntaxKind.ParenthesizedExpression) {\n        const parenthesizedExpr = expression as ParenthesizedExpression;",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/errors/enhanced-error-templates.ts",
      "line": 57,
      "content": "return buildErrorMessage(template, context as unknown);",
      "context": "  };\n\n  return buildErrorMessage(template, context as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/errors/enhanced-error-templates.ts",
      "line": 118,
      "content": "return buildErrorMessage(template, context as unknown);",
      "context": "  };\n\n  return buildErrorMessage(template, context as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/errors/enhanced-error-templates.ts",
      "line": 367,
      "content": "const requirements = (configurationRequirements as unknown)[backend] || [];",
      "context": "  const backendsList = availableBackends.length > 0 \n    ? availableBackends.map(backend => {\n      const requirements = (configurationRequirements as unknown)[backend] || [];\n      const reqText = requirements.length > 0 ? ` (requires: ${requirements.join(\", \")})` : \"\";\n      return `• ${backend}${reqText}`;",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 120,
      "content": "parts.push(formatContextInfo(context as unknown));",
      "context": "  if (context && context?.length > 0) {\n    parts.push(\"\");\n    parts.push(formatContextInfo(context as unknown));\n  }\n  ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 147,
      "content": "return buildErrorMessage(template, context as unknown);",
      "context": "  };\n  \n  return buildErrorMessage(template, context as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 168,
      "content": "return buildErrorMessage(template, context as unknown);",
      "context": "  };\n  \n  return buildErrorMessage(template, context as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 192,
      "content": "return buildErrorMessage(template, context as unknown);",
      "context": "  };\n  \n  return buildErrorMessage(template, context as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 216,
      "content": "return buildErrorMessage(template, context as unknown);",
      "context": "  };\n  \n  return buildErrorMessage(template, context as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 299,
      "content": "title: (config as unknown)!.title,",
      "context": "  const config = templates[errorType];\n  const template: ErrorTemplate = {\n    title: (config as unknown)!.title,\n    description: (config as unknown)!.description,\n    sections: [",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 300,
      "content": "description: (config as unknown)!.description,",
      "context": "  const template: ErrorTemplate = {\n    title: (config as unknown)!.title,\n    description: (config as unknown)!.description,\n    sections: [\n      {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 305,
      "content": "content: formatCommandSuggestions((config as unknown)!.suggestions)",
      "context": "        title: \"What you can do:\",\n        emoji: ErrorEmojis.SUGGESTION,\n        content: formatCommandSuggestions((config as unknown)!.suggestions)\n      }\n    ]",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 310,
      "content": "return buildErrorMessage(template, context as unknown);",
      "context": "  };\n  \n  return buildErrorMessage(template, context as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 320,
      "content": "return createSessionErrorMessage(sessionName, SessionErrorType.NOT_FOUND, context as unknown);",
      "context": "  context?: ContextInfo[]\n): string {\n  return createSessionErrorMessage(sessionName, SessionErrorType.NOT_FOUND, context as unknown);\n}\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 330,
      "content": "return createSessionErrorMessage(sessionName, SessionErrorType.ALREADY_EXISTS, context as unknown);",
      "context": "  context?: ContextInfo[]\n): string {\n  return createSessionErrorMessage(sessionName, SessionErrorType.ALREADY_EXISTS, context as unknown);\n}\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 340,
      "content": "return createSessionErrorMessage(sessionName, SessionErrorType.INVALID, context as unknown);",
      "context": "  context?: ContextInfo[]\n): string {\n  return createSessionErrorMessage(sessionName, SessionErrorType.INVALID, context as unknown);\n}\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 449,
      "content": "return buildErrorMessage(template, context as unknown);",
      "context": "  };\n  \n  return buildErrorMessage(template, context as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/errors/base-errors.ts",
      "line": 23,
      "content": "this.name = (this.constructor as unknown).name;",
      "context": "  ) {\n    super(message);\n    this.name = (this.constructor as unknown).name;\n\n    // Capture stack trace, excluding constructor call from it",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/session-start-consistency.test.ts",
      "line": 106,
      "content": "(fs.existsSync as unknown).mockReturnValue(true); // Directory exists",
      "context": "    it(\"should clean up existing directory before starting\", async () => {\n      // Arrange\n      (fs.existsSync as unknown).mockReturnValue(true); // Directory exists\n      const params = {\n        task: \"160\",",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-start-consistency.test.ts",
      "line": 194,
      "content": "(fs.existsSync as unknown).mockReturnValue(true); // Directory exists after failed clone",
      "context": "      const gitError = new Error(\"git clone failed\");\n      mockGitService.clone.mockRejectedValue(gitError);\n      (fs.existsSync as unknown).mockReturnValue(true); // Directory exists after failed clone\n\n      const params = {",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-start-consistency.test.ts",
      "line": 257,
      "content": "(fs.existsSync as unknown).mockReturnValue(true);",
      "context": "    it(\"should handle directory cleanup failure gracefully\", async () => {\n      // Arrange\n      (fs.existsSync as unknown).mockReturnValue(true);\n      (fs.rmSync as unknown).mockImplementation(() => {\n        throw new Error(\"permission denied\");",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-start-consistency.test.ts",
      "line": 258,
      "content": "(fs.rmSync as unknown).mockImplementation(() => {",
      "context": "      // Arrange\n      (fs.existsSync as unknown).mockReturnValue(true);\n      (fs.rmSync as unknown).mockImplementation(() => {\n        throw new Error(\"permission denied\");\n      });",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/localGitBackend.ts",
      "line": 144,
      "content": "return (this.cache as unknown).get(",
      "context": "    const cacheKey = generateRepoKey(this.localPath, \"status\");\n\n    return (this.cache as unknown).get(\n      cacheKey,\n      async () => {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/localGitBackend.ts",
      "line": 232,
      "content": "(this.cache as unknown).invalidateByPrefix(generateRepoKey(this.localPath, \"status\"));",
      "context": "\n      // Invalidate status cache after pushing\n      (this.cache as unknown).invalidateByPrefix(generateRepoKey(this.localPath, \"status\"));\n    } catch (error) {\n      throw new RepositoryError(",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/localGitBackend.ts",
      "line": 257,
      "content": "(this.cache as unknown).invalidateByPrefix(generateRepoKey(this.localPath, \"status\"));",
      "context": "\n      // Invalidate status cache after pulling\n      (this.cache as unknown).invalidateByPrefix(generateRepoKey(this.localPath, \"status\"));\n    } catch (error) {\n      throw new RepositoryError(",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/localGitBackend.ts",
      "line": 282,
      "content": "(this.cache as unknown).invalidateByPrefix(generateRepoKey(this.localPath, \"status\"));",
      "context": "\n      // Invalidate status cache after branch creation\n      (this.cache as unknown).invalidateByPrefix(generateRepoKey(this.localPath, \"status\"));\n\n      return {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/localGitBackend.ts",
      "line": 310,
      "content": "(this.cache as unknown).invalidateByPrefix(generateRepoKey(this.localPath, \"status\"));",
      "context": "\n      // Invalidate status cache after checkout\n      (this.cache as unknown).invalidateByPrefix(generateRepoKey(this.localPath, \"status\"));\n    } catch (error) {\n      throw new RepositoryError(",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1234,
      "content": "options as unknown",
      "context": "      sourceBranch,\n      targetBranch,\n      options as unknown\n    );\n  }",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1254,
      "content": "options as unknown",
      "context": "      sessionBranch,\n      baseBranch,\n      options as unknown\n    );\n  }",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 531,
      "content": "const updatedContent = matter.stringify(parsed.content, data as unknown);",
      "context": "\n      // Serialize the updated frontmatter and content\n      const updatedContent = matter.stringify(parsed.content, data as unknown);\n\n      // Write back to the file",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 677,
      "content": "`Backend '${backend}' not found. Available backends: ${(this.backends.map((b) => b.name) as unknown).join(\", \")}`",
      "context": "    if (!selectedBackend) {\n      throw new Error(\n        `Backend '${backend}' not found. Available backends: ${(this.backends.map((b) => b.name) as unknown).join(\", \")}`\n      );\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 684,
      "content": "return (this.currentBackend as unknown).listTasks(options as unknown);",
      "context": "\n  async listTasks(options?: TaskListOptions): Promise<Task[]> {\n    return (this.currentBackend as unknown).listTasks(options as unknown);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 688,
      "content": "return (this.currentBackend as unknown).getTask(id);",
      "context": "\n  async getTask(id: string): Promise<Task | null> {\n    return (this.currentBackend as unknown).getTask(id);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 692,
      "content": "return (this.currentBackend as unknown).getTaskStatus(id);",
      "context": "\n  async getTaskStatus(id: string): Promise<string | undefined> {\n    return (this.currentBackend as unknown).getTaskStatus(id);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 696,
      "content": "return (this.currentBackend as unknown).setTaskStatus(id, status);",
      "context": "\n  async setTaskStatus(id: string, status: string): Promise<void> {\n    return (this.currentBackend as unknown).setTaskStatus(id, status);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 700,
      "content": "return (this.currentBackend as unknown).getWorkspacePath();",
      "context": "\n  getWorkspacePath(): string {\n    return (this.currentBackend as unknown).getWorkspacePath();\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 704,
      "content": "return (this.currentBackend as unknown).createTask(specPath, options as unknown);",
      "context": "\n  async createTask(specPath: string, options: CreateTaskOptions = {}): Promise<Task> {\n    return (this.currentBackend as unknown).createTask(specPath, options as unknown);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 731,
      "content": "return (this.currentBackend as unknown).deleteTask(id, options as unknown);",
      "context": "\n  async deleteTask(id: string, options: DeleteTaskOptions = {}): Promise<boolean> {\n    return (this.currentBackend as unknown).deleteTask(id, options as unknown);\n  }\n}",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository-uri.ts",
      "line": 98,
      "content": "(components as unknown)!.repo = repo;",
      "context": "      const { owner, repo } = extractRepositoryInfo(uri);\n      components.owner = owner;\n      (components as unknown)!.repo = repo;\n\n      // For URLs, also extract host",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository-uri.ts",
      "line": 145,
      "content": "return (result as unknown)!.name as unknown;",
      "context": "  try {\n    const result = normalizeRepositoryUri(uri, { validateLocalExists: false });\n    return (result as unknown)!.name as unknown;\n  } catch (error) {\n    // Fallback to simple basename normalization (filesystem-safe)",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository-uri.ts",
      "line": 183,
      "content": "const targetFormat = targetType as unknown as UriFormat;",
      "context": "  try {\n    // Map our RepositoryURIType to UriFormat\n    const targetFormat = targetType as unknown as UriFormat;\n    return convertRepositoryUri(uri, targetFormat);\n  } catch (error) {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 199,
      "content": "createGitService(null as unknown as { baseDir?: string });",
      "context": "  test(\"should handle null options parameter without throwing runtime error\", () => {\n    expect(() => {\n      createGitService(null as unknown as { baseDir?: string });\n    }).not.toThrow();\n  });",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "src/domain/session.ts",
      "line": 1155,
      "content": "const zodError = error as unknown;",
      "context": "    if (error instanceof Error && error.name === \"ZodError\") {\n      // Extract the validation error message\n      const zodError = error as unknown;\n      const message = zodError.errors?.[0]?.message || \"Invalid parameters\";\n      throw new ValidationError(message);",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/prepared-merge-commit-workflow.test.ts",
      "line": 74,
      "content": "(gitService as unknown).preparePr = preparePrSpy;",
      "context": "\n      // Replace the preparePr method with our spy\n      (gitService as unknown).preparePr = preparePrSpy;\n\n      // Execute the preparePr method",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/prepared-merge-commit-workflow.test.ts",
      "line": 144,
      "content": "(gitService as unknown).preparePr = correctPreparePrSpy;",
      "context": "\n      // Replace with correct implementation\n      (gitService as unknown).preparePr = correctPreparePrSpy;\n\n      // Execute the CORRECT preparePr method",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/prepared-merge-commit-workflow.test.ts",
      "line": 213,
      "content": "(require(\"./git\") as unknown).preparePrFromParams = mockPreparePrFromParams;",
      "context": "      // Replace the preparePrFromParams function\n      const originalPreparePr = require(\"./git\").preparePrFromParams;\n      (require(\"./git\") as unknown).preparePrFromParams = mockPreparePrFromParams;\n\n      try {",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/prepared-merge-commit-workflow.test.ts",
      "line": 240,
      "content": "(require(\"./git\") as unknown).preparePrFromParams = originalPreparePr;",
      "context": "      } finally {\n        // Restore original function\n        (require(\"./git\") as unknown).preparePrFromParams = originalPreparePr;\n      }\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/prepared-merge-commit-workflow.test.ts",
      "line": 321,
      "content": "(gitService as unknown).preparePr = preparePrWithConflictSpy;",
      "context": "      });\n\n      (gitService as unknown).preparePr = preparePrWithConflictSpy;\n\n      // Should throw error on merge conflict",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 17,
      "content": "let yamlStr = jsYaml.dump(data as unknown, {",
      "context": "function customMatterStringify(content: string, data: any): string {\n  // Use js-yaml's dump function directly with options to control quoting behavior\n  let yamlStr = jsYaml.dump(data as unknown, {\n    lineWidth: -1, // Don't wrap lines\n    noCompatMode: true, // Use YAML 1.2",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 192,
      "content": "dataKeys: Object.keys(data as unknown) as unknown,",
      "context": "            log.debug(\"Successfully parsed frontmatter\", {\n              filePath,\n              dataKeys: Object.keys(data as unknown) as unknown,\n              contentLength: ruleContent.length,\n            });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 207,
      "content": "} as unknown;",
      "context": "            format: requestedFormat,\n            path: filePath,\n          } as unknown;\n        } catch (error) {\n          // FIXED: Gracefully handle errors in frontmatter parsing",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 280,
      "content": "dataKeys: Object.keys(data as unknown) as unknown,",
      "context": "            log.debug(\"Successfully parsed frontmatter in alternative format\", {\n              filePath,\n              dataKeys: Object.keys(data as unknown) as unknown,\n              contentLength: ruleContent.length,\n            });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 303,
      "content": "} as unknown;",
      "context": "              path: filePath,\n              formatNote: `Rule found in '${originalFormat}' format but '${requestedFormat}' was requested. Format conversion is not supported yet.`,\n            } as unknown;\n          }\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 317,
      "content": "} as unknown;",
      "context": "            format,\n            path: filePath,\n          } as unknown;\n        } catch (error) {\n          // FIXED: Gracefully handle errors in frontmatter parsing for alternative formats",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/session-lookup-bug-simple.test.ts",
      "line": 47,
      "content": "} as unknown;",
      "context": "      deleteSession: async () => true,\n      getNewSessionRepoPath: () => join(tempDir, \"local-minsky\", \"sessions\", \"test-session\"),\n    } as unknown;\n\n    const mockTaskService = {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/session-lookup-bug-simple.test.ts",
      "line": 53,
      "content": "} as unknown;",
      "context": "      getTaskStatus: async () => \"TODO\",\n      setTaskStatus: async () => undefined,\n    } as unknown;\n\n    const mockWorkspaceUtils = {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/session-lookup-bug-simple.test.ts",
      "line": 58,
      "content": "} as unknown;",
      "context": "      isSessionWorkspace: () => false,\n      getWorkspaceRepoName: () => \"local-minsky\",\n    } as unknown;\n\n    // This mock simulates the ACTUAL GitService bug behavior",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/session-lookup-bug-simple.test.ts",
      "line": 76,
      "content": "} as unknown;",
      "context": "      },\n      branchWithoutSession: async () => ({ branch: \"test\" }),\n    } as unknown;\n\n    // Act: Try to start a session (should fail cleanly)",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/remoteGitBackend.ts",
      "line": 155,
      "content": "return (this.cache as unknown).get(",
      "context": "    const cacheKey = generateRepoKey(this.localPath, \"status\");\n\n    return (this.cache as unknown).get(\n      cacheKey,\n      async () => {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/remoteGitBackend.ts",
      "line": 256,
      "content": "(this.cache as unknown).invalidateByPrefix(generateRepoKey(this.localPath, \"status\"));",
      "context": "\n      // Invalidate status cache after pushing\n      (this.cache as unknown).invalidateByPrefix(generateRepoKey(this.localPath, \"status\"));\n    } catch (error) {\n      throw new RepositoryError(",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/remoteGitBackend.ts",
      "line": 281,
      "content": "(this.cache as unknown).invalidateByPrefix(generateRepoKey(this.localPath, \"status\"));",
      "context": "\n      // Invalidate status cache after pulling\n      (this.cache as unknown).invalidateByPrefix(generateRepoKey(this.localPath, \"status\"));\n    } catch (error) {\n      throw new RepositoryError(",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/remoteGitBackend.ts",
      "line": 306,
      "content": "(this.cache as unknown).invalidateByPrefix(generateRepoKey(this.localPath, \"status\"));",
      "context": "\n      // Invalidate status cache after branch creation\n      (this.cache as unknown).invalidateByPrefix(generateRepoKey(this.localPath, \"status\"));\n\n      return {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/remoteGitBackend.ts",
      "line": 334,
      "content": "(this.cache as unknown).invalidateByPrefix(generateRepoKey(this.localPath, \"status\"));",
      "context": "\n      // Invalidate status cache after checkout\n      (this.cache as unknown).invalidateByPrefix(generateRepoKey(this.localPath, \"status\"));\n    } catch (error) {\n      throw new RepositoryError(",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/session-update.test.ts",
      "line": 58,
      "content": "} as unknown);",
      "context": "        noPush: false,\n        force: false,\n      } as unknown);\n      throw new Error(\"Should have thrown an error\");\n    } catch (error: unknown) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/uri-utils.ts",
      "line": 198,
      "content": "normalizeRepositoryUri(uri, options as unknown);",
      "context": "): boolean {\n  // This will throw if validation fails\n  normalizeRepositoryUri(uri, options as unknown);\n  return true;\n}",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/git-default-branch.test.ts",
      "line": 26,
      "content": "const execMock = GitService.prototype.execInRepository as unknown;",
      "context": "\n  test(\"should detect default branch from origin HEAD ref\", async () => {\n    const execMock = GitService.prototype.execInRepository as unknown;\n\n    // Mock to return a specific branch name",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-default-branch.test.ts",
      "line": 44,
      "content": "const execMock = GitService.prototype.execInRepository as unknown;",
      "context": "\n  test(\"should properly remove origin prefix from branch name\", async () => {\n    const execMock = GitService.prototype.execInRepository as unknown;\n\n    // Mock to return a branch with extra whitespace",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-default-branch.test.ts",
      "line": 57,
      "content": "const execMock = GitService.prototype.execInRepository as unknown;",
      "context": "\n  test(\"should fall back to 'main' when command fails\", async () => {\n    const execMock = GitService.prototype.execInRepository as unknown;\n\n    // Mock to throw an error",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/workspace.ts",
      "line": 42,
      "content": "if ((repoUrl as unknown)!.startsWith(\"file://\")) {",
      "context": "export function resolveMainWorkspaceFromRepoUrl(repoUrl: string): string {\n  // For file:// URLs, just remove the file:// prefix\n  if ((repoUrl as unknown)!.startsWith(\"file://\")) {\n    return (repoUrl as unknown)!.replace(\"file://\", \"\");\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace.ts",
      "line": 43,
      "content": "return (repoUrl as unknown)!.replace(\"file://\", \"\");",
      "context": "  // For file:// URLs, just remove the file:// prefix\n  if ((repoUrl as unknown)!.startsWith(\"file://\")) {\n    return (repoUrl as unknown)!.replace(\"file://\", \"\");\n  }\n  // For other URLs, assume they refer to the current directory",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace.ts",
      "line": 56,
      "content": "return (workspacePath as unknown)!.startsWith(minskySessionsPath);",
      "context": "export function isSessionWorkspace(workspacePath: string): boolean {\n  const minskySessionsPath = getSessionsDir();\n  return (workspacePath as unknown)!.startsWith(minskySessionsPath);\n}\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace.ts",
      "line": 99,
      "content": "if (!sessionRecord || !(sessionRecord as unknown)!.repoUrl) {",
      "context": "    const sessionRecord = await db.getSession(sessionName);\n\n    if (!sessionRecord || !(sessionRecord as unknown)!.repoUrl) {\n      return null;\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace.ts",
      "line": 105,
      "content": "upstreamRepository: (sessionRecord as unknown)!.repoUrl,",
      "context": "    return {\n      session: sessionName,\n      upstreamRepository: (sessionRecord as unknown)!.repoUrl,\n      gitRoot,\n    };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace.ts",
      "line": 161,
      "content": "const sessionRecord = await (sessionProvider as unknown)!.getSession(sessionName);",
      "context": "        try {\n          const sessionProvider = createSessionProvider();\n          const sessionRecord = await (sessionProvider as unknown)!.getSession(sessionName);\n          if (sessionRecord && (sessionRecord as unknown)!.repoUrl) {\n            return (sessionRecord as unknown)!.repoUrl;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace.ts",
      "line": 162,
      "content": "if (sessionRecord && (sessionRecord as unknown)!.repoUrl) {",
      "context": "          const sessionProvider = createSessionProvider();\n          const sessionRecord = await (sessionProvider as unknown)!.getSession(sessionName);\n          if (sessionRecord && (sessionRecord as unknown)!.repoUrl) {\n            return (sessionRecord as unknown)!.repoUrl;\n          }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace.ts",
      "line": 163,
      "content": "return (sessionRecord as unknown)!.repoUrl;",
      "context": "          const sessionRecord = await (sessionProvider as unknown)!.getSession(sessionName);\n          if (sessionRecord && (sessionRecord as unknown)!.repoUrl) {\n            return (sessionRecord as unknown)!.repoUrl;\n          }\n        } catch (sessionError) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace.ts",
      "line": 198,
      "content": "return resolveMainWorkspaceFromRepoUrl((sessionInfo as unknown)!.upstreamRepository);",
      "context": "    const sessionInfo = await getSessionFromWorkspace((process as any).cwd());\n    if (sessionInfo && (sessionInfo as any)!.upstreamRepository) {\n      return resolveMainWorkspaceFromRepoUrl((sessionInfo as unknown)!.upstreamRepository);\n    }\n    // If not in a session, or session has no upstream, fall through to normal logic.",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace.ts",
      "line": 240,
      "content": "return sessionInfo ? (sessionInfo as unknown)!.session : null;",
      "context": "): Promise<string | undefined> {\n  const sessionInfo = await getSessionFromWorkspace(cwd, execAsyncFn, sessionDbOverride);\n  return sessionInfo ? (sessionInfo as unknown)!.session : null;\n}\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace.ts",
      "line": 272,
      "content": "const sessionRecord = await (sessionDb as unknown)!.getSession(sessionId);",
      "context": "    // Query the SessionDB to get task information\n    const sessionDb = sessionDbOverride || createSessionProvider();\n    const sessionRecord = await (sessionDb as unknown)!.getSession(sessionId);\n\n    if (!sessionRecord) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace.ts",
      "line": 280,
      "content": "taskId: (sessionRecord as unknown)!.taskId,",
      "context": "    return {\n      sessionId,\n      taskId: (sessionRecord as unknown)!.taskId,\n    };\n  } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace.ts",
      "line": 362,
      "content": "return sessionInfo ? (sessionInfo as unknown)!.session : null;",
      "context": "    getCurrentSession: async (repoPath: string): Promise<string | undefined> => {\n      const sessionInfo = await getSessionFromRepo(repoPath);\n      return sessionInfo ? (sessionInfo as unknown)!.session : null;\n    },\n    getSessionFromWorkspace: async (workspacePath: string): Promise<string | undefined> => {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace.ts",
      "line": 366,
      "content": "return sessionInfo ? (sessionInfo as unknown)!.session : null;",
      "context": "    getSessionFromWorkspace: async (workspacePath: string): Promise<string | undefined> => {\n      const sessionInfo = await getSessionFromWorkspace(workspacePath);\n      return sessionInfo ? (sessionInfo as unknown)!.session : null;\n    },\n    resolveWorkspacePath: resolveWorkspacePath,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace.ts",
      "line": 389,
      "content": "session: (sessionInfo as unknown)!.session,",
      "context": "      gitRoot,\n      workspacePath,\n      session: (sessionInfo as unknown)!.session,\n      sessionDbPath: \"\", // Placeholder for session DB path\n      sessionData: {}, // Placeholder for session data",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 98,
      "content": "(mockFn as unknown).mockReset();",
      "context": "    for (const mockFn of Object.values(mockSessionDB)) {\n      if (typeof mockFn === \"function\" && \"mockReset\" in mockFn) {\n        (mockFn as unknown).mockReset();\n      }\n    }",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 104,
      "content": "(mockFn as unknown).mockReset();",
      "context": "    for (const mockFn of Object.values(mockGitService)) {\n      if (typeof mockFn === \"function\" && \"mockReset\" in mockFn) {\n        (mockFn as unknown).mockReset();\n      }\n    }",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 110,
      "content": "(mockFn as unknown).mockReset();",
      "context": "    for (const mockFn of Object.values(mockTaskService)) {\n      if (typeof mockFn === \"function\" && \"mockReset\" in mockFn) {\n        (mockFn as unknown).mockReset();\n      }\n    }",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 114,
      "content": "(mockGetCurrentSession as unknown).mockReset();",
      "context": "    }\n\n    (mockGetCurrentSession as unknown).mockReset();\n\n    // Restore mock implementations after reset",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 117,
      "content": "(mockSessionDB.getSession as unknown).mockImplementation(() => ({",
      "context": "\n    // Restore mock implementations after reset\n    (mockSessionDB.getSession as unknown).mockImplementation(() => ({\n      session: \"testSession\",\n      taskId: \"#TEST_VALUE\",",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 126,
      "content": "(mockSessionDB.getSessionByTaskId as unknown).mockImplementation(() => ({",
      "context": "    }));\n\n    (mockSessionDB.getSessionByTaskId as unknown).mockImplementation(() => ({\n      session: \"task#TEST_VALUE\",\n      taskId: \"#TEST_VALUE\",",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 135,
      "content": "(mockSessionDB.getSessionWorkdir as unknown).mockImplementation(() => \"/fake/path/to/session\");",
      "context": "    }));\n\n    (mockSessionDB.getSessionWorkdir as unknown).mockImplementation(() => \"/fake/path/to/session\");\n    (mockSessionDB.listSessions as unknown).mockImplementation(() => []);\n    (mockSessionDB.addSession as unknown).mockImplementation(() => Promise.resolve());",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 136,
      "content": "(mockSessionDB.listSessions as unknown).mockImplementation(() => []);",
      "context": "\n    (mockSessionDB.getSessionWorkdir as unknown).mockImplementation(() => \"/fake/path/to/session\");\n    (mockSessionDB.listSessions as unknown).mockImplementation(() => []);\n    (mockSessionDB.addSession as unknown).mockImplementation(() => Promise.resolve());\n    (mockSessionDB.updateSession as unknown).mockImplementation(() => Promise.resolve());",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 137,
      "content": "(mockSessionDB.addSession as unknown).mockImplementation(() => Promise.resolve());",
      "context": "    (mockSessionDB.getSessionWorkdir as unknown).mockImplementation(() => \"/fake/path/to/session\");\n    (mockSessionDB.listSessions as unknown).mockImplementation(() => []);\n    (mockSessionDB.addSession as unknown).mockImplementation(() => Promise.resolve());\n    (mockSessionDB.updateSession as unknown).mockImplementation(() => Promise.resolve());\n    (mockSessionDB.deleteSession as unknown).mockImplementation(() => Promise.resolve(true));",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 138,
      "content": "(mockSessionDB.updateSession as unknown).mockImplementation(() => Promise.resolve());",
      "context": "    (mockSessionDB.listSessions as unknown).mockImplementation(() => []);\n    (mockSessionDB.addSession as unknown).mockImplementation(() => Promise.resolve());\n    (mockSessionDB.updateSession as unknown).mockImplementation(() => Promise.resolve());\n    (mockSessionDB.deleteSession as unknown).mockImplementation(() => Promise.resolve(true));\n    (mockSessionDB.getRepoPath as unknown).mockImplementation(() => \"/fake/path/to/repo\");",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 139,
      "content": "(mockSessionDB.deleteSession as unknown).mockImplementation(() => Promise.resolve(true));",
      "context": "    (mockSessionDB.addSession as unknown).mockImplementation(() => Promise.resolve());\n    (mockSessionDB.updateSession as unknown).mockImplementation(() => Promise.resolve());\n    (mockSessionDB.deleteSession as unknown).mockImplementation(() => Promise.resolve(true));\n    (mockSessionDB.getRepoPath as unknown).mockImplementation(() => \"/fake/path/to/repo\");\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 140,
      "content": "(mockSessionDB.getRepoPath as unknown).mockImplementation(() => \"/fake/path/to/repo\");",
      "context": "    (mockSessionDB.updateSession as unknown).mockImplementation(() => Promise.resolve());\n    (mockSessionDB.deleteSession as unknown).mockImplementation(() => Promise.resolve(true));\n    (mockSessionDB.getRepoPath as unknown).mockImplementation(() => \"/fake/path/to/repo\");\n\n    (mockGitService.execInRepository as unknown).mockImplementation((_path: unknown) => {",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 142,
      "content": "(mockGitService.execInRepository as unknown).mockImplementation((_path: unknown) => {",
      "context": "    (mockSessionDB.getRepoPath as unknown).mockImplementation(() => \"/fake/path/to/repo\");\n\n    (mockGitService.execInRepository as unknown).mockImplementation((_path: unknown) => {\n      if (command.includes(\"git ls-remote\")) {\n        return \"refs/heads/pr/testSession\";",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 158,
      "content": "(mockTaskService.getTaskSpecData as unknown).mockImplementation(() =>",
      "context": "    });\n\n    (mockTaskService.getTaskSpecData as unknown).mockImplementation(() =>\n      Promise.resolve(\"# Task Specification\\n\\nThis is a test task\")\n    );",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 161,
      "content": "(mockWorkspaceUtils.isSessionWorkspace as unknown).mockImplementation(() => Promise.resolve(false));",
      "context": "      Promise.resolve(\"# Task Specification\\n\\nThis is a test task\")\n    );\n    (mockWorkspaceUtils.isSessionWorkspace as unknown).mockImplementation(() => Promise.resolve(false));\n    (mockGetCurrentSession as unknown).mockImplementation(() => Promise.resolve(\"testSession\"));\n  });",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 162,
      "content": "(mockGetCurrentSession as unknown).mockImplementation(() => Promise.resolve(\"testSession\"));",
      "context": "    );\n    (mockWorkspaceUtils.isSessionWorkspace as unknown).mockImplementation(() => Promise.resolve(false));\n    (mockGetCurrentSession as unknown).mockImplementation(() => Promise.resolve(\"testSession\"));\n  });\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 181,
      "content": "expect((mockSessionDB.getSession as unknown).mock.calls.length).toBe(1);",
      "context": "    expect(result.diff).toBe(\"diff --git a/file.txt b/file.txt\\n+new line\\n-old line\");\n\n    expect((mockSessionDB.getSession as unknown).mock.calls.length).toBe(1);\n    expect((mockSessionDB.getSession as unknown).mock.calls[0][0]).toBe(\"testSession\");\n    expect((mockSessionDB.getSessionWorkdir as unknown).mock.calls.length).toBe(1);",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 182,
      "content": "expect((mockSessionDB.getSession as unknown).mock.calls[0][0]).toBe(\"testSession\");",
      "context": "\n    expect((mockSessionDB.getSession as unknown).mock.calls.length).toBe(1);\n    expect((mockSessionDB.getSession as unknown).mock.calls[0][0]).toBe(\"testSession\");\n    expect((mockSessionDB.getSessionWorkdir as unknown).mock.calls.length).toBe(1);\n    expect((mockSessionDB.getSessionWorkdir as unknown).mock.calls[0][0]).toBe(\"testSession\");",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 183,
      "content": "expect((mockSessionDB.getSessionWorkdir as unknown).mock.calls.length).toBe(1);",
      "context": "    expect((mockSessionDB.getSession as unknown).mock.calls.length).toBe(1);\n    expect((mockSessionDB.getSession as unknown).mock.calls[0][0]).toBe(\"testSession\");\n    expect((mockSessionDB.getSessionWorkdir as unknown).mock.calls.length).toBe(1);\n    expect((mockSessionDB.getSessionWorkdir as unknown).mock.calls[0][0]).toBe(\"testSession\");\n  });",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 184,
      "content": "expect((mockSessionDB.getSessionWorkdir as unknown).mock.calls[0][0]).toBe(\"testSession\");",
      "context": "    expect((mockSessionDB.getSession as unknown).mock.calls[0][0]).toBe(\"testSession\");\n    expect((mockSessionDB.getSessionWorkdir as unknown).mock.calls.length).toBe(1);\n    expect((mockSessionDB.getSessionWorkdir as unknown).mock.calls[0][0]).toBe(\"testSession\");\n  });\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 192,
      "content": "expect((mockSessionDB.getSessionByTaskId as unknown).mock.calls.length).toBe(1);",
      "context": "    expect(result._session).toBe(\"task#TEST_VALUE\");\n    expect(result.taskId).toBe(\"#TEST_VALUE\");\n    expect((mockSessionDB.getSessionByTaskId as unknown).mock.calls.length).toBe(1);\n    expect((mockSessionDB.getSessionByTaskId as unknown).mock.calls[0][0]).toBe(\"#TEST_VALUE\");\n  });",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 193,
      "content": "expect((mockSessionDB.getSessionByTaskId as unknown).mock.calls[0][0]).toBe(\"#TEST_VALUE\");",
      "context": "    expect(result.taskId).toBe(\"#TEST_VALUE\");\n    expect((mockSessionDB.getSessionByTaskId as unknown).mock.calls.length).toBe(1);\n    expect((mockSessionDB.getSessionByTaskId as unknown).mock.calls[0][0]).toBe(\"#TEST_VALUE\");\n  });\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 204,
      "content": "(mockGetCurrentSession as unknown).mockImplementationOnce(() => Promise.resolve(null));",
      "context": "\n  test(\"throws error when no session can be determined\", async () => {\n    (mockGetCurrentSession as unknown).mockImplementationOnce(() => Promise.resolve(null));\n\n    await expect(sessionReviewFromParams({}, deps)).rejects.toThrow(ValidationError);",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 210,
      "content": "(mockSessionDB.getSession as unknown).mockImplementationOnce(() => null);",
      "context": "\n  test(\"throws error when session not found\", async () => {\n    (mockSessionDB.getSession as unknown).mockImplementationOnce(() => null);\n\n    await expect(sessionReviewFromParams({ _session: \"nonexistent\" }, deps)).rejects.toThrow(",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/init.ts",
      "line": 31,
      "content": "const validatedParams = initializeProjectParamsSchema.parse(params as unknown);",
      "context": "export async function initializeProjectFromParams(params: InitializeProjectParams): Promise<void> {\n  // Validate the parameters\n  const validatedParams = initializeProjectParamsSchema.parse(params as unknown);\n\n  // Call the original initialization function",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 246,
      "content": "return new LocalGitBackend(config as unknown);",
      "context": "  case RepositoryBackendType.LOCAL: {\n    const { LocalGitBackend } = await import(\"./localGitBackend.js\");\n    return new LocalGitBackend(config as unknown);\n  }\n  case RepositoryBackendType.REMOTE: {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 250,
      "content": "return new RemoteGitBackend(config as unknown);",
      "context": "  case RepositoryBackendType.REMOTE: {\n    const { RemoteGitBackend } = await import(\"./remoteGitBackend.js\");\n    return new RemoteGitBackend(config as unknown);\n  }\n  case RepositoryBackendType.GITHUB: {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 270,
      "content": "const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();",
      "context": "        // If no session is provided, work with the most recent session\n        if (!session) {\n          const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();\n          const sessions = await sessionDb.listSessions();\n          const repoName = normalizeRepoName(config.url || \"\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 288,
      "content": ").promisify(((await import(\"child_process\")) as unknown).exec)(",
      "context": "        const { stdout: branchOutput } = await (\n          await import(\"util\")\n        ).promisify(((await import(\"child_process\")) as unknown).exec)(\n          `git -C ${workdir} rev-parse --abbrev-ref HEAD`\n        );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 314,
      "content": "const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();",
      "context": "        // If no session is provided, work with the most recent session\n        if (!session) {\n          const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();\n          const sessions = await sessionDb.listSessions();\n          const repoName = normalizeRepoName(config.url || \"\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 348,
      "content": "const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();",
      "context": "      push: async (branch?: string): Promise<void> => {\n        // Find an existing session for this repository\n        const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();\n        const sessions = await sessionDb.listSessions();\n        const repoName = normalizeRepoName(config.url || \"\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 368,
      "content": "const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();",
      "context": "      pull: async (branch?: string): Promise<void> => {\n        // Find an existing session for this repository\n        const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();\n        const sessions = await sessionDb.listSessions();\n        const repoName = normalizeRepoName(config.url || \"\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 386,
      "content": "await (await import(\"util\")).promisify(((await import(\"child_process\")) as unknown).exec)(",
      "context": "\n        // Execute branch creation via Git command\n        await (await import(\"util\")).promisify(((await import(\"child_process\")) as unknown).exec)(\n          `git -C ${workdir} checkout -b ${name}`\n        );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 398,
      "content": "const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();",
      "context": "      checkout: async (branch: string): Promise<void> => {\n        // Find an existing session for this repository\n        const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();\n        const sessions = await sessionDb.listSessions();\n        const repoName = normalizeRepoName(config.url || \"\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 410,
      "content": "await (await import(\"util\")).promisify(((await import(\"child_process\")) as unknown).exec)(",
      "context": "\n        // Execute checkout via Git command\n        await (await import(\"util\")).promisify(((await import(\"child_process\")) as unknown).exec)(\n          `git -C ${workdir} checkout ${branch}`\n        );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 460,
      "content": "const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();",
      "context": "  // 2. Try to resolve from session\n  else if (session) {\n    const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();\n    const sessionRecord = await sessionDb.getSession(session);\n    if (!sessionRecord) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 472,
      "content": "const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();",
      "context": "  else if (taskId) {\n    const normalizedTaskId = taskId.startsWith(\"#\") ? taskId : `#${taskId}`;\n    const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();\n    const sessionRecord = await sessionDb.getSessionByTaskId(normalizedTaskId);\n    if (!sessionRecord) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 69,
      "content": "gitService: mockGitService as unknown,",
      "context": "      { _session: \"test-session\" },\n      {\n        gitService: mockGitService as unknown,\n        taskService: mockTaskService as unknown,\n        sessionDB: mockSessionDB as unknown,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 70,
      "content": "taskService: mockTaskService as unknown,",
      "context": "      {\n        gitService: mockGitService as unknown,\n        taskService: mockTaskService as unknown,\n        sessionDB: mockSessionDB as unknown,\n        workspaceUtils: WorkspaceUtils,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 71,
      "content": "sessionDB: mockSessionDB as unknown,",
      "context": "        gitService: mockGitService as unknown,\n        taskService: mockTaskService as unknown,\n        sessionDB: mockSessionDB as unknown,\n        workspaceUtils: WorkspaceUtils,\n      }",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 97,
      "content": "gitService: mockGitService as unknown,",
      "context": "        {},\n        {\n          gitService: mockGitService as unknown,\n          taskService: mockTaskService as unknown,\n          sessionDB: mockSessionDB as unknown,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 98,
      "content": "taskService: mockTaskService as unknown,",
      "context": "        {\n          gitService: mockGitService as unknown,\n          taskService: mockTaskService as unknown,\n          sessionDB: mockSessionDB as unknown,\n          workspaceUtils: WorkspaceUtils,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 99,
      "content": "sessionDB: mockSessionDB as unknown,",
      "context": "          gitService: mockGitService as unknown,\n          taskService: mockTaskService as unknown,\n          sessionDB: mockSessionDB as unknown,\n          workspaceUtils: WorkspaceUtils,\n        }",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 120,
      "content": "gitService: mockGitService as unknown,",
      "context": "        { _session: \"non-existent-session\" },\n        {\n          gitService: mockGitService as unknown,\n          taskService: mockTaskService as unknown,\n          sessionDB: mockSessionDBWithNull as unknown,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 121,
      "content": "taskService: mockTaskService as unknown,",
      "context": "        {\n          gitService: mockGitService as unknown,\n          taskService: mockTaskService as unknown,\n          sessionDB: mockSessionDBWithNull as unknown,\n          workspaceUtils: WorkspaceUtils,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 122,
      "content": "sessionDB: mockSessionDBWithNull as unknown,",
      "context": "          gitService: mockGitService as unknown,\n          taskService: mockTaskService as unknown,\n          sessionDB: mockSessionDBWithNull as unknown,\n          workspaceUtils: WorkspaceUtils,\n        }",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 143,
      "content": "gitService: mockGitServiceWithError as unknown,",
      "context": "        { _session: \"test-session\" },\n        {\n          gitService: mockGitServiceWithError as unknown,\n          taskService: mockTaskService as unknown,\n          sessionDB: mockSessionDB as unknown,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 144,
      "content": "taskService: mockTaskService as unknown,",
      "context": "        {\n          gitService: mockGitServiceWithError as unknown,\n          taskService: mockTaskService as unknown,\n          sessionDB: mockSessionDB as unknown,\n          workspaceUtils: WorkspaceUtils,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 145,
      "content": "sessionDB: mockSessionDB as unknown,",
      "context": "          gitService: mockGitServiceWithError as unknown,\n          taskService: mockTaskService as unknown,\n          sessionDB: mockSessionDB as unknown,\n          workspaceUtils: WorkspaceUtils,\n        }",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/schemas/tasks.ts",
      "line": 119,
      "content": "return data.description || data.descriptionPath as unknown;",
      "context": "    (data) => {\n    // Either description or descriptionPath must be provided\n      return data.description || data.descriptionPath as unknown;\n    },\n    {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/schemas/error.ts",
      "line": 5,
      "content": "* replacing unsafe `(err as unknown).message` patterns with proper validation.",
      "context": " * \n * This module provides Zod schemas for validating error objects throughout the codebase,\n * replacing unsafe `(err as unknown).message` patterns with proper validation.\n */\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/runtime.ts",
      "line": 5,
      "content": "* replacing unsafe `(Bun as unknown).argv` patterns with proper validation.",
      "context": " * \n * This module provides Zod schemas for validating runtime environment APIs,\n * replacing unsafe `(Bun as unknown).argv` patterns with proper validation.\n */\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/session-db-config.ts",
      "line": 5,
      "content": "* replacing unsafe `(config as unknown)` patterns with proper validation.",
      "context": " * \n * This module provides Zod schemas for validating session database configuration,\n * replacing unsafe `(config as unknown)` patterns with proper validation.\n */\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 98,
      "content": "(this.server as unknown).addTool({",
      "context": "\n    // Register the tool with FastMCP\n    (this.server as unknown).addTool({\n      name: normalizedName,\n      description: command.description,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 108,
      "content": "(this.projectContext as unknown).repositoryPath &&",
      "context": "          if (\n            this.projectContext &&\n            (this.projectContext as unknown).repositoryPath &&\n            args &&\n            typeof args === \"object\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 115,
      "content": "repositoryPath: (this.projectContext as unknown).repositoryPath,",
      "context": "              args = {\n                ...args,\n                repositoryPath: (this.projectContext as unknown).repositoryPath,\n              };\n              log.debug(`Using default repository path for command ${normalizedName}`, {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 118,
      "content": "repositoryPath: (this.projectContext as unknown).repositoryPath,",
      "context": "              };\n              log.debug(`Using default repository path for command ${normalizedName}`, {\n                repositoryPath: (this.projectContext as unknown).repositoryPath,\n              });\n            }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 135,
      "content": "return JSON.stringify(result as unknown, undefined, 2);",
      "context": "          }\n          // Otherwise, return it as a JSON string for structured data\n          return JSON.stringify(result as unknown, undefined, 2);\n        } catch (error) {\n          const errorMessage = getErrorMessage(error as any);",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 165,
      "content": "(this.server as unknown).addTool({",
      "context": "\n        // Register the alias\n        (this.server as unknown).addTool({\n          name: underscoreName,\n          description: `${command.description} (underscore alias)`,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 181,
      "content": "(this.projectContext as unknown).repositoryPath &&",
      "context": "              if (\n                this.projectContext &&\n                (this.projectContext as unknown).repositoryPath &&\n                args &&\n                typeof args === \"object\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 188,
      "content": "repositoryPath: (this.projectContext as unknown).repositoryPath,",
      "context": "                  args = {\n                    ...args,\n                    repositoryPath: (this.projectContext as unknown).repositoryPath,\n                  };\n                }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 199,
      "content": "return JSON.stringify(result as unknown, undefined, 2);",
      "context": "              }\n              // Otherwise, return it as a JSON string for structured data\n              return JSON.stringify(result as unknown, undefined, 2);\n            } catch (error) {\n              const errorMessage = getErrorMessage(error as any);",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 101,
      "content": "repositoryPath: (this.projectContext as unknown).repositoryPath,",
      "context": "      this.projectContext = options.projectContext || createProjectContextFromCwd();\n      log.debug(\"Using project context\", {\n        repositoryPath: (this.projectContext as unknown).repositoryPath,\n      });\n    } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 157,
      "content": "(this.server as unknown).on(\"connect\", () => {",
      "context": "\n    // Listen for client connections\n    (this.server as unknown).on(\"connect\", () => {\n      log.agent(\"Client connected to Minsky MCP Server\");\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 162,
      "content": "(this.server as unknown).on(\"disconnect\", () => {",
      "context": "\n    // Listen for client disconnections\n    (this.server as unknown).on(\"disconnect\", () => {\n      log.agent(\"Client disconnected from Minsky MCP Server\");\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 179,
      "content": "await (this.server as unknown).start({ transportType: \"stdio\" });",
      "context": "\n      if (this.options.transportType === \"stdio\") {\n        await (this.server as unknown).start({ transportType: \"stdio\" });\n      } else if (this.options.transportType === \"sse\" && this.options.sse) {\n        await (this.server as unknown).start({",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 181,
      "content": "await (this.server as unknown).start({",
      "context": "        await (this.server as unknown).start({ transportType: \"stdio\" });\n      } else if (this.options.transportType === \"sse\" && this.options.sse) {\n        await (this.server as unknown).start({\n          transportType: \"sse\",\n          sse: {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 189,
      "content": "await (this.server as unknown).start({",
      "context": "        });\n      } else if (this.options.transportType === \"httpStream\" && this.options.httpStream) {\n        await (this.server as unknown).start({\n          transportType: \"httpStream\",\n          httpStream: {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 198,
      "content": "await (this.server as unknown).start({ transportType: \"stdio\" });",
      "context": "      } else {\n        // Default to stdio if transport type is invalid\n        await (this.server as unknown).start({ transportType: \"stdio\" });\n      }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 209,
      "content": "if ((this.server as unknown)._tools) {",
      "context": "        const methods = [];\n        // @ts-ignore - Accessing a private property for debugging\n        if ((this.server as unknown)._tools) {\n          // @ts-ignore\n          methods.push(...Object.keys((this.server as unknown)._tools) as unknown);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 211,
      "content": "methods.push(...Object.keys((this.server as unknown)._tools) as unknown);",
      "context": "        if ((this.server as unknown)._tools) {\n          // @ts-ignore\n          methods.push(...Object.keys((this.server as unknown)._tools) as unknown);\n        }\n        log.debug(\"MCP Server registered methods\", {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 219,
      "content": "error: getErrorMessage(e as unknown),",
      "context": "      } catch (e) {\n        log.debug(\"Could not log MCP server methods\", {\n          error: getErrorMessage(e as unknown),\n        });\n      }",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/mcp/fastmcp-command-mapper.ts",
      "line": 32,
      "content": "(this.server as unknown).addTool({",
      "context": "    log.debug(`Registering tool: ${name}`, { description });\n\n    (this.server as unknown).addTool({\n      name,\n      description,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/fastmcp-command-mapper.ts",
      "line": 49,
      "content": "this.addTool(`session.${name}`, description, schema, handler as unknown);",
      "context": "    handler: (args: z.infer<T>) => Promise<Record<string, any>>\n  ): void {\n    this.addTool(`session.${name}`, description, schema, handler as unknown);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/fastmcp-command-mapper.ts",
      "line": 61,
      "content": "this.addTool(`tasks.${name}`, description, schema, handler as unknown);",
      "context": "    handler: (args: z.infer<T>) => Promise<Record<string, any>>\n  ): void {\n    this.addTool(`tasks.${name}`, description, schema, handler as unknown);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/fastmcp-command-mapper.ts",
      "line": 73,
      "content": "this.addTool(`git.${name}`, description, schema, handler as unknown);",
      "context": "    handler: (args: z.infer<T>) => Promise<Record<string, any>>\n  ): void {\n    this.addTool(`git.${name}`, description, schema, handler as unknown);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/fastmcp-command-mapper.ts",
      "line": 80,
      "content": "(this.server as unknown).addTool({",
      "context": "   */\n  addCommand(command: { name: string; description: string; inputSchema?: any }): void {\n    (this.server as unknown).addTool({\n      name: command.name,\n      description: command.description,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/inspector-launcher.ts",
      "line": 101,
      "content": "SERVER_PORT: ((port + 3) as unknown).toString(), // Use a different port for the inspector server",
      "context": "      ...(process as any).env,\n      CLIENT_PORT: (port as any).toString(),\n      SERVER_PORT: ((port + 3) as unknown).toString(), // Use a different port for the inspector server\n    };\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/inspector-launcher.ts",
      "line": 149,
      "content": "log.error(`MCP Inspector stderr: ${(data as unknown)!.toString()}`);",
      "context": "\n    inspectorProcess.stderr.on(\"data\", (data) => {\n      log.error(`MCP Inspector stderr: ${(data as unknown)!.toString()}`);\n    });\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.test.ts",
      "line": 31,
      "content": "commandMapper = new CommandMapper(mockServer as unknown, mockProjectContext);",
      "context": "    } as ProjectContext;\n\n    commandMapper = new CommandMapper(mockServer as unknown, mockProjectContext);\n  });\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/utils/git-exec-enhanced.ts",
      "line": 176,
      "content": "...(options as unknown)!.context || [],",
      "context": "      ...options,\n      context: [\n        ...(options as unknown)!.context || [],\n        { label: \"Repository URL\", value: repoUrl },\n        { label: \"Target directory\", value: targetDir }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/git-exec-enhanced.ts",
      "line": 196,
      "content": "...(options as unknown)!.context || [],",
      "context": "      ...options,\n      context: [\n        ...(options as unknown)!.context || [],\n        { label: \"Remote\", value: remote },\n        ...(branch ? [{ label: \"Branch\", value: branch }] : [])",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/git-exec-enhanced.ts",
      "line": 216,
      "content": "...(options as unknown)!.context || [],",
      "context": "      ...options,\n      context: [\n        ...(options as unknown)!.context || [],\n        { label: \"Remote\", value: remote },\n        ...(branch ? [{ label: \"Branch\", value: branch }] : [])",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/git-exec-enhanced.ts",
      "line": 236,
      "content": "...(options as unknown)!.context || [],",
      "context": "      ...options,\n      context: [\n        ...(options as unknown)!.context || [],\n        { label: \"Remote\", value: remote },\n        ...(branch ? [{ label: \"Branch\", value: branch }] : [])",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/git-exec-enhanced.ts",
      "line": 254,
      "content": "...(options as unknown)!.context || [],",
      "context": "      ...options,\n      context: [\n        ...(options as unknown)!.context || [],\n        { label: \"Branch to merge\", value: branch }\n      ]",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/filter-messages.ts",
      "line": 36,
      "content": "const status = (options as unknown)!.status;",
      "context": "\n  // Add status filter message if status is provided\n  const status = (options as unknown)!.status;\n  if (status) {\n    messages.push(getStatusFilterMessage(status));",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/filter-messages.ts",
      "line": 41,
      "content": "else if (!(options as unknown)!.all) {",
      "context": "  }\n  // Add active tasks message if not showing all tasks and no specific status filter\n  else if (!(options as unknown)!.all) {\n    messages.push(getActiveTasksMessage());\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/package-manager.ts",
      "line": 74,
      "content": "const detectedPackageManager = (options as unknown)!.packageManager || detectPackageManager(repoPath);",
      "context": "  try {\n    // Detect or use provided package manager\n    const detectedPackageManager = (options as unknown)!.packageManager || detectPackageManager(repoPath);\n\n    if (!detectedPackageManager) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/package-manager.ts",
      "line": 93,
      "content": "if (!(options as unknown)!.quiet) {",
      "context": "\n    // Log installation start unless quiet\n    if (!(options as unknown)!.quiet) {\n      log.debug(`Installing dependencies using ${detectedPackageManager}...`);\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/package-manager.ts",
      "line": 100,
      "content": "stdio: (options as unknown)!.quiet ? \"ignore\" : \"inherit\",",
      "context": "    const result = execSync(installCmd, {\n      cwd: repoPath,\n      stdio: (options as unknown)!.quiet ? \"ignore\" : \"inherit\",\n    }) as unknown;\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/package-manager.ts",
      "line": 101,
      "content": "}) as unknown;",
      "context": "      cwd: repoPath,\n      stdio: (options as unknown)!.quiet ? \"ignore\" : \"inherit\",\n    }) as unknown;\n\n    // Handle the case where execSync returns null when stdio is \"ignore\"",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 35,
      "content": "const envAgentLogs = (process.env.ENABLE_AGENT_LOGS as unknown) === \"true\";",
      "context": "  const envMode = process.env.MINSKY_LOG_MODE || null;\n  const envLevel = process.env.LOGLEVEL || null;\n  const envAgentLogs = (process.env.ENABLE_AGENT_LOGS as unknown) === \"true\";\n\n  // If we have all config from environment, use it",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 146,
      "content": "log += ` ${JSON.stringify(metadata as unknown)}`;",
      "context": "      if (Object.keys(metadata).length > 0) {\n        try {\n          log += ` ${JSON.stringify(metadata as unknown)}`;\n        } catch (error) {\n          // ignore serialization errors for metadata in text logs",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 213,
      "content": "agentLogger.debug(message, context as unknown);",
      "context": "      // Otherwise, use agentLogger as normal\n      if (context) {\n        agentLogger.debug(message, context as unknown);\n      } else {\n        agentLogger.debug(message);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 224,
      "content": "agentLogger.info(message, context as unknown);",
      "context": "      }\n      if (context) {\n        agentLogger.info(message, context as unknown);\n      } else {\n        agentLogger.info(message);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 235,
      "content": "agentLogger.warn(message, context as unknown);",
      "context": "      }\n      if (context) {\n        agentLogger.warn(message, context as unknown);\n      } else {\n        agentLogger.warn(message);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 258,
      "content": "`${message}: ${context.originalError || JSON.stringify(context as unknown)}`",
      "context": "        ) {\n          programLogger.error(\n            `${message}: ${context.originalError || JSON.stringify(context as unknown)}`\n          );\n          if (context.stack) {",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 264,
      "content": "programLogger.error(message, context as unknown);",
      "context": "          }\n        } else {\n          programLogger.error(message, context as unknown);\n        }\n        return;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 281,
      "content": "agentLogger.error(message, context as unknown);",
      "context": "        (context.originalError || context.stack)\n      ) {\n        agentLogger.error(message, context as unknown);\n      } else {\n        agentLogger.error(message, context as unknown);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 283,
      "content": "agentLogger.error(message, context as unknown);",
      "context": "        agentLogger.error(message, context as unknown);\n      } else {\n        agentLogger.error(message, context as unknown);\n      }\n    },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 334,
      "content": "defaultLogger._internal.programLogger.error(\"Unhandled error or rejection, exiting.\", error as unknown);",
      "context": "  if (error) {\n    // Use default logger's internal program logger for unhandled errors that might crash the CLI\n    defaultLogger._internal.programLogger.error(\"Unhandled error or rejection, exiting.\", error as unknown);\n  }\n  // Give logs a moment to flush",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-utils.ts",
      "line": 42,
      "content": "const processExitSpy = spyOn(process, \"exit\" as unknown).mockImplementation(() => { throw new Error(\"process.exit called\"); });",
      "context": "  const consoleLogSpy = spyOn(console, \"log\").mockImplementation(() => {});\n  const consoleErrorSpy = spyOn(console, \"error\").mockImplementation(() => {});\n  const processExitSpy = spyOn(process, \"exit\" as unknown).mockImplementation(() => { throw new Error(\"process.exit called\"); });\n\n  return { consoleLogSpy, consoleErrorSpy, processExitSpy };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-utils.ts",
      "line": 58,
      "content": "} as unknown as DateConstructor as unknown;",
      "context": "  const MockDate = function () {\n    return new originalDate(fixedDate);\n  } as unknown as DateConstructor as unknown;\n\n  // Copy all the static methods from the original Date",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/repository-utils.ts",
      "line": 41,
      "content": "if (!(RepositoryMetadataCache as unknown)!.instance) {",
      "context": "   */\n  static getInstance(): RepositoryMetadataCache {\n    if (!(RepositoryMetadataCache as unknown)!.instance) {\n      (RepositoryMetadataCache as unknown)!.instance = new RepositoryMetadataCache();\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/repository-utils.ts",
      "line": 42,
      "content": "(RepositoryMetadataCache as unknown)!.instance = new RepositoryMetadataCache();",
      "context": "  static getInstance(): RepositoryMetadataCache {\n    if (!(RepositoryMetadataCache as unknown)!.instance) {\n      (RepositoryMetadataCache as unknown)!.instance = new RepositoryMetadataCache();\n    }\n    return (RepositoryMetadataCache as unknown)!.instance;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/repository-utils.ts",
      "line": 44,
      "content": "return (RepositoryMetadataCache as unknown)!.instance;",
      "context": "      (RepositoryMetadataCache as unknown)!.instance = new RepositoryMetadataCache();\n    }\n    return (RepositoryMetadataCache as unknown)!.instance;\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/repository-utils.ts",
      "line": 56,
      "content": "const cacheEntry = (this.cache as unknown).get(key) as CacheEntry<T> | undefined;",
      "context": "   */\n  async get<T>(key: string, fetcher: () => Promise<T>, ttl: number = this.DEFAULT_TTL): Promise<T> {\n    const cacheEntry = (this.cache as unknown).get(key) as CacheEntry<T> | undefined;\n    const now = Date.now();\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/repository-utils.ts",
      "line": 61,
      "content": "return (cacheEntry as unknown)!.data;",
      "context": "    // If the entry exists and is not expired, return it\n    if (cacheEntry && now - cacheEntry?.timestamp < ttl) {\n      return (cacheEntry as unknown)!.data;\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/repository-utils.ts",
      "line": 66,
      "content": "(this.cache as unknown).set(key, { data, timestamp: now });",
      "context": "    // Otherwise fetch the data and update the cache\n    const data = await fetcher();\n    (this.cache as unknown).set(key, { data, timestamp: now });\n    return data;\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/repository-utils.ts",
      "line": 77,
      "content": "(this.cache as unknown).set(key, { data, timestamp: Date.now() });",
      "context": "   */\n  set<T>(key: string, data: T): void {\n    (this.cache as unknown).set(key, { data, timestamp: Date.now() });\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/repository-utils.ts",
      "line": 86,
      "content": "(this.cache as unknown).delete(key);",
      "context": "   */\n  invalidate(key: string): void {\n    (this.cache as unknown).delete(key);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/repository-utils.ts",
      "line": 98,
      "content": "(this.cache as unknown).delete(key);",
      "context": "    for (const key of Array.from(this.cache.keys())) {\n      if (key.startsWith(prefix)) {\n        (this.cache as unknown).delete(key);\n      }\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/repository-utils.ts",
      "line": 107,
      "content": "(this.cache as unknown).clear();",
      "context": "   */\n  invalidateAll(): void {\n    (this.cache as unknown).clear();\n  }\n}",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/repository-utils.ts",
      "line": 127,
      "content": "key += `:${JSON.stringify(params as unknown)}`;",
      "context": "\n  if (params) {\n    key += `:${JSON.stringify(params as unknown)}`;\n  }\n",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/utils/repo.ts",
      "line": 13,
      "content": "return resolveRepoPathInternal(options as unknown);",
      "context": " */\nexport async function resolveRepoPath(options: RepoResolutionOptions = {}): Promise<string> {\n  return resolveRepoPathInternal(options as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/zod-error-formatter.ts",
      "line": 72,
      "content": "const enumIssue = issue as unknown; // Cast to access enum-specific properties",
      "context": "  }\n  \n  const enumIssue = issue as unknown; // Cast to access enum-specific properties\n  const value = enumIssue.received;\n  const options = enumIssue.options as string[];",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/zod-error-formatter.ts",
      "line": 109,
      "content": "const typeIssue = issue as unknown; // Cast to access type-specific properties",
      "context": "  }\n  \n  const typeIssue = issue as unknown; // Cast to access type-specific properties\n  const expectedType = typeIssue.expected;\n  const receivedType = typeIssue.received;",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/zod-error-formatter.ts",
      "line": 124,
      "content": "const sizeIssue = issue as unknown; // Cast to access size-specific properties",
      "context": "  }\n  \n  const sizeIssue = issue as unknown; // Cast to access size-specific properties\n  const minimum = sizeIssue.minimum;\n  const type = sizeIssue.type;",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/zod-error-formatter.ts",
      "line": 147,
      "content": "const sizeIssue = issue as unknown; // Cast to access size-specific properties",
      "context": "  }\n  \n  const sizeIssue = issue as unknown; // Cast to access size-specific properties\n  const maximum = sizeIssue.maximum;\n  const type = sizeIssue.type;",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/zod-error-formatter.ts",
      "line": 170,
      "content": "const stringIssue = issue as unknown; // Cast to access string-specific properties",
      "context": "  }\n  \n  const stringIssue = issue as unknown; // Cast to access string-specific properties\n  const validation = stringIssue.validation;\n  ",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/type-guards.ts",
      "line": 4,
      "content": "* This module provides type guards and utility functions to help avoid 'as unknown' assertions",
      "context": " * Type Guards and Utilities\n *\n * This module provides type guards and utility functions to help avoid 'as unknown' assertions\n * by providing safer alternatives for common typing scenarios identified in task #280.\n *",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/type-guards.ts",
      "line": 7,
      "content": "* These utilities are designed to replace dangerous 'as unknown' patterns with proper type safety.",
      "context": " * by providing safer alternatives for common typing scenarios identified in task #280.\n *\n * These utilities are designed to replace dangerous 'as unknown' patterns with proper type safety.\n */\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/type-guards.ts",
      "line": 13,
      "content": "* Instead of: (someObject as unknown).property",
      "context": " * Safely access object properties with type checking\n *\n * Instead of: (someObject as unknown).property\n * Use: safeGet(someObject, 'property')\n */",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/type-guards.ts",
      "line": 26,
      "content": "* Instead of: (someObject as unknown).deep.property",
      "context": " * Safely access nested object properties\n *\n * Instead of: (someObject as unknown).deep.property\n * Use: safeGetNested(someObject, 'deep', 'property')\n */",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/type-guards.ts",
      "line": 44,
      "content": "* Instead of: (someObject as unknown).property",
      "context": " * Type guard to check if a value has a specific property\n *\n * Instead of: (someObject as unknown).property\n * Use: hasProperty(someObject, 'property') && someObject.property\n */",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/type-guards.ts",
      "line": 57,
      "content": "* Instead of: (someValue as unknown)()",
      "context": " * Type guard to check if a value is a function\n *\n * Instead of: (someValue as unknown)()\n * Use: isFunction(someValue) && someValue()\n */",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/type-guards.ts",
      "line": 67,
      "content": "* Instead of: (someValue as unknown).length",
      "context": " * Type guard to check if a value is an array\n *\n * Instead of: (someValue as unknown).length\n * Use: isArray(someValue) && someValue.length\n */",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/type-guards.ts",
      "line": 105,
      "content": "* Instead of: someValue as unknown as TargetType",
      "context": " * Safely cast a value to a specific type with validation\n *\n * Instead of: someValue as unknown as TargetType\n * Use: safeCast(someValue, isTargetType)\n */",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/type-guards.ts",
      "line": 115,
      "content": "* Instead of: (someValue as unknown)!",
      "context": " * Assert that a value is not null or undefined\n *\n * Instead of: (someValue as unknown)!\n * Use: assertDefined(someValue)\n */",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/type-guards.ts",
      "line": 125,
      "content": "* Environment variable utilities to avoid 'as unknown' with process.env",
      "context": "\n/**\n * Environment variable utilities to avoid 'as unknown' with process.env\n */\nexport const EnvUtils = {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/type-guards.ts",
      "line": 131,
      "content": "* Instead of: process.env.VARIABLE as unknown as string",
      "context": "   * Get environment variable as string\n   *\n   * Instead of: process.env.VARIABLE as unknown as string\n   * Use: EnvUtils.getString('VARIABLE')\n   */",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/type-guards.ts",
      "line": 142,
      "content": "* Instead of: Number(process.env.VARIABLE as unknown)",
      "context": "   * Get environment variable as number\n   *\n   * Instead of: Number(process.env.VARIABLE as unknown)\n   * Use: EnvUtils.getNumber('VARIABLE')\n   */",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/type-guards.ts",
      "line": 157,
      "content": "* Instead of: Boolean(process.env.VARIABLE as unknown)",
      "context": "   * Get environment variable as boolean\n   *\n   * Instead of: Boolean(process.env.VARIABLE as unknown)\n   * Use: EnvUtils.getBoolean('VARIABLE')\n   */",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/type-guards.ts",
      "line": 171,
      "content": "* Instead of: process.env.VARIABLE as unknown as string",
      "context": "   * Require environment variable (throws if not found)\n   *\n   * Instead of: process.env.VARIABLE as unknown as string\n   * Use: EnvUtils.require('VARIABLE')\n   */",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/type-guards.ts",
      "line": 186,
      "content": "* Instead of: JSON.parse(someString as unknown)",
      "context": " * Safe JSON parsing utilities\n *\n * Instead of: JSON.parse(someString as unknown)\n * Use: JsonUtils.safeParse(someString)\n */",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/utils/type-guards.ts",
      "line": 217,
      "content": "* Instead of: (someService as unknown).method()",
      "context": " * Service interface utilities\n *\n * Instead of: (someService as unknown).method()\n * Use: ServiceUtils.safeCall(someService, 'method')\n */",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/type-guards.ts",
      "line": 254,
      "content": "* Instead of: (options as unknown).property",
      "context": " * Configuration and options utilities\n *\n * Instead of: (options as unknown).property\n * Use: ConfigUtils.get(options, 'property')\n */",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/type-guards.ts",
      "line": 286,
      "content": "* Instead of: (someArray as unknown).map(...)",
      "context": " * Array utilities for unknown types\n *\n * Instead of: (someArray as unknown).map(...)\n * Use: ArrayUtils.safeMap(someArray, ...)\n */",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-helpers.ts",
      "line": 179,
      "content": "if (!result || (result as unknown)!.status === null) {",
      "context": " */\nexport function ensureValidCommandResult(result: SpawnSyncReturns<string>): void {\n  if (!result || (result as unknown)!.status === null) {\n    log.error(\"Command execution failed or was killed\");\n    throw new Error(\"Command execution failed\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-helpers.ts",
      "line": 184,
      "content": "if ((result as unknown)!.status !== 0) {",
      "context": "  }\n\n  if ((result as unknown)!.status !== 0) {\n    log.error(`Command failed with status ${(result as unknown)!.status}`);\n    log.error(`Stderr: ${(result as unknown)!.stderr}`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-helpers.ts",
      "line": 185,
      "content": "log.error(`Command failed with status ${(result as unknown)!.status}`);",
      "context": "\n  if ((result as unknown)!.status !== 0) {\n    log.error(`Command failed with status ${(result as unknown)!.status}`);\n    log.error(`Stderr: ${(result as unknown)!.stderr}`);\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-helpers.ts",
      "line": 186,
      "content": "log.error(`Stderr: ${(result as unknown)!.stderr}`);",
      "context": "  if ((result as unknown)!.status !== 0) {\n    log.error(`Command failed with status ${(result as unknown)!.status}`);\n    log.error(`Stderr: ${(result as unknown)!.stderr}`);\n  }\n}",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/types/project.ts",
      "line": 55,
      "content": "throw new Error(errorMessage as unknown);",
      "context": "    const errorMessage = `Invalid repository path: ${normalizedPath}`;\n    log.error(errorMessage);\n    throw new Error(errorMessage as unknown);\n  }\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/session/session-db-io.test.ts",
      "line": 67,
      "content": "const result = readSessionDbFile(undefined as unknown);",
      "context": "      // \"undefined is not an object (evaluating 'options.baseDir')\"\n      expect(() => {\n        const result = readSessionDbFile(undefined as unknown);\n        expect(result).toHaveProperty(\"sessions\");\n        expect(Array.isArray(result.sessions)).toBe(true);",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "src/domain/session/session-db-io.test.ts",
      "line": 78,
      "content": "const result = readSessionDbFile(null as unknown);",
      "context": "    test(\"should handle null options parameter without throwing runtime error\", () => {\n      expect(() => {\n        const result = readSessionDbFile(null as unknown);\n        expect(result).toHaveProperty(\"sessions\");\n        expect(Array.isArray(result.sessions)).toBe(true);",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "src/domain/session/session-db-io.test.ts",
      "line": 133,
      "content": "writeSessionsToFile(testState.sessions, undefined as unknown);",
      "context": "      // Test that the function doesn't throw when called with undefined options\n      expect(() => {\n        writeSessionsToFile(testState.sessions, undefined as unknown);\n      }).not.toThrow();\n    });",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "src/domain/session/session-db-io.test.ts",
      "line": 144,
      "content": "writeSessionsToFile(testState.sessions, null as unknown);",
      "context": "\n      expect(() => {\n        writeSessionsToFile(testState.sessions, null as unknown);\n      }).not.toThrow();\n    });",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "src/domain/session/session-db.test.ts",
      "line": 67,
      "content": "const state = initializeSessionDbState(undefined as unknown);",
      "context": "      // \"undefined is not an object (evaluating 'options.baseDir')\"\n      expect(() => {\n        const state = initializeSessionDbState(undefined as unknown);\n        expect(state).toHaveProperty(\"sessions\");\n        expect(state.sessions).toEqual([]);",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "src/domain/session/session-db.test.ts",
      "line": 79,
      "content": "const state = initializeSessionDbState(null as unknown);",
      "context": "      // Additional edge case to ensure robustness\n      expect(() => {\n        const state = initializeSessionDbState(null as unknown);\n        expect(state).toHaveProperty(\"sessions\");\n        expect(state.sessions).toEqual([]);",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "src/domain/session/session-db.test.ts",
      "line": 195,
      "content": "} as unknown;",
      "context": "        session: \"attempted-rename\",\n        branch: \"updated-branch\",\n      } as unknown;\n\n      const newState = updateSessionFn(state, \"test-session-1\", updates);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/session/session-db.test.ts",
      "line": 238,
      "content": "expect(() => getRepoPathFn(state, null as unknown)).toThrow(\"Session record is required\");",
      "context": "    it(\"should throw error for invalid input\", () => {\n      const state = createTestState();\n      expect(() => getRepoPathFn(state, null as unknown)).toThrow(\"Session record is required\");\n    });\n  });",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "src/domain/session/session-db.ts",
      "line": 97,
      "content": "const { session: _, ...safeUpdates } = updates as unknown;",
      "context": "  }\n\n  const { session: _, ...safeUpdates } = updates as unknown;\n  const updatedSessions = [...state.sessions];\n  updatedSessions[index] = { ...updatedSessions[index], ...safeUpdates };",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/session/session-db-io.ts",
      "line": 35,
      "content": "const sessions = JSON.parse(data as unknown);",
      "context": "\n    const data = readFileSync(dbPath, \"utf8\") as string;\n    const sessions = JSON.parse(data as unknown);\n\n    return sessions;",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/domain/ai/config-service.ts",
      "line": 46,
      "content": "provider: provider as unknown,",
      "context": "      // Create provider config from unified configuration\n      return {\n        provider: provider as unknown,\n        apiKey,\n        baseURL: providerConfig.base_url,",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/ai/config-service.ts",
      "line": 71,
      "content": "return (result.resolved.ai as any).default_provider || \"openai\" as unknown;",
      "context": "    try {\n      const result = await (this.configService as any).loadConfiguration((process as any).cwd());\n      return (result.resolved.ai as any).default_provider || \"openai\" as unknown;\n    } catch (error) {\n      log.error(\"Failed to get default provider\", { error });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git/pr-generation-operations.ts",
      "line": 123,
      "content": "throw new MinskyError(createSessionNotFoundMessage(sessionName, context as unknown));",
      "context": "    const context = createErrorContext().addCommand(\"minsky git pr\").build();\n\n    throw new MinskyError(createSessionNotFoundMessage(sessionName, context as unknown));\n  }\n  const workdir = deps.getSessionWorkdir(sessionName);",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/__tests__/tasks.test.ts",
      "line": 43,
      "content": "backends: [] as unknown,",
      "context": "  ),\n  setTaskStatus: createMock(() => Promise.resolve()),\n  backends: [] as unknown,\n  currentBackend: {} as unknown,\n  getWorkspacePath: createMock(() => \"/mock/workspace/path\"),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/__tests__/tasks.test.ts",
      "line": 44,
      "content": "currentBackend: {} as unknown,",
      "context": "  setTaskStatus: createMock(() => Promise.resolve()),\n  backends: [] as unknown,\n  currentBackend: {} as unknown,\n  getWorkspacePath: createMock(() => \"/mock/workspace/path\"),\n  createTask: createMock((_specPath: unknown) => Promise.resolve({ ...mockTask, id: \"#new\" })),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/__tests__/tasks.test.ts",
      "line": 51,
      "content": "const mockCreateTaskService = createMock(() => mockTaskService as unknown);",
      "context": "const mockResolveRepoPath = createMock(() => Promise.resolve(\"/mock/repo/path\"));\nconst mockResolveMainWorkspacePath = createMock(() => Promise.resolve(\"/mock/workspace/path\"));\nconst mockCreateTaskService = createMock(() => mockTaskService as unknown);\n\n// Type assertion for mock dependencies",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/__tests__/tasks.test.ts",
      "line": 58,
      "content": "} as unknown; // Cast to any to avoid TypeScript errors with the deps parameter",
      "context": "  resolveMainWorkspacePath: mockResolveMainWorkspacePath,\n  createTaskService: mockCreateTaskService,\n} as unknown; // Cast to any to avoid TypeScript errors with the deps parameter\n\ndescribe(\"interface-agnostic task functions\", () => {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/__tests__/tasks.test.ts",
      "line": 214,
      "content": "status: \"INVALID-STATUS\" as unknown,",
      "context": "      const params = {\n        taskId: \"#TEST_VALUE\",\n        status: \"INVALID-STATUS\" as unknown,\n        backend: \"markdown\",\n      };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/repository/index.ts",
      "line": 235,
      "content": "return new LocalGitBackend(config as unknown);",
      "context": "\n    const { LocalGitBackend } = await import(\"./local\");\n    return new LocalGitBackend(config as unknown);\n  }\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/repository/index.ts",
      "line": 269,
      "content": "return new RemoteGitBackend(config as unknown);",
      "context": "\n    const { RemoteGitBackend } = await import(\"./remote\");\n    return new RemoteGitBackend(config as unknown);\n  }\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/repository/index.ts",
      "line": 290,
      "content": "return new GitHubBackend(config as unknown);",
      "context": "\n    const { GitHubBackend } = await import(\"./github\");\n    return new GitHubBackend(config as unknown);\n  }\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/repository/remote.ts",
      "line": 244,
      "content": "(this.repoUrl as unknown).startsWith(\"git@\") ||",
      "context": "      // Check if the URL has a git protocol, or ends with .git\n      const isGitUrl =\n        (this.repoUrl as unknown).startsWith(\"git@\") ||\n        (this.repoUrl as unknown).startsWith(\"git://\") ||\n        (this.repoUrl as unknown).startsWith(\"http://\") ||",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/remote.ts",
      "line": 245,
      "content": "(this.repoUrl as unknown).startsWith(\"git://\") ||",
      "context": "      const isGitUrl =\n        (this.repoUrl as unknown).startsWith(\"git@\") ||\n        (this.repoUrl as unknown).startsWith(\"git://\") ||\n        (this.repoUrl as unknown).startsWith(\"http://\") ||\n        (this.repoUrl as unknown).startsWith(\"https://\") ||",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/remote.ts",
      "line": 246,
      "content": "(this.repoUrl as unknown).startsWith(\"http://\") ||",
      "context": "        (this.repoUrl as unknown).startsWith(\"git@\") ||\n        (this.repoUrl as unknown).startsWith(\"git://\") ||\n        (this.repoUrl as unknown).startsWith(\"http://\") ||\n        (this.repoUrl as unknown).startsWith(\"https://\") ||\n        (this.repoUrl as unknown).endsWith(\".git\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/remote.ts",
      "line": 247,
      "content": "(this.repoUrl as unknown).startsWith(\"https://\") ||",
      "context": "        (this.repoUrl as unknown).startsWith(\"git://\") ||\n        (this.repoUrl as unknown).startsWith(\"http://\") ||\n        (this.repoUrl as unknown).startsWith(\"https://\") ||\n        (this.repoUrl as unknown).endsWith(\".git\");\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/remote.ts",
      "line": 248,
      "content": "(this.repoUrl as unknown).endsWith(\".git\");",
      "context": "        (this.repoUrl as unknown).startsWith(\"http://\") ||\n        (this.repoUrl as unknown).startsWith(\"https://\") ||\n        (this.repoUrl as unknown).endsWith(\".git\");\n\n      if (!isGitUrl) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/remote.ts",
      "line": 293,
      "content": "const sessions = await (this.sessionDb as unknown).listSessions();",
      "context": "\n      // This is a more complete implementation that would work with actual repositories\n      const sessions = await (this.sessionDb as unknown).listSessions();\n      const currentSessions = sessions.filter((s) => s.repoUrl === this.repoUrl);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/remote.ts",
      "line": 371,
      "content": "const sessions = await (this.sessionDb as unknown).listSessions();",
      "context": "      // 3. Pull from remote repository\n\n      const sessions = await (this.sessionDb as unknown).listSessions();\n      const currentSessions = sessions.filter((s) => s.repoUrl === this.repoUrl);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/local.ts",
      "line": 189,
      "content": "if (!(this.repoUrl as unknown).includes(\"://\") && !(this.repoUrl as unknown).includes(\"@\")) {",
      "context": "    try {\n      // If the repo is a local path, check if it has a .git directory\n      if (!(this.repoUrl as unknown).includes(\"://\") && !(this.repoUrl as unknown).includes(\"@\")) {\n        const { stdout } = await execAsync(\n          `test -d \"${this.repoUrl}/.git\" && echo \"true\" || echo \"false\"`",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 115,
      "content": "const result = await (this.gitService as unknown).clone({",
      "context": "    try {\n      // Use GitService's clone method to delegate credential handling to Git\n      const result = await (this.gitService as unknown).clone({\n        repoUrl: this.repoUrl,\n        session,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 188,
      "content": "const sessions = await (this.sessionDb as unknown).listSessions();",
      "context": "    try {\n      // Find a session for this repository\n      const sessions = await (this.sessionDb as unknown).listSessions();\n      const repoSession = sessions.find((session) => session.repoName === this.repoName);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 199,
      "content": "const gitStatus = await (this.gitService as unknown).getStatus(workdir);",
      "context": "\n      // Use GitService to get repository status\n      const gitStatus = await (this.gitService as unknown).getStatus(workdir);\n\n      // Get additional information directly",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 295,
      "content": "const sessions = await (this.sessionDb as unknown).listSessions();",
      "context": "    // If no session is provided, find one for this repository\n    try {\n      const sessions = await (this.sessionDb as unknown).listSessions();\n      const repoSession = sessions.find((s) => s.repoName === this.repoName);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 381,
      "content": "const sessions = await (this.sessionDb as unknown).listSessions();",
      "context": "    try {\n      // Find a session for this repository\n      const sessions = await (this.sessionDb as unknown).listSessions();\n      const repoSession = sessions.find((session) => session.repoName === this.repoName);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 424,
      "content": "const sessions = await (this.sessionDb as unknown).listSessions();",
      "context": "    try {\n      // Find a session for this repository\n      const sessions = await (this.sessionDb as unknown).listSessions();\n      const repoSession = sessions.find((session) => session.repoName === this.repoName);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 438,
      "content": "const pullResult = await (this.gitService as unknown).pullLatest(workdir);",
      "context": "\n      // Use GitService for pulling changes\n      const pullResult = await (this.gitService as unknown).pullLatest(workdir);\n\n      return {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 464,
      "content": "const sessions = await (this.sessionDb as unknown).listSessions();",
      "context": "    try {\n      // Find a session for this repository\n      const sessions = await (this.sessionDb as unknown).listSessions();\n      const repoSession = sessions.find((session) => session.repoName === this.repoName);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace/local-workspace-backend.ts",
      "line": 110,
      "content": "throw new FileNotFoundError(workspaceDir, relativePath, error as unknown);",
      "context": "      // Handle file not found\n      if (error instanceof Error && \"code\" in error && (error as any)?.code === \"ENOENT\") {\n        throw new FileNotFoundError(workspaceDir, relativePath, error as unknown);\n      }\n      ",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/workspace/local-workspace-backend.ts",
      "line": 209,
      "content": "throw new FileNotFoundError(workspaceDir, relativePath, error as unknown);",
      "context": "      // Handle file not found\n      if (error instanceof Error && \"code\" in error && (error as any)?.code === \"ENOENT\") {\n        throw new FileNotFoundError(workspaceDir, relativePath, error as unknown);\n      }\n      ",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/workspace/local-workspace-backend.ts",
      "line": 243,
      "content": "const entryPath = join(fullPath, entry as unknown);",
      "context": "      \n      for (const entry of entries) {\n        const entryPath = join(fullPath, entry as unknown);\n        try {\n          const fileInfo = await this.getFileInfo(entryPath, workspaceDir);",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/workspace/local-workspace-backend.ts",
      "line": 276,
      "content": "throw new FileNotFoundError(workspaceDir, relativePath || \".\", error as unknown);",
      "context": "      // Handle directory not found\n      if (error instanceof Error && \"code\" in error && (error as any)?.code === \"ENOENT\") {\n        throw new FileNotFoundError(workspaceDir, relativePath || \".\", error as unknown);\n      }\n      ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 168,
      "content": "throw new Error(\"Cannot serialize null or undefined state\" as unknown);",
      "context": "      // Validate state before serialization to prevent circular references\n      if (state === null || state === undefined) {\n        throw new Error(\"Cannot serialize null or undefined state\" as unknown);\n      }\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 216,
      "content": "const entity = entities.find((e) => (e as unknown)[this.idField] === id);",
      "context": "    const state = result.data;\n    const entities = this.getEntitiesFromState(state);\n    const entity = entities.find((e) => (e as unknown)[this.idField] === id);\n\n    return entity || null;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 241,
      "content": "for (const [key, value] of Object.entries(options as unknown)) {",
      "context": "    // Filter entities based on query options\n    return entities.filter((entity) => {\n      for (const [key, value] of Object.entries(options as unknown)) {\n        if ((entity as unknown)[key] !== value) {\n          return false;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 242,
      "content": "if ((entity as unknown)[key] !== value) {",
      "context": "    return entities.filter((entity) => {\n      for (const [key, value] of Object.entries(options as unknown)) {\n        if ((entity as unknown)[key] !== value) {\n          return false;\n        }",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 268,
      "content": "const id = (entity as unknown)[this.idField];",
      "context": "\n      // Check if entity with this ID already exists\n      const id = (entity as unknown)[this.idField];\n      if (id && entities.some((e) => (e as unknown)[this.idField] === id)) {\n        throw new Error(`Entity with ID ${id} already exists`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 269,
      "content": "if (id && entities.some((e) => (e as unknown)[this.idField] === id)) {",
      "context": "      // Check if entity with this ID already exists\n      const id = (entity as unknown)[this.idField];\n      if (id && entities.some((e) => (e as unknown)[this.idField] === id)) {\n        throw new Error(`Entity with ID ${id} already exists`);\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 308,
      "content": "const index = entities.findIndex((e) => (e as unknown)[this.idField] === id);",
      "context": "\n      // Find entity index\n      const index = entities.findIndex((e) => (e as unknown)[this.idField] === id);\n      if (index === -1) {\n        return null;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 348,
      "content": "const index = entities.findIndex((e) => (e as unknown)[this.idField] === id);",
      "context": "\n      // Find entity index\n      const index = entities.findIndex((e) => (e as unknown)[this.idField] === id);\n      if (index === -1) {\n        return false;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 452,
      "content": "return new JsonFileStorage<T, S>(options as unknown);",
      "context": "  options: JsonFileStorageOptions<S>\n): DatabaseStorage<T, S> {\n  return new JsonFileStorage<T, S>(options as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/storage/database-integrity-checker.ts",
      "line": 248,
      "content": "const integrityResult = db.prepare(\"PRAGMA integrity_check\").get() as unknown;",
      "context": "        try {\n          // Check database integrity\n          const integrityResult = db.prepare(\"PRAGMA integrity_check\").get() as unknown;\n          if (integrityResult?.integrity_check !== \"ok\") {\n            result.isValid = false;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/database-integrity-checker.ts",
      "line": 264,
      "content": "const sessionCount = db.prepare(\"SELECT COUNT(*) as count FROM sessions\").get() as unknown;",
      "context": "          // Check session count\n          try {\n            const sessionCount = db.prepare(\"SELECT COUNT(*) as count FROM sessions\").get() as unknown;\n            if (sessionCount?.count === 0) {\n              result.warnings.push(\"Database is empty - no sessions found\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 97,
      "content": "const result = await (this.storage as unknown).readState();",
      "context": "  async getTasksData(): Promise<TaskReadOperationResult> {\n    try {\n      const result = await (this.storage as unknown).readState();\n      if (!result.success) {\n        return {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 102,
      "content": "filePath: (this.storage as unknown).getStorageLocation(),",
      "context": "          success: false,\n          error: result.error,\n          filePath: (this.storage as unknown).getStorageLocation(),\n        } as unknown;\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 103,
      "content": "} as unknown;",
      "context": "          error: result.error,\n          filePath: (this.storage as unknown).getStorageLocation(),\n        } as unknown;\n      }\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 113,
      "content": "filePath: (this.storage as unknown).getStorageLocation(),",
      "context": "        success: true,\n        content,\n        filePath: (this.storage as unknown).getStorageLocation(),\n      };\n    } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 120,
      "content": "filePath: (this.storage as unknown).getStorageLocation(),",
      "context": "        success: false,\n        error: typedError,\n        filePath: (this.storage as unknown).getStorageLocation(),\n      };\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 167,
      "content": "storageLocation: (this.storage as unknown).getStorageLocation(),",
      "context": "      lastUpdated: new Date().toISOString(),\n      metadata: {\n        storageLocation: (this.storage as unknown).getStorageLocation(),\n        backendType: this.name,\n        workspacePath: this.workspacePath,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 285,
      "content": "storageLocation: (this.storage as unknown).getStorageLocation(),",
      "context": "        lastUpdated: new Date().toISOString(),\n        metadata: {\n          storageLocation: (this.storage as unknown).getStorageLocation(),\n          backendType: this.name,\n          workspacePath: this.workspacePath,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 292,
      "content": "await (this.storage as unknown).initialize();",
      "context": "\n      // Initialize storage if needed\n      await (this.storage as unknown).initialize();\n\n      // Write to storage",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 295,
      "content": "const result = await (this.storage as unknown).writeState(state);",
      "context": "\n      // Write to storage\n      const result = await (this.storage as unknown).writeState(state);\n\n      return {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 301,
      "content": "filePath: (this.storage as unknown).getStorageLocation(),",
      "context": "        error: result.error,\n        bytesWritten: result.bytesWritten,\n        filePath: (this.storage as unknown).getStorageLocation(),\n      } as unknown;\n    } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 302,
      "content": "} as unknown;",
      "context": "        bytesWritten: result.bytesWritten,\n        filePath: (this.storage as unknown).getStorageLocation(),\n      } as unknown;\n    } catch (error) {\n      const typedError = error instanceof Error ? error : new Error(String(error as any));",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 308,
      "content": "filePath: (this.storage as unknown).getStorageLocation(),",
      "context": "        success: false,\n        error: typedError,\n        filePath: (this.storage as unknown).getStorageLocation(),\n      };\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 406,
      "content": "await (this.storage as unknown).initialize();",
      "context": "  async getAllTasks(): Promise<TaskData[]> {\n    try {\n      await (this.storage as unknown).initialize();\n      return await (this.storage as unknown).getEntities();\n    } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 407,
      "content": "return await (this.storage as unknown).getEntities();",
      "context": "    try {\n      await (this.storage as unknown).initialize();\n      return await (this.storage as unknown).getEntities();\n    } catch (error) {\n      log.error(\"Failed to get all tasks from database\", {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 423,
      "content": "await (this.storage as unknown).initialize();",
      "context": "  async getTaskById(id: string): Promise<TaskData | null> {\n    try {\n      await (this.storage as unknown).initialize();\n      return await (this.storage as unknown).getEntity(id);\n    } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 424,
      "content": "return await (this.storage as unknown).getEntity(id);",
      "context": "    try {\n      await (this.storage as unknown).initialize();\n      return await (this.storage as unknown).getEntity(id);\n    } catch (error) {\n      log.error(\"Failed to get task by ID from database\", {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 441,
      "content": "await (this.storage as unknown).initialize();",
      "context": "  async createTaskData(task: TaskData): Promise<TaskData> {\n    try {\n      await (this.storage as unknown).initialize();\n      return await (this.storage as unknown).createEntity(task);\n    } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 442,
      "content": "return await (this.storage as unknown).createEntity(task);",
      "context": "    try {\n      await (this.storage as unknown).initialize();\n      return await (this.storage as unknown).createEntity(task);\n    } catch (error) {\n      log.error(\"Failed to create task in database\", {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 460,
      "content": "await (this.storage as unknown).initialize();",
      "context": "  async updateTaskData(id: string, updates: Partial<TaskData>): Promise<TaskData | null> {\n    try {\n      await (this.storage as unknown).initialize();\n      return await (this.storage as unknown).updateEntity(id, updates);\n    } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 461,
      "content": "return await (this.storage as unknown).updateEntity(id, updates);",
      "context": "    try {\n      await (this.storage as unknown).initialize();\n      return await (this.storage as unknown).updateEntity(id, updates);\n    } catch (error) {\n      log.error(\"Failed to update task in database\", {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 479,
      "content": "await (this.storage as unknown).initialize();",
      "context": "  async deleteTaskData(id: string): Promise<boolean> {\n    try {\n      await (this.storage as unknown).initialize();\n      return await (this.storage as unknown).deleteEntity(id);\n    } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 480,
      "content": "return await (this.storage as unknown).deleteEntity(id);",
      "context": "    try {\n      await (this.storage as unknown).initialize();\n      return await (this.storage as unknown).deleteEntity(id);\n    } catch (error) {\n      log.error(\"Failed to delete task from database\", {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 495,
      "content": "return (this.storage as unknown).getStorageLocation();",
      "context": "   */\n  getStorageLocation(): string {\n    return (this.storage as unknown).getStorageLocation();\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 554,
      "content": "return new JsonFileTaskBackend(config as unknown);",
      "context": "export function createJsonFileTaskBackend(config: JsonFileTaskBackendOptions): TaskBackend {\n  // Simply return the instance since JsonFileTaskBackend already implements TaskBackend\n  return new JsonFileTaskBackend(config as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks/task-backend-router.ts",
      "line": 187,
      "content": "return (this.specialWorkspaceManager as unknown).getWorkspacePath();",
      "context": "    }\n\n    return (this.specialWorkspaceManager as unknown).getWorkspacePath();\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/task-backend-router.ts",
      "line": 209,
      "content": "return (this.specialWorkspaceManager as unknown).performOperation(operation, callback as unknown);",
      "context": "      }\n\n      return (this.specialWorkspaceManager as unknown).performOperation(operation, callback as unknown);\n    } else {\n      // Use current working directory for external backends",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.test.ts",
      "line": 240,
      "content": "const updatedTasks = setTaskStatus(testTasks, \"#001\", \"INVALID\" as unknown);",
      "context": "\n    test(\"should return original array if status is invalid\", () => {\n      const updatedTasks = setTaskStatus(testTasks, \"#001\", \"INVALID\" as unknown);\n      expect(updatedTasks).toEqual(testTasks);\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/task-backend-router.test.ts",
      "line": 70,
      "content": "delete (markdownBackend as unknown).isInTreeBackend;",
      "context": "\n      // Remove the isInTreeBackend method to test auto-detection\n      delete (markdownBackend as unknown).isInTreeBackend;\n      // Also delete from prototype if needed\n      const proto = Object.getPrototypeOf(markdownBackend);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/task-backend-router.test.ts",
      "line": 78,
      "content": "expect(typeof (markdownBackend as unknown).isInTreeBackend).toBe(\"undefined\");",
      "context": "\n      // Verify it's actually deleted\n      expect(typeof (markdownBackend as unknown).isInTreeBackend).toBe(\"undefined\");\n\n      const routingInfo = router.getBackendRoutingInfo(markdownBackend);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/task-backend-router.test.ts",
      "line": 96,
      "content": "delete (jsonBackend as unknown).isInTreeBackend;",
      "context": "\n      // Remove the isInTreeBackend method to test auto-detection\n      delete (jsonBackend as unknown).isInTreeBackend;\n      // Also delete from prototype if needed\n      const proto = Object.getPrototypeOf(jsonBackend);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/task-backend-router.test.ts",
      "line": 104,
      "content": "expect(typeof (jsonBackend as unknown).isInTreeBackend).toBe(\"undefined\");",
      "context": "\n      // Verify it's actually deleted\n      expect(typeof (jsonBackend as unknown).isInTreeBackend).toBe(\"undefined\");\n\n      const routingInfo = router.getBackendRoutingInfo(jsonBackend);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/task-backend-router.test.ts",
      "line": 122,
      "content": "delete (jsonBackend as unknown).isInTreeBackend;",
      "context": "\n      // Remove the isInTreeBackend method to test auto-detection\n      delete (jsonBackend as unknown).isInTreeBackend;\n      // Also delete from prototype if needed\n      const proto = Object.getPrototypeOf(jsonBackend);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/task-backend-router.test.ts",
      "line": 130,
      "content": "expect(typeof (jsonBackend as unknown).isInTreeBackend).toBe(\"undefined\");",
      "context": "\n      // Verify it's actually deleted\n      expect(typeof (jsonBackend as unknown).isInTreeBackend).toBe(\"undefined\");\n\n      const routingInfo = router.getBackendRoutingInfo(jsonBackend);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/task-backend-router.test.ts",
      "line": 148,
      "content": "delete (jsonBackend as unknown).isInTreeBackend;",
      "context": "\n      // Remove the isInTreeBackend method to test auto-detection\n      delete (jsonBackend as unknown).isInTreeBackend;\n      // Also delete from prototype if needed\n      const proto = Object.getPrototypeOf(jsonBackend);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/task-backend-router.test.ts",
      "line": 156,
      "content": "expect(typeof (jsonBackend as unknown).isInTreeBackend).toBe(\"undefined\");",
      "context": "\n      // Verify it's actually deleted\n      expect(typeof (jsonBackend as unknown).isInTreeBackend).toBe(\"undefined\");\n\n      const routingInfo = router.getBackendRoutingInfo(jsonBackend);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/task-backend-router.test.ts",
      "line": 176,
      "content": "(backend as unknown).isInTreeBackend = () => true;",
      "context": "\n      // Mock the isInTreeBackend method to return true\n      (backend as unknown).isInTreeBackend = () => true;\n\n      const routingInfo = router.getBackendRoutingInfo(backend);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/task-backend-router.test.ts",
      "line": 193,
      "content": "(backend as unknown).isInTreeBackend = () => false;",
      "context": "\n      // Mock the isInTreeBackend method to return false\n      (backend as unknown).isInTreeBackend = () => false;\n\n      const routingInfo = router.getBackendRoutingInfo(backend);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/task-backend-router.test.ts",
      "line": 226,
      "content": "delete (backend as unknown).isInTreeBackend;",
      "context": "\n      // Remove the isInTreeBackend method to use auto-detection\n      delete (backend as unknown).isInTreeBackend;\n      // Also delete from prototype if needed\n      const proto = Object.getPrototypeOf(backend);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/task-backend-router.test.ts",
      "line": 270,
      "content": "} as unknown;",
      "context": "        name: \"sqlite\",\n        constructor: { name: \"SqliteTaskBackend\" }\n      } as unknown;\n\n      const routingInfo = router.getBackendRoutingInfo(mockSqliteBackend);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/task-backend-router.test.ts",
      "line": 285,
      "content": "} as unknown;",
      "context": "        name: \"postgres\",\n        constructor: { name: \"PostgresTaskBackend\" }\n      } as unknown;\n\n      const routingInfo = router.getBackendRoutingInfo(mockPostgresBackend);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/task-backend-router.test.ts",
      "line": 301,
      "content": "} as unknown;",
      "context": "        name: \"unknown\",\n        constructor: { name: \"UnknownTaskBackend\" }\n      } as unknown;\n\n      const routingInfo = router.getBackendRoutingInfo(mockUnknownBackend);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/task-backend-router.test.ts",
      "line": 322,
      "content": "} as unknown;",
      "context": "          throw new Error(\"Storage location not available\");\n        }\n      } as unknown;\n\n      const routingInfo = router.getBackendRoutingInfo(mockBackend);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/githubBackendFactory.ts",
      "line": 26,
      "content": "if (!config || !(config as unknown)!.githubToken || !(config as unknown)!.owner || !(config as unknown)!.repo) {",
      "context": "\n    const config = getGitHubBackendConfig(workspacePath, { logErrors: shouldLogErrors });\n    if (!config || !(config as unknown)!.githubToken || !(config as unknown)!.owner || !(config as unknown)!.repo) {\n      return null;\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubBackendFactory.ts",
      "line": 33,
      "content": "githubToken: (config as unknown)!.githubToken,",
      "context": "      name: \"github-issues\",\n      workspacePath: workspacePath,\n      githubToken: (config as unknown)!.githubToken,\n      owner: (config as unknown)!.owner,\n      repo: (config as unknown)!.repo,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubBackendFactory.ts",
      "line": 34,
      "content": "owner: (config as unknown)!.owner,",
      "context": "      workspacePath: workspacePath,\n      githubToken: (config as unknown)!.githubToken,\n      owner: (config as unknown)!.owner,\n      repo: (config as unknown)!.repo,\n      statusLabels: (config as unknown)!.statusLabels,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubBackendFactory.ts",
      "line": 35,
      "content": "repo: (config as unknown)!.repo,",
      "context": "      githubToken: (config as unknown)!.githubToken,\n      owner: (config as unknown)!.owner,\n      repo: (config as unknown)!.repo,\n      statusLabels: (config as unknown)!.statusLabels,\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubBackendFactory.ts",
      "line": 36,
      "content": "statusLabels: (config as unknown)!.statusLabels,",
      "context": "      owner: (config as unknown)!.owner,\n      repo: (config as unknown)!.repo,\n      statusLabels: (config as unknown)!.statusLabels,\n    });\n  } catch (_error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.test.ts",
      "line": 172,
      "content": "const saveTasksDataSpy = mockBackend.saveTasksData as unknown as jest.SpyInstance;",
      "context": "    test(\"should update a task's status\", async () => {\n      // Setup spy to check what's passed to saveTasksData\n      const saveTasksDataSpy = mockBackend.saveTasksData as unknown as jest.SpyInstance;\n      const formatTasksSpy = mockBackend.formatTasks as unknown as jest.SpyInstance;\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/tasks/taskService.test.ts",
      "line": 173,
      "content": "const formatTasksSpy = mockBackend.formatTasks as unknown as jest.SpyInstance;",
      "context": "      // Setup spy to check what's passed to saveTasksData\n      const saveTasksDataSpy = mockBackend.saveTasksData as unknown as jest.SpyInstance;\n      const formatTasksSpy = mockBackend.formatTasks as unknown as jest.SpyInstance;\n\n      await taskService.setTaskStatus(\"#001\", \"DONE\");",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 174,
      "content": "const response = await (this.octokit.rest.issues as unknown).listForRepo({",
      "context": "      // Fetch all issues with Minsky labels\n      const labelQueries = Object.values(this.statusLabels).join(\",\");\n      const response = await (this.octokit.rest.issues as unknown).listForRepo({\n        owner: this.owner,\n        repo: this.repo,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 189,
      "content": "const issueData = JSON.stringify(issues) as unknown;",
      "context": "\n      // Convert issues to a format that can be parsed by parseTasks\n      const issueData = JSON.stringify(issues) as unknown;\n\n      return {",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 227,
      "content": "const response = await (this.octokit.rest.issues as unknown).listForRepo({",
      "context": "\n      // Try to find the corresponding GitHub issue\n      const response = await (this.octokit.rest.issues as unknown).listForRepo({\n        owner: this.owner,\n        repo: this.repo,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 230,
      "content": "labels: Object.values(this.statusLabels).join(\",\") as unknown,",
      "context": "        owner: this.owner,\n        repo: this.repo,\n        labels: Object.values(this.statusLabels).join(\",\") as unknown,\n        state: \"all\",\n      }) as unknown;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 232,
      "content": "}) as unknown;",
      "context": "        labels: Object.values(this.statusLabels).join(\",\") as unknown,\n        state: \"all\",\n      }) as unknown;\n\n      const issue = response.data.find((issue) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 355,
      "content": "const githubIssue = metadata.githubIssue as unknown;",
      "context": "    // Add GitHub-specific metadata if available\n    if (metadata.githubIssue) {\n      const githubIssue = metadata.githubIssue as unknown;\n      content += \"## GitHub Issue\\n\";\n      content += `- Issue: #${githubIssue.number}\\n`;",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 477,
      "content": "return [(this.statusLabels as unknown)[status] || this.statusLabels.TODO];",
      "context": "\n  private getLabelsForTaskStatus(status: string): string[] {\n    return [(this.statusLabels as unknown)[status] || this.statusLabels.TODO];\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 658,
      "content": "return new GitHubIssuesTaskBackend(config as unknown);",
      "context": " */\nexport function createGitHubIssuesTaskBackend(config: GitHubIssuesTaskBackendOptions): TaskBackend {\n  return new GitHubIssuesTaskBackend(config as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks/real-world-workflow.test.ts",
      "line": 39,
      "content": "expect((jsonBackend as unknown).getStorageLocation()).toBe(testJsonPath);",
      "context": "\n      // 2. Verify the backend knows its storage location\n      expect((jsonBackend as unknown).getStorageLocation()).toBe(testJsonPath);\n\n      // 3. Create some test task data",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/real-world-workflow.test.ts",
      "line": 97,
      "content": "expect((jsonBackend as unknown).getStorageLocation()).toBe(expectedPath);",
      "context": "      // Should default to team-shareable location\n      const expectedPath = join(testBaseDir, \"process\", \"tasks.json\");\n      expect((jsonBackend as unknown).getStorageLocation()).toBe(expectedPath);\n    });\n  });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 101,
      "content": "`Backend '${backend}' not found. Available backends: ${(this.backends.map((b) => b.name) as unknown).join(\", \")}`",
      "context": "    if (!selectedBackend) {\n      throw new Error(\n        `Backend '${backend}' not found. Available backends: ${(this.backends.map((b) => b.name) as unknown).join(\", \")}`\n      );\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 114,
      "content": "const result = await (this.currentBackend as unknown).getTasksData();",
      "context": "  async listTasks(options?: TaskListOptions): Promise<TaskData[]> {\n    // Get raw data\n    const result = await (this.currentBackend as unknown).getTasksData();\n    if (!result.success || !result.content) {\n      return [];",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 120,
      "content": "let tasks = (this.currentBackend as unknown).parseTasks(result.content);",
      "context": "\n    // Parse data using pure function\n    let tasks = (this.currentBackend as unknown).parseTasks(result.content);\n\n    // Apply filters if provided",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 190,
      "content": "const result = await (this.currentBackend as unknown).getTasksData();",
      "context": "\n    // Get all tasks\n    const result = await (this.currentBackend as unknown).getTasksData();\n    if (!result.success || !result.content) {\n      throw new Error(`Failed to read tasks data: ${result.error.message}`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 196,
      "content": "const tasks = (this.currentBackend as unknown).parseTasks(result.content);",
      "context": "\n    // Parse tasks\n    const tasks = (this.currentBackend as unknown).parseTasks(result.content);\n\n    // Find the task to update using proper ID matching",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 214,
      "content": "const updatedContent = (this.currentBackend as unknown).formatTasks(updatedTasks);",
      "context": "\n    // Format the updated tasks\n    const updatedContent = (this.currentBackend as unknown).formatTasks(updatedTasks);\n\n    // Save the changes",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 217,
      "content": "const saveResult = await (this.currentBackend as unknown).saveTasksData(updatedContent);",
      "context": "\n    // Save the changes\n    const saveResult = await (this.currentBackend as unknown).saveTasksData(updatedContent);\n    if (!saveResult.success) {\n      throw new Error(`Failed to save tasks data: ${saveResult.error.message}`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 228,
      "content": "return (this.currentBackend as unknown).getWorkspacePath();",
      "context": "   */\n  getWorkspacePath(): string {\n    return (this.currentBackend as unknown).getWorkspacePath();\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 239,
      "content": "const specResult = await (this.currentBackend as unknown).getTaskSpecData(specPath);",
      "context": "  async createTask(specPath: string, options: CreateTaskOptions = {}): Promise<TaskData> {\n    // Read the spec file\n    const specResult = await (this.currentBackend as unknown).getTaskSpecData(specPath);\n    if (!specResult.success || !specResult.content) {\n      throw new Error(`Failed to read spec file: ${specResult.error.message}`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 245,
      "content": "const spec = (this.currentBackend as unknown).parseTaskSpec(specResult.content);",
      "context": "\n    // Parse the spec\n    const spec = (this.currentBackend as unknown).parseTaskSpec(specResult.content);\n\n    // Generate task ID if not provided",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 271,
      "content": "const specPath = (this.currentBackend as unknown).getTaskSpecPath(taskId, spec.title);",
      "context": "      // This prevents content truncation caused by formatTaskSpec generating templates\n      const originalContent = specResult.content;\n      const specPath = (this.currentBackend as unknown).getTaskSpecPath(taskId, spec.title);\n\n      // Find and replace the title line to add the task ID",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 280,
      "content": "const saveSpecResult = await (this.currentBackend as unknown).saveTaskSpecData(",
      "context": "      );\n\n      const saveSpecResult = await (this.currentBackend as unknown).saveTaskSpecData(\n        specPath,\n        updatedSpecContent",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 297,
      "content": "specPath: (this.currentBackend as unknown).getTaskSpecPath(taskId, spec.title),",
      "context": "      description: spec.description,\n      status: \"TODO\",\n      specPath: (this.currentBackend as unknown).getTaskSpecPath(taskId, spec.title),\n    };\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 301,
      "content": "const tasksResult = await (this.currentBackend as unknown).getTasksData();",
      "context": "\n    // Get current tasks and add the new one\n    const tasksResult = await (this.currentBackend as unknown).getTasksData();\n    let tasks: TaskData[] = [];\n    if (tasksResult.success && tasksResult.content) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 304,
      "content": "tasks = (this.currentBackend as unknown).parseTasks(tasksResult.content);",
      "context": "    let tasks: TaskData[] = [];\n    if (tasksResult.success && tasksResult.content) {\n      tasks = (this.currentBackend as unknown).parseTasks(tasksResult.content);\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 316,
      "content": "const updatedContent = (this.currentBackend as unknown).formatTasks(tasks);",
      "context": "\n    // Format and save the updated tasks\n    const updatedContent = (this.currentBackend as unknown).formatTasks(tasks);\n    const saveResult = await (this.currentBackend as unknown).saveTasksData(updatedContent);\n    if (!saveResult.success) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 317,
      "content": "const saveResult = await (this.currentBackend as unknown).saveTasksData(updatedContent);",
      "context": "    // Format and save the updated tasks\n    const updatedContent = (this.currentBackend as unknown).formatTasks(tasks);\n    const saveResult = await (this.currentBackend as unknown).saveTasksData(updatedContent);\n    if (!saveResult.success) {\n      throw new Error(`Failed to save tasks _data: ${saveResult.error.message}`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 378,
      "content": "const specResult = await (this.currentBackend as unknown).getTaskSpecData(task.specPath);",
      "context": "\n    // Read the spec file\n    const specResult = await (this.currentBackend as unknown).getTaskSpecData(task.specPath);\n    if (!specResult.success || !specResult.content) {\n      throw new Error(`Failed to read spec file: ${specResult.error.message}`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 384,
      "content": "const spec = (this.currentBackend as unknown).parseTaskSpec(specResult.content);",
      "context": "\n    // Parse the spec\n    const spec = (this.currentBackend as unknown).parseTaskSpec(specResult.content);\n\n    // Update the metadata",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 393,
      "content": "const updatedSpecContent = (this.currentBackend as unknown).formatTaskSpec(spec);",
      "context": "\n    // Format and save the updated spec\n    const updatedSpecContent = (this.currentBackend as unknown).formatTaskSpec(spec);\n    const saveSpecResult = await (this.currentBackend as unknown).saveTaskSpecData(\n      task.specPath,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 394,
      "content": "const saveSpecResult = await (this.currentBackend as unknown).saveTaskSpecData(",
      "context": "    // Format and save the updated spec\n    const updatedSpecContent = (this.currentBackend as unknown).formatTaskSpec(spec);\n    const saveSpecResult = await (this.currentBackend as unknown).saveTaskSpecData(\n      task.specPath,\n      updatedSpecContent",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 411,
      "content": "return await (this.currentBackend as unknown).deleteTask(id, options as unknown);",
      "context": "  async deleteTask(id: string, options: DeleteTaskOptions = {}): Promise<boolean> {\n    // Delegate to the current backend\n    return await (this.currentBackend as unknown).deleteTask(id, options as unknown);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 434,
      "content": "const specResult = await (this.currentBackend as unknown).getTaskSpecData(task.specPath);",
      "context": "\n    // Read the spec file\n    const specResult = await (this.currentBackend as unknown).getTaskSpecData(task.specPath);\n    if (!specResult.success || !specResult.content) {\n      throw new Error(`Failed to read spec file: ${specResult.error.message}`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 464,
      "content": "return (this.currentBackend as unknown).getTaskSpecPath(id, task.title);",
      "context": "\n    // Otherwise, generate the path using the backend\n    return (this.currentBackend as unknown).getTaskSpecPath(id, task.title);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 525,
      "content": "const task = await this.createTask(tempSpecPath, options as unknown);",
      "context": "\n      // Use the existing createTask method\n      const task = await this.createTask(tempSpecPath, options as unknown);\n\n      // Clean up the temporary file",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 584,
      "content": "return new TaskService(options as unknown);",
      "context": " */\nexport function createTaskService(options: TaskServiceOptions = {}): TaskService {\n  return new TaskService(options as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 601,
      "content": "return createTaskService(options as unknown);",
      "context": "  // If backend is explicitly provided, use the original function\n  if (backend) {\n    return createTaskService(options as unknown);\n  }\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 67,
      "content": "createTaskService: async (options) => await createConfiguredTaskService(options as unknown),",
      "context": "    resolveRepoPath,\n    resolveMainWorkspacePath,\n    createTaskService: async (options) => await createConfiguredTaskService(options as unknown),\n  }\n): Promise<any[]> {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 72,
      "content": "const validParams = taskListParamsSchema.parse(params as unknown);",
      "context": "  try {\n    // Validate params with Zod schema\n    const validParams = taskListParamsSchema.parse(params as unknown);\n\n    // Get the main workspace path (always resolves to main workspace, not session)",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 122,
      "content": "createTaskService: async (options) => await createConfiguredTaskService(options as unknown),",
      "context": "    resolveRepoPath,\n    resolveMainWorkspacePath,\n    createTaskService: async (options) => await createConfiguredTaskService(options as unknown),\n  }\n): Promise<any> {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 193,
      "content": "createTaskService: async (options) => await createConfiguredTaskService(options as unknown),",
      "context": "    resolveRepoPath,\n    resolveMainWorkspacePath,\n    createTaskService: async (options) => await createConfiguredTaskService(options as unknown),\n  }\n): Promise<string> {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 267,
      "content": "createTaskService: async (options) => await createConfiguredTaskService(options as unknown),",
      "context": "    resolveRepoPath,\n    resolveMainWorkspacePath,\n    createTaskService: async (options) => await createConfiguredTaskService(options as unknown),\n  }\n): Promise<void> {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 342,
      "content": "createTaskService: (options) => createTaskServiceImpl(options as unknown),",
      "context": "    resolveRepoPath,\n    resolveMainWorkspacePath,\n    createTaskService: (options) => createTaskServiceImpl(options as unknown),\n  }\n): Promise<any> {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 347,
      "content": "const validParams = taskCreateParamsSchema.parse(params as unknown);",
      "context": "  try {\n    // Validate params with Zod schema\n    const validParams = taskCreateParamsSchema.parse(params as unknown);\n\n    // First get the repo path (needed for workspace resolution)",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 393,
      "content": "createTaskService: (options) => createTaskServiceImpl(options as unknown),",
      "context": "    resolveRepoPath,\n    resolveMainWorkspacePath,\n    createTaskService: (options) => createTaskServiceImpl(options as unknown),\n  }\n): Promise<{ task: any; specPath: string; content: string; section?: string }> {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 398,
      "content": "const validParams = taskSpecContentParamsSchema.parse(params as unknown);",
      "context": "  try {\n    // Validate params with Zod schema\n    const validParams = taskSpecContentParamsSchema.parse(params as unknown);\n\n    // Normalize task ID",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 503,
      "content": "createTaskService: (options) => createTaskServiceImpl(options as unknown),",
      "context": "    resolveRepoPath,\n    resolveMainWorkspacePath,\n    createTaskService: (options) => createTaskServiceImpl(options as unknown),\n  }\n): Promise<any> {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 508,
      "content": "const validParams = taskCreateFromTitleAndDescriptionParamsSchema.parse(params as unknown);",
      "context": "  try {\n    // Validate params with Zod schema\n    const validParams = taskCreateFromTitleAndDescriptionParamsSchema.parse(params as unknown);\n\n    // First get the repo path (needed for workspace resolution)",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 531,
      "content": "description = ((await readFile(filePath, \"utf-8\")) as unknown).toString();",
      "context": "        // Resolve relative paths relative to current working directory\n        const filePath = require(\"path\").resolve(validParams.descriptionPath);\n        description = ((await readFile(filePath, \"utf-8\")) as unknown).toString();\n\n        if (!description.trim()) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 593,
      "content": "createTaskService: async (options) => await createConfiguredTaskService(options as unknown),",
      "context": "    resolveRepoPath,\n    resolveMainWorkspacePath,\n    createTaskService: async (options) => await createConfiguredTaskService(options as unknown),\n  }\n): Promise<{ success: boolean; taskId: string; task?: any }> {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks/special-workspace-integration.test.ts",
      "line": 96,
      "content": "delete (backend as unknown).isInTreeBackend;",
      "context": "\n      // Remove the isInTreeBackend method to test auto-detection\n      delete (backend as unknown).isInTreeBackend;\n      const proto = Object.getPrototypeOf(backend);\n      if (proto && typeof proto.isInTreeBackend === \"function\") {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/special-workspace-integration.test.ts",
      "line": 119,
      "content": "delete (backend as unknown).isInTreeBackend;",
      "context": "\n      // Remove the isInTreeBackend method to test auto-detection  \n      delete (backend as unknown).isInTreeBackend;\n      const proto = Object.getPrototypeOf(backend);\n      if (proto && typeof proto.isInTreeBackend === \"function\") {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/special-workspace-integration.test.ts",
      "line": 182,
      "content": "delete (backend as unknown).isInTreeBackend;",
      "context": "      // Remove isInTreeBackend methods to test auto-detection\n      [localBackend, teamBackend].forEach(backend => {\n        delete (backend as unknown).isInTreeBackend;\n        const proto = Object.getPrototypeOf(backend);\n        if (proto && typeof proto.isInTreeBackend === \"function\") {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/taskIO.ts",
      "line": 232,
      "content": "const taskIdNum = taskId!.startsWith(\"#\") ? (taskId as unknown)!.slice(1) : taskId;",
      "context": "  workspacePath: string\n): string {\n  const taskIdNum = taskId!.startsWith(\"#\") ? (taskId as unknown)!.slice(1) : taskId;\n  const normalizedTitle = title.toLowerCase().replace(/[^a-z0-9]+/g, \"-\");\n  return join(getTaskSpecsDirectoryPath(workspacePath), `${taskIdNum}-${normalizedTitle}.md`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/utils.test.ts",
      "line": 43,
      "content": "expect(normalizeTaskId(input as unknown)).toBeNull();",
      "context": "  for (const { input, note } of invalidInputs) {\n    test(`should return null for invalid input \"${String(input)}\" (${note})`, () => {\n      expect(normalizeTaskId(input as unknown)).toBeNull();\n    });\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/commands/mcp/index.ts",
      "line": 164,
      "content": "}) as unknown;",
      "context": "              mcpPort: transportType !== \"stdio\" ? port : undefined,\n              mcpHost: transportType !== \"stdio\" ? options.host : undefined,\n            }) as unknown;\n\n            if (inspectorResult.success) {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/commands/mcp/index.ts",
      "line": 202,
      "content": "const networkError = createNetworkError(error as unknown, port, options.host);",
      "context": "        if (isNetworkError(error as any)) {\n          const port = parseInt((options as any).port, 10);\n          const networkError = createNetworkError(error as unknown, port, options.host);\n          const isDebug = SharedErrorHandler.isDebugMode();\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/config/show.ts",
      "line": 39,
      "content": "}) as unknown;",
      "context": "        exit(1);\n      }\n    }) as unknown;\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/commands/config/show.ts",
      "line": 65,
      "content": "const credsObj = creds as unknown;",
      "context": "      if (creds && typeof creds === \"object\") {\n        await Bun.write(Bun.stdout, `  ${service}:\\n`);\n        const credsObj = creds as unknown;\n        if (credsObj.source) {\n          await Bun.write(Bun.stdout, `    Source: ${credsObj.source}\\n`);",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/commands/config/list.ts",
      "line": 39,
      "content": "await Bun.write(Bun.stdout, `${JSON.stringify(output as unknown, undefined, 2)}\\n`);",
      "context": "            }))\n          };\n          await Bun.write(Bun.stdout, `${JSON.stringify(output as unknown, undefined, 2)}\\n`);\n        } else {\n          await displayConfigurationSources(resolved, sources);",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/commands/config/list.ts",
      "line": 47,
      "content": "}) as unknown;",
      "context": "        exit(1);\n      }\n    }) as unknown;\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 70,
      "content": "cliBridge.registerCommandCustomization(commandId!, options as unknown);",
      "context": "  customizeCommand(commandId: ValidCommandId, options: CliCommandOptions): void {\n    this.ensureInitialized();\n    cliBridge.registerCommandCustomization(commandId!, options as unknown);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 81,
      "content": "cliBridge.registerCategoryCustomization(category, options as unknown);",
      "context": "  customizeCategory(category: CommandCategory, options: CategoryCommandOptions): void {\n    this.ensureInitialized();\n    cliBridge.registerCategoryCustomization(category, options as unknown);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 142,
      "content": "cliFactory.customizeCommand(commandId!, options as unknown);",
      "context": " */\nexport function customizeCommand(commandId: string, options: CliCommandOptions): void {\n  cliFactory.customizeCommand(commandId!, options as unknown);\n}\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 153,
      "content": "cliFactory.customizeCategory(category, options as unknown);",
      "context": "  options: CategoryCommandOptions\n): void {\n  cliFactory.customizeCategory(category, options as unknown);\n}\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 492,
      "content": "log.cli(output as unknown);",
      "context": "            }\n\n            log.cli(output as unknown);\n          } else if (result.error) {\n            log.cli(`Failed to load configuration: ${result.error}`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 496,
      "content": "log.cli(JSON.stringify(result as unknown, null, 2));",
      "context": "            log.cli(`Failed to load configuration: ${result.error}`);\n          } else {\n            log.cli(JSON.stringify(result as unknown, null, 2));\n          }\n        },",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 504,
      "content": "log.cli(JSON.stringify(result as unknown, null, 2));",
      "context": "          // Check if JSON output was requested\n          if (result.json) {\n            log.cli(JSON.stringify(result as unknown, null, 2));\n            return;\n          }",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 519,
      "content": "log.cli(output as unknown);",
      "context": "            }\n\n            log.cli(output as unknown);\n          } else if (result.error) {\n            log.cli(`Failed to load configuration: ${result.error}`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 523,
      "content": "log.cli(JSON.stringify(result as unknown, null, 2));",
      "context": "            log.cli(`Failed to load configuration: ${result.error}`);\n          } else {\n            log.cli(JSON.stringify(result as unknown, null, 2));\n          }\n        },",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 600,
      "content": "const credsObj = creds as unknown;",
      "context": "    for (const [service, creds] of Object.entries(resolved.credentials)) {\n      if (creds && typeof creds === \"object\") {\n        const credsObj = creds as unknown;\n        const serviceName = service === \"github\" ? \"GitHub\" : service;\n        const source = credsObj.source === \"environment\" ? \"env\" : credsObj.source;",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 666,
      "content": "if (!config || Object.keys(config as unknown).length === 0) {",
      "context": "\nfunction formatConfigSection(config: any): string {\n  if (!config || Object.keys(config as unknown).length === 0) {\n    return \"  (empty)\";\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 671,
      "content": "for (const [key, value] of Object.entries(config as unknown)) {",
      "context": "\n  let output = \"\";\n  for (const [key, value] of Object.entries(config as unknown)) {\n    if (Array.isArray(value as unknown)) {\n      output += `  ${key}: (${value.length} items)\\n`;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 672,
      "content": "if (Array.isArray(value as unknown)) {",
      "context": "  let output = \"\";\n  for (const [key, value] of Object.entries(config as unknown)) {\n    if (Array.isArray(value as unknown)) {\n      output += `  ${key}: (${value.length} items)\\n`;\n      value.forEach((item, index) => {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 676,
      "content": "output += `    ${index}: ${JSON.stringify(item as unknown)}\\n`;",
      "context": "      value.forEach((item, index) => {\n        if (typeof item === \"object\" && item !== null) {\n          output += `    ${index}: ${JSON.stringify(item as unknown)}\\n`;\n        } else {\n          output += `    ${index}: ${item}\\n`;",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 683,
      "content": "for (const [subKey, subValue] of Object.entries(value as unknown)) {",
      "context": "    } else if (typeof value === \"object\" && value !== null) {\n      output += `  ${key}:\\n`;\n      for (const [subKey, subValue] of Object.entries(value as unknown)) {\n        if (typeof subValue === \"object\" && subValue !== null) {\n          // Special handling for credentials",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 721,
      "content": "for (const [key, value] of Object.entries(obj as unknown)) {",
      "context": "    const result: string[] = [];\n\n    for (const [key, value] of Object.entries(obj as unknown)) {\n      const fullKey = prefix ? `${prefix}.${key}` : key;\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 726,
      "content": "} else if (typeof value === \"object\" && !Array.isArray(value as unknown)) {",
      "context": "      if (value === null || value === undefined) {\n        result.push(`${fullKey}=(null)`);\n      } else if (typeof value === \"object\" && !Array.isArray(value as unknown)) {\n        // Recursively flatten objects\n        result.push(...flatten(value as unknown, fullKey));",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 728,
      "content": "result.push(...flatten(value as unknown, fullKey));",
      "context": "      } else if (typeof value === \"object\" && !Array.isArray(value as unknown)) {\n        // Recursively flatten objects\n        result.push(...flatten(value as unknown, fullKey));\n      } else if (Array.isArray(value as unknown)) {\n        if (value.length === 0) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 729,
      "content": "} else if (Array.isArray(value as unknown)) {",
      "context": "        // Recursively flatten objects\n        result.push(...flatten(value as unknown, fullKey));\n      } else if (Array.isArray(value as unknown)) {\n        if (value.length === 0) {\n          result.push(`${fullKey}=(empty array)`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 735,
      "content": "result.push(...flatten(item as unknown, `${fullKey}[${index}]`));",
      "context": "          value.forEach((item, index) => {\n            if (typeof item === \"object\") {\n              result.push(...flatten(item as unknown, `${fullKey}[${index}]`));\n            } else {\n              result.push(`${fullKey}[${index}]=${item}`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 768,
      "content": "flatten((current as unknown)[key], fullKey);",
      "context": "        const fullKey = prefix ? `${prefix}.${key}` : key;\n        if (typeof current[key] === \"object\" && current[key] !== null) {\n          flatten((current as unknown)[key], fullKey);\n        } else {\n          flattened[fullKey] = current[key];",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 776,
      "content": "flatten(obj as unknown);",
      "context": "  }\n\n  flatten(obj as unknown);\n  return flattened;\n}",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 787,
      "content": "cliFactory.initialize(config as unknown);",
      "context": "export function initializeCliCommands(program: Command, config?: Partial<CliFactoryConfig>): void {\n  // Initialize the factory\n  cliFactory.initialize(config as unknown);\n\n  // Setup common customizations",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/schema-bridge.ts",
      "line": 210,
      "content": "(shortFlags as unknown)[name]",
      "context": "      name,\n      param,\n      (shortFlags as unknown)[name]\n    );\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/schema-bridge.ts",
      "line": 241,
      "content": "const value = (options as unknown)[optionName];",
      "context": "  Object.entries(parameters).forEach(([name, param]) => {\n    const optionName = paramNameToFlag(name).replace(/-/g, \"\");\n    const value = (options as unknown)[optionName];\n\n    // If value is present, validate and add to result",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/schema-bridge.ts",
      "line": 247,
      "content": "(result as unknown)[name] = param.schema.parse(value as unknown);",
      "context": "      // Use the schema to validate and transform\n      try {\n        (result as unknown)[name] = param.schema.parse(value as unknown);\n      } catch (error) {\n        // Re-throw with more context",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/schema-bridge.ts",
      "line": 257,
      "content": "(result as unknown)[name] = param.defaultValue;",
      "context": "    } else if (param.defaultValue !== undefined) {\n      // Use default value\n      (result as unknown)[name] = param.defaultValue;\n    }\n  });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/response-formatters.ts",
      "line": 42,
      "content": "return JSON.stringify(data as unknown, undefined, 2);",
      "context": " */\nexport function formatAsJson(data: any): string {\n  return JSON.stringify(data as unknown, undefined, 2);\n}\n",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/adapters/shared/response-formatters.ts",
      "line": 62,
      "content": "return this.formatJson(data as unknown, context as unknown);",
      "context": "    // Format the response based on the requested format\n    if (format === OutputFormat.JSON) {\n      return this.formatJson(data as unknown, context as unknown);\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/response-formatters.ts",
      "line": 66,
      "content": "return this.formatText(data as unknown, context as unknown);",
      "context": "\n    // Default to text format\n    return this.formatText(data as unknown, context as unknown);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/response-formatters.ts",
      "line": 86,
      "content": "return data as unknown as object;",
      "context": "   */\n  formatJson(data: T, context: CommandExecutionContext): object {\n    return data as unknown as object;\n  }\n}",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/response-formatters.ts",
      "line": 194,
      "content": "output += `${index + 1}. ${this.itemFormatter!(item as unknown)}\\n`;",
      "context": "    if (this.itemFormatter) {\n      items.forEach((item, index) => {\n        output += `${index + 1}. ${this.itemFormatter!(item as unknown)}\\n`;\n      });\n    } else {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/response-formatters.ts",
      "line": 198,
      "content": "output += `${index + 1}. ${String(item as unknown)}\\n`;",
      "context": "    } else {\n      items.forEach((item, index) => {\n        output += `${index + 1}. ${String(item as unknown)}\\n`;\n      });\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/response-formatters.ts",
      "line": 261,
      "content": "columnWidths[col] = Math.max((columnWidths as unknown)[col], value.length);",
      "context": "      this.columns.forEach((col) => {\n        const value = String(row[col] || \"\");\n        columnWidths[col] = Math.max((columnWidths as unknown)[col], value.length);\n      });\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/response-formatters.ts",
      "line": 269,
      "content": "return header.padEnd((columnWidths as unknown)[col]);",
      "context": "      .map((col) => {\n        const header = String(this.headers[col] || col);\n        return header.padEnd((columnWidths as unknown)[col]);\n      })\n      .join(\" | \");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/response-formatters.ts",
      "line": 278,
      "content": "return \"-\".repeat((columnWidths as unknown)[col]);",
      "context": "    const separatorRow = this.columns\n      .map((col) => {\n        return \"-\".repeat((columnWidths as unknown)[col]);\n      })\n      .join(\"-|-\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/response-formatters.ts",
      "line": 289,
      "content": "return value.padEnd((columnWidths as unknown)[col]);",
      "context": "        .map((col) => {\n          const value = String(row[col] || \"\");\n          return value.padEnd((columnWidths as unknown)[col]);\n        })\n        .join(\" | \") as unknown;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/response-formatters.ts",
      "line": 291,
      "content": ".join(\" | \") as unknown;",
      "context": "          return value.padEnd((columnWidths as unknown)[col]);\n        })\n        .join(\" | \") as unknown;\n\n      output += `${dataRow}\\n`;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/legacy-command-registry.ts",
      "line": 167,
      "content": "if (this.commands.has(commandDef.id) && !(options as unknown)!.allowOverwrite) {",
      "context": "    R = any,\n  >(commandDef: CommandDefinition<T, R>, options: { allowOverwrite?: boolean } = {}): void {\n    if (this.commands.has(commandDef.id) && !(options as unknown)!.allowOverwrite) {\n      throw new MinskyError(`Command with ID '${commandDef.id}' is already registered`);\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/legacy-command-registry.ts",
      "line": 171,
      "content": "this.commands.set(commandDef.id!, commandDef as unknown as SharedCommand);",
      "context": "    }\n\n    this.commands.set(commandDef.id!, commandDef as unknown as SharedCommand);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/error-handling.ts",
      "line": 153,
      "content": "(typeof process.env.NODE_DEBUG === \"string\" && (process.env.NODE_DEBUG as unknown).includes(\"minsky\"))",
      "context": "      process.env.DEBUG === \"true\" ||\n      process.env.DEBUG === \"1\" ||\n      (typeof process.env.NODE_DEBUG === \"string\" && (process.env.NODE_DEBUG as unknown).includes(\"minsky\"))\n    );\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/error-handling.ts",
      "line": 169,
      "content": "const formattedError = SharedErrorHandler.formatError(error as unknown, debug);",
      "context": "\n    // Format error for structured logging\n    const formattedError = SharedErrorHandler.formatError(error as unknown, debug);\n\n    // Log to appropriate channels based on mode",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/error-handling.ts",
      "line": 241,
      "content": "const formattedError = SharedErrorHandler.formatError(error as unknown, debug);",
      "context": "    if (isStructuredMode()) {\n      // Format error for structured logging\n      const formattedError = SharedErrorHandler.formatError(error as unknown, debug);\n      log.error(\"CLI operation failed\", formattedError);\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/error-handling.ts",
      "line": 264,
      "content": "const formattedError = SharedErrorHandler.formatError(error as unknown, debug);",
      "context": "\n    // Format error for MCP response\n    const formattedError = SharedErrorHandler.formatError(error as unknown, debug);\n\n    // Log error in structured format",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/mcp/integration-example.ts",
      "line": 83,
      "content": "log.debug(\"MCP git.commit called with params:\", params as unknown);",
      "context": "  // In real implementation, this would call the shared command registry\n  handler: async (params: any) => {\n    log.debug(\"MCP git.commit called with params:\", params as unknown);\n    return {\n      success: true,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/mcp/integration-example.ts",
      "line": 87,
      "content": "message: (params as unknown)!.message,",
      "context": "      success: true,\n      commitHash: \"example-hash\",\n      message: (params as unknown)!.message,\n    };\n  },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/mcp/integration-example.ts",
      "line": 117,
      "content": "log.debug(\"MCP tasks.status.get called with params:\", params as unknown);",
      "context": "  // In real implementation, this would call the shared command registry\n  handler: async (params: any) => {\n    log.debug(\"MCP tasks.status.get called with params:\", params as unknown);\n    return {\n      success: true,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/mcp/integration-example.ts",
      "line": 120,
      "content": "taskId: (params as unknown)!.taskId,",
      "context": "    return {\n      success: true,\n      taskId: (params as unknown)!.taskId,\n      _status: \"TODO\", // Example _status\n    };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/mcp/integration-example.ts",
      "line": 141,
      "content": "log.debug(\"MCP session.list called with params:\", params as unknown);",
      "context": "  // In real implementation, this would call the shared command registry\n  handler: async (params: any) => {\n    log.debug(\"MCP session.list called with params:\", params as unknown);\n    return {\n      success: true,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/mcp/integration-example.ts",
      "line": 182,
      "content": "log.debug(\"MCP rules.list called with params:\", params as unknown);",
      "context": "  // In real implementation, this would call the shared command registry\n  handler: async (params: any) => {\n    log.debug(\"MCP rules.list called with params:\", params as unknown);\n    return {\n      success: true,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/tasks.ts",
      "line": 46,
      "content": "return JSON.parse(output as unknown) as unknown;",
      "context": "\n        // Parse the JSON output\n        return JSON.parse(output as unknown) as unknown;\n      } catch (error) {\n        log.error(\"MCP: Error listing tasks via execSync\", {",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/mcp/tools/tasks.ts",
      "line": 69,
      "content": "const command = `minsky tasks get ${(args as unknown)!.taskId} --json`;",
      "context": "      try {\n        // Execute the command\n        const command = `minsky tasks get ${(args as unknown)!.taskId} --json`;\n        const output = execSync(command).toString();\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/tasks.ts",
      "line": 73,
      "content": "return JSON.parse(output as unknown) as unknown;",
      "context": "\n        // Parse the JSON output\n        return JSON.parse(output as unknown) as unknown;\n      } catch (error) {\n        log.error(`MCP: Error getting task ${(args as unknown)!.taskId} via execSync`, {",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/mcp/tools/tasks.ts",
      "line": 75,
      "content": "log.error(`MCP: Error getting task ${(args as unknown)!.taskId} via execSync`, {",
      "context": "        return JSON.parse(output as unknown) as unknown;\n      } catch (error) {\n        log.error(`MCP: Error getting task ${(args as unknown)!.taskId} via execSync`, {\n          originalError: getErrorMessage(error as any),\n          stack: error instanceof Error ? (error as any).stack as any : undefined as any,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/tasks.ts",
      "line": 96,
      "content": "const command = `minsky tasks status get ${(args as unknown)!.taskId}`;",
      "context": "      try {\n        // Execute the command\n        const command = `minsky tasks status get ${(args as unknown)!.taskId}`;\n        const output = execSync(command).toString().trim();\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/tasks.ts",
      "line": 101,
      "content": "taskId: (args as unknown)!.taskId,",
      "context": "        // Format output\n        return {\n          taskId: (args as unknown)!.taskId,\n          status: output.split(\": \")[1], // Extract the status value\n        };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/tasks.ts",
      "line": 105,
      "content": "log.error(`MCP: Error getting task status for ${(args as unknown)!.taskId} via execSync`, {",
      "context": "        };\n      } catch (error) {\n        log.error(`MCP: Error getting task status for ${(args as unknown)!.taskId} via execSync`, {\n          originalError: getErrorMessage(error as any),\n          stack: error instanceof Error ? (error as any).stack as any : undefined as any,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/tasks.ts",
      "line": 129,
      "content": "const command = `minsky tasks status set ${(args as unknown)!.taskId} ${args.status}`;",
      "context": "      try {\n        // Execute the command\n        const command = `minsky tasks status set ${(args as unknown)!.taskId} ${args.status}`;\n        execSync(command);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/tasks.ts",
      "line": 135,
      "content": "taskId: (args as unknown)!.taskId,",
      "context": "        return {\n          success: true,\n          taskId: (args as unknown)!.taskId,\n          status: args.status,\n        };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/tasks.ts",
      "line": 139,
      "content": "log.error(`MCP: Error setting task status for ${(args as unknown)!.taskId} via execSync`, {",
      "context": "        };\n      } catch (error) {\n        log.error(`MCP: Error setting task status for ${(args as unknown)!.taskId} via execSync`, {\n          originalError: getErrorMessage(error as any),\n          stack: error instanceof Error ? (error as any).stack as any : undefined as any,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/tasks.ts",
      "line": 164,
      "content": "return JSON.parse(output as unknown) as unknown;",
      "context": "\n        // Parse the JSON output\n        return JSON.parse(output as unknown) as unknown;\n      } catch (error) {\n        log.error(\"MCP: Error creating task via execSync\", {",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/mcp/tools/session.ts",
      "line": 20,
      "content": "return JSON.parse(output as unknown) as unknown;",
      "context": "\n      // Parse the JSON output\n      return JSON.parse(output as unknown) as unknown;\n    } catch (error) {\n      log.error(\"Error listing sessions\", { error });",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/mcp/tools/session.ts",
      "line": 39,
      "content": "const command = `minsky session get ${(args as unknown)!.session} --json`;",
      "context": "      try {\n        // Execute the command\n        const command = `minsky session get ${(args as unknown)!.session} --json`;\n        const output = execSync(command).toString();\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/session.ts",
      "line": 43,
      "content": "return JSON.parse(output as unknown) as unknown;",
      "context": "\n        // Parse the JSON output\n        return JSON.parse(output as unknown) as unknown;\n      } catch (error) {\n        log.error(`Error getting session ${(args as unknown)!.session}`, { error, _session: (args as unknown)!.session });",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/mcp/tools/session.ts",
      "line": 45,
      "content": "log.error(`Error getting session ${(args as unknown)!.session}`, { error, _session: (args as unknown)!.session });",
      "context": "        return JSON.parse(output as unknown) as unknown;\n      } catch (error) {\n        log.error(`Error getting session ${(args as unknown)!.session}`, { error, _session: (args as unknown)!.session });\n        throw new Error(\n          `Failed to get session ${(args as any)!.session}: ${getErrorMessage(error as any)}`",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/session.ts",
      "line": 124,
      "content": "if ((args as unknown)!.session) {",
      "context": "          command += ` -m \"${args.message}\"`;\n        }\n        if ((args as unknown)!.session) {\n          command += ` --session ${(args as unknown)!.session}`;\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/session.ts",
      "line": 125,
      "content": "command += ` --session ${(args as unknown)!.session}`;",
      "context": "        }\n        if ((args as unknown)!.session) {\n          command += ` --session ${(args as unknown)!.session}`;\n        }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/session.ts",
      "line": 137,
      "content": "log.error(\"Error committing changes\", { error, session: (args as unknown)!.session });",
      "context": "        };\n      } catch (error) {\n        log.error(\"Error committing changes\", { error, session: (args as unknown)!.session });\n        throw new Error(\n          `Failed to commit changes: ${getErrorMessage(error as any)}`",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-utils/index.ts",
      "line": 96,
      "content": "const compatMock = ((...args: any[]) => mockFn(...args)) as unknown;",
      "context": "    \n    // Create a wrapper function that behaves like the mock but has our methods\n    const compatMock = ((...args: any[]) => mockFn(...args)) as unknown;\n    \n    // Copy mock properties and bind methods to original mock",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-utils/mocking.test.ts",
      "line": 13,
      "content": "expect((mockFn as unknown)(\"World\")).toBe(\"Hello, World!\");",
      "context": "\n    // Should work as a function\n    expect((mockFn as unknown)(\"World\")).toBe(\"Hello, World!\");\n\n    // Should track calls",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/utils/test-utils/mocking.test.ts",
      "line": 24,
      "content": "expect((mockFn as unknown)()).toBeUndefined();",
      "context": "    const mockFn = createMock();\n\n    expect((mockFn as unknown)()).toBeUndefined();\n    expect(mockFn.mock.calls.length).toBe(1);\n  });",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/utils/test-utils/compatibility.test.ts",
      "line": 20,
      "content": "const expect = bunExpect as unknown;",
      "context": "// Use a typed expect to make TypeScript happy with the enhanced matchers\n \nconst expect = bunExpect as unknown;\n\ndescribe(\"Mock Function Compatibility\", () => {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/utils/test-utils/assertions.ts",
      "line": 108,
      "content": "expect(part in (current as unknown)).toBeTruthy();",
      "context": "    expect(current).toBeDefined();\n    expect(typeof current === \"object\" || Array.isArray(current)).toBeTruthy();\n    expect(part in (current as unknown)).toBeTruthy();\n    current = (current as unknown)[part];\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-utils/assertions.ts",
      "line": 109,
      "content": "current = (current as unknown)[part];",
      "context": "    expect(typeof current === \"object\" || Array.isArray(current)).toBeTruthy();\n    expect(part in (current as unknown)).toBeTruthy();\n    current = (current as unknown)[part];\n  }\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/test-utils/assertions.ts",
      "line": 162,
      "content": "} as unknown;",
      "context": "    // Could potentially extend expect with custom matchers here in the future\n    return testFn.apply(this, args);\n  } as unknown;\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/test-utils/mocking.ts",
      "line": 52,
      "content": "return createMock(implementation) as unknown as MockFunction<ReturnType<T>, Parameters<T>> & T;",
      "context": "export function mockFunction<T extends (...args: unknown[]) => any>(implementation?: T) {\n  // Cast to unknown first to avoid TypeScript errors\n  return createMock(implementation) as unknown as MockFunction<ReturnType<T>, Parameters<T>> & T;\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/test-utils/mocking.ts",
      "line": 463,
      "content": "const base = { ...implementations } as unknown;",
      "context": "export function createPartialMock<T extends object>(implementations: Partial<T> = {}): T {\n  // Create a base object with the provided implementations\n  const base = { ...implementations } as unknown;\n\n  // Create a proxy that will handle method calls",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/types/tasks/taskData.ts",
      "line": 103,
      "content": "id: (task as unknown)!.id,",
      "context": "export function toTaskData(task: any): TaskData {\n  return {\n    id: (task as unknown)!.id,\n    title: (task as unknown)!.title,\n    description: (task as unknown)!.description,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/types/tasks/taskData.ts",
      "line": 104,
      "content": "title: (task as unknown)!.title,",
      "context": "  return {\n    id: (task as unknown)!.id,\n    title: (task as unknown)!.title,\n    description: (task as unknown)!.description,\n    status: (task as unknown)!.status,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/types/tasks/taskData.ts",
      "line": 105,
      "content": "description: (task as unknown)!.description,",
      "context": "    id: (task as unknown)!.id,\n    title: (task as unknown)!.title,\n    description: (task as unknown)!.description,\n    status: (task as unknown)!.status,\n    specPath: task!.specPath,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/types/tasks/taskData.ts",
      "line": 106,
      "content": "status: (task as unknown)!.status,",
      "context": "    title: (task as unknown)!.title,\n    description: (task as unknown)!.description,\n    status: (task as unknown)!.status,\n    specPath: task!.specPath,\n    worklog: task!.worklog,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/types/tasks/taskData.ts",
      "line": 120,
      "content": "id: (taskData as unknown)!.id,",
      "context": "export function fromTaskData(taskData: TaskData): any {\n  return {\n    id: (taskData as unknown)!.id,\n    title: (taskData as unknown)!.title,\n    description: (taskData as unknown)!.description,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/types/tasks/taskData.ts",
      "line": 121,
      "content": "title: (taskData as unknown)!.title,",
      "context": "  return {\n    id: (taskData as unknown)!.id,\n    title: (taskData as unknown)!.title,\n    description: (taskData as unknown)!.description,\n    status: (taskData as unknown)!.status,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/types/tasks/taskData.ts",
      "line": 122,
      "content": "description: (taskData as unknown)!.description,",
      "context": "    id: (taskData as unknown)!.id,\n    title: (taskData as unknown)!.title,\n    description: (taskData as unknown)!.description,\n    status: (taskData as unknown)!.status,\n    specPath: taskData!.specPath,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/types/tasks/taskData.ts",
      "line": 123,
      "content": "status: (taskData as unknown)!.status,",
      "context": "    title: (taskData as unknown)!.title,\n    description: (taskData as unknown)!.description,\n    status: (taskData as unknown)!.status,\n    specPath: taskData!.specPath,\n    worklog: taskData!.worklog,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 28,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "      // Arrange\n      const repoPath = \"/Users/test/.local/state/minsky/sessions/session-name\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      // Override environment variables for testing",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 49,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "      // Arrange\n      const repoPath = \"/Users/test/projects/non-session-repo\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      // Act",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 66,
      "content": "const result = await isSessionWorkspace(repoPath, execAsyncMock as unknown);",
      "context": "\n      // Act\n      const result = await isSessionWorkspace(repoPath, execAsyncMock as unknown);\n\n      // Assert",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 75,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "      // Arrange\n      const repoPath = \"/Users/test/.local/state/minsky/sessions/session-name\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      // Override environment variables for testing",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 99,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "      // Arrange\n      const repoPath = \"/Users/test/.local/state/minsky/sessions/session-name\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      // Set up environment for testing",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 115,
      "content": "} as unknown;",
      "context": "          createdAt: new Date().toISOString(),\n        }),\n      } as unknown;\n\n      try {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 136,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "      // Arrange\n      const repoPath = \"/Users/test/projects/non-session-repo\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      // Act",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 148,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "      // Arrange\n      const repoPath = \"/Users/test/.local/state/minsky/sessions/unknown-session\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      // Set up environment for testing",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 174,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "      // Arrange\n      const repoPath = \"/Users/test/.local/state/minsky/sessions/session-name\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      // Set up environment for testing",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 189,
      "content": "} as unknown;",
      "context": "          createdAt: new Date().toISOString(),\n        }),\n      } as unknown;\n\n      try {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 209,
      "content": "const execAsyncMock = mockGitRootExecAsync(sessionPath) as unknown;",
      "context": "      // Arrange\n      const sessionPath = \"/Users/test/.local/state/minsky/sessions/session-name\";\n      const execAsyncMock = mockGitRootExecAsync(sessionPath) as unknown;\n\n      // Set up environment for testing",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 225,
      "content": "} as unknown;",
      "context": "          createdAt: new Date().toISOString(),\n        }),\n      } as unknown;\n\n      try {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 242,
      "content": "const execAsyncMock = mockGitRootExecAsync(notSessionPath) as unknown;",
      "context": "      // Arrange\n      const notSessionPath = \"/Users/test/projects/non-session\";\n      const execAsyncMock = mockGitRootExecAsync(notSessionPath) as unknown;\n\n      // Act",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 253,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "    test(\"getCurrentSession returns null when repo path does not exist\", async () => {\n      const repoPath = \"/Users/test/.local/state/minsky/sessions/session-name\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      const result = await getCurrentSession(repoPath, execAsyncMock);",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 261,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "    test(\"getCurrentSession returns null when repoUrl is not found\", async () => {\n      const repoPath = \"/Users/test/.local/state/minsky/sessions/session-name\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      const result = await getCurrentSession(repoPath, execAsyncMock);",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 269,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "    test(\"getCurrentSession returns null when session data doesn't match file structure\", async () => {\n      const repoPath = \"/Users/test/.local/state/minsky/sessions/session-name\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      const result = await getCurrentSession(repoPath, execAsyncMock);",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 277,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "    test(\"getCurrentSession returns null when session doesn't exist\", async () => {\n      const repoPath = \"/Users/test/.local/state/minsky/sessions/unknown-session\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      const result = await getCurrentSession(repoPath, execAsyncMock);",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 285,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "    test(\"getCurrentSession returns session info when valid\", async () => {\n      const repoPath = \"/Users/test/.local/state/minsky/sessions/session-name\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      const result = await getCurrentSession(repoPath, execAsyncMock);",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 370,
      "content": "const execAsyncMock = mockGitRootExecAsync(sessionPath) as unknown;",
      "context": "      const testPath = `${sessionPath}/some/nested/path`;\n\n      const execAsyncMock = mockGitRootExecAsync(sessionPath) as unknown;\n\n      const result = await getSessionFromWorkspace(testPath, execAsyncMock);",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 41,
      "content": "} as unknown;",
      "context": "        registeredTools[name] = { name, description, schema, handler };\n      }),\n    } as unknown;\n\n    // Register the tools",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 71,
      "content": "const mockStat = stat as unknown;",
      "context": "\n      // Mock file doesn't exist\n      const mockStat = stat as unknown;\n      mockStat.mockRejectedValueOnce(new Error(\"ENOENT\"));\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 75,
      "content": "const mockWriteFile = writeFile as unknown;",
      "context": "\n      // Mock successful write\n      const mockWriteFile = writeFile as unknown;\n      mockWriteFile.mockResolvedValueOnce(undefined);\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 79,
      "content": "const mockPathResolver = new SessionPathResolver() as unknown;",
      "context": "\n      // Mock path resolver\n      const mockPathResolver = new SessionPathResolver() as unknown;\n      mockPathResolver.resolvePath.mockResolvedValue(\"/session/path/test.ts\");\n      mockPathResolver.getSessionWorkspacePath.mockResolvedValue(\"/session/path\");",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 100,
      "content": "const mockStat = stat as unknown;",
      "context": "\n      // Mock file exists\n      const mockStat = stat as unknown;\n      mockStat.mockResolvedValueOnce({ isFile: () => true });\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 104,
      "content": "const mockReadFile = readFile as unknown;",
      "context": "\n      // Mock file content\n      const mockReadFile = readFile as unknown;\n      mockReadFile.mockResolvedValueOnce(`function oldFunc() {\n  console.log('old');",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 114,
      "content": "const mockWriteFile = writeFile as unknown;",
      "context": "\n      // Mock successful write\n      const mockWriteFile = writeFile as unknown;\n      mockWriteFile.mockResolvedValueOnce(undefined);\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 118,
      "content": "const mockPathResolver = new SessionPathResolver() as unknown;",
      "context": "\n      // Mock path resolver\n      const mockPathResolver = new SessionPathResolver() as unknown;\n      mockPathResolver.resolvePath.mockResolvedValue(\"/session/path/test.ts\");\n      mockPathResolver.getSessionWorkspacePath.mockResolvedValue(\"/session/path\");",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 145,
      "content": "const mockPathResolver = new SessionPathResolver() as unknown;",
      "context": "\n      // Mock path resolver error\n      const mockPathResolver = new SessionPathResolver() as unknown;\n      mockPathResolver.resolvePath.mockRejectedValue(new Error(\"Invalid path\"));\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 186,
      "content": "const mockReadFile = readFile as unknown;",
      "context": "\n      // Mock file content\n      const mockReadFile = readFile as unknown;\n      mockReadFile.mockResolvedValueOnce(\"This is oldText in the file\");\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 190,
      "content": "const mockWriteFile = writeFile as unknown;",
      "context": "\n      // Mock successful write\n      const mockWriteFile = writeFile as unknown;\n      mockWriteFile.mockResolvedValueOnce(undefined);\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 194,
      "content": "const mockPathResolver = new SessionPathResolver() as unknown;",
      "context": "\n      // Mock path resolver\n      const mockPathResolver = new SessionPathResolver() as unknown;\n      mockPathResolver.resolvePath.mockResolvedValue(\"/session/path/test.ts\");\n      mockPathResolver.validatePathExists.mockResolvedValue(undefined);",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 218,
      "content": "const mockReadFile = readFile as unknown;",
      "context": "\n      // Mock file content\n      const mockReadFile = readFile as unknown;\n      mockReadFile.mockResolvedValueOnce(\"This is some text in the file\");\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 222,
      "content": "const mockPathResolver = new SessionPathResolver() as unknown;",
      "context": "\n      // Mock path resolver\n      const mockPathResolver = new SessionPathResolver() as unknown;\n      mockPathResolver.resolvePath.mockResolvedValue(\"/session/path/test.ts\");\n      mockPathResolver.validatePathExists.mockResolvedValue(undefined);",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 241,
      "content": "const mockReadFile = readFile as unknown;",
      "context": "\n      // Mock file content with multiple occurrences\n      const mockReadFile = readFile as unknown;\n      mockReadFile.mockResolvedValueOnce(\"This is oldText and another oldText in the file\");\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 245,
      "content": "const mockPathResolver = new SessionPathResolver() as unknown;",
      "context": "\n      // Mock path resolver\n      const mockPathResolver = new SessionPathResolver() as unknown;\n      mockPathResolver.resolvePath.mockResolvedValue(\"/session/path/test.ts\");\n      mockPathResolver.validatePathExists.mockResolvedValue(undefined);",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/cli/session.test.ts",
      "line": 243,
      "content": "name: undefined as unknown,",
      "context": "      const result = await updateSessionFromParams(\n        {\n          name: undefined as unknown,\n          noStash: false,\n          noPush: false,",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "tests/adapters/cli/session.test.ts",
      "line": 603,
      "content": "(gitService as unknown).sessionDb = {",
      "context": "\n      // Mock sessionDb\n      (gitService as unknown).sessionDb = {\n        getSession: async () => sessionRecord,\n      };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "tests/adapters/cli/session.test.ts",
      "line": 608,
      "content": "(gitService as unknown).getSessionWorkdir = () => testWorkdir;",
      "context": "\n      // Mock getSessionWorkdir to use our test directory\n      (gitService as unknown).getSessionWorkdir = () => testWorkdir;\n\n      // Mock push method",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "tests/adapters/cli/session.test.ts",
      "line": 611,
      "content": "(gitService as unknown).push = async () => ({ workdir: testWorkdir, pushed: true });",
      "context": "\n      // Mock push method\n      (gitService as unknown).push = async () => ({ workdir: testWorkdir, pushed: true });\n\n      // CRITICAL: Mock execInRepository to capture actual commands from preparePr",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "tests/adapters/cli/session.test.ts",
      "line": 614,
      "content": "(gitService as unknown).execInRepository = async (workdir: string, command: string) => {",
      "context": "\n      // CRITICAL: Mock execInRepository to capture actual commands from preparePr\n      (gitService as unknown).execInRepository = async (workdir: string, command: string) => {\n        const fullCommand = `git -C ${workdir} ${command}`;\n        return (await mockExecAsync(fullCommand)).stdout;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 139,
      "content": "const storage = StorageBackendFactory.createFromConfig(config as unknown);",
      "context": "    try {\n      // Create storage backend with timeout\n      const storage = StorageBackendFactory.createFromConfig(config as unknown);\n\n      // Test basic operations with timeout",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 153,
      "content": "await this.performBackendSpecificChecks(config as unknown, status);",
      "context": "\n      // Backend-specific health checks\n      await this.performBackendSpecificChecks(config as unknown, status);\n    } catch (error) {\n      status.healthy = false;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 197,
      "content": "await this.checkJsonBackendHealth(config as unknown, status);",
      "context": "    switch (config.backend) {\n    case \"json\":\n      await this.checkJsonBackendHealth(config as unknown, status);\n      break;\n    case \"sqlite\":",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 200,
      "content": "await this.checkSqliteBackendHealth(config as unknown, status);",
      "context": "      break;\n    case \"sqlite\":\n      await this.checkSqliteBackendHealth(config as unknown, status);\n      break;\n    case \"postgres\":",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 203,
      "content": "await this.checkPostgresBackendHealth(config as unknown, status);",
      "context": "      break;\n    case \"postgres\":\n      await this.checkPostgresBackendHealth(config as unknown, status);\n      break;\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 353,
      "content": "const recentMetrics = (this.metrics as unknown).slice(-100); // Last 100 operations",
      "context": "    recentErrors: number;\n    } {\n    const recentMetrics = (this.metrics as unknown).slice(-100); // Last 100 operations\n\n    if (recentMetrics.length === 0) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 494,
      "content": "this.metrics = (this.metrics as unknown).slice(-this.MAX_METRICS);",
      "context": "    // Keep only recent metrics\n    if (this.metrics.length > this.MAX_METRICS) {\n      this.metrics = (this.metrics as unknown).slice(-this.MAX_METRICS);\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 517,
      "content": "return (this.metrics as unknown).slice(-count);",
      "context": "   */\n  static getRecentMetrics(count: number = 50): PerformanceMetrics[] {\n    return (this.metrics as unknown).slice(-count);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 539,
      "content": "const avgResponse = totalOps > 0 ? (this.metrics as unknown).reduce((sum, m) => sum + m.duration, 0) / totalOps : 0;",
      "context": "    const totalOps = this.metrics.length;\n    const errors = this.metrics.filter(m => !m.success).length;\n    const avgResponse = totalOps > 0 ? (this.metrics as unknown).reduce((sum, m) => sum + m.duration, 0) / totalOps : 0;\n    const uptime =\n      this.metrics && this.metrics[0]",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/json-file-storage.ts",
      "line": 159,
      "content": "(safeUpdates as unknown)[key] = value;",
      "context": "    Object.entries(updates).forEach(([key, value]) => {\n      if (key !== \"session\") {\n        (safeUpdates as unknown)[key] = value;\n      }\n    });",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 92,
      "content": "originalError: (this.originalError as unknown).message,",
      "context": "      retryable: this.retryable,\n      stack: this.stack,\n      originalError: (this.originalError as unknown).message,\n    };\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 105,
      "content": "const classification = this.analyzeError(error as unknown, context as unknown);",
      "context": "    context: StorageErrorContext\n  ): StorageError {\n    const classification = this.analyzeError(error as unknown, context as unknown);\n    \n    return new StorageError(",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 113,
      "content": "error as unknown",
      "context": "      context,\n      classification.recoveryActions,\n      error as unknown\n    );\n  }",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 131,
      "content": "return this.classifyJsonError(error as unknown, errorMessage);",
      "context": "    // JSON File Backend Errors\n    if (backend === \"json\") {\n      return this.classifyJsonError(error as unknown, errorMessage);\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 136,
      "content": "return this.classifySqliteError(error as unknown, errorMessage);",
      "context": "    // SQLite Backend Errors\n    if (backend === \"sqlite\") {\n      return this.classifySqliteError(error as unknown, errorMessage);\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 141,
      "content": "return this.classifyPostgresError(error as unknown, errorMessage);",
      "context": "    // PostgreSQL Backend Errors\n    if (backend === \"postgres\") {\n      return this.classifyPostgresError(error as unknown, errorMessage);\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 341,
      "content": "const pgError = error as unknown; // PostgreSQL errors have specific properties",
      "context": "\n  private static classifyPostgresError(error: Error, errorMessage: string) {\n    const pgError = error as unknown; // PostgreSQL errors have specific properties\n\n    // Connection refused",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 568,
      "content": "(this.errorCounts as unknown).set(key, currentCount + 1);",
      "context": "    const currentCount = (this.errorCounts as any).get(key) || 0;\n    \n    (this.errorCounts as unknown).set(key, currentCount + 1);\n    this.lastErrors.set(key, error as unknown);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 569,
      "content": "this.lastErrors.set(key, error as unknown);",
      "context": "    \n    (this.errorCounts as unknown).set(key, currentCount + 1);\n    this.lastErrors.set(key, error as unknown);\n\n    // Log error with context",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 573,
      "content": "backend: error.context.backend as unknown,",
      "context": "    // Log error with context\n    log.error(\"Storage error recorded\", {\n      backend: error.context.backend as unknown,\n      type: (error).type as unknown,\n      severity: (error).severity as unknown,",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 574,
      "content": "type: (error).type as unknown,",
      "context": "    log.error(\"Storage error recorded\", {\n      backend: error.context.backend as unknown,\n      type: (error).type as unknown,\n      severity: (error).severity as unknown,\n      operation: error.context.operation as unknown,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 575,
      "content": "severity: (error).severity as unknown,",
      "context": "      backend: error.context.backend as unknown,\n      type: (error).type as unknown,\n      severity: (error).severity as unknown,\n      operation: error.context.operation as unknown,\n      count: currentCount + 1,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 576,
      "content": "operation: error.context.operation as unknown,",
      "context": "      type: (error).type as unknown,\n      severity: (error).severity as unknown,\n      operation: error.context.operation as unknown,\n      count: currentCount + 1,\n      message: (error as any).message as any,",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 605,
      "content": "(this.errorCounts as unknown).clear();",
      "context": "   */\n  static resetCounters(): void {\n    (this.errorCounts as unknown).clear();\n    this.lastErrors.clear();\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 76,
      "content": "log.warn(\"Migration error (may be expected for new database):\", error as unknown);",
      "context": "    // Run migrations\n    this.runMigrations().catch((error) => {\n      log.warn(\"Migration error (may be expected for new database):\", error as unknown);\n    });\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 88,
      "content": "log.debug(\"Migration attempt failed:\", error as unknown);",
      "context": "    } catch (error) {\n      // Log but don't throw - migrations may not exist yet\n      log.debug(\"Migration attempt failed:\", error as unknown);\n    }\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 112,
      "content": "log.error(\"Failed to initialize PostgreSQL storage:\", error as unknown);",
      "context": "      return true;\n    } catch (error) {\n      log.error(\"Failed to initialize PostgreSQL storage:\", error as unknown);\n      return false;\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 173,
      "content": ".where(eq(postgresSessions.session, id)) as unknown).limit(1);",
      "context": "        .select()\n        .from(postgresSessions)\n        .where(eq(postgresSessions.session, id)) as unknown).limit(1);\n\n      return result.length > 0 ? fromPostgresSelect((result as unknown)[0]) : null;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 175,
      "content": "return result.length > 0 ? fromPostgresSelect((result as unknown)[0]) : null;",
      "context": "        .where(eq(postgresSessions.session, id)) as unknown).limit(1);\n\n      return result.length > 0 ? fromPostgresSelect((result as unknown)[0]) : null;\n    } catch (error) {\n      log.error(\"Failed to get session from PostgreSQL:\", error as Error);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 187,
      "content": "const results = await (this.drizzle.select() as unknown).from(postgresSessions);",
      "context": "  async getEntities(options?: DatabaseQueryOptions): Promise<SessionRecord[]> {\n    try {\n      const results = await (this.drizzle.select() as unknown).from(postgresSessions);\n      return results.map(fromPostgresSelect);\n    } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 227,
      "content": ".set(updateData as unknown) as unknown).where(eq(postgresSessions.session, id));",
      "context": "      await (this.drizzle\n        .update(postgresSessions)\n        .set(updateData as unknown) as unknown).where(eq(postgresSessions.session, id));\n\n      return updated;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 231,
      "content": "log.error(\"Failed to update session in PostgreSQL:\", error as unknown);",
      "context": "      return updated;\n    } catch (error) {\n      log.error(\"Failed to update session in PostgreSQL:\", error as unknown);\n      throw error;\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 242,
      "content": ".delete(postgresSessions) as unknown).where(eq(postgresSessions.session, id));",
      "context": "    try {\n      const result = await (this.drizzle\n        .delete(postgresSessions) as unknown).where(eq(postgresSessions.session, id));\n\n      return result.rowCount !== null && result.rowCount > 0 as unknown;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 244,
      "content": "return result.rowCount !== null && result.rowCount > 0 as unknown;",
      "context": "        .delete(postgresSessions) as unknown).where(eq(postgresSessions.session, id));\n\n      return result.rowCount !== null && result.rowCount > 0 as unknown;\n    } catch (error) {\n      log.error(\"Failed to delete session from PostgreSQL:\", error as unknown);",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 246,
      "content": "log.error(\"Failed to delete session from PostgreSQL:\", error as unknown);",
      "context": "      return result.rowCount !== null && result.rowCount > 0 as unknown;\n    } catch (error) {\n      log.error(\"Failed to delete session from PostgreSQL:\", error as unknown);\n      return false;\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 259,
      "content": ".where(eq(postgresSessions.session, id)) as unknown).limit(1);",
      "context": "        .select({ session: postgresSessions.session })\n        .from(postgresSessions)\n        .where(eq(postgresSessions.session, id)) as unknown).limit(1);\n\n      return result.length > 0 as unknown;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 261,
      "content": "return result.length > 0 as unknown;",
      "context": "        .where(eq(postgresSessions.session, id)) as unknown).limit(1);\n\n      return result.length > 0 as unknown;\n    } catch (error) {\n      log.error(\"Failed to check session existence in PostgreSQL:\", error as unknown);",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 263,
      "content": "log.error(\"Failed to check session existence in PostgreSQL:\", error as unknown);",
      "context": "      return result.length > 0 as unknown;\n    } catch (error) {\n      log.error(\"Failed to check session existence in PostgreSQL:\", error as unknown);\n      return false;\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 284,
      "content": "log.error(\"Error closing PostgreSQL connection:\", error as unknown);",
      "context": "      await this.sql.end();\n    } catch (error) {\n      log.error(\"Error closing PostgreSQL connection:\", error as unknown);\n    }\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 293,
      "content": "return new PostgresStorage(config as unknown);",
      "context": " */\nexport function createPostgresStorage(config: PostgresStorageConfig): DatabaseStorage<SessionRecord, SessionDbState> {\n  return new PostgresStorage(config as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 119,
      "content": "const sessions = await (this.drizzleDb.select() as unknown).from(sessionsTable);",
      "context": "\n    try {\n      const sessions = await (this.drizzleDb.select() as unknown).from(sessionsTable);\n\n      // Construct state object - this assumes TState has a sessions array",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 125,
      "content": "baseDir: process.env.XDG_STATE_HOME ? `${process.env.XDG_STATE_HOME}/minsky` : `${process.env.HOME}/.local/state/minsky` as unknown,",
      "context": "      const state = {\n        sessions,\n        baseDir: process.env.XDG_STATE_HOME ? `${process.env.XDG_STATE_HOME}/minsky` : `${process.env.HOME}/.local/state/minsky` as unknown,\n      } as TState;\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 146,
      "content": "await (this.drizzleDb as unknown).transaction(async (tx) => {",
      "context": "\n      // Use Drizzle transaction\n      await (this.drizzleDb as unknown).transaction(async (tx) => {\n        // Clear existing sessions\n        await tx.delete(sessionsTable);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 184,
      "content": ".where(eq(sessionsTable.session, id)) as unknown).limit(1);",
      "context": "        .select()\n        .from(sessionsTable)\n        .where(eq(sessionsTable.session, id)) as unknown).limit(1);\n\n      return ((result as unknown)[0] as TEntity) || null;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 186,
      "content": "return ((result as unknown)[0] as TEntity) || null;",
      "context": "        .where(eq(sessionsTable.session, id)) as unknown).limit(1);\n\n      return ((result as unknown)[0] as TEntity) || null;\n    } catch (error) {\n      const errorMessage = getErrorMessage(error as any);",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 200,
      "content": "let query = (this.drizzleDb.select() as unknown).from(sessionsTable);",
      "context": "\n    try {\n      let query = (this.drizzleDb.select() as unknown).from(sessionsTable);\n\n      // Apply filters if provided",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 227,
      "content": "query = query.where(and(...conditions)) as unknown;",
      "context": "        // Apply WHERE conditions if any exist\n        if (conditions.length > 0) {\n          query = query.where(and(...conditions)) as unknown;\n        }\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 292,
      "content": ".set(updateData as unknown) as unknown).where(eq(sessionsTable.session, id));",
      "context": "      await (this.drizzleDb\n        .update(sessionsTable)\n        .set(updateData as unknown) as unknown).where(eq(sessionsTable.session, id));\n\n      // Return updated entity",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 308,
      "content": "await (this.drizzleDb.delete(sessionsTable) as unknown).where(eq(sessionsTable.session, id));",
      "context": "\n    try {\n      await (this.drizzleDb.delete(sessionsTable) as unknown).where(eq(sessionsTable.session, id));\n\n      // Since Drizzle doesn't return changes count, we'll check if the entity existed",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 328,
      "content": ".where(eq(sessionsTable.session, id)) as unknown).limit(1);",
      "context": "        .select({ count: sessionsTable.session })\n        .from(sessionsTable)\n        .where(eq(sessionsTable.session, id)) as unknown).limit(1);\n\n      return result.length > 0 as unknown;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 330,
      "content": "return result.length > 0 as unknown;",
      "context": "        .where(eq(sessionsTable.session, id)) as unknown).limit(1);\n\n      return result.length > 0 as unknown;\n    } catch (error) {\n      log.error(\"Failed to check entity existence in SQLite\", { error, id });",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 358,
      "content": "return new SqliteStorage<TEntity, TState>(config as unknown);",
      "context": "  config: SqliteStorageConfig\n): DatabaseStorage<TEntity, TState> {\n  return new SqliteStorage<TEntity, TState>(config as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/cli/tasks/specCommand.ts",
      "line": 56,
      "content": "const normalizedParams = normalizeTaskParams(options as unknown);",
      "context": "\n        // Convert CLI options to domain parameters using normalization helper\n        const normalizedParams = normalizeTaskParams(options as unknown);\n\n        // Convert CLI options to domain parameters",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/cli/tasks/specCommand.ts",
      "line": 63,
      "content": "} as unknown;",
      "context": "          taskId: normalizedTaskId,\n          section: options.section,\n        } as unknown;\n\n        // Call the domain function",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/cli/tasks/specCommand.ts",
      "line": 66,
      "content": "const result = await getTaskSpecContentFromParams(params as unknown);",
      "context": "\n        // Call the domain function\n        const result = await getTaskSpecContentFromParams(params as unknown);\n\n        // Format and display the result",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/cli/tasks/specCommand.ts",
      "line": 69,
      "content": "outputResult(result as unknown, {",
      "context": "\n        // Format and display the result\n        outputResult(result as unknown, {\n          json: options.json,\n          formatter: (data: any) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/cli/utils/index.ts",
      "line": 50,
      "content": "if ((options as unknown)!.json) {",
      "context": "\n  try {\n    if ((options as unknown)!.json) {\n      // JSON output\n      log.cli(JSON.stringify(result as unknown, undefined, 2));",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/index.ts",
      "line": 52,
      "content": "log.cli(JSON.stringify(result as unknown, undefined, 2));",
      "context": "    if ((options as unknown)!.json) {\n      // JSON output\n      log.cli(JSON.stringify(result as unknown, undefined, 2));\n    } else if ((options as unknown)!.formatter) {\n      // Custom formatter",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/adapters/cli/utils/index.ts",
      "line": 53,
      "content": "} else if ((options as unknown)!.formatter) {",
      "context": "      // JSON output\n      log.cli(JSON.stringify(result as unknown, undefined, 2));\n    } else if ((options as unknown)!.formatter) {\n      // Custom formatter\n      (options as unknown)!.formatter(result as unknown);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/index.ts",
      "line": 55,
      "content": "(options as unknown)!.formatter(result as unknown);",
      "context": "    } else if ((options as unknown)!.formatter) {\n      // Custom formatter\n      (options as unknown)!.formatter(result as unknown);\n    } else {\n      // Default output based on result type",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/index.ts",
      "line": 59,
      "content": "log.cli(result as unknown);",
      "context": "      // Default output based on result type\n      if (typeof result === \"string\") {\n        log.cli(result as unknown);\n      } else if (typeof result === \"object\" && result !== null) {\n        if (Array.isArray(result as unknown)) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/index.ts",
      "line": 61,
      "content": "if (Array.isArray(result as unknown)) {",
      "context": "        log.cli(result as unknown);\n      } else if (typeof result === \"object\" && result !== null) {\n        if (Array.isArray(result as unknown)) {\n          (result as unknown)!.forEach((item) => {\n            if (typeof item === \"string\") {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/index.ts",
      "line": 62,
      "content": "(result as unknown)!.forEach((item) => {",
      "context": "      } else if (typeof result === \"object\" && result !== null) {\n        if (Array.isArray(result as unknown)) {\n          (result as unknown)!.forEach((item) => {\n            if (typeof item === \"string\") {\n              log.cli(item as unknown);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/index.ts",
      "line": 64,
      "content": "log.cli(item as unknown);",
      "context": "          (result as unknown)!.forEach((item) => {\n            if (typeof item === \"string\") {\n              log.cli(item as unknown);\n            } else {\n              log.cli(JSON.stringify(item as unknown, undefined, 2));",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/index.ts",
      "line": 66,
      "content": "log.cli(JSON.stringify(item as unknown, undefined, 2));",
      "context": "              log.cli(item as unknown);\n            } else {\n              log.cli(JSON.stringify(item as unknown, undefined, 2));\n            }\n          });",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/adapters/cli/utils/index.ts",
      "line": 70,
      "content": "log.cli(JSON.stringify(result as unknown, undefined, 2));",
      "context": "          });\n        } else {\n          log.cli(JSON.stringify(result as unknown, undefined, 2));\n        }\n      } else {",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/adapters/cli/utils/index.ts",
      "line": 73,
      "content": "log.cli(String(result as unknown));",
      "context": "        }\n      } else {\n        log.cli(String(result as unknown));\n      }\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/shared-options.ts",
      "line": 150,
      "content": "workspace: (options as unknown)[\"upstream-repo\"],",
      "context": "    session: options.session,\n    repo: options.repo,\n    workspace: (options as unknown)[\"upstream-repo\"],\n  };\n}",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/cli/utils/shared-options.ts",
      "line": 204,
      "content": "...normalizeRepoOptions(options as unknown),",
      "context": "} {\n  return {\n    ...normalizeRepoOptions(options as unknown),\n    ...normalizeOutputOptions(options as unknown),\n    backend: options.backend,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/shared-options.ts",
      "line": 205,
      "content": "...normalizeOutputOptions(options as unknown),",
      "context": "  return {\n    ...normalizeRepoOptions(options as unknown),\n    ...normalizeOutputOptions(options as unknown),\n    backend: options.backend,\n  };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/shared-options.ts",
      "line": 226,
      "content": "...normalizeRepoOptions(options as unknown),",
      "context": "} {\n  return {\n    ...normalizeRepoOptions(options as unknown),\n    ...normalizeOutputOptions(options as unknown),\n    ...normalizeTaskOptions(options as unknown),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/shared-options.ts",
      "line": 227,
      "content": "...normalizeOutputOptions(options as unknown),",
      "context": "  return {\n    ...normalizeRepoOptions(options as unknown),\n    ...normalizeOutputOptions(options as unknown),\n    ...normalizeTaskOptions(options as unknown),\n  };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/shared-options.ts",
      "line": 228,
      "content": "...normalizeTaskOptions(options as unknown),",
      "context": "    ...normalizeRepoOptions(options as unknown),\n    ...normalizeOutputOptions(options as unknown),\n    ...normalizeTaskOptions(options as unknown),\n  };\n}",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/error-handler.ts",
      "line": 26,
      "content": "(typeof process.env.NODE_DEBUG === \"string\" && (process.env.NODE_DEBUG as unknown).includes(\"minsky\"));",
      "context": "  process.env.DEBUG === \"true\" ||\n  process.env.DEBUG === \"1\" ||\n  (typeof process.env.NODE_DEBUG === \"string\" && (process.env.NODE_DEBUG as unknown).includes(\"minsky\"));\n\n/**",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/error-handler.ts",
      "line": 108,
      "content": "log.error(\"CLI operation failed\", error as unknown);",
      "context": "    if (error instanceof MinskyError) {\n      // For Minsky errors, we can log with additional context\n      log.error(\"CLI operation failed\", error as unknown);\n    } else {\n      // For other errors, log with basic information",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/error-handler.ts",
      "line": 136,
      "content": "log.agent({ message: \"Command result\", result } as unknown);",
      "context": "    if (isStructuredMode()) {\n      // In structured mode, log to agent logger\n      log.agent({ message: \"Command result\", result } as unknown);\n    } else {\n      // In human mode or when json is explicitly requested, write directly to stdout",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/error-handler.ts",
      "line": 139,
      "content": "log.cli(JSON.stringify(result as unknown, undefined, 2));",
      "context": "    } else {\n      // In human mode or when json is explicitly requested, write directly to stdout\n      log.cli(JSON.stringify(result as unknown, undefined, 2));\n    }\n  } else if (options.formatter) {",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/adapters/cli/utils/error-handler.ts",
      "line": 142,
      "content": "options.formatter(result as unknown);",
      "context": "    }\n  } else if (options.formatter) {\n    options.formatter(result as unknown);\n  } else {\n    log.cli(String(result as unknown));",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/error-handler.ts",
      "line": 144,
      "content": "log.cli(String(result as unknown));",
      "context": "    options.formatter(result as unknown);\n  } else {\n    log.cli(String(result as unknown));\n  }\n}",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/bridges/parameter-mapper.ts",
      "line": 174,
      "content": "const num = Number(value as unknown);",
      "context": "  case \"number\":\n    return option.argParser((value) => {\n      const num = Number(value as unknown);\n      if (isNaN(num)) {\n        throw new Error(\"Option requires a number value\");",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/bridges/parameter-mapper.ts",
      "line": 238,
      "content": "})) as unknown;",
      "context": "      ...customOptions[name],\n    },\n  })) as unknown;\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/bridges/parameter-mapper.ts",
      "line": 258,
      "content": "(result as unknown)[paramName] = paramDef.defaultValue;",
      "context": "      // Use default value if available\n      if (paramDef.defaultValue !== undefined) {\n        (result as unknown)[paramName] = paramDef.defaultValue;\n      }\n      // Skip optional parameters",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/bridges/parameter-mapper.ts",
      "line": 270,
      "content": "(result as unknown)[paramName] = parsedValue;",
      "context": "      try {\n        const parsedValue = paramDef.schema.parse(rawValue);\n        (result as unknown)[paramName] = parsedValue;\n      } catch (error) {\n        // Use user-friendly error formatting for Zod validation errors",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/commands/git.ts",
      "line": 366,
      "content": "}) as unknown;",
      "context": "        repo: params!.repo,\n        session: params!.session,\n      }) as unknown;\n\n      return {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/commands/git.ts",
      "line": 372,
      "content": "} as unknown;",
      "context": "        commitHash: result!.commitHash,\n        message: result!.message,\n      } as unknown;\n    },\n  });",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/commands/git.ts",
      "line": 392,
      "content": "}) as unknown;",
      "context": "        force: params!.force,\n        debug: params!.debug,\n      }) as unknown;\n\n      return {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/commands/git.ts",
      "line": 397,
      "content": "} as unknown;",
      "context": "        success: result!.pushed,\n        workdir: result!.workdir,\n      } as unknown;\n    },\n  });",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/commands/git.ts",
      "line": 416,
      "content": "}) as unknown;",
      "context": "        session: params!.session,\n        branch: params!.branch,\n      }) as unknown;\n\n      return {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/commands/git.ts",
      "line": 422,
      "content": "} as unknown;",
      "context": "        workdir: result!.workdir,\n        session: result!.session,\n      } as unknown;\n    },\n  });",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/commands/git.ts",
      "line": 439,
      "content": "}) as unknown;",
      "context": "        session: params!.session,\n        name: params!.name,\n      }) as unknown;\n\n      return {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/commands/git.ts",
      "line": 445,
      "content": "} as unknown;",
      "context": "        workdir: result!.workdir,\n        branch: result!.branch,\n      } as unknown;\n    },\n  });",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/commands/git.ts",
      "line": 466,
      "content": "}) as unknown;",
      "context": "        debug: params!.debug,\n        noStatusUpdate: params!.noStatusUpdate,\n      }) as unknown;\n\n      return {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/commands/git.ts",
      "line": 472,
      "content": "} as unknown;",
      "context": "        markdown: result!.markdown,\n        statusUpdateResult: result!.statusUpdateResult,\n      } as unknown;\n    },\n  });",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 171,
      "content": "const normalizedTaskId = normalizeTaskId((params as unknown)!.taskId);",
      "context": "  parameters: tasksStatusGetParams,\n  execute: async (params, ctx: CommandExecutionContext) => {\n    const normalizedTaskId = normalizeTaskId((params as unknown)!.taskId);\n    if (!normalizedTaskId) {\n      throw new ValidationError(",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 174,
      "content": "`Invalid task ID: '${(params as unknown)!.taskId}'. Please provide a valid numeric task ID (e.g., 077 or #077).`",
      "context": "    if (!normalizedTaskId) {\n      throw new ValidationError(\n        `Invalid task ID: '${(params as unknown)!.taskId}'. Please provide a valid numeric task ID (e.g., 077 or #077).`\n      );\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 200,
      "content": "if (!(params as unknown)!.taskId) throw new ValidationError(\"Missing required parameter: taskId\");",
      "context": "  execute: async (params, _ctx: CommandExecutionContext) => {\n    log.debug(\"Starting tasks.status.set execution\");\n    if (!(params as unknown)!.taskId) throw new ValidationError(\"Missing required parameter: taskId\");\n\n    // Normalize and validate task ID first",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 204,
      "content": "const normalizedTaskId = normalizeTaskId((params as unknown)!.taskId);",
      "context": "    // Normalize and validate task ID first\n    log.debug(\"About to normalize task ID\");\n    const normalizedTaskId = normalizeTaskId((params as unknown)!.taskId);\n    if (!normalizedTaskId) {\n      throw new ValidationError(",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 207,
      "content": "`Invalid task ID: '${(params as unknown)!.taskId}'. Please provide a valid numeric task ID (e.g., 077 or #077).`",
      "context": "    if (!normalizedTaskId) {\n      throw new ValidationError(\n        `Invalid task ID: '${(params as unknown)!.taskId}'. Please provide a valid numeric task ID (e.g., 077 or #077).`\n      );\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 216,
      "content": "repo: (params as unknown)!.repo,",
      "context": "    const previousStatus = await getTaskStatusFromParams({\n      taskId: normalizedTaskId,\n      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 217,
      "content": "workspace: (params as unknown)!.workspace,",
      "context": "      taskId: normalizedTaskId,\n      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,\n      backend: (params as unknown)!.backend,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 218,
      "content": "session: (params as unknown)!.session,",
      "context": "      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,\n      backend: (params as unknown)!.backend,\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 219,
      "content": "backend: (params as unknown)!.backend,",
      "context": "      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,\n      backend: (params as unknown)!.backend,\n    });\n    log.debug(\"Previous status retrieved successfully\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 223,
      "content": "let status = (params as unknown)!.status;",
      "context": "    log.debug(\"Previous status retrieved successfully\");\n\n    let status = (params as unknown)!.status;\n\n    // If status is not provided, prompt for it interactively",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 270,
      "content": "repo: (params as unknown)!.repo,",
      "context": "      taskId: normalizedTaskId,\n      status: status,\n      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 271,
      "content": "workspace: (params as unknown)!.workspace,",
      "context": "      status: status,\n      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,\n      backend: (params as unknown)!.backend,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 272,
      "content": "session: (params as unknown)!.session,",
      "context": "      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,\n      backend: (params as unknown)!.backend,\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 273,
      "content": "backend: (params as unknown)!.backend,",
      "context": "      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,\n      backend: (params as unknown)!.backend,\n    });\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 296,
      "content": "const normalizedTaskId = normalizeTaskId((params as unknown)!.taskId);",
      "context": "  execute: async (params, ctx: CommandExecutionContext) => {\n    try {\n      const normalizedTaskId = normalizeTaskId((params as unknown)!.taskId);\n      if (!normalizedTaskId) {\n        throw new ValidationError(",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 299,
      "content": "`Invalid task ID: '${(params as unknown)!.taskId}'. Please provide a valid numeric task ID (e.g., 077 or #077).`",
      "context": "      if (!normalizedTaskId) {\n        throw new ValidationError(\n          `Invalid task ID: '${(params as unknown)!.taskId}'. Please provide a valid numeric task ID (e.g., 077 or #077).`\n        );\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 493,
      "content": "if (!(params as unknown)!.taskId) throw new ValidationError(\"Missing required parameter: taskId\");",
      "context": "  parameters: tasksGetParams,\n  execute: async (params, ctx) => {\n    if (!(params as unknown)!.taskId) throw new ValidationError(\"Missing required parameter: taskId\");\n    return await getTaskFromParams({\n      taskId: (params as unknown)!.taskId,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 495,
      "content": "taskId: (params as unknown)!.taskId,",
      "context": "    if (!(params as unknown)!.taskId) throw new ValidationError(\"Missing required parameter: taskId\");\n    return await getTaskFromParams({\n      taskId: (params as unknown)!.taskId,\n      backend: (params as unknown)!.backend,\n      repo: (params as unknown)!.repo,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 496,
      "content": "backend: (params as unknown)!.backend,",
      "context": "    return await getTaskFromParams({\n      taskId: (params as unknown)!.taskId,\n      backend: (params as unknown)!.backend,\n      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 497,
      "content": "repo: (params as unknown)!.repo,",
      "context": "      taskId: (params as unknown)!.taskId,\n      backend: (params as unknown)!.backend,\n      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 498,
      "content": "workspace: (params as unknown)!.workspace,",
      "context": "      backend: (params as unknown)!.backend,\n      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 499,
      "content": "session: (params as unknown)!.session,",
      "context": "      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,\n    });\n  },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 515,
      "content": "if (!(params as unknown)!.title) {",
      "context": "  execute: async (params, ctx) => {\n    // Title is required by schema, but validate it's provided\n    if (!(params as unknown)!.title) {\n      throw new ValidationError(\"Title is required\");\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 520,
      "content": "if (!(params as unknown)!.description && !(params as unknown)!.descriptionPath) {",
      "context": "\n    // Validate that either description or descriptionPath is provided\n    if (!(params as unknown)!.description && !(params as unknown)!.descriptionPath) {\n      throw new ValidationError(\"Either --description or --description-path must be provided\");\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 525,
      "content": "if ((params as unknown)!.description && (params as unknown)!.descriptionPath) {",
      "context": "\n    // Both description and descriptionPath provided is an error\n    if ((params as unknown)!.description && (params as unknown)!.descriptionPath) {\n      throw new ValidationError(\n        \"Cannot provide both --description and --description-path - use one or the other\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 532,
      "content": "title: (params as unknown)!.title,",
      "context": "\n    return await createTaskFromTitleAndDescription({\n      title: (params as unknown)!.title,\n      description: (params as unknown)!.description,\n      descriptionPath: (params as unknown)!.descriptionPath,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 533,
      "content": "description: (params as unknown)!.description,",
      "context": "    return await createTaskFromTitleAndDescription({\n      title: (params as unknown)!.title,\n      description: (params as unknown)!.description,\n      descriptionPath: (params as unknown)!.descriptionPath,\n      force: (params as unknown)!.force ?? false,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 534,
      "content": "descriptionPath: (params as unknown)!.descriptionPath,",
      "context": "      title: (params as unknown)!.title,\n      description: (params as unknown)!.description,\n      descriptionPath: (params as unknown)!.descriptionPath,\n      force: (params as unknown)!.force ?? false,\n      backend: (params as unknown)!.backend,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 535,
      "content": "force: (params as unknown)!.force ?? false,",
      "context": "      description: (params as unknown)!.description,\n      descriptionPath: (params as unknown)!.descriptionPath,\n      force: (params as unknown)!.force ?? false,\n      backend: (params as unknown)!.backend,\n      repo: (params as unknown)!.repo,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 536,
      "content": "backend: (params as unknown)!.backend,",
      "context": "      descriptionPath: (params as unknown)!.descriptionPath,\n      force: (params as unknown)!.force ?? false,\n      backend: (params as unknown)!.backend,\n      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 537,
      "content": "repo: (params as unknown)!.repo,",
      "context": "      force: (params as unknown)!.force ?? false,\n      backend: (params as unknown)!.backend,\n      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 538,
      "content": "workspace: (params as unknown)!.workspace,",
      "context": "      backend: (params as unknown)!.backend,\n      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 539,
      "content": "session: (params as unknown)!.session,",
      "context": "      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,\n    });\n  },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 596,
      "content": "if (!(params as unknown)!.taskId) throw new ValidationError(\"Missing required parameter: taskId\");",
      "context": "  parameters: tasksDeleteParams,\n  execute: async (params, ctx) => {\n    if (!(params as unknown)!.taskId) throw new ValidationError(\"Missing required parameter: taskId\");\n\n    // Handle confirmation if force is not set and we're in interactive mode",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 599,
      "content": "if (!(params as unknown)!.force && !(params as unknown)!.json) {",
      "context": "\n    // Handle confirmation if force is not set and we're in interactive mode\n    if (!(params as unknown)!.force && !(params as unknown)!.json) {\n      // Get task details for confirmation\n      const task = await getTaskFromParams({",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 602,
      "content": "taskId: (params as unknown)!.taskId,",
      "context": "      // Get task details for confirmation\n      const task = await getTaskFromParams({\n        taskId: (params as unknown)!.taskId,\n        backend: (params as unknown)!.backend,\n        repo: (params as unknown)!.repo,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 603,
      "content": "backend: (params as unknown)!.backend,",
      "context": "      const task = await getTaskFromParams({\n        taskId: (params as unknown)!.taskId,\n        backend: (params as unknown)!.backend,\n        repo: (params as unknown)!.repo,\n        workspace: (params as unknown)!.workspace,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 604,
      "content": "repo: (params as unknown)!.repo,",
      "context": "        taskId: (params as unknown)!.taskId,\n        backend: (params as unknown)!.backend,\n        repo: (params as unknown)!.repo,\n        workspace: (params as unknown)!.workspace,\n        session: (params as unknown)!.session,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 605,
      "content": "workspace: (params as unknown)!.workspace,",
      "context": "        backend: (params as unknown)!.backend,\n        repo: (params as unknown)!.repo,\n        workspace: (params as unknown)!.workspace,\n        session: (params as unknown)!.session,\n      });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 606,
      "content": "session: (params as unknown)!.session,",
      "context": "        repo: (params as unknown)!.repo,\n        workspace: (params as unknown)!.workspace,\n        session: (params as unknown)!.session,\n      });\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 613,
      "content": "message: `Are you sure you want to delete task ${(task as unknown)!.id}: \"${(task as unknown)!.title}\"?`,",
      "context": "\n      const shouldDelete = await confirm({\n        message: `Are you sure you want to delete task ${(task as unknown)!.id}: \"${(task as unknown)!.title}\"?`,\n      });\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 620,
      "content": "taskId: (params as unknown)!.taskId,",
      "context": "          success: false,\n          message: \"Task deletion cancelled\",\n          taskId: (params as unknown)!.taskId,\n        };\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 626,
      "content": "taskId: (params as unknown)!.taskId,",
      "context": "\n    const result = await deleteTaskFromParams({\n      taskId: (params as unknown)!.taskId,\n      force: (params as unknown)!.force ?? false,\n      backend: (params as unknown)!.backend,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 627,
      "content": "force: (params as unknown)!.force ?? false,",
      "context": "    const result = await deleteTaskFromParams({\n      taskId: (params as unknown)!.taskId,\n      force: (params as unknown)!.force ?? false,\n      backend: (params as unknown)!.backend,\n      repo: (params as unknown)!.repo,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 628,
      "content": "backend: (params as unknown)!.backend,",
      "context": "      taskId: (params as unknown)!.taskId,\n      force: (params as unknown)!.force ?? false,\n      backend: (params as unknown)!.backend,\n      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 629,
      "content": "repo: (params as unknown)!.repo,",
      "context": "      force: (params as unknown)!.force ?? false,\n      backend: (params as unknown)!.backend,\n      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 630,
      "content": "workspace: (params as unknown)!.workspace,",
      "context": "      backend: (params as unknown)!.backend,\n      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,\n    }) as unknown;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 631,
      "content": "session: (params as unknown)!.session,",
      "context": "      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,\n    }) as unknown;\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 632,
      "content": "}) as unknown;",
      "context": "      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,\n    }) as unknown;\n\n    const message = (result as unknown)!.success",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 634,
      "content": "const message = (result as unknown)!.success",
      "context": "    }) as unknown;\n\n    const message = (result as unknown)!.success\n      ? `Task ${(result as unknown)!.taskId} deleted successfully`\n      : `Failed to delete task ${(result as unknown)!.taskId}`;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 635,
      "content": "? `Task ${(result as unknown)!.taskId} deleted successfully`",
      "context": "\n    const message = (result as unknown)!.success\n      ? `Task ${(result as unknown)!.taskId} deleted successfully`\n      : `Failed to delete task ${(result as unknown)!.taskId}`;\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 636,
      "content": ": `Failed to delete task ${(result as unknown)!.taskId}`;",
      "context": "    const message = (result as unknown)!.success\n      ? `Task ${(result as unknown)!.taskId} deleted successfully`\n      : `Failed to delete task ${(result as unknown)!.taskId}`;\n\n    // Return different formats based on --json flag",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 639,
      "content": "if ((params as unknown)!.json) {",
      "context": "\n    // Return different formats based on --json flag\n    if ((params as unknown)!.json) {\n      // Structured output for programmatic use\n      return {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 642,
      "content": "success: (result as unknown)!.success,",
      "context": "      // Structured output for programmatic use\n      return {\n        success: (result as unknown)!.success,\n        taskId: (result as unknown)!.taskId,\n        task: (result as unknown)!.task,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 643,
      "content": "taskId: (result as unknown)!.taskId,",
      "context": "      return {\n        success: (result as unknown)!.success,\n        taskId: (result as unknown)!.taskId,\n        task: (result as unknown)!.task,\n        message: message,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 644,
      "content": "task: (result as unknown)!.task,",
      "context": "        success: (result as unknown)!.success,\n        taskId: (result as unknown)!.taskId,\n        task: (result as unknown)!.task,\n        message: message,\n      } as unknown;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 646,
      "content": "} as unknown;",
      "context": "        task: (result as unknown)!.task,\n        message: message,\n      } as unknown;\n    } else {\n      // Simple message for user-friendly output",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/commands/session.ts",
      "line": 618,
      "content": "})) as unknown;",
      "context": "          repo: params!.repo,\n          json: params!.json,\n        })) as unknown;\n\n        return {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/commands/session.ts",
      "line": 722,
      "content": "})) as unknown;",
      "context": "          autoResolveDeleteConflicts: params!.autoResolveDeleteConflicts,\n          skipConflictCheck: params!.skipConflictCheck,\n        })) as unknown;\n\n        return {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/commands/sessiondb.ts",
      "line": 191,
      "content": "...(sessionData as unknown),",
      "context": "            sessionRecords.push({\n              session: sessionId,\n              ...(sessionData as unknown),\n            });\n          }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-utils/compatibility/mock-function.ts",
      "line": 319,
      "content": "() => Promise.resolve(value) as unknown as ReturnType<T>",
      "context": "    // Use a cast to suppress TypeScript errors since the return types don\"t match\n    return mockFn.mockImplementation(\n      () => Promise.resolve(value) as unknown as ReturnType<T>\n    ) as unknown;\n  };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-utils/compatibility/mock-function.ts",
      "line": 320,
      "content": ") as unknown;",
      "context": "    return mockFn.mockImplementation(\n      () => Promise.resolve(value) as unknown as ReturnType<T>\n    ) as unknown;\n  };\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/test-utils/compatibility/mock-function.ts",
      "line": 327,
      "content": "() => Promise.resolve(value) as unknown as ReturnType<T>",
      "context": "    // Use a cast to suppress TypeScript errors since the return types don\"t match\n    return mockFn.mockImplementationOnce(\n      () => Promise.resolve(value) as unknown as ReturnType<T>\n    ) as unknown;\n  };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-utils/compatibility/mock-function.ts",
      "line": 328,
      "content": ") as unknown;",
      "context": "    return mockFn.mockImplementationOnce(\n      () => Promise.resolve(value) as unknown as ReturnType<T>\n    ) as unknown;\n  };\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/test-utils/compatibility/mock-function.ts",
      "line": 335,
      "content": "() => Promise.reject(value) as unknown as ReturnType<T>",
      "context": "    // Use a cast to suppress TypeScript errors since the return types don\"t match\n    return mockFn.mockImplementation(\n      () => Promise.reject(value) as unknown as ReturnType<T>\n    ) as unknown;\n  };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-utils/compatibility/mock-function.ts",
      "line": 336,
      "content": ") as unknown;",
      "context": "    return mockFn.mockImplementation(\n      () => Promise.reject(value) as unknown as ReturnType<T>\n    ) as unknown;\n  };\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/test-utils/compatibility/mock-function.ts",
      "line": 343,
      "content": "() => Promise.reject(value) as unknown as ReturnType<T>",
      "context": "    // Use a cast to suppress TypeScript errors since the return types don\"t match\n    return mockFn.mockImplementationOnce(\n      () => Promise.reject(value) as unknown as ReturnType<T>\n    ) as unknown;\n  };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-utils/compatibility/mock-function.ts",
      "line": 344,
      "content": ") as unknown;",
      "context": "    return mockFn.mockImplementationOnce(\n      () => Promise.reject(value) as unknown as ReturnType<T>\n    ) as unknown;\n  };\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/test-utils/compatibility/mock-function.ts",
      "line": 395,
      "content": "(object as unknown)[method] = mockFn;",
      "context": "\n  // Replace the method with our mock\n  (object as unknown)[method] = mockFn;\n\n  return mockFn;",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/test-utils/compatibility/mock-function.ts",
      "line": 421,
      "content": "const mockedModule = { ...module } as unknown;",
      "context": " */\nexport function autoMockModule<T extends object>(module: T): T {\n  const mockedModule = { ...module } as unknown;\n\n  // Recursively replace all functions with mocks",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/test-utils/compatibility/matchers.ts",
      "line": 118,
      "content": "return `Any<${(this.expectedType as unknown)?.name || this.expectedType}>`;",
      "context": "\n  toString(): string {\n    return `Any<${(this.expectedType as unknown)?.name || this.expectedType}>`;\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-utils/compatibility/matchers.ts",
      "line": 122,
      "content": "return `Any<${(this.expectedType as unknown)?.name || this.expectedType}>`;",
      "context": "\n  toJSON(): string {\n    return `Any<${(this.expectedType as unknown)?.name || this.expectedType}>`;\n  }\n}",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-utils/compatibility/matchers.ts",
      "line": 398,
      "content": "if (!(key in (expectObj as unknown))) {",
      "context": "  // Add each matcher to the expect object\n  for (const [key, value] of Object.entries(asymmetricMatchers)) {\n    if (!(key in (expectObj as unknown))) {\n      (expectObj as unknown)[key] = value;\n    }",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/test-utils/compatibility/matchers.ts",
      "line": 399,
      "content": "(expectObj as unknown)[key] = value;",
      "context": "  for (const [key, value] of Object.entries(asymmetricMatchers)) {\n    if (!(key in (expectObj as unknown))) {\n      (expectObj as unknown)[key] = value;\n    }\n  }",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    }
  ],
  "recommendations": [
    "🚨 HIGH PRIORITY: 604 assertions are masking type errors and should be fixed immediately",
    "⚠️  604 assertions are masking type errors - these reduce TypeScript effectiveness",
    "🧪 110 assertions in tests - review for proper type alternatives",
    "🌉 23 assertions for type bridging - consider proper type guards",
    "📋 Start with high priority items, then medium, then low",
    "🔍 Focus on production code before test code",
    "📚 Document any legitimate uses that must remain"
  ]
}