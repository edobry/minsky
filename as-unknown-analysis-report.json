{
  "totalCount": 2356,
  "byCategory": {
    "error-masking": 2052,
    "test-mocking": 140,
    "suspicious": 141,
    "type-bridging": 23
  },
  "byPriority": {
    "high": 2052,
    "medium": 193,
    "low": 111
  },
  "matches": [
    {
      "file": "fix-syntax-errors.ts",
      "line": 16,
      "content": "// Fix (this as unknown)?.name = \"ErrorName\"; -> (this as unknown).name = \"ErrorName\";",
      "context": "    const originalContent = content;\n    \n    // Fix (this as unknown)?.name = \"ErrorName\"; -> (this as unknown).name = \"ErrorName\";\n    let fixedContent = content.replace(/\\(this as unknown\\)\\?\\.name = /g, \"(this as unknown).name = \");\n    ",
      "category": "error-masking",
      "priority": "high",
      "reason": "This context masking - likely type error"
    },
    {
      "file": "fix-syntax-errors.ts",
      "line": 17,
      "content": "let fixedContent = content.replace(/\\(this as unknown\\)\\?\\.name = /g, \"(this as unknown).name = \");",
      "context": "    \n    // Fix (this as unknown)?.name = \"ErrorName\"; -> (this as unknown).name = \"ErrorName\";\n    let fixedContent = content.replace(/\\(this as unknown\\)\\?\\.name = /g, \"(this as unknown).name = \");\n    \n    // Fix other potential ?. assignment issues",
      "category": "error-masking",
      "priority": "high",
      "reason": "This context masking - likely type error"
    },
    {
      "file": "fix-syntax-errors.ts",
      "line": 20,
      "content": "fixedContent = fixedContent.replace(/\\(this as unknown\\)\\?\\.([a-zA-Z_][a-zA-Z0-9_]*) = /g, \"(this as unknown).$1 = \");",
      "context": "    \n    // Fix other potential ?. assignment issues\n    fixedContent = fixedContent.replace(/\\(this as unknown\\)\\?\\.([a-zA-Z_][a-zA-Z0-9_]*) = /g, \"(this as unknown).$1 = \");\n    \n    if (fixedContent !== originalContent) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "This context masking - likely type error"
    },
    {
      "file": "fix-syntax-errors.ts",
      "line": 24,
      "content": "const fixes = (originalContent.match(/\\(this as unknown\\)\\?\\./g) || []).length;",
      "context": "    if (fixedContent !== originalContent) {\n      writeFileSync(file, fixedContent);\n      const fixes = (originalContent.match(/\\(this as unknown\\)\\?\\./g) || []).length;\n      console.log(`✅ Fixed ${fixes} syntax errors in ${file}`);\n      totalFixes += fixes;",
      "category": "error-masking",
      "priority": "high",
      "reason": "This context masking - likely type error"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 64,
      "content": "return null as unknown;",
      "context": "      createTestFile(\"return-statements.ts\", `\n        function test1(): string | null {\n          return null as unknown;\n        }\n",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 68,
      "content": "return undefined as unknown;",
      "context": "\n        function test2(): string | undefined {\n          return undefined as unknown;\n        }\n",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 73,
      "content": "return null as unknown;",
      "context": "        function test3(): any {\n          if (condition) {\n            return null as unknown;\n          }\n          return undefined as unknown;",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 75,
      "content": "return undefined as unknown;",
      "context": "            return null as unknown;\n          }\n          return undefined as unknown;\n        }\n      `);",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 84,
      "content": "expect(result).not.toContain(\"as unknown\");",
      "context": "      expect(result).toContain(\"return null;\");\n      expect(result).toContain(\"return undefined;\");\n      expect(result).not.toContain(\"as unknown\");\n      expect((fixer as any).metrics.issuesFixed).toBeGreaterThan(0);\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 90,
      "content": "const value1 = null as unknown;",
      "context": "    test(\"should fix null/undefined assignment patterns\", async () => {\n      createTestFile(\"null-undefined.ts\", `\n        const value1 = null as unknown;\n        const value2 = undefined as unknown;\n        let value3: any = null as unknown;",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 91,
      "content": "const value2 = undefined as unknown;",
      "context": "      createTestFile(\"null-undefined.ts\", `\n        const value1 = null as unknown;\n        const value2 = undefined as unknown;\n        let value3: any = null as unknown;\n        let value4: any = undefined as unknown;",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 92,
      "content": "let value3: any = null as unknown;",
      "context": "        const value1 = null as unknown;\n        const value2 = undefined as unknown;\n        let value3: any = null as unknown;\n        let value4: any = undefined as unknown;\n        ",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 93,
      "content": "let value4: any = undefined as unknown;",
      "context": "        const value2 = undefined as unknown;\n        let value3: any = null as unknown;\n        let value4: any = undefined as unknown;\n        \n        const obj = {",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 96,
      "content": "prop1: null as unknown,",
      "context": "        \n        const obj = {\n          prop1: null as unknown,\n          prop2: undefined as unknown\n        };",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 97,
      "content": "prop2: undefined as unknown",
      "context": "        const obj = {\n          prop1: null as unknown,\n          prop2: undefined as unknown\n        };\n      `);",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 110,
      "content": "expect(result).not.toContain(\"as unknown\");",
      "context": "      expect(result).toContain(\"prop1: null,\");\n      expect(result).toContain(\"prop2: undefined\");\n      expect(result).not.toContain(\"as unknown\");\n    });\n  });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 118,
      "content": "return [...(state as unknown).sessions];",
      "context": "      createTestFile(\"state-access.ts\", `\n        function listSessions(state: any): any[] {\n          return [...(state as unknown).sessions];\n        }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 122,
      "content": "return (state.sessions as unknown).find(s => s.name === sessionName);",
      "context": "\n        function getSession(state: any, sessionName: string): any {\n          return (state.sessions as unknown).find(s => s.name === sessionName);\n        }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 126,
      "content": "return (sessions as unknown).find(s => s.id === id);",
      "context": "\n        function getSessionById(sessions: any[], id: string): any {\n          return (sessions as unknown).find(s => s.id === id);\n        }\n      `);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 136,
      "content": "expect(result).not.toContain(\"as unknown\");",
      "context": "      expect(result).toContain(\"return state.sessions.find(s => s.name === sessionName);\");\n      expect(result).toContain(\"return sessions.find(s => s.id === id);\");\n      expect(result).not.toContain(\"as unknown\");\n    });\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 148,
      "content": "return await (this.sessionProvider as unknown).getSession(name);",
      "context": "\n          async getSession(name: string) {\n            return await (this.sessionProvider as unknown).getSession(name);\n          }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 152,
      "content": "return (this.pathResolver as unknown).getRelativePathFromSession(dir, path);",
      "context": "\n          getPath(dir: string, path: string) {\n            return (this.pathResolver as unknown).getRelativePathFromSession(dir, path);\n          }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 156,
      "content": "return (this.workspaceBackend as unknown).readFile(dir, path);",
      "context": "\n          readFile(dir: string, path: string) {\n            return (this.workspaceBackend as unknown).readFile(dir, path);\n          }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 160,
      "content": "return (this.config as unknown).path;",
      "context": "\n          getConfigPath() {\n            return (this.config as unknown).path;\n          }\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 172,
      "content": "expect(result).not.toContain(\"as unknown\");",
      "context": "      expect(result).toContain(\"return this.workspaceBackend.readFile(dir, path);\");\n      expect(result).toContain(\"return this.config.path;\");\n      expect(result).not.toContain(\"as unknown\");\n    });\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 178,
      "content": "const found = (items as unknown).find(item => item.id === 1);",
      "context": "      createTestFile(\"array-methods.ts\", `\n        function processItems(items: any[]): any {\n          const found = (items as unknown).find(item => item.id === 1);\n          const length = (items as unknown).length;\n          (items as unknown).push({ id: 2 });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 179,
      "content": "const length = (items as unknown).length;",
      "context": "        function processItems(items: any[]): any {\n          const found = (items as unknown).find(item => item.id === 1);\n          const length = (items as unknown).length;\n          (items as unknown).push({ id: 2 });\n          const filtered = (items as unknown).filter(item => item.active);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 180,
      "content": "(items as unknown).push({ id: 2 });",
      "context": "          const found = (items as unknown).find(item => item.id === 1);\n          const length = (items as unknown).length;\n          (items as unknown).push({ id: 2 });\n          const filtered = (items as unknown).filter(item => item.active);\n          const mapped = (items as unknown).map(item => item.name);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 181,
      "content": "const filtered = (items as unknown).filter(item => item.active);",
      "context": "          const length = (items as unknown).length;\n          (items as unknown).push({ id: 2 });\n          const filtered = (items as unknown).filter(item => item.active);\n          const mapped = (items as unknown).map(item => item.name);\n          const index = (items as unknown).findIndex(item => item.id === 3);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 182,
      "content": "const mapped = (items as unknown).map(item => item.name);",
      "context": "          (items as unknown).push({ id: 2 });\n          const filtered = (items as unknown).filter(item => item.active);\n          const mapped = (items as unknown).map(item => item.name);\n          const index = (items as unknown).findIndex(item => item.id === 3);\n          (items as unknown).splice(0, 1);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 183,
      "content": "const index = (items as unknown).findIndex(item => item.id === 3);",
      "context": "          const filtered = (items as unknown).filter(item => item.active);\n          const mapped = (items as unknown).map(item => item.name);\n          const index = (items as unknown).findIndex(item => item.id === 3);\n          (items as unknown).splice(0, 1);\n          ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 184,
      "content": "(items as unknown).splice(0, 1);",
      "context": "          const mapped = (items as unknown).map(item => item.name);\n          const index = (items as unknown).findIndex(item => item.id === 3);\n          (items as unknown).splice(0, 1);\n          \n          return { found, length, filtered, mapped, index };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 190,
      "content": "const keys = (Object as unknown).keys(obj);",
      "context": "\n        function processObject(obj: any): any {\n          const keys = (Object as unknown).keys(obj);\n          const values = (Object as unknown).values(obj);\n          const entries = (Object as unknown).entries(obj);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 191,
      "content": "const values = (Object as unknown).values(obj);",
      "context": "        function processObject(obj: any): any {\n          const keys = (Object as unknown).keys(obj);\n          const values = (Object as unknown).values(obj);\n          const entries = (Object as unknown).entries(obj);\n          ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 192,
      "content": "const entries = (Object as unknown).entries(obj);",
      "context": "          const keys = (Object as unknown).keys(obj);\n          const values = (Object as unknown).values(obj);\n          const entries = (Object as unknown).entries(obj);\n          \n          return { keys, values, entries };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 208,
      "content": "expect(result).not.toContain(\"as unknown\");",
      "context": "      expect(result).toContain(\"const index = items.findIndex(item => item.id === 3);\");\n      expect(result).toContain(\"items.splice(0, 1);\");\n      expect(result).not.toContain(\"as unknown\");\n    });\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 216,
      "content": "(this as unknown).name = \"CustomError\";",
      "context": "          constructor(message: string) {\n            super(message);\n            (this as unknown).name = \"CustomError\";\n          }\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 223,
      "content": "(this as unknown).name = \"SessionError\";",
      "context": "          constructor(sessionId: string) {\n            super(\\`Session error: \\${sessionId}\\`);\n            (this as unknown).name = \"SessionError\";\n          }\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 233,
      "content": "expect(result).not.toContain(\"as unknown\");",
      "context": "      expect(result).toContain(\"this.name = \\\"CustomError\\\";\");\n      expect(result).toContain(\"this.name = \\\"SessionError\\\";\");\n      expect(result).not.toContain(\"as unknown\");\n    });\n  });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 240,
      "content": "const homeDir = (process.env as unknown).HOME;",
      "context": "    test(\"should fix environment variable access\", async () => {\n      createTestFile(\"env-vars.ts\", `\n        const homeDir = (process.env as unknown).HOME;\n        const nodeEnv = (process.env as unknown).NODE_ENV;\n        const customVar = (process.env as unknown).CUSTOM_VAR;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 241,
      "content": "const nodeEnv = (process.env as unknown).NODE_ENV;",
      "context": "      createTestFile(\"env-vars.ts\", `\n        const homeDir = (process.env as unknown).HOME;\n        const nodeEnv = (process.env as unknown).NODE_ENV;\n        const customVar = (process.env as unknown).CUSTOM_VAR;\n      `);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 242,
      "content": "const customVar = (process.env as unknown).CUSTOM_VAR;",
      "context": "        const homeDir = (process.env as unknown).HOME;\n        const nodeEnv = (process.env as unknown).NODE_ENV;\n        const customVar = (process.env as unknown).CUSTOM_VAR;\n      `);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 251,
      "content": "expect(result).not.toContain(\"as unknown\");",
      "context": "      expect(result).toContain(\"const nodeEnv = process.env.NODE_ENV;\");\n      expect(result).toContain(\"const customVar = process.env.CUSTOM_VAR;\");\n      expect(result).not.toContain(\"as unknown\");\n    });\n  });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 260,
      "content": "return null as unknown;",
      "context": "        // Critical patterns\n        function criticalTest() {\n          return null as unknown;\n          const val = undefined as unknown;\n        }",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 261,
      "content": "const val = undefined as unknown;",
      "context": "        function criticalTest() {\n          return null as unknown;\n          const val = undefined as unknown;\n        }\n",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 266,
      "content": "const sessions = (state as unknown).sessions;",
      "context": "        // High priority patterns\n        function highPriorityTest(state: any, service: any) {\n          const sessions = (state as unknown).sessions;\n          const result = (service.provider as unknown).getSession(\"test\");\n          const length = (sessions as unknown).length;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 267,
      "content": "const result = (service.provider as unknown).getSession(\"test\");",
      "context": "        function highPriorityTest(state: any, service: any) {\n          const sessions = (state as unknown).sessions;\n          const result = (service.provider as unknown).getSession(\"test\");\n          const length = (sessions as unknown).length;\n          (this as unknown).name = \"TestError\";",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 268,
      "content": "const length = (sessions as unknown).length;",
      "context": "          const sessions = (state as unknown).sessions;\n          const result = (service.provider as unknown).getSession(\"test\");\n          const length = (sessions as unknown).length;\n          (this as unknown).name = \"TestError\";\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 269,
      "content": "(this as unknown).name = \"TestError\";",
      "context": "          const result = (service.provider as unknown).getSession(\"test\");\n          const length = (sessions as unknown).length;\n          (this as unknown).name = \"TestError\";\n        }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 274,
      "content": "const home = (process.env as unknown).HOME;",
      "context": "        // Medium priority patterns\n        function mediumPriorityTest() {\n          const home = (process.env as unknown).HOME;\n        }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 279,
      "content": "const complex = (someComplexExpression() as unknown).someProperty;",
      "context": "        // Unmatched patterns (should be flagged for manual review)\n        function unmatchedTest() {\n          const complex = (someComplexExpression() as unknown).someProperty;\n        }\n      `);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 307,
      "content": "sessions: (state as unknown).sessions,",
      "context": "        function complexTest() {\n          const result = {\n            sessions: (state as unknown).sessions,\n            count: (state as unknown).sessions.length,\n            first: (state as unknown).sessions.find(s => s.active)",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 308,
      "content": "count: (state as unknown).sessions.length,",
      "context": "          const result = {\n            sessions: (state as unknown).sessions,\n            count: (state as unknown).sessions.length,\n            first: (state as unknown).sessions.find(s => s.active)\n          };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 309,
      "content": "first: (state as unknown).sessions.find(s => s.active)",
      "context": "            sessions: (state as unknown).sessions,\n            count: (state as unknown).sessions.length,\n            first: (state as unknown).sessions.find(s => s.active)\n          };\n          ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 312,
      "content": "const chained = (obj as unknown).prop1.prop2.prop3;",
      "context": "          };\n          \n          const chained = (obj as unknown).prop1.prop2.prop3;\n          const multiLine = (veryLongVariableName as unknown)\n            .someMethod()",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 313,
      "content": "const multiLine = (veryLongVariableName as unknown)",
      "context": "          \n          const chained = (obj as unknown).prop1.prop2.prop3;\n          const multiLine = (veryLongVariableName as unknown)\n            .someMethod()\n            .anotherMethod();",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 332,
      "content": "return null as unknown;",
      "context": "      createTestFile(\"syntax-error.ts\", `\n        function broken() {\n          return null as unknown;\n          // Missing closing brace\n      `);",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 352,
      "content": "test(\"should handle files with no as unknown patterns\", async () => {",
      "context": "    });\n\n    test(\"should handle files with no as unknown patterns\", async () => {\n      createTestFile(\"no-patterns.ts\", `\n        function clean() {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 380,
      "content": "const value = null as unknown; // inline comment",
      "context": "        function test() {\n          // This is another comment\n          const value = null as unknown; // inline comment\n          \n          return value;",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 401,
      "content": "return null as unknown;",
      "context": "      const originalContent = `\n        function test() {\n          return null as unknown;\n        }\n      `;",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 420,
      "content": "const a = null as unknown;",
      "context": "      createTestFile(\"metrics-test.ts\", `\n        function test() {\n          const a = null as unknown;\n          const b = undefined as unknown;\n          const c = (state as unknown).sessions;",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 421,
      "content": "const b = undefined as unknown;",
      "context": "        function test() {\n          const a = null as unknown;\n          const b = undefined as unknown;\n          const c = (state as unknown).sessions;\n          const d = (items as unknown).length;",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 422,
      "content": "const c = (state as unknown).sessions;",
      "context": "          const a = null as unknown;\n          const b = undefined as unknown;\n          const c = (state as unknown).sessions;\n          const d = (items as unknown).length;\n          return null as unknown;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 423,
      "content": "const d = (items as unknown).length;",
      "context": "          const b = undefined as unknown;\n          const c = (state as unknown).sessions;\n          const d = (items as unknown).length;\n          return null as unknown;\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 424,
      "content": "return null as unknown;",
      "context": "          const c = (state as unknown).sessions;\n          const d = (items as unknown).length;\n          return null as unknown;\n        }\n      `);",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 440,
      "content": "const a = null as unknown;",
      "context": "      createTestFile(\"success-rate.ts\", `\n        function fixablePatterns() {\n          const a = null as unknown;\n          const b = (state as unknown).sessions;\n          return undefined as unknown;",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 441,
      "content": "const b = (state as unknown).sessions;",
      "context": "        function fixablePatterns() {\n          const a = null as unknown;\n          const b = (state as unknown).sessions;\n          return undefined as unknown;\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 442,
      "content": "return undefined as unknown;",
      "context": "          const a = null as unknown;\n          const b = (state as unknown).sessions;\n          return undefined as unknown;\n        }\n      `);",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 469,
      "content": "return (this.config as unknown).path;",
      "context": "\n          getPath(): string {\n            return (this.config as unknown).path;\n          }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 473,
      "content": "return (this.config as unknown).timeout;",
      "context": "\n          getTimeout(): number {\n            return (this.config as unknown).timeout;\n          }\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 483,
      "content": "expect(result).not.toContain(\"as unknown\");",
      "context": "      expect(result).toContain(\"return this.config.path;\");\n      expect(result).toContain(\"return this.config.timeout;\");\n      expect(result).not.toContain(\"as unknown\");\n      \n      // Should maintain interface and class structure",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "analyze-as-unknown.ts",
      "line": 29,
      "content": "console.log(\"🔍 Scanning for \\\"as unknown\\\" assertions...\");",
      "context": "\n  async analyzeCodebase(): Promise<AnalysisReport> {\n    console.log(\"🔍 Scanning for \\\"as unknown\\\" assertions...\");\n    \n    // Find all TypeScript files",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "analyze-as-unknown.ts",
      "line": 52,
      "content": "if (line.includes(\"as unknown\")) {",
      "context": "      \n      lines.forEach((line, index) => {\n        if (line.includes(\"as unknown\")) {\n          const match = this.categorizeAssertion(filepath, index + 1, line, lines);\n          if (match) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "analyze-as-unknown.ts",
      "line": 89,
      "content": "} else if (trimmed.includes(\"undefined as unknown\") ||",
      "context": "        priority = \"low\";\n        reason = \"Test mocking - may be legitimate for test setup\";\n      } else if (trimmed.includes(\"undefined as unknown\") || \n                 trimmed.includes(\"null as unknown\")) {\n        category = \"test-mocking\";",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "analyze-as-unknown.ts",
      "line": 90,
      "content": "trimmed.includes(\"null as unknown\")) {",
      "context": "        reason = \"Test mocking - may be legitimate for test setup\";\n      } else if (trimmed.includes(\"undefined as unknown\") || \n                 trimmed.includes(\"null as unknown\")) {\n        category = \"test-mocking\";\n        priority = \"medium\";",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "analyze-as-unknown.ts",
      "line": 101,
      "content": "if (trimmed.includes(\"undefined as unknown\") ||",
      "context": "    } else {\n      // Production code patterns\n      if (trimmed.includes(\"undefined as unknown\") || \n          trimmed.includes(\"null as unknown\")) {\n        category = \"error-masking\";",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "analyze-as-unknown.ts",
      "line": 102,
      "content": "trimmed.includes(\"null as unknown\")) {",
      "context": "      // Production code patterns\n      if (trimmed.includes(\"undefined as unknown\") || \n          trimmed.includes(\"null as unknown\")) {\n        category = \"error-masking\";\n        priority = \"high\";",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "analyze-as-unknown.ts",
      "line": 111,
      "content": "} else if (trimmed.includes(\"this as unknown\")) {",
      "context": "        priority = \"medium\";\n        reason = \"JSON parsing - may need proper type guards\";\n      } else if (trimmed.includes(\"this as unknown\")) {\n        category = \"error-masking\";\n        priority = \"high\";",
      "category": "error-masking",
      "priority": "high",
      "reason": "This context masking - likely type error"
    },
    {
      "file": "analyze-as-unknown.ts",
      "line": 116,
      "content": "trimmed.includes(\"as unknown\") && trimmed.includes(\".\")) {",
      "context": "        reason = \"This context masking - likely type error\";\n      } else if (trimmed.includes(\"(\") && trimmed.includes(\")\") && \n                 trimmed.includes(\"as unknown\") && trimmed.includes(\".\")) {\n        category = \"error-masking\";\n        priority = \"high\";",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "analyze-as-unknown.ts",
      "line": 194,
      "content": "console.log(`Total \"as unknown\" assertions found: ${report.totalCount}`);",
      "context": "  console.log(\"\\n📊 ANALYSIS REPORT\");\n  console.log(\"==================\");\n  console.log(`Total \"as unknown\" assertions found: ${report.totalCount}`);\n  \n  console.log(\"\\n📂 By Category:\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "analyze-as-unknown.ts",
      "line": 222,
      "content": "return `# \"as unknown\" Analysis Report",
      "context": "\nfunction generateMarkdownSummary(report: AnalysisReport): string {\n  return `# \"as unknown\" Analysis Report\n\n## Summary",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 19,
      "content": "console.log(\"🔧 Starting automated as unknown fixes...\");",
      "context": "\n  async fixCodebase(): Promise<void> {\n    console.log(\"🔧 Starting automated as unknown fixes...\");\n    \n    // Find all TypeScript files",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 80,
      "content": "return (content.match(/as unknown/g) || []).length;",
      "context": "\n  private countAsUnknown(content: string): number {\n    return (content.match(/as unknown/g) || []).length;\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 87,
      "content": "pattern: /\\(state as unknown\\)\\.sessions/g,",
      "context": "      // State and session object access\n      {\n        pattern: /\\(state as unknown\\)\\.sessions/g,\n        replacement: \"state.sessions\",\n        description: \"Fixed state.sessions access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 92,
      "content": "pattern: /\\(state\\.sessions as unknown\\)/g,",
      "context": "      },\n      {\n        pattern: /\\(state\\.sessions as unknown\\)/g,\n        replacement: \"state.sessions\",\n        description: \"Fixed state.sessions wrapper\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 97,
      "content": "pattern: /\\(s as unknown\\)\\.session/g,",
      "context": "      },\n      {\n        pattern: /\\(s as unknown\\)\\.session/g,\n        replacement: \"s.session\",\n        description: \"Fixed session record access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 102,
      "content": "pattern: /\\(s as unknown\\)\\.taskId/g,",
      "context": "      },\n      {\n        pattern: /\\(s as unknown\\)\\.taskId/g,\n        replacement: \"s.taskId\",\n        description: \"Fixed taskId access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 107,
      "content": "pattern: /\\(session as unknown\\)\\.session/g,",
      "context": "      },\n      {\n        pattern: /\\(session as unknown\\)\\.session/g,\n        replacement: \"session.session\",\n        description: \"Fixed session property access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 112,
      "content": "pattern: /\\(session as unknown\\)\\.taskId/g,",
      "context": "      },\n      {\n        pattern: /\\(session as unknown\\)\\.taskId/g,\n        replacement: \"session.taskId\",\n        description: \"Fixed session taskId access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 117,
      "content": "pattern: /\\(workspace as unknown\\)\\.workspaceDir/g,",
      "context": "      },\n      {\n        pattern: /\\(workspace as unknown\\)\\.workspaceDir/g,\n        replacement: \"workspace.workspaceDir\",\n        description: \"Fixed workspace directory access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 122,
      "content": "pattern: /\\(workspace as unknown\\)\\.sessionName/g,",
      "context": "      },\n      {\n        pattern: /\\(workspace as unknown\\)\\.sessionName/g,\n        replacement: \"workspace.sessionName\",\n        description: \"Fixed workspace session name access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 128,
      "content": "pattern: /\\(this\\.config as unknown\\)\\.path/g,",
      "context": "      // Config and environment access\n      {\n        pattern: /\\(this\\.config as unknown\\)\\.path/g,\n        replacement: \"this.config.path\",\n        description: \"Fixed config path access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 133,
      "content": "pattern: /\\(process\\.env as unknown\\)\\.([A-Z_]+)/g,",
      "context": "      },\n      {\n        pattern: /\\(process\\.env as unknown\\)\\.([A-Z_]+)/g,\n        replacement: \"process.env.$1\",\n        description: \"Fixed environment variable access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 139,
      "content": "pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.length/g,",
      "context": "      // Array and object method access\n      {\n        pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.length/g,\n        replacement: \"$1.length\",\n        description: \"Fixed array length access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 144,
      "content": "pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.push/g,",
      "context": "      },\n      {\n        pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.push/g,\n        replacement: \"$1.push\",\n        description: \"Fixed array push access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 149,
      "content": "pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.find/g,",
      "context": "      },\n      {\n        pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.find/g,\n        replacement: \"$1.find\",\n        description: \"Fixed array find access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 154,
      "content": "pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.findIndex/g,",
      "context": "      },\n      {\n        pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.findIndex/g,\n        replacement: \"$1.findIndex\",\n        description: \"Fixed array findIndex access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 159,
      "content": "pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.splice/g,",
      "context": "      },\n      {\n        pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.splice/g,\n        replacement: \"$1.splice\",\n        description: \"Fixed array splice access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 164,
      "content": "pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.filter/g,",
      "context": "      },\n      {\n        pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.filter/g,\n        replacement: \"$1.filter\",\n        description: \"Fixed array filter access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 169,
      "content": "pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.map/g,",
      "context": "      },\n      {\n        pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.map/g,\n        replacement: \"$1.map\",\n        description: \"Fixed array map access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 174,
      "content": "pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.split/g,",
      "context": "      },\n      {\n        pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.split/g,\n        replacement: \"$1.split\",\n        description: \"Fixed string split access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 179,
      "content": "pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.trim/g,",
      "context": "      },\n      {\n        pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.trim/g,\n        replacement: \"$1.trim\",\n        description: \"Fixed string trim access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 184,
      "content": "pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.replace/g,",
      "context": "      },\n      {\n        pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.replace/g,\n        replacement: \"$1.replace\",\n        description: \"Fixed string replace access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 205,
      "content": "pattern: /\\[\\.\\.\\.\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.([a-zA-Z_][a-zA-Z0-9_]*)\\]/g,",
      "context": "    const patterns = [\n      {\n        pattern: /\\[\\.\\.\\.\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.([a-zA-Z_][a-zA-Z0-9_]*)\\]/g,\n        replacement: \"[...$1.$2]\",\n        description: \"Fixed array spread with property access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 210,
      "content": "pattern: /\\[\\.\\.\\.\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\]/g,",
      "context": "      },\n      {\n        pattern: /\\[\\.\\.\\.\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\]/g,\n        replacement: \"[...$1]\",\n        description: \"Fixed array spread\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 231,
      "content": "pattern: /\\(this\\.sessionProvider as unknown\\)\\.getSession/g,",
      "context": "    const patterns = [\n      {\n        pattern: /\\(this\\.sessionProvider as unknown\\)\\.getSession/g,\n        replacement: \"this.sessionProvider.getSession\",\n        description: \"Fixed sessionProvider.getSession call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 236,
      "content": "pattern: /\\(this\\.sessionProvider as unknown\\)\\.getSessionByTaskId/g,",
      "context": "      },\n      {\n        pattern: /\\(this\\.sessionProvider as unknown\\)\\.getSessionByTaskId/g,\n        replacement: \"this.sessionProvider.getSessionByTaskId\",\n        description: \"Fixed sessionProvider.getSessionByTaskId call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 241,
      "content": "pattern: /\\(this\\.sessionProvider as unknown\\)\\.listSessions/g,",
      "context": "      },\n      {\n        pattern: /\\(this\\.sessionProvider as unknown\\)\\.listSessions/g,\n        replacement: \"this.sessionProvider.listSessions\",\n        description: \"Fixed sessionProvider.listSessions call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 246,
      "content": "pattern: /\\(this\\.sessionProvider as unknown\\)\\.getSessionWorkdir/g,",
      "context": "      },\n      {\n        pattern: /\\(this\\.sessionProvider as unknown\\)\\.getSessionWorkdir/g,\n        replacement: \"this.sessionProvider.getSessionWorkdir\",\n        description: \"Fixed sessionProvider.getSessionWorkdir call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 251,
      "content": "pattern: /\\(this\\.pathResolver as unknown\\)\\.getRelativePathFromSession/g,",
      "context": "      },\n      {\n        pattern: /\\(this\\.pathResolver as unknown\\)\\.getRelativePathFromSession/g,\n        replacement: \"this.pathResolver.getRelativePathFromSession\",\n        description: \"Fixed pathResolver.getRelativePathFromSession call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 256,
      "content": "pattern: /\\(this\\.pathResolver as unknown\\)\\.validateAndResolvePath/g,",
      "context": "      },\n      {\n        pattern: /\\(this\\.pathResolver as unknown\\)\\.validateAndResolvePath/g,\n        replacement: \"this.pathResolver.validateAndResolvePath\",\n        description: \"Fixed pathResolver.validateAndResolvePath call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 261,
      "content": "pattern: /\\(this\\.workspaceBackend as unknown\\)\\.readFile/g,",
      "context": "      },\n      {\n        pattern: /\\(this\\.workspaceBackend as unknown\\)\\.readFile/g,\n        replacement: \"this.workspaceBackend.readFile\",\n        description: \"Fixed workspaceBackend.readFile call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 266,
      "content": "pattern: /\\(this\\.workspaceBackend as unknown\\)\\.writeFile/g,",
      "context": "      },\n      {\n        pattern: /\\(this\\.workspaceBackend as unknown\\)\\.writeFile/g,\n        replacement: \"this.workspaceBackend.writeFile\",\n        description: \"Fixed workspaceBackend.writeFile call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 271,
      "content": "pattern: /\\(this\\.workspaceBackend as unknown\\)\\.deleteFile/g,",
      "context": "      },\n      {\n        pattern: /\\(this\\.workspaceBackend as unknown\\)\\.deleteFile/g,\n        replacement: \"this.workspaceBackend.deleteFile\",\n        description: \"Fixed workspaceBackend.deleteFile call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 276,
      "content": "pattern: /\\(this\\.workspaceBackend as unknown\\)\\.listDirectory/g,",
      "context": "      },\n      {\n        pattern: /\\(this\\.workspaceBackend as unknown\\)\\.listDirectory/g,\n        replacement: \"this.workspaceBackend.listDirectory\",\n        description: \"Fixed workspaceBackend.listDirectory call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 281,
      "content": "pattern: /\\(this\\.workspaceBackend as unknown\\)\\.exists/g,",
      "context": "      },\n      {\n        pattern: /\\(this\\.workspaceBackend as unknown\\)\\.exists/g,\n        replacement: \"this.workspaceBackend.exists\",\n        description: \"Fixed workspaceBackend.exists call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 286,
      "content": "pattern: /\\(this\\.workspaceBackend as unknown\\)\\.createDirectory/g,",
      "context": "      },\n      {\n        pattern: /\\(this\\.workspaceBackend as unknown\\)\\.createDirectory/g,\n        replacement: \"this.workspaceBackend.createDirectory\",\n        description: \"Fixed workspaceBackend.createDirectory call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 307,
      "content": "pattern: /return null as unknown;/g,",
      "context": "    const patterns = [\n      {\n        pattern: /return null as unknown;/g,\n        replacement: \"return null;\",\n        description: \"Fixed return null statement\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 312,
      "content": "pattern: /return undefined as unknown;/g,",
      "context": "      },\n      {\n        pattern: /return undefined as unknown;/g,\n        replacement: \"return undefined;\",\n        description: \"Fixed return undefined statement\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 333,
      "content": "pattern: /\\(this as unknown\\)\\.name = \"([^\"]+)\";/g,",
      "context": "    const patterns = [\n      {\n        pattern: /\\(this as unknown\\)\\.name = \"([^\"]+)\";/g,\n        replacement: \"this.name = \\\"$1\\\";\",\n        description: \"Fixed this.name assignment\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "This context masking - likely type error"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 354,
      "content": "pattern: /: undefined as unknown/g,",
      "context": "    const patterns = [\n      {\n        pattern: /: undefined as unknown/g,\n        replacement: \": undefined\",\n        description: \"Fixed undefined type annotation\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 359,
      "content": "pattern: /\\? undefined as unknown/g,",
      "context": "      },\n      {\n        pattern: /\\? undefined as unknown/g,\n        replacement: \"? undefined\",\n        description: \"Fixed ternary undefined\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 364,
      "content": "pattern: /undefined as unknown,/g,",
      "context": "      },\n      {\n        pattern: /undefined as unknown,/g,\n        replacement: \"undefined,\",\n        description: \"Fixed undefined in parameter list\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 380,
      "content": "/null as unknown/g,",
      "context": "    // Track remaining dangerous patterns\n    const dangerousPatterns = [\n      /null as unknown/g,\n      /undefined as unknown/g\n    ];",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 381,
      "content": "/undefined as unknown/g",
      "context": "    const dangerousPatterns = [\n      /null as unknown/g,\n      /undefined as unknown/g\n    ];\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 6,
      "content": "* Systematically removes excessive 'as unknown' type assertions throughout the codebase",
      "context": " * AS-UNKNOWN AST Codemod for Task #280\n * \n * Systematically removes excessive 'as unknown' type assertions throughout the codebase\n * to improve TypeScript effectiveness and reduce technical debt.\n * ",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 10,
      "content": "* The codebase contains 2,728 'as unknown' assertions, with 2,461 classified as high priority.",
      "context": " * \n * PROBLEM STATEMENT:\n * The codebase contains 2,728 'as unknown' assertions, with 2,461 classified as high priority.\n * These assertions mask real type errors, reduce TypeScript effectiveness, and create technical debt.\n * ",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 22,
      "content": "*    BEFORE: (state as unknown).sessions",
      "context": " * \n * 1. Property Access Patterns (HIGH PRIORITY)\n *    BEFORE: (state as unknown).sessions\n *    AFTER:  state.sessions\n *    ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 25,
      "content": "*    BEFORE: (this.sessionProvider as unknown).getSession(name)",
      "context": " *    AFTER:  state.sessions\n *    \n *    BEFORE: (this.sessionProvider as unknown).getSession(name)\n *    AFTER:  this.sessionProvider.getSession(name)\n * ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 29,
      "content": "*    BEFORE: (sessions as unknown).find(s => s.id === id)",
      "context": " * \n * 2. Array/Object Method Access (HIGH PRIORITY)\n *    BEFORE: (sessions as unknown).find(s => s.id === id)\n *    AFTER:  sessions.find(s => s.id === id)\n * ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 33,
      "content": "*    BEFORE: return null as unknown;",
      "context": " * \n * 3. Return Statement Patterns (CRITICAL PRIORITY)\n *    BEFORE: return null as unknown;\n *    AFTER:  return null;\n * ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 37,
      "content": "*    BEFORE: const result = undefined as unknown;",
      "context": " * \n * 4. Null/Undefined Patterns (CRITICAL PRIORITY)\n *    BEFORE: const result = undefined as unknown;\n *    AFTER:  const result = undefined;\n * ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 41,
      "content": "*    BEFORE: (this as unknown).name = \"ErrorName\";",
      "context": " * \n * 5. This Context Patterns (HIGH PRIORITY)\n *    BEFORE: (this as unknown).name = \"ErrorName\";\n *    AFTER:  this.name = \"ErrorName\";\n * ",
      "category": "error-masking",
      "priority": "high",
      "reason": "This context masking - likely type error"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 70,
      "content": "* - Task #280: Cleanup excessive 'as unknown' assertions",
      "context": " * \n * RELATED TASKS:\n * - Task #280: Cleanup excessive 'as unknown' assertions\n * - Task #276: Test suite optimization (identified the problem)\n * - Task #271: Risk-aware type cast fixing (similar patterns)",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 291,
      "content": "description: \"Remove 'as unknown' from return statements with null/undefined\",",
      "context": "      {\n        name: \"Return Statement Null/Undefined\",\n        description: \"Remove 'as unknown' from return statements with null/undefined\",\n        riskLevel: \"critical\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 296,
      "content": "(text.includes(\"null as unknown\") || text.includes(\"undefined as unknown\"));",
      "context": "          const text = node.getText();\n          return context.includes(\"return\") && \n                 (text.includes(\"null as unknown\") || text.includes(\"undefined as unknown\"));\n        },\n        canAutoFix: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 304,
      "content": "description: \"Remove 'as unknown' from null/undefined assignments\",",
      "context": "      {\n        name: \"Null/Undefined Assignment\",\n        description: \"Remove 'as unknown' from null/undefined assignments\",\n        riskLevel: \"critical\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 308,
      "content": "return text === \"null as unknown\" || text === \"undefined as unknown\";",
      "context": "        detector: (node: AsExpression, context: string) => {\n          const text = node.getText();\n          return text === \"null as unknown\" || text === \"undefined as unknown\";\n        },\n        canAutoFix: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 316,
      "content": "description: \"Remove 'as unknown' from state/session property access\",",
      "context": "      {\n        name: \"State/Session Property Access\",\n        description: \"Remove 'as unknown' from state/session property access\",\n        riskLevel: \"high\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 320,
      "content": "return text.includes(\"state as unknown\") ||",
      "context": "        detector: (node: AsExpression, context: string) => {\n          const text = node.getText();\n          return text.includes(\"state as unknown\") || \n                 text.includes(\"session as unknown\") ||\n                 text.includes(\"sessions as unknown\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 321,
      "content": "text.includes(\"session as unknown\") ||",
      "context": "          const text = node.getText();\n          return text.includes(\"state as unknown\") || \n                 text.includes(\"session as unknown\") ||\n                 text.includes(\"sessions as unknown\");\n        },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 322,
      "content": "text.includes(\"sessions as unknown\");",
      "context": "          return text.includes(\"state as unknown\") || \n                 text.includes(\"session as unknown\") ||\n                 text.includes(\"sessions as unknown\");\n        },\n        canAutoFix: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 330,
      "content": "description: \"Remove 'as unknown' from service method calls\",",
      "context": "      {\n        name: \"Service Method Calls\",\n        description: \"Remove 'as unknown' from service method calls\",\n        riskLevel: \"high\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 334,
      "content": "return text.includes(\"this.sessionProvider as unknown\") ||",
      "context": "        detector: (node: AsExpression, context: string) => {\n          const text = node.getText();\n          return text.includes(\"this.sessionProvider as unknown\") ||\n                 text.includes(\"this.pathResolver as unknown\") ||\n                 text.includes(\"this.workspaceBackend as unknown\") ||",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 335,
      "content": "text.includes(\"this.pathResolver as unknown\") ||",
      "context": "          const text = node.getText();\n          return text.includes(\"this.sessionProvider as unknown\") ||\n                 text.includes(\"this.pathResolver as unknown\") ||\n                 text.includes(\"this.workspaceBackend as unknown\") ||\n                 text.includes(\"this.config as unknown\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 336,
      "content": "text.includes(\"this.workspaceBackend as unknown\") ||",
      "context": "          return text.includes(\"this.sessionProvider as unknown\") ||\n                 text.includes(\"this.pathResolver as unknown\") ||\n                 text.includes(\"this.workspaceBackend as unknown\") ||\n                 text.includes(\"this.config as unknown\");\n        },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 337,
      "content": "text.includes(\"this.config as unknown\");",
      "context": "                 text.includes(\"this.pathResolver as unknown\") ||\n                 text.includes(\"this.workspaceBackend as unknown\") ||\n                 text.includes(\"this.config as unknown\");\n        },\n        canAutoFix: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 345,
      "content": "description: \"Remove 'as unknown' from array/object method calls\",",
      "context": "      {\n        name: \"Array/Object Method Access\",\n        description: \"Remove 'as unknown' from array/object method calls\",\n        riskLevel: \"high\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 382,
      "content": "description: \"Remove 'as unknown' from this context property access\",",
      "context": "      {\n        name: \"This Context Access\",\n        description: \"Remove 'as unknown' from this context property access\",\n        riskLevel: \"high\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 386,
      "content": "return text.includes(\"this as unknown\");",
      "context": "        detector: (node: AsExpression, context: string) => {\n          const text = node.getText();\n          return text.includes(\"this as unknown\");\n        },\n        canAutoFix: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "This context masking - likely type error"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 394,
      "content": "description: \"Remove 'as unknown' from process.env access\",",
      "context": "      {\n        name: \"Environment Variable Access\",\n        description: \"Remove 'as unknown' from process.env access\",\n        riskLevel: \"medium\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 398,
      "content": "return text.includes(\"process.env as unknown\");",
      "context": "        detector: (node: AsExpression, context: string) => {\n          const text = node.getText();\n          return text.includes(\"process.env as unknown\");\n        },\n        canAutoFix: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 406,
      "content": "this.log(\"🔍 Analyzing 'as unknown' assertions...\");",
      "context": "\n  protected findIssues(): void {\n    this.log(\"🔍 Analyzing 'as unknown' assertions...\");\n    \n    const sourceFiles = this.project.getSourceFiles();",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 420,
      "content": "// Check if it's 'as unknown'",
      "context": "          const typeNode = asExpression.getType();\n          \n          // Check if it's 'as unknown'\n          if (asExpression.getText().includes(\"as unknown\")) {\n            this.analyzeAsUnknownExpression(asExpression, filePath);",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 421,
      "content": "if (asExpression.getText().includes(\"as unknown\")) {",
      "context": "          \n          // Check if it's 'as unknown'\n          if (asExpression.getText().includes(\"as unknown\")) {\n            this.analyzeAsUnknownExpression(asExpression, filePath);\n          }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 428,
      "content": "this.log(`📊 Found ${this.asUnknownIssues.length} 'as unknown' assertions`);",
      "context": "    }\n\n    this.log(`📊 Found ${this.asUnknownIssues.length} 'as unknown' assertions`);\n    this.metrics.issuesFound = this.asUnknownIssues.length;\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 446,
      "content": "description: \"Unmatched 'as unknown' pattern - needs manual review\",",
      "context": "        line,\n        column,\n        description: \"Unmatched 'as unknown' pattern - needs manual review\",\n        context,\n        type: \"as_unknown_unmatched\",",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 470,
      "content": "suggestedFix: \"Extract expression from 'as unknown' assertion\"",
      "context": "      transformationType: this.getTransformationType(pattern.name),\n      canAutoFix: pattern.canAutoFix,\n      suggestedFix: \"Extract expression from 'as unknown' assertion\"\n    });\n  }",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 493,
      "content": "this.log(\"🔧 Applying 'as unknown' transformations...\");",
      "context": "\n  protected fixIssues(): void {\n    this.log(\"🔧 Applying 'as unknown' transformations...\");\n    \n    const autoFixableIssues = this.asUnknownIssues.filter(issue => issue.canAutoFix);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 559,
      "content": "// For 'as unknown' expressions, we want to extract the expression part",
      "context": "  private transformAsExpression(node: AsExpression, pattern: TransformationPattern): boolean {\n    try {\n      // For 'as unknown' expressions, we want to extract the expression part\n      // and replace the entire AsExpression with just the expression\n      let expression = node.getExpression();",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 564,
      "content": "// This handles cases like (state as unknown) -> state instead of (state)",
      "context": "      \n      // If the expression is parenthesized, extract the inner expression\n      // This handles cases like (state as unknown) -> state instead of (state)\n      if (expression.getKind() === SyntaxKind.ParenthesizedExpression) {\n        const parenthesizedExpr = expression as ParenthesizedExpression;",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/fix-explicit-any-types-proven.ts",
      "line": 96,
      "content": "return match.replace(\"as any\", \"as unknown\");",
      "context": "    console.log(`  Fixed JSON.parse cast: any → unknown`);\n    changes++;\n    return match.replace(\"as any\", \"as unknown\");\n  });\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/fix-explicit-any-types-proven.ts",
      "line": 135,
      "content": "to: \"as unknown[]\",",
      "context": "    {\n      from: /\\bas\\s*any\\s*\\[\\]/g,\n      to: \"as unknown[]\",\n      description: \"as any[] → as unknown[]\",\n    },",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/fix-explicit-any-types-proven.ts",
      "line": 136,
      "content": "description: \"as any[] → as unknown[]\",",
      "context": "      from: /\\bas\\s*any\\s*\\[\\]/g,\n      to: \"as unknown[]\",\n      description: \"as any[] → as unknown[]\",\n    },\n    {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 82,
      "content": "return match.replace('as any', 'as unknown');",
      "context": "          if (match.includes('Bun.argv')) return 'process.argv';\n          if (match.includes('process.env')) return 'process.env';\n          return match.replace('as any', 'as unknown');\n        },\n        requiresManualReview: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 99,
      "content": "return match.replace('as any', 'as unknown');",
      "context": "            return match.replace('as any', '').replace('(', '').replace(')', '');\n          }\n          return match.replace('as any', 'as unknown');\n        },\n        requiresManualReview: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 160,
      "content": "return match.replace('as any', 'as unknown');",
      "context": "            return match.replace(' as any', '');\n          }\n          return match.replace('as any', 'as unknown');\n        },\n        requiresManualReview: false",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 173,
      "content": "replacement: 'as unknown',",
      "context": "          /\\([^)]+Config as any\\)/g\n        ],\n        replacement: 'as unknown',\n        requiresManualReview: false\n      },",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 200,
      "content": "replacement: 'as unknown',",
      "context": "          /\\(bun\\.expect as any\\)/g\n        ],\n        replacement: 'as unknown',\n        requiresManualReview: false\n      },",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 212,
      "content": "replacement: 'as unknown',",
      "context": "          /as any\\b/g\n        ],\n        replacement: 'as unknown',\n        requiresManualReview: false\n      }",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 251,
      "content": "// Find all 'as unknown' patterns that might be inappropriate",
      "context": "      }\n      \n      // Find all 'as unknown' patterns that might be inappropriate\n      const asUnknownMatches = content.matchAll(/\\bas unknown\\b/g);\n      for (const match of asUnknownMatches) {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 252,
      "content": "const asUnknownMatches = content.matchAll(/\\bas unknown\\b/g);",
      "context": "      \n      // Find all 'as unknown' patterns that might be inappropriate\n      const asUnknownMatches = content.matchAll(/\\bas unknown\\b/g);\n      for (const match of asUnknownMatches) {\n        const position = sourceFile.getLineAndColumnAtPos(match.index!);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 257,
      "content": "// Only flag as unknown casts that might benefit from more specific types",
      "context": "        const context = this.getContextAroundMatch(content, match.index!, 50);\n        \n        // Only flag as unknown casts that might benefit from more specific types\n        if (this.shouldReviewUnknownCast(context)) {\n          this.castIssues.push({",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 323,
      "content": "suggestedFix: 'as unknown',",
      "context": "        riskLevel: 'low',\n        pattern: 'test_infrastructure',\n        suggestedFix: 'as unknown',\n        requiresManualReview: false\n      };",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 332,
      "content": "suggestedFix: 'as unknown',",
      "context": "        riskLevel: 'high',\n        pattern: 'domain_logic',\n        suggestedFix: 'as unknown',\n        requiresManualReview: true\n      };",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 340,
      "content": "suggestedFix: 'as unknown',",
      "context": "      riskLevel: 'medium',\n      pattern: 'general_infrastructure',\n      suggestedFix: 'as unknown',\n      requiresManualReview: false\n    };",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 346,
      "content": "// Flag 'as unknown' casts that might benefit from more specific types",
      "context": "\n  private shouldReviewUnknownCast(context: string): boolean {\n    // Flag 'as unknown' casts that might benefit from more specific types\n    const reviewPatterns = [\n      /Promise\\.resolve\\([^)]+\\) as unknown/,",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 348,
      "content": "/Promise\\.resolve\\([^)]+\\) as unknown/,",
      "context": "    // Flag 'as unknown' casts that might benefit from more specific types\n    const reviewPatterns = [\n      /Promise\\.resolve\\([^)]+\\) as unknown/,\n      /JSON\\.parse\\([^)]+\\) as unknown/,\n      /Object\\.keys\\([^)]+\\) as unknown/",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 349,
      "content": "/JSON\\.parse\\([^)]+\\) as unknown/,",
      "context": "    const reviewPatterns = [\n      /Promise\\.resolve\\([^)]+\\) as unknown/,\n      /JSON\\.parse\\([^)]+\\) as unknown/,\n      /Object\\.keys\\([^)]+\\) as unknown/\n    ];",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 350,
      "content": "/Object\\.keys\\([^)]+\\) as unknown/",
      "context": "      /Promise\\.resolve\\([^)]+\\) as unknown/,\n      /JSON\\.parse\\([^)]+\\) as unknown/,\n      /Object\\.keys\\([^)]+\\) as unknown/\n    ];\n    ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/explicit-any-types-fixer-consolidated.ts",
      "line": 282,
      "content": "replacement: (match) => match.replace(\"as any\", \"as unknown\"),",
      "context": "        description: \"JSON.parse() cast as any\",\n        pattern: /JSON\\.parse\\([^)]+\\)\\s*as\\s*any/g,\n        replacement: (match) => match.replace(\"as any\", \"as unknown\"),\n        category: \"api-patterns\"\n      },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/explicit-any-types-fixer-consolidated.ts",
      "line": 298,
      "content": "replacement: \"as unknown[]\",",
      "context": "        description: \"Type assertion as any[]\",\n        pattern: /\\bas\\s*any\\s*\\[\\]/g,\n        replacement: \"as unknown[]\",\n        category: \"type-assertions\"\n      },",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 79,
      "content": "// For all other cases, use 'as unknown' as safer alternative",
      "context": "  }\n  \n  // For all other cases, use 'as unknown' as safer alternative\n  return asAnyExpression.replace('as any', 'as unknown');\n}",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 80,
      "content": "return asAnyExpression.replace('as any', 'as unknown');",
      "context": "  \n  // For all other cases, use 'as unknown' as safer alternative\n  return asAnyExpression.replace('as any', 'as unknown');\n}\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 110,
      "content": "// Find all AsExpression nodes (as any, as unknown, etc.)",
      "context": "    console.log(`🔍 Analyzing ${filePath.split('/').pop()}...`);\n\n    // Find all AsExpression nodes (as any, as unknown, etc.)\n    const asExpressions = sourceFile.getDescendantsOfKind(SyntaxKind.AsExpression);\n    ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/enhanced-error-templates.ts",
      "line": 57,
      "content": "return buildErrorMessage(template, context as unknown);",
      "context": "  };\n\n  return buildErrorMessage(template, context as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/errors/enhanced-error-templates.ts",
      "line": 108,
      "content": "content: (validExamples.map(example => `• ${example}`) as unknown).join(\"\\n\")",
      "context": "        title: \"Supported formats:\",\n        emoji: ErrorEmojis.INFO,\n        content: (validExamples.map(example => `• ${example}`) as unknown).join(\"\\n\")\n      },\n      {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/enhanced-error-templates.ts",
      "line": 118,
      "content": "return buildErrorMessage(template, context as unknown);",
      "context": "  };\n\n  return buildErrorMessage(template, context as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/errors/enhanced-error-templates.ts",
      "line": 181,
      "content": "...(declarationLine ? [{ label: \"Declaration line\", value: (declarationLine as unknown).toString() }] : []),",
      "context": "    ...(context || []),\n    ...(filePath ? [{ label: \"File\", value: filePath }] : []),\n    ...(declarationLine ? [{ label: \"Declaration line\", value: (declarationLine as unknown).toString() }] : []),\n    ...(usageLine ? [{ label: \"Usage line\", value: (usageLine as unknown).toString() }] : [])\n  ];",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/enhanced-error-templates.ts",
      "line": 182,
      "content": "...(usageLine ? [{ label: \"Usage line\", value: (usageLine as unknown).toString() }] : [])",
      "context": "    ...(filePath ? [{ label: \"File\", value: filePath }] : []),\n    ...(declarationLine ? [{ label: \"Declaration line\", value: (declarationLine as unknown).toString() }] : []),\n    ...(usageLine ? [{ label: \"Usage line\", value: (usageLine as unknown).toString() }] : [])\n  ];\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/enhanced-error-templates.ts",
      "line": 282,
      "content": "}) as unknown).join(\"\\n\");",
      "context": "    }[type];\n    return `${typeEmoji} ${file} (${type} conflict)`;\n  }) as unknown).join(\"\\n\");\n\n  const suggestions: CommandSuggestion[] = [",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/enhanced-error-templates.ts",
      "line": 330,
      "content": "{ label: \"Conflicted files\", value: (conflictingFiles.length as unknown).toString() },",
      "context": "    ...(context || []),\n    { label: \"Operation\", value: operation },\n    { label: \"Conflicted files\", value: (conflictingFiles.length as unknown).toString() },\n    ...(workdir ? [{ label: \"Working directory\", value: workdir }] : [])\n  ];",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/enhanced-error-templates.ts",
      "line": 367,
      "content": "const requirements = (configurationRequirements as unknown)[backend] || [];",
      "context": "  const backendsList = availableBackends.length > 0 \n    ? (availableBackends.map(backend => {\n      const requirements = (configurationRequirements as unknown)[backend] || [];\n      const reqText = requirements.length > 0 ? ` (requires: ${requirements.join(\", \")})` : \"\";\n      return `• ${backend}${reqText}`;",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/errors/enhanced-error-templates.ts",
      "line": 370,
      "content": "}) as unknown).join(\"\\n\")",
      "context": "      const reqText = requirements.length > 0 ? ` (requires: ${requirements.join(\", \")})` : \"\";\n      return `• ${backend}${reqText}`;\n    }) as unknown).join(\"\\n\")\n    : \"• markdown (default)\\n• json-file\\n• github-issues (requires GitHub config)\";\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/enhanced-error-templates.ts",
      "line": 404,
      "content": "{ label: \"Available backends\", value: (availableBackends.length as unknown).toString() },",
      "context": "    ...(context || []),\n    ...(attemptedBackend ? [{ label: \"Attempted backend\", value: attemptedBackend }] : []),\n    { label: \"Available backends\", value: (availableBackends.length as unknown).toString() },\n    ...(workspacePath ? [{ label: \"Workspace path\", value: workspacePath }] : [])\n  ];",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/network-errors.ts",
      "line": 87,
      "content": "const errorCode = (originalError as unknown)?.code || \"\";",
      "context": "\n  // Check for specific error types\n  const errorCode = (originalError as unknown)?.code || \"\";\n\n  switch (errorCode) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/network-errors.ts",
      "line": 95,
      "content": "return new NetworkError(`Network error: ${(originalError as unknown).message}`, errorCode, port, host, originalError);",
      "context": "    return new NetworkPermissionError(port, host, originalError);\n  default:\n    return new NetworkError(`Network error: ${(originalError as unknown).message}`, errorCode, port, host, originalError);\n  }\n}",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/network-errors.ts",
      "line": 135,
      "content": ".getSuggestions().map((s) => `- ${s}`) as unknown).join(\"\\n\");",
      "context": "    message += \"\\nSuggestions:\\n\";\n    message += (error\n      .getSuggestions().map((s) => `- ${s}`) as unknown).join(\"\\n\");\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 75,
      "content": "`${emoji} ${description}:\\n   ${command}`) as unknown).join(\"\\n\\n\");",
      "context": "export function formatCommandSuggestions(suggestions: CommandSuggestion[]): string {\n  return (suggestions.map(({ description, command, emoji = ErrorEmojis.COMMAND }) => \n    `${emoji} ${description}:\\n   ${command}`) as unknown).join(\"\\n\\n\");\n}\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 84,
      "content": "const formatted = (contexts.map(({ label, value }) => `${label}: ${value}`) as unknown).join(\"\\n\");",
      "context": "  if (contexts?.length === 0) return \"\";\n  \n  const formatted = (contexts.map(({ label, value }) => `${label}: ${value}`) as unknown).join(\"\\n\");\n    \n  return `\\n${formatted}`;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 96,
      "content": "parts.push((template as unknown).title);",
      "context": "  \n  // Add title\n  parts.push((template as unknown).title);\n  \n  // Add description if provided",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 99,
      "content": "if ((template as unknown)?.description) {",
      "context": "  \n  // Add description if provided\n  if ((template as unknown)?.description) {\n    parts.push(\"\");\n    parts.push((template as unknown).description);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 101,
      "content": "parts.push((template as unknown).description);",
      "context": "  if ((template as unknown)?.description) {\n    parts.push(\"\");\n    parts.push((template as unknown).description);\n  }\n  ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 105,
      "content": "(template.sections as unknown).forEach(section => {",
      "context": "  \n  // Add sections\n  (template.sections as unknown).forEach(section => {\n    parts.push(\"\");\n    ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 108,
      "content": "if ((section as unknown)?.title) {",
      "context": "    parts.push(\"\");\n    \n    if ((section as unknown)?.title) {\n      const title = (section as unknown)?.emoji ? `${(section as unknown).emoji} ${(section as unknown).title}` : (section as unknown)?.title;\n      parts.push(title);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 109,
      "content": "const title = (section as unknown)?.emoji ? `${(section as unknown).emoji} ${(section as unknown).title}` : (section as unknown)?.title;",
      "context": "    \n    if ((section as unknown)?.title) {\n      const title = (section as unknown)?.emoji ? `${(section as unknown).emoji} ${(section as unknown).title}` : (section as unknown)?.title;\n      parts.push(title);\n      parts.push(\"\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 114,
      "content": "parts.push((section as unknown).content);",
      "context": "    }\n    \n    parts.push((section as unknown).content);\n  });\n  ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 120,
      "content": "parts.push(formatContextInfo(context as unknown));",
      "context": "  if (context && context?.length > 0) {\n    parts.push(\"\");\n    parts.push(formatContextInfo(context as unknown));\n  }\n  ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 137,
      "content": "description: `The ${(resourceType as unknown).toLowerCase()} you're looking for doesn't exist or isn't accessible.`,",
      "context": "  const template: ErrorTemplate = {\n    title: `${ErrorEmojis.NOT_FOUND} ${resourceType} \"${resourceId}\" Not Found`,\n    description: `The ${(resourceType as unknown).toLowerCase()} you're looking for doesn't exist or isn't accessible.`,\n    sections: [\n      {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 147,
      "content": "return buildErrorMessage(template, context as unknown);",
      "context": "  };\n  \n  return buildErrorMessage(template, context as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 168,
      "content": "return buildErrorMessage(template, context as unknown);",
      "context": "  };\n  \n  return buildErrorMessage(template, context as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 192,
      "content": "return buildErrorMessage(template, context as unknown);",
      "context": "  };\n  \n  return buildErrorMessage(template, context as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 216,
      "content": "return buildErrorMessage(template, context as unknown);",
      "context": "  };\n  \n  return buildErrorMessage(template, context as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 299,
      "content": "title: (config as unknown)!.title,",
      "context": "  const config = templates[errorType];\n  const template: ErrorTemplate = {\n    title: (config as unknown)!.title,\n    description: (config as unknown)!.description,\n    sections: [",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 300,
      "content": "description: (config as unknown)!.description,",
      "context": "  const template: ErrorTemplate = {\n    title: (config as unknown)!.title,\n    description: (config as unknown)!.description,\n    sections: [\n      {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 305,
      "content": "content: formatCommandSuggestions((config as unknown)!.suggestions)",
      "context": "        title: \"What you can do:\",\n        emoji: ErrorEmojis.SUGGESTION,\n        content: formatCommandSuggestions((config as unknown)!.suggestions)\n      }\n    ]",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 310,
      "content": "return buildErrorMessage(template, context as unknown);",
      "context": "  };\n  \n  return buildErrorMessage(template, context as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 320,
      "content": "return createSessionErrorMessage(sessionName, (SessionErrorType as unknown).NOT_FOUND, context as unknown);",
      "context": "  context?: ContextInfo[]\n): string {\n  return createSessionErrorMessage(sessionName, (SessionErrorType as unknown).NOT_FOUND, context as unknown);\n}\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 330,
      "content": "return createSessionErrorMessage(sessionName, (SessionErrorType as unknown).ALREADY_EXISTS, context as unknown);",
      "context": "  context?: ContextInfo[]\n): string {\n  return createSessionErrorMessage(sessionName, (SessionErrorType as unknown).ALREADY_EXISTS, context as unknown);\n}\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 340,
      "content": "return createSessionErrorMessage(sessionName, (SessionErrorType as unknown).INVALID, context as unknown);",
      "context": "  context?: ContextInfo[]\n): string {\n  return createSessionErrorMessage(sessionName, (SessionErrorType as unknown).INVALID, context as unknown);\n}\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/errors/message-templates.ts",
      "line": 449,
      "content": "return buildErrorMessage(template, context as unknown);",
      "context": "  };\n  \n  return buildErrorMessage(template, context as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/errors/network-errors.test.ts",
      "line": 75,
      "content": "(eaddrinuseError as unknown)?.code = \"EADDRINUSE\";",
      "context": "    test(\"should identify common network errors\", () => {\n      const eaddrinuseError = new Error(\"Address in use\");\n      (eaddrinuseError as unknown)?.code = \"EADDRINUSE\";\n\n      const eaccessError = new Error(\"Permission denied\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/errors/network-errors.test.ts",
      "line": 78,
      "content": "(eaccessError as unknown)?.code = \"EACCES\";",
      "context": "\n      const eaccessError = new Error(\"Permission denied\");\n      (eaccessError as unknown)?.code = \"EACCES\";\n\n      const regularError = new Error(\"Regular error\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/errors/network-errors.test.ts",
      "line": 92,
      "content": "(originalError as unknown)?.code = \"EADDRINUSE\";",
      "context": "    test(\"should create a PortInUseError for EADDRINUSE errors\", () => {\n      const originalError = new Error(\"Address in use\");\n      (originalError as unknown)?.code = \"EADDRINUSE\";\n\n      const networkError = createNetworkError(originalError, TEST_PORT);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/errors/network-errors.test.ts",
      "line": 102,
      "content": "(originalError as unknown)?.code = \"EACCES\";",
      "context": "    test(\"should create a NetworkPermissionError for EACCES errors\", () => {\n      const originalError = new Error(\"Permission denied\");\n      (originalError as unknown)?.code = \"EACCES\";\n\n      const networkError = createNetworkError(originalError, PRIVILEGED_PORT);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/errors/network-errors.test.ts",
      "line": 112,
      "content": "(originalError as unknown)?.code = \"SOMETHING_ELSE\";",
      "context": "    test(\"should create a generic NetworkError for other errors\", () => {\n      const originalError = new Error(\"Some other error\");\n      (originalError as unknown)?.code = \"SOMETHING_ELSE\";\n\n      const networkError = createNetworkError(originalError, TEST_PORT);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/errors/base-errors.ts",
      "line": 23,
      "content": "this.name = (this.constructor as unknown).name;",
      "context": "  ) {\n    super(message);\n    this.name = (this.constructor as unknown).name;\n\n    // Capture stack trace, excluding constructor call from it",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/session-start-consistency.test.ts",
      "line": 106,
      "content": "(fs.existsSync as unknown).mockReturnValue(true); // Directory exists",
      "context": "    it(\"should clean up existing directory before starting\", async () => {\n      // Arrange\n      (fs.existsSync as unknown).mockReturnValue(true); // Directory exists\n      const params = {\n        task: \"160\",",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-start-consistency.test.ts",
      "line": 194,
      "content": "(fs.existsSync as unknown).mockReturnValue(true); // Directory exists after failed clone",
      "context": "      const gitError = new Error(\"git clone failed\");\n      mockGitService.clone.mockRejectedValue(gitError);\n      (fs.existsSync as unknown).mockReturnValue(true); // Directory exists after failed clone\n\n      const params = {",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-start-consistency.test.ts",
      "line": 257,
      "content": "(fs.existsSync as unknown).mockReturnValue(true);",
      "context": "    it(\"should handle directory cleanup failure gracefully\", async () => {\n      // Arrange\n      (fs.existsSync as unknown).mockReturnValue(true);\n      (fs.rmSync as unknown).mockImplementation(() => {\n        throw new Error(\"permission denied\");",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-start-consistency.test.ts",
      "line": 258,
      "content": "(fs.rmSync as unknown).mockImplementation(() => {",
      "context": "      // Arrange\n      (fs.existsSync as unknown).mockReturnValue(true);\n      (fs.rmSync as unknown).mockImplementation(() => {\n        throw new Error(\"permission denied\");\n      });",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/localGitBackend.ts",
      "line": 48,
      "content": "type: (RepositoryBackendType as unknown).LOCAL,",
      "context": "    this.config = {\n      ...config,\n      type: (RepositoryBackendType as unknown).LOCAL,\n    };\n    const _xdgStateHome =",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/localGitBackend.ts",
      "line": 53,
      "content": "this.cache = (RepositoryMetadataCache as unknown).getInstance();",
      "context": "      process.env.XDG_STATE_HOME || join(process.env.HOME || \"\", \".local/state\");\n    this.baseDir = join(_xdgStateHome, \"minsky\", \"sessions\");\n    this.cache = (RepositoryMetadataCache as unknown).getInstance();\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/localGitBackend.ts",
      "line": 144,
      "content": "return (this.cache as unknown).get(",
      "context": "    const cacheKey = generateRepoKey(this.localPath, \"status\");\n\n    return (this.cache as unknown).get(\n      cacheKey,\n      async () => {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/localGitBackend.ts",
      "line": 232,
      "content": "(this.cache as unknown).invalidateByPrefix(generateRepoKey(this.localPath, \"status\"));",
      "context": "\n      // Invalidate status cache after pushing\n      (this.cache as unknown).invalidateByPrefix(generateRepoKey(this.localPath, \"status\"));\n    } catch (error) {\n      throw new RepositoryError(",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/localGitBackend.ts",
      "line": 257,
      "content": "(this.cache as unknown).invalidateByPrefix(generateRepoKey(this.localPath, \"status\"));",
      "context": "\n      // Invalidate status cache after pulling\n      (this.cache as unknown).invalidateByPrefix(generateRepoKey(this.localPath, \"status\"));\n    } catch (error) {\n      throw new RepositoryError(",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/localGitBackend.ts",
      "line": 282,
      "content": "(this.cache as unknown).invalidateByPrefix(generateRepoKey(this.localPath, \"status\"));",
      "context": "\n      // Invalidate status cache after branch creation\n      (this.cache as unknown).invalidateByPrefix(generateRepoKey(this.localPath, \"status\"));\n\n      return {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/localGitBackend.ts",
      "line": 310,
      "content": "(this.cache as unknown).invalidateByPrefix(generateRepoKey(this.localPath, \"status\"));",
      "context": "\n      // Invalidate status cache after checkout\n      (this.cache as unknown).invalidateByPrefix(generateRepoKey(this.localPath, \"status\"));\n    } catch (error) {\n      throw new RepositoryError(",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 611,
      "content": "const context = (createErrorContext().addCommand(\"minsky git pr\") as unknown).build();",
      "context": "    const session = await deps.getSession(sessionName);\n    if (!session) {\n      const context = (createErrorContext().addCommand(\"minsky git pr\") as unknown).build();\n\n      throw new MinskyError(createSessionNotFoundMessage(sessionName, context as unknown));",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 613,
      "content": "throw new MinskyError(createSessionNotFoundMessage(sessionName, context as unknown));",
      "context": "      const context = (createErrorContext().addCommand(\"minsky git pr\") as unknown).build();\n\n      throw new MinskyError(createSessionNotFoundMessage(sessionName, context as unknown));\n    }\n    const workdir = deps.getSessionWorkdir(sessionName);",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/git.ts",
      "line": 649,
      "content": "const baseBranch = (stdout.trim() as unknown).replace(\"origin/\", \"\");",
      "context": "        `git -C ${workdir} symbolic-ref refs/remotes/origin/HEAD --short`\n      );\n      const baseBranch = (stdout.trim() as unknown).replace(\"origin/\", \"\");\n      log.debug(\"Found remote HEAD branch\", { baseBranch });\n      return baseBranch;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 664,
      "content": "const baseBranch = (stdout.trim() as unknown).replace(\"origin/\", \"\");",
      "context": "        `git -C ${workdir} rev-parse --abbrev-ref ${branch}@{upstream}`\n      );\n      const baseBranch = (stdout.trim() as unknown).replace(\"origin/\", \"\");\n      log.debug(\"Found upstream branch\", { baseBranch });\n      return baseBranch;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 795,
      "content": "if ((commits as unknown).includes(\"\\x1f\")) {",
      "context": "    try {\n      // Check if the commits are in the expected format with delimiters\n      if ((commits as unknown).includes(\"\\x1f\")) {\n        // Parse the commits data with delimiters\n        // Split by record separator",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 806,
      "content": "const hash = (fields[0] as unknown).substring(0, 7);",
      "context": "          if (fields.length > 1) {\n            if (fields[0] !== undefined && fields[1] !== undefined) {\n              const hash = (fields[0] as unknown).substring(0, 7);\n              const message = fields[1];\n              formattedEntries.push(`${hash} ${message}`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 817,
      "content": "return (formattedEntries as unknown).join(\"\\n\");",
      "context": "\n        if (formattedEntries.length > 0) {\n          return (formattedEntries as unknown).join(\"\\n\");\n        }\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 874,
      "content": "return (sections as unknown).join(\"\\n\");",
      "context": "    }\n\n    return (sections as unknown).join(\"\\n\");\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1036,
      "content": "const lines = (diffNameStatus.trim() as unknown).split(\"\\n\");",
      "context": "      // Otherwise, try to infer stats from the diff status\n      else if (diffNameStatus && diffNameStatus.trim()) {\n        const lines = (diffNameStatus.trim() as unknown).split(\"\\n\");\n        if (lines.length > 0) {\n          stats = `${lines.length} files changed`;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1044,
      "content": "const lines = (uncommittedChanges.trim() as unknown).split(\"\\n\");",
      "context": "      // we should make sure those are reflected in the output\n      else if (uncommittedChanges.trim()) {\n        const lines = (uncommittedChanges.trim() as unknown).split(\"\\n\");\n        if (lines.length > 0) {\n          stats = `${lines.length} uncommitted files changed`;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1061,
      "content": "const modified = (modifiedOutput.trim() as unknown).split(\"\\n\").filter(Boolean);",
      "context": "    // Get modified files\n    const { stdout: modifiedOutput } = await execAsync(`git -C ${workdir} diff --name-only`);\n    const modified = (modifiedOutput.trim() as unknown).split(\"\\n\").filter(Boolean);\n\n    // Get untracked files",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1067,
      "content": "const untracked = (untrackedOutput.trim() as unknown).split(\"\\n\").filter(Boolean);",
      "context": "      `git -C ${workdir} ls-files --others --exclude-standard`\n    );\n    const untracked = (untrackedOutput.trim() as unknown).split(\"\\n\").filter(Boolean);\n\n    // Get deleted files",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1071,
      "content": "const deleted = (deletedOutput.trim() as unknown).split(\"\\n\").filter(Boolean);",
      "context": "    // Get deleted files\n    const { stdout: deletedOutput } = await execAsync(`git -C ${workdir} ls-files --deleted`);\n    const deleted = (deletedOutput.trim() as unknown).split(\"\\n\").filter(Boolean);\n\n    return { modified, untracked, deleted };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1178,
      "content": "(status as unknown).includes(\"UU\") ||",
      "context": "\n        const hasConflicts =\n          (status as unknown).includes(\"UU\") ||\n          (status as unknown).includes(\"AA\") ||\n          (status as unknown).includes(\"DD\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1179,
      "content": "(status as unknown).includes(\"AA\") ||",
      "context": "        const hasConflicts =\n          (status as unknown).includes(\"UU\") ||\n          (status as unknown).includes(\"AA\") ||\n          (status as unknown).includes(\"DD\");\n        log.debug(\"Conflict detection result\", {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1180,
      "content": "(status as unknown).includes(\"DD\");",
      "context": "          (status as unknown).includes(\"UU\") ||\n          (status as unknown).includes(\"AA\") ||\n          (status as unknown).includes(\"DD\");\n        log.debug(\"Conflict detection result\", {\n          hasConflicts,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1184,
      "content": "UU: (status as unknown).includes(\"UU\"),",
      "context": "          hasConflicts,\n          statusIncludes: {\n            UU: (status as unknown).includes(\"UU\"),\n            AA: (status as unknown).includes(\"AA\"),\n            DD: (status as unknown).includes(\"DD\"),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1185,
      "content": "AA: (status as unknown).includes(\"AA\"),",
      "context": "          statusIncludes: {\n            UU: (status as unknown).includes(\"UU\"),\n            AA: (status as unknown).includes(\"AA\"),\n            DD: (status as unknown).includes(\"DD\"),\n          },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1186,
      "content": "DD: (status as unknown).includes(\"DD\"),",
      "context": "            UU: (status as unknown).includes(\"UU\"),\n            AA: (status as unknown).includes(\"AA\"),\n            DD: (status as unknown).includes(\"DD\"),\n          },\n        });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1257,
      "content": "if (!(remotes as unknown).includes(remote)) {",
      "context": "    const { stdout: remotesOut } = await execAsync(`git -C ${workdir} remote`);\n    const remotes = remotesOut.split(\"\\n\").map((r) => r.trim()).filter(Boolean);\n    if (!(remotes as unknown).includes(remote)) {\n      throw new Error(`Remote '${remote}' does not exist in repository at ${workdir}`);\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1374,
      "content": "const sessionsIndex = (pathParts as unknown).indexOf(\"sessions\");",
      "context": "        const currentDir = (process as any).cwd();\n        const pathParts = currentDir.split(\"/\");\n        const sessionsIndex = (pathParts as unknown).indexOf(\"sessions\");\n\n        if (sessionsIndex >= 0 && sessionsIndex < pathParts.length - 1) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1400,
      "content": "createdAt: (new Date() as unknown).toISOString(),",
      "context": "                repoUrl: repoUrl.trim(),\n                repoName,\n                createdAt: (new Date() as unknown).toISOString(),\n                taskId,\n                branch: options.session,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1611,
      "content": "const remoteBaseBranch = (baseBranch as unknown).startsWith(\"origin/\")",
      "context": "\n      // Fix for origin/origin/main bug: Don't prepend origin/ if baseBranch already has it\n      const remoteBaseBranch = (baseBranch as unknown).startsWith(\"origin/\")\n        ? baseBranch\n        : `origin/${baseBranch}`;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1668,
      "content": "const actualTitle = ((actualCommitMessage.stdout as unknown).trim() as unknown).split(\"\\n\")[0];",
      "context": "      // VERIFICATION: Check that the merge commit has the correct message\n      const actualCommitMessage = await execAsync(`git -C ${workdir} log -1 --pretty=format:%B`);\n      const actualTitle = ((actualCommitMessage.stdout as unknown).trim() as unknown).split(\"\\n\")[0];\n      const expectedTitle = commitMessage.split(\"\\n\")[0];\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1676,
      "content": "fullActual: (actualCommitMessage.stdout as unknown).trim(),",
      "context": "          actual: actualTitle,\n          fullExpected: commitMessage,\n          fullActual: (actualCommitMessage.stdout as unknown).trim(),\n        });\n        // Don't throw error but log the issue for debugging",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1688,
      "content": "await (fs.unlink(commitMsgFile) as unknown).catch(() => {",
      "context": "\n      // Clean up the commit message file\n      await (fs.unlink(commitMsgFile) as unknown).catch(() => {\n        // Ignore errors when cleaning up\n      });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1696,
      "content": "await (fs.unlink(commitMsgFile) as unknown).catch(() => {",
      "context": "        await execAsync(`git -C ${workdir} merge --abort`);\n        const fs = await import(\"fs/promises\");\n        await (fs.unlink(commitMsgFile) as unknown).catch(() => {\n          // Ignore file cleanup errors\n        });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1706,
      "content": "if (err instanceof Error && (err.message as unknown).includes(\"CONFLICT\")) {",
      "context": "      }\n\n      if (err instanceof Error && (err.message as unknown).includes(\"CONFLICT\")) {\n        throw new MinskyError(\n          \"Merge conflicts occurred while creating prepared merge commit. Please resolve conflicts and retry.\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1753,
      "content": ".replace(/[^\\w-]/g, \"\") as unknown",
      "context": "          .toLowerCase()\n          .replace(/[\\s:/#]+/g, \"-\") // Replace spaces, colons, slashes, and hashes with dashes\n          .replace(/[^\\w-]/g, \"\") as unknown\n      ).replace(/--+/g, \"-\") as unknown\n    ).replace(/^-|-$/g, \"\"); // Remove leading and trailing dashes",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1754,
      "content": ").replace(/--+/g, \"-\") as unknown",
      "context": "          .replace(/[\\s:/#]+/g, \"-\") // Replace spaces, colons, slashes, and hashes with dashes\n          .replace(/[^\\w-]/g, \"\") as unknown\n      ).replace(/--+/g, \"-\") as unknown\n    ).replace(/^-|-$/g, \"\"); // Remove leading and trailing dashes\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1784,
      "content": "await this.execInRepository(workdir, `git merge --no-ff ${(options as unknown).prBranch}`);",
      "context": "\n    // 4. Merge the PR branch\n    await this.execInRepository(workdir, `git merge --no-ff ${(options as unknown).prBranch}`);\n\n    // 5. Get the commit hash of the merge",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1787,
      "content": "const commitHash = ((await this.execInRepository(workdir, \"git rev-parse HEAD\")) as unknown).trim();",
      "context": "\n    // 5. Get the commit hash of the merge\n    const commitHash = ((await this.execInRepository(workdir, \"git rev-parse HEAD\")) as unknown).trim();\n\n    // 6. Get merge date and author",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1790,
      "content": "const mergeDate = (new Date() as unknown).toISOString();",
      "context": "\n    // 6. Get merge date and author\n    const mergeDate = (new Date() as unknown).toISOString();\n    const mergedBy = ((await this.execInRepository(workdir, \"git config user.name\")) as unknown).trim();\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1791,
      "content": "const mergedBy = ((await this.execInRepository(workdir, \"git config user.name\")) as unknown).trim();",
      "context": "    // 6. Get merge date and author\n    const mergeDate = (new Date() as unknown).toISOString();\n    const mergedBy = ((await this.execInRepository(workdir, \"git config user.name\")) as unknown).trim();\n\n    // 7. Push the merge to the remote",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1797,
      "content": "await this.execInRepository(workdir, `git push origin --delete ${(options as unknown).prBranch}`);",
      "context": "\n    // 8. Delete the PR branch from the remote\n    await this.execInRepository(workdir, `git push origin --delete ${(options as unknown).prBranch}`);\n\n    return {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1800,
      "content": "prBranch: (options as unknown).prBranch,",
      "context": "\n    return {\n      prBranch: (options as unknown).prBranch,\n      baseBranch,\n      commitHash,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1820,
      "content": "const result = (defaultBranch.trim() as unknown).replace(/^origin\\//, \"\");",
      "context": "      const defaultBranch = await this.execInRepository(repoPath, defaultBranchCmd);\n      // Format is usually \"origin/main\", so we need to remove the \"origin/\" prefix\n      const result = (defaultBranch.trim() as unknown).replace(/^origin\\//, \"\");\n      return result;\n    } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1844,
      "content": "const { stdout } = await (deps as unknown).execAsync(",
      "context": "    try {\n      // Try to get the default branch from the remote's HEAD ref\n      const { stdout } = await (deps as unknown).execAsync(\n        `git -C ${repoPath} symbolic-ref refs/remotes/origin/HEAD --short`\n      );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1848,
      "content": "const result = (stdout.trim() as unknown).replace(/^origin\\//, \"\");",
      "context": "      );\n      // Format is usually \"origin/main\", so we need to remove the \"origin/\" prefix\n      const result = (stdout.trim() as unknown).replace(/^origin\\//, \"\");\n      return result;\n    } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1873,
      "content": "const { stdout } = await (deps as unknown).execAsync(",
      "context": "  ): Promise<string> {\n    const amendFlag = amend ? \"--amend\" : \"\";\n    const { stdout } = await (deps as unknown).execAsync(\n      `git -C ${workdir} commit ${amendFlag} -m \"${message}\"`\n    );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1894,
      "content": "const { stdout: status } = await (deps as unknown).execAsync(",
      "context": "    try {\n      // Check if there are changes to stash\n      const { stdout: status } = await (deps as unknown).execAsync(\n        `git -C ${workdir} status --porcelain`\n      );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1903,
      "content": "await (deps as unknown).execAsync(`git -C ${workdir} stash push -m \"minsky session update\"`);",
      "context": "\n      // Stash changes\n      await (deps as unknown).execAsync(`git -C ${workdir} stash push -m \"minsky session update\"`);\n      return { workdir, stashed: true };\n    } catch (err) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1919,
      "content": "const { stdout: stashList } = await (deps as unknown).execAsync(`git -C ${workdir} stash list`);",
      "context": "    try {\n      // Check if there's a stash to pop\n      const { stdout: stashList } = await (deps as unknown).execAsync(`git -C ${workdir} stash list`);\n      if (!stashList.trim()) {\n        // No stash to pop",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1926,
      "content": "await (deps as unknown).execAsync(`git -C ${workdir} stash pop`);",
      "context": "\n      // Pop the stash\n      await (deps as unknown).execAsync(`git -C ${workdir} stash pop`);\n      return { workdir, stashed: true };\n    } catch (err) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1943,
      "content": "const { stdout: beforeHash } = await (deps as unknown).execAsync(",
      "context": "    try {\n      // Get current commit hash\n      const { stdout: beforeHash } = await (deps as unknown).execAsync(\n        `git -C ${workdir} rev-parse HEAD`\n      );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1949,
      "content": "await (deps as unknown).execAsync(`git -C ${workdir} merge ${branch}`);",
      "context": "      // Try to merge the branch using dependency-injected execution\n      try {\n        await (deps as unknown).execAsync(`git -C ${workdir} merge ${branch}`);\n      } catch (err) {\n        // Check if the error indicates merge conflicts",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1954,
      "content": "((err.message as unknown).includes(\"Merge Conflicts Detected\") ||",
      "context": "        if (\n          err instanceof Error &&\n          ((err.message as unknown).includes(\"Merge Conflicts Detected\") ||\n            (err.message as unknown).includes(\"CONFLICT\"))\n        ) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1955,
      "content": "(err.message as unknown).includes(\"CONFLICT\"))",
      "context": "          err instanceof Error &&\n          ((err.message as unknown).includes(\"Merge Conflicts Detected\") ||\n            (err.message as unknown).includes(\"CONFLICT\"))\n        ) {\n          // The error message indicates conflicts",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1962,
      "content": "const { stdout: status } = await (deps as unknown).execAsync(",
      "context": "\n        // Check if there are merge conflicts using traditional method as fallback\n        const { stdout: status } = await (deps as unknown).execAsync(\n          `git -C ${workdir} status --porcelain`\n        );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1966,
      "content": "(status as unknown).includes(\"UU\") ||",
      "context": "        );\n        if (\n          (status as unknown).includes(\"UU\") ||\n          (status as unknown).includes(\"AA\") ||\n          (status as unknown).includes(\"DD\")",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1967,
      "content": "(status as unknown).includes(\"AA\") ||",
      "context": "        if (\n          (status as unknown).includes(\"UU\") ||\n          (status as unknown).includes(\"AA\") ||\n          (status as unknown).includes(\"DD\")\n        ) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1968,
      "content": "(status as unknown).includes(\"DD\")",
      "context": "          (status as unknown).includes(\"UU\") ||\n          (status as unknown).includes(\"AA\") ||\n          (status as unknown).includes(\"DD\")\n        ) {\n          // Abort the merge and report conflicts",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1971,
      "content": "await (deps as unknown).execAsync(`git -C ${workdir} merge --abort`);",
      "context": "        ) {\n          // Abort the merge and report conflicts\n          await (deps as unknown).execAsync(`git -C ${workdir} merge --abort`);\n          return { workdir, merged: false, conflicts: true };\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1978,
      "content": "const { stdout: afterHash } = await (deps as unknown).execAsync(",
      "context": "\n      // Get new commit hash\n      const { stdout: afterHash } = await (deps as unknown).execAsync(\n        `git -C ${workdir} rev-parse HEAD`\n      );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 1997,
      "content": "await (deps as unknown).execAsync(`git -C ${workdir} add -A`);",
      "context": "   */\n  async stageAllWithDependencies(workdir: string, deps: BasicGitDependencies): Promise<void> {\n    await (deps as unknown).execAsync(`git -C ${workdir} add -A`);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2004,
      "content": "await (deps as unknown).execAsync(`git -C ${workdir} add .`);",
      "context": "   */\n  async stageModifiedWithDependencies(workdir: string, deps: BasicGitDependencies): Promise<void> {\n    await (deps as unknown).execAsync(`git -C ${workdir} add .`);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2017,
      "content": "const { stdout: beforeHash } = await (deps as unknown).execAsync(",
      "context": "    try {\n      // Get current commit hash before fetch\n      const { stdout: beforeHash } = await (deps as unknown).execAsync(\n        `git -C ${workdir} rev-parse HEAD`\n      );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2022,
      "content": "await (deps as unknown).execAsync(`git -C ${workdir} fetch ${remote}`);",
      "context": "\n      // Fetch latest changes from remote using dependency-injected execution\n      await (deps as unknown).execAsync(`git -C ${workdir} fetch ${remote}`);\n\n      // Get commit hash after fetch (should be the same since we only fetched)",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2025,
      "content": "const { stdout: afterHash } = await (deps as unknown).execAsync(",
      "context": "\n      // Get commit hash after fetch (should be the same since we only fetched)\n      const { stdout: afterHash } = await (deps as unknown).execAsync(\n        `git -C ${workdir} rev-parse HEAD`\n      );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2045,
      "content": "await (deps as unknown).mkdir(this.baseDir, { recursive: true });",
      "context": "    deps: ExtendedGitDependencies\n  ): Promise<CloneResult> {\n    await (deps as unknown).mkdir(this.baseDir, { recursive: true });\n\n    const session = options.session || this.generateSessionId();",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2052,
      "content": "await (deps as unknown).mkdir(sessionsDir, { recursive: true });",
      "context": "\n    const sessionsDir = join(this.baseDir, normalizedRepoName, \"sessions\");\n    await (deps as unknown).mkdir(sessionsDir, { recursive: true });\n\n    const workdir = this.getSessionWorkdir(session);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2064,
      "content": "const dirContents = await (deps as unknown).readdir(workdir);",
      "context": "      // Check if destination already exists and is not empty\n      try {\n        const dirContents = await (deps as unknown).readdir(workdir);\n        if (dirContents.length > 0) {\n          log.warn(\"Destination directory is not empty\", { workdir, contents: dirContents });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2075,
      "content": "await (deps as unknown).execAsync(cloneCmd);",
      "context": "      // Clone the repository\n      const cloneCmd = `git clone ${options.repoUrl} ${workdir}`;\n      await (deps as unknown).execAsync(cloneCmd);\n\n      // Verify the clone was successful by checking for .git directory",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2080,
      "content": "await (deps as unknown).access(gitDir);",
      "context": "      try {\n        const gitDir = join(workdir, \".git\");\n        await (deps as unknown).access(gitDir);\n      } catch (accessErr) {\n        throw new Error(\"Git repository was not properly cloned: .git directory not found\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2098,
      "content": "const record = await (deps as unknown).getSession(options.session);",
      "context": "    deps: PrDependencies\n  ): Promise<BranchResult> {\n    const record = await (deps as unknown).getSession(options.session);\n    if (!record) {\n      throw new Error(`Session '${options.session}' not found.`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2103,
      "content": "const workdir = (deps as unknown).getSessionWorkdir(options.session);",
      "context": "    }\n\n    const workdir = (deps as unknown).getSessionWorkdir(options.session);\n\n    await (deps as unknown).execAsync(`git -C ${workdir} checkout -b ${options.branch}`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2105,
      "content": "await (deps as unknown).execAsync(`git -C ${workdir} checkout -b ${options.branch}`);",
      "context": "    const workdir = (deps as unknown).getSessionWorkdir(options.session);\n\n    await (deps as unknown).execAsync(`git -C ${workdir} checkout -b ${options.branch}`);\n    return {\n      workdir,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2122,
      "content": "const record = await (deps as unknown).getSession(options.session);",
      "context": "    // 1. Resolve workdir\n    if (options.session) {\n      const record = await (deps as unknown).getSession(options.session);\n      if (!record) {\n        throw new Error(`Session '${options.session}' not found.`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2126,
      "content": "workdir = (deps as unknown).getSessionWorkdir(options.session);",
      "context": "        throw new Error(`Session '${options.session}' not found.`);\n      }\n      workdir = (deps as unknown).getSessionWorkdir(options.session);\n      branch = options.session; // Session branch is named after the session\n    } else if (options.repoPath) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2131,
      "content": "const { stdout: branchOut } = await (deps as unknown).execAsync(",
      "context": "      workdir = options.repoPath;\n      // Get current branch from repo\n      const { stdout: branchOut } = await (deps as unknown).execAsync(\n        `git -C ${workdir} rev-parse --abbrev-ref HEAD`\n      );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2139,
      "content": "const { stdout: branchOut } = await (deps as unknown).execAsync(",
      "context": "      workdir = (process as any).cwd();\n      // Get current branch from cwd\n      const { stdout: branchOut } = await (deps as unknown).execAsync(\n        `git -C ${workdir} rev-parse --abbrev-ref HEAD`\n      );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2146,
      "content": "const { stdout: remotesOut } = await (deps as unknown).execAsync(`git -C ${workdir} remote`);",
      "context": "\n    // 2. Validate remote exists\n    const { stdout: remotesOut } = await (deps as unknown).execAsync(`git -C ${workdir} remote`);\n    const remotes = remotesOut.split(\"\\n\").map((r) => r.trim()).filter(Boolean);\n    if (!(remotes as unknown).includes(remote)) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2148,
      "content": "if (!(remotes as unknown).includes(remote)) {",
      "context": "    const { stdout: remotesOut } = await (deps as unknown).execAsync(`git -C ${workdir} remote`);\n    const remotes = remotesOut.split(\"\\n\").map((r) => r.trim()).filter(Boolean);\n    if (!(remotes as unknown).includes(remote)) {\n      throw new Error(`Remote '${remote}' does not exist in repository at ${workdir}`);\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2160,
      "content": "await (deps as unknown).execAsync(pushCmd);",
      "context": "    // 4. Execute push\n    try {\n      await (deps as unknown).execAsync(pushCmd);\n      return { workdir, pushed: true };\n    } catch (err: any) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2202,
      "content": "return (ConflictDetectionService as unknown).predictConflicts(repoPath, sourceBranch, targetBranch);",
      "context": "    targetBranch: string\n  ): Promise<ConflictPrediction> {\n    return (ConflictDetectionService as unknown).predictConflicts(repoPath, sourceBranch, targetBranch);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2213,
      "content": "return (ConflictDetectionService as unknown).analyzeBranchDivergence(",
      "context": "    baseBranch: string\n  ): Promise<BranchDivergenceAnalysis> {\n    return (ConflictDetectionService as unknown).analyzeBranchDivergence(\n      repoPath,\n      sessionBranch,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2233,
      "content": "return (ConflictDetectionService as unknown).mergeWithConflictPrevention(",
      "context": "    }\n  ): Promise<EnhancedMergeResult> {\n    return (ConflictDetectionService as unknown).mergeWithConflictPrevention(\n      repoPath,\n      sourceBranch,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2237,
      "content": "options as unknown",
      "context": "      sourceBranch,\n      targetBranch,\n      options as unknown\n    );\n  }",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2253,
      "content": "return (ConflictDetectionService as unknown).smartSessionUpdate(",
      "context": "    }\n  ): Promise<SmartUpdateResult> {\n    return (ConflictDetectionService as unknown).smartSessionUpdate(\n      repoPath,\n      sessionBranch,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2257,
      "content": "options as unknown",
      "context": "      sessionBranch,\n      baseBranch,\n      options as unknown\n    );\n  }",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2313,
      "content": "if (!(params as unknown).noStage) {",
      "context": "    const git = new GitService();\n\n    if (!(params as unknown).noStage) {\n      if ((params as unknown).all) {\n        await git.stageAll((params as unknown).repo);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2314,
      "content": "if ((params as unknown).all) {",
      "context": "\n    if (!(params as unknown).noStage) {\n      if ((params as unknown).all) {\n        await git.stageAll((params as unknown).repo);\n      } else {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2315,
      "content": "await git.stageAll((params as unknown).repo);",
      "context": "    if (!(params as unknown).noStage) {\n      if ((params as unknown).all) {\n        await git.stageAll((params as unknown).repo);\n      } else {\n        await git.stageModified((params as unknown).repo);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2317,
      "content": "await git.stageModified((params as unknown).repo);",
      "context": "        await git.stageAll((params as unknown).repo);\n      } else {\n        await git.stageModified((params as unknown).repo);\n      }\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2321,
      "content": "const commitHash = await (git as unknown).commit(",
      "context": "    }\n\n    const commitHash = await (git as unknown).commit(\n      (params as unknown).message,\n      (params as unknown).repo,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2322,
      "content": "(params as unknown).message,",
      "context": "\n    const commitHash = await (git as unknown).commit(\n      (params as unknown).message,\n      (params as unknown).repo,\n      (params as unknown).amend",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2323,
      "content": "(params as unknown).repo,",
      "context": "    const commitHash = await (git as unknown).commit(\n      (params as unknown).message,\n      (params as unknown).repo,\n      (params as unknown).amend\n    );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2324,
      "content": "(params as unknown).amend",
      "context": "      (params as unknown).message,\n      (params as unknown).repo,\n      (params as unknown).amend\n    );\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2329,
      "content": "message: (params as unknown).message,",
      "context": "    return {\n      commitHash,\n      message: (params as unknown).message,\n    };\n  } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2333,
      "content": "session: (params as unknown).session,",
      "context": "  } catch (error) {\n    log.error(\"Error committing changes\", {\n      session: (params as unknown).session,\n      repo: (params as unknown).repo,\n      message: (params as unknown).message,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2334,
      "content": "repo: (params as unknown).repo,",
      "context": "    log.error(\"Error committing changes\", {\n      session: (params as unknown).session,\n      repo: (params as unknown).repo,\n      message: (params as unknown).message,\n      all: (params as unknown).all,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2335,
      "content": "message: (params as unknown).message,",
      "context": "      session: (params as unknown).session,\n      repo: (params as unknown).repo,\n      message: (params as unknown).message,\n      all: (params as unknown).all,\n      amend: (params as unknown).amend,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2336,
      "content": "all: (params as unknown).all,",
      "context": "      repo: (params as unknown).repo,\n      message: (params as unknown).message,\n      all: (params as unknown).all,\n      amend: (params as unknown).amend,\n      error: getErrorMessage(error as any),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2337,
      "content": "amend: (params as unknown).amend,",
      "context": "      message: (params as unknown).message,\n      all: (params as unknown).all,\n      amend: (params as unknown).amend,\n      error: getErrorMessage(error as any),\n      stack: error instanceof Error ? (error as any).stack : undefined,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.ts",
      "line": 2439,
      "content": "const result = await (git as unknown).branch({",
      "context": "  try {\n    const git = new GitService();\n    const result = await (git as unknown).branch({\n      session: params.session,\n      branch: params.name,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 152,
      "content": "if (options && (options as unknown).status) {",
      "context": "    const tasks = await this.parseTasks();\n\n    if (options && (options as unknown).status) {\n      return tasks.filter((task) => (task as unknown).status === (options as unknown).status);\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 153,
      "content": "return tasks.filter((task) => (task as unknown).status === (options as unknown).status);",
      "context": "\n    if (options && (options as unknown).status) {\n      return tasks.filter((task) => (task as unknown).status === (options as unknown).status);\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 163,
      "content": "const exactMatch = tasks.find((task) => (task as unknown).id === id);",
      "context": "\n    // First try exact match\n    const exactMatch = tasks.find((task) => (task as unknown).id === id);\n    if (exactMatch) {\n      return exactMatch;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 173,
      "content": "const taskNumericId = parseInt((task.id as unknown).replace(/^#/, \"\"), 10);",
      "context": "    if (!isNaN(numericId)) {\n      const numericMatch = tasks.find((task) => {\n        const taskNumericId = parseInt((task.id as unknown).replace(/^#/, \"\"), 10);\n        return !isNaN(taskNumericId) && taskNumericId === numericId;\n      });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 184,
      "content": "return task ? (task as unknown).status : null;",
      "context": "  async getTaskStatus(id: string): Promise<string | undefined> {\n    const task = await this.getTask(id);\n    return task ? (task as unknown).status : null;\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 188,
      "content": "if (!(Object.values(TASK_STATUS) as unknown).includes(status as TaskStatus)) {",
      "context": "\n  async setTaskStatus(id: string, status: string): Promise<void> {\n    if (!(Object.values(TASK_STATUS) as unknown).includes(status as TaskStatus)) {\n      throw new Error(`Status must be one of: ${(Object.values(TASK_STATUS) as unknown).join(\", \")}`);\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 189,
      "content": "throw new Error(`Status must be one of: ${(Object.values(TASK_STATUS) as unknown).join(\", \")}`);",
      "context": "  async setTaskStatus(id: string, status: string): Promise<void> {\n    if (!(Object.values(TASK_STATUS) as unknown).includes(status as TaskStatus)) {\n      throw new Error(`Status must be one of: ${(Object.values(TASK_STATUS) as unknown).join(\", \")}`);\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 200,
      "content": "const canonicalId = (task as unknown).id;",
      "context": "\n    // Use the canonical task ID from the found task\n    const canonicalId = (task as unknown).id;\n    const idNum = canonicalId.startsWith(\"#\") ? (canonicalId as unknown).slice(1) : canonicalId;\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 201,
      "content": "const idNum = canonicalId.startsWith(\"#\") ? (canonicalId as unknown).slice(1) : canonicalId;",
      "context": "    // Use the canonical task ID from the found task\n    const canonicalId = (task as unknown).id;\n    const idNum = canonicalId.startsWith(\"#\") ? (canonicalId as unknown).slice(1) : canonicalId;\n\n    const content = String(await fs.readFile(this.filePath, \"utf-8\"));",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 205,
      "content": "const lines = (((content) as unknown).toString() as unknown).split(\"\\n\");",
      "context": "    const content = String(await fs.readFile(this.filePath, \"utf-8\"));\n    const newStatusChar = TASK_STATUS_CHECKBOX[status];\n    const lines = (((content) as unknown).toString() as unknown).split(\"\\n\");\n    let inCodeBlock = false;\n    const updatedLines = lines.map((line) => {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 208,
      "content": "if ((line.trim() as unknown).startsWith(\"```\")) {",
      "context": "    let inCodeBlock = false;\n    const updatedLines = lines.map((line) => {\n      if ((line.trim() as unknown).startsWith(\"```\")) {\n        inCodeBlock = !inCodeBlock;\n        return line;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 213,
      "content": "if ((line as unknown).includes(`[#${idNum}]`)) {",
      "context": "      }\n      if (inCodeBlock) return line;\n      if ((line as unknown).includes(`[#${idNum}]`)) {\n        // Use centralized utility to replace checkbox status\n        return TASK_PARSING_UTILS.replaceCheckboxStatus(line, status as TaskStatus);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 219,
      "content": "await fs.writeFile(this.filePath, (updatedLines as unknown).join(\"\\n\"), \"utf-8\");",
      "context": "      return line;\n    });\n    await fs.writeFile(this.filePath, (updatedLines as unknown).join(\"\\n\"), \"utf-8\");\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 223,
      "content": "const taskIdNum = taskId.startsWith(\"#\") ? (taskId as unknown).slice(1) : taskId;",
      "context": "\n  private async validateSpecPath(taskId: string, title: string): Promise<string | undefined> {\n    const taskIdNum = taskId.startsWith(\"#\") ? (taskId as unknown).slice(1) : taskId;\n    const normalizedTitle = (title.toLowerCase() as unknown).replace(/[^a-z0-9]+/g, \"-\");\n    const specPath = getTaskSpecRelativePath(taskId, title, this.workspacePath);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 224,
      "content": "const normalizedTitle = (title.toLowerCase() as unknown).replace(/[^a-z0-9]+/g, \"-\");",
      "context": "  private async validateSpecPath(taskId: string, title: string): Promise<string | undefined> {\n    const taskIdNum = taskId.startsWith(\"#\") ? (taskId as unknown).slice(1) : taskId;\n    const normalizedTitle = (title.toLowerCase() as unknown).replace(/[^a-z0-9]+/g, \"-\");\n    const specPath = getTaskSpecRelativePath(taskId, title, this.workspacePath);\n    const fullPath = join(this.workspacePath, specPath);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 251,
      "content": "const lines = (((content) as unknown).toString() as unknown).split(\"\\n\");",
      "context": "      const content = String(await fs.readFile(this.filePath, \"utf-8\"));\n      // Split into lines and track code block state\n      const lines = (((content) as unknown).toString() as unknown).split(\"\\n\");\n      const tasks: Task[] = [];\n      let inCodeBlock = false;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 256,
      "content": "if ((line.trim() as unknown).startsWith(\"```\")) {",
      "context": "      for (let i = 0; i < lines.length; i++) {\n        const line = lines[i] ?? \"\";\n        if ((line.trim() as unknown).startsWith(\"```\")) {\n          inCodeBlock = !inCodeBlock;\n          continue;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 341,
      "content": "const fullSpecPath = (specPath as unknown).startsWith(\"/\") ? specPath : join(this.workspacePath, specPath);",
      "context": "  async createTask(specPath: string, options: CreateTaskOptions = {}): Promise<Task> {\n    // Validate that the spec file exists\n    const fullSpecPath = (specPath as unknown).startsWith(\"/\") ? specPath : join(this.workspacePath, specPath);\n    try {\n      await fs.access(fullSpecPath);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 353,
      "content": "const titleLine = lines.find((line) => (line as unknown).startsWith(\"# \"));",
      "context": "\n    // Extract title from the first heading\n    const titleLine = lines.find((line) => (line as unknown).startsWith(\"# \"));\n    if (!titleLine) {\n      throw new Error(\"Invalid spec file: Missing title heading\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 362,
      "content": "const titleWithIdMatch = (titleLine as unknown).match(/^# Task #(\\d+): (.+)$/);",
      "context": "    // 2. Old format without number: \"# Task: Title\"\n    // 3. New clean format: \"# Title\"\n    const titleWithIdMatch = (titleLine as unknown).match(/^# Task #(\\d+): (.+)$/);\n    const titleWithoutIdMatch = (titleLine as unknown).match(/^# Task: (.+)$/);\n    const cleanTitleMatch = (titleLine as unknown).match(/^# (.+)$/);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 363,
      "content": "const titleWithoutIdMatch = (titleLine as unknown).match(/^# Task: (.+)$/);",
      "context": "    // 3. New clean format: \"# Title\"\n    const titleWithIdMatch = (titleLine as unknown).match(/^# Task #(\\d+): (.+)$/);\n    const titleWithoutIdMatch = (titleLine as unknown).match(/^# Task: (.+)$/);\n    const cleanTitleMatch = (titleLine as unknown).match(/^# (.+)$/);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 364,
      "content": "const cleanTitleMatch = (titleLine as unknown).match(/^# (.+)$/);",
      "context": "    const titleWithIdMatch = (titleLine as unknown).match(/^# Task #(\\d+): (.+)$/);\n    const titleWithoutIdMatch = (titleLine as unknown).match(/^# Task: (.+)$/);\n    const cleanTitleMatch = (titleLine as unknown).match(/^# (.+)$/);\n\n    let title: string;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 382,
      "content": "if ((title as unknown).startsWith(\"Task \")) {",
      "context": "      title = cleanTitleMatch[1];\n      // Skip if this looks like an old task format to avoid false positives\n      if ((title as unknown).startsWith(\"Task \")) {\n        throw new Error(\n          \"Invalid spec file: Missing or invalid title. Expected formats: \\\"# Title\\\", \\\"# Task: Title\\\" or \\\"# Task #XXX: Title\\\"\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 401,
      "content": "if ((line.trim() as unknown).startsWith(\"## \")) break;",
      "context": "    for (let i = contextIndex + 1; i < lines.length; i++) {\n      const line = lines[i] || \"\";\n      if ((line.trim() as unknown).startsWith(\"## \")) break;\n      if (line.trim()) description += `${line.trim()}\\n`;\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 413,
      "content": "if (existingTask && !(options as unknown).force) {",
      "context": "      // Verify the task ID doesn't already exist\n      const existingTask = await this.getTask(existingId);\n      if (existingTask && !(options as unknown).force) {\n        throw new Error(`Task ${existingId} already exists. Use --force to overwrite.`);\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 421,
      "content": "const id = parseInt((task as unknown).id.slice(1));",
      "context": "      const tasks = await this.parseTasks();\n      const maxId = tasks.reduce((max, task) => {\n        const id = parseInt((task as unknown).id.slice(1));\n        return id > max ? id : max;\n      }, 0);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 427,
      "content": "const taskIdNum = (taskId as unknown).slice(1); // Remove the # prefix for file naming",
      "context": "    }\n\n    const taskIdNum = (taskId as unknown).slice(1); // Remove the # prefix for file naming\n\n    // Generate the standardized filename",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 430,
      "content": "const normalizedTitle = (title.toLowerCase() as unknown).replace(/[^a-z0-9]+/g, \"-\");",
      "context": "\n    // Generate the standardized filename\n    const normalizedTitle = (title.toLowerCase() as unknown).replace(/[^a-z0-9]+/g, \"-\");\n    const newSpecPath = getTaskSpecRelativePath(taskId, title, this.workspacePath);\n    const fullNewPath = join(this.workspacePath, newSpecPath);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 452,
      "content": "if (!(options as unknown).force) {",
      "context": "      try {\n        await fs.access(fullNewPath);\n        if (!(options as unknown).force) {\n          throw new Error(`Target file already exists: ${newSpecPath}. Use --force to overwrite.`);\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 524,
      "content": "const data = (parsed as unknown).data || {};",
      "context": "\n      // Update the merge info in the frontmatter\n      const data = (parsed as unknown).data || {};\n      (data as unknown).merge_info = {\n        ...(data as unknown).merge_info,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 525,
      "content": "(data as unknown).merge_info = {",
      "context": "      // Update the merge info in the frontmatter\n      const data = (parsed as unknown).data || {};\n      (data as unknown).merge_info = {\n        ...(data as unknown).merge_info,\n        ...metadata,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 526,
      "content": "...(data as unknown).merge_info,",
      "context": "      const data = (parsed as unknown).data || {};\n      (data as unknown).merge_info = {\n        ...(data as unknown).merge_info,\n        ...metadata,\n      };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 531,
      "content": "const updatedContent = (matter as unknown).stringify((parsed as unknown).content, data as unknown);",
      "context": "\n      // Serialize the updated frontmatter and content\n      const updatedContent = (matter as unknown).stringify((parsed as unknown).content, data as unknown);\n\n      // Write back to the file",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 556,
      "content": "const taskIdNum = (task as unknown).id.startsWith(\"#\") ? (task as unknown).id.slice(1) : (task as unknown).id;",
      "context": "\n    // Get the task ID number for file naming\n    const taskIdNum = (task as unknown).id.startsWith(\"#\") ? (task as unknown).id.slice(1) : (task as unknown).id;\n\n    try {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 561,
      "content": "const lines = (((content) as unknown).toString() as unknown).split(\"\\n\");",
      "context": "      // Remove task from tasks.md\n      const content = String(await fs.readFile(this.filePath, \"utf-8\"));\n      const lines = (((content) as unknown).toString() as unknown).split(\"\\n\");\n      let inCodeBlock = false;\n      let removed = false;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 566,
      "content": "if ((line.trim() as unknown).startsWith(\"```\")) {",
      "context": "\n      const updatedLines = lines.filter((line) => {\n        if ((line.trim() as unknown).startsWith(\"```\")) {\n          inCodeBlock = !inCodeBlock;\n          return true;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 573,
      "content": "if ((line as unknown).includes(`[#${taskIdNum}]`)) {",
      "context": "\n        // Check if this line contains our task\n        if ((line as unknown).includes(`[#${taskIdNum}]`)) {\n          removed = true;\n          return false; // Remove this line",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 585,
      "content": "await fs.writeFile(this.filePath, (updatedLines as unknown).join(\"\\n\"), \"utf-8\");",
      "context": "\n      // Write the updated tasks.md\n      await fs.writeFile(this.filePath, (updatedLines as unknown).join(\"\\n\"), \"utf-8\");\n\n      // Delete the task specification file if it exists",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 674,
      "content": "const selectedBackend = this.backends.find((b) => (b as unknown).name === backend);",
      "context": "\n    // Set current backend\n    const selectedBackend = this.backends.find((b) => (b as unknown).name === backend);\n    if (!selectedBackend) {\n      throw new Error(",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 677,
      "content": "`Backend '${backend}' not found. Available backends: ${(this.backends.map((b) => b.name) as unknown).join(\", \")}`",
      "context": "    if (!selectedBackend) {\n      throw new Error(\n        `Backend '${backend}' not found. Available backends: ${(this.backends.map((b) => b.name) as unknown).join(\", \")}`\n      );\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 684,
      "content": "return (this.currentBackend as unknown).listTasks(options as unknown);",
      "context": "\n  async listTasks(options?: TaskListOptions): Promise<Task[]> {\n    return (this.currentBackend as unknown).listTasks(options as unknown);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 688,
      "content": "return (this.currentBackend as unknown).getTask(id);",
      "context": "\n  async getTask(id: string): Promise<Task | null> {\n    return (this.currentBackend as unknown).getTask(id);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 692,
      "content": "return (this.currentBackend as unknown).getTaskStatus(id);",
      "context": "\n  async getTaskStatus(id: string): Promise<string | undefined> {\n    return (this.currentBackend as unknown).getTaskStatus(id);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 696,
      "content": "return (this.currentBackend as unknown).setTaskStatus(id, status);",
      "context": "\n  async setTaskStatus(id: string, status: string): Promise<void> {\n    return (this.currentBackend as unknown).setTaskStatus(id, status);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 700,
      "content": "return (this.currentBackend as unknown).getWorkspacePath();",
      "context": "\n  getWorkspacePath(): string {\n    return (this.currentBackend as unknown).getWorkspacePath();\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 704,
      "content": "return (this.currentBackend as unknown).createTask(specPath, options as unknown);",
      "context": "\n  async createTask(specPath: string, options: CreateTaskOptions = {}): Promise<Task> {\n    return (this.currentBackend as unknown).createTask(specPath, options as unknown);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 721,
      "content": "const task = await (backend as unknown).getTask(normalizedId);",
      "context": "    // Try to find the task in each backend\n    for (const backend of this.backends) {\n      const task = await (backend as unknown).getTask(normalizedId);\n      if (task) {\n        return backend;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks.ts",
      "line": 731,
      "content": "return (this.currentBackend as unknown).deleteTask(id, options as unknown);",
      "context": "\n  async deleteTask(id: string, options: DeleteTaskOptions = {}): Promise<boolean> {\n    return (this.currentBackend as unknown).deleteTask(id, options as unknown);\n  }\n}",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository-uri.ts",
      "line": 69,
      "content": "normalized: (normalizedInfo as unknown).name,",
      "context": "    let components: Partial<RepositoryURIComponents> = {\n      original: uri,\n      normalized: (normalizedInfo as unknown).name,\n    };\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository-uri.ts",
      "line": 73,
      "content": "switch ((normalizedInfo as unknown).format) {",
      "context": "\n    // Set the type based on the format\n    switch ((normalizedInfo as unknown).format) {\n    case UriFormat.HTTPS:\n      (components as unknown).type = (RepositoryURIType as unknown)?.HTTPS;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository-uri.ts",
      "line": 75,
      "content": "(components as unknown).type = (RepositoryURIType as unknown)?.HTTPS;",
      "context": "    switch ((normalizedInfo as unknown).format) {\n    case UriFormat.HTTPS:\n      (components as unknown).type = (RepositoryURIType as unknown)?.HTTPS;\n      (components as unknown).scheme = \"https\";\n      break;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository-uri.ts",
      "line": 76,
      "content": "(components as unknown).scheme = \"https\";",
      "context": "    case UriFormat.HTTPS:\n      (components as unknown).type = (RepositoryURIType as unknown)?.HTTPS;\n      (components as unknown).scheme = \"https\";\n      break;\n    case UriFormat.SSH:",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository-uri.ts",
      "line": 79,
      "content": "(components as unknown).type = (RepositoryURIType as unknown)?.SSH;",
      "context": "      break;\n    case UriFormat.SSH:\n      (components as unknown).type = (RepositoryURIType as unknown)?.SSH;\n      (components as unknown).scheme = \"ssh\";\n      break;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository-uri.ts",
      "line": 80,
      "content": "(components as unknown).scheme = \"ssh\";",
      "context": "    case UriFormat.SSH:\n      (components as unknown).type = (RepositoryURIType as unknown)?.SSH;\n      (components as unknown).scheme = \"ssh\";\n      break;\n    case UriFormat.FILE:",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository-uri.ts",
      "line": 83,
      "content": "(components as unknown).type = (RepositoryURIType as unknown)?.LOCAL_FILE;",
      "context": "      break;\n    case UriFormat.FILE:\n      (components as unknown).type = (RepositoryURIType as unknown)?.LOCAL_FILE;\n      (components as unknown).scheme = \"file\";\n      break;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository-uri.ts",
      "line": 84,
      "content": "(components as unknown).scheme = \"file\";",
      "context": "    case UriFormat.FILE:\n      (components as unknown).type = (RepositoryURIType as unknown)?.LOCAL_FILE;\n      (components as unknown).scheme = \"file\";\n      break;\n    case UriFormat.PATH:",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository-uri.ts",
      "line": 87,
      "content": "(components as unknown).type = (RepositoryURIType as unknown)?.LOCAL_PATH;",
      "context": "      break;\n    case UriFormat.PATH:\n      (components as unknown).type = (RepositoryURIType as unknown)?.LOCAL_PATH;\n      break;\n    case UriFormat.SHORTHAND:",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository-uri.ts",
      "line": 90,
      "content": "(components as unknown).type = (RepositoryURIType as unknown)?.GITHUB_SHORTHAND;",
      "context": "      break;\n    case UriFormat.SHORTHAND:\n      (components as unknown).type = (RepositoryURIType as unknown)?.GITHUB_SHORTHAND;\n      break;\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository-uri.ts",
      "line": 95,
      "content": "if (!(normalizedInfo as unknown).isLocal) {",
      "context": "\n    // For non-local repositories, extract owner and repo\n    if (!(normalizedInfo as unknown).isLocal) {\n      const { owner, repo } = extractRepositoryInfo(uri);\n      (components as unknown).owner = owner;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository-uri.ts",
      "line": 97,
      "content": "(components as unknown).owner = owner;",
      "context": "    if (!(normalizedInfo as unknown).isLocal) {\n      const { owner, repo } = extractRepositoryInfo(uri);\n      (components as unknown).owner = owner;\n      (components as unknown)!.repo = repo;\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository-uri.ts",
      "line": 98,
      "content": "(components as unknown)!.repo = repo;",
      "context": "      const { owner, repo } = extractRepositoryInfo(uri);\n      (components as unknown).owner = owner;\n      (components as unknown)!.repo = repo;\n\n      // For URLs, also extract host",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository-uri.ts",
      "line": 101,
      "content": "if ((components as unknown)?.type === (RepositoryURIType as unknown)?.HTTPS) {",
      "context": "\n      // For URLs, also extract host\n      if ((components as unknown)?.type === (RepositoryURIType as unknown)?.HTTPS) {\n        try {\n          const url = new URL((normalizedInfo as unknown).uri);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository-uri.ts",
      "line": 103,
      "content": "const url = new URL((normalizedInfo as unknown).uri);",
      "context": "      if ((components as unknown)?.type === (RepositoryURIType as unknown)?.HTTPS) {\n        try {\n          const url = new URL((normalizedInfo as unknown).uri);\n          (components as unknown).host = url?.hostname;\n        } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository-uri.ts",
      "line": 104,
      "content": "(components as unknown).host = url?.hostname;",
      "context": "        try {\n          const url = new URL((normalizedInfo as unknown).uri);\n          (components as unknown).host = url?.hostname;\n        } catch (error) {\n          // Ignore URL parsing errors",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository-uri.ts",
      "line": 108,
      "content": "} else if ((components as unknown)?.type === (RepositoryURIType as unknown)?.SSH) {",
      "context": "          // Ignore URL parsing errors\n        }\n      } else if ((components as unknown)?.type === (RepositoryURIType as unknown)?.SSH) {\n        // Extract host from SSH URL\n        const match = uri.match(/^[^@]+@([^:]+):/);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository-uri.ts",
      "line": 112,
      "content": "(components as unknown).host = match[1];",
      "context": "        const match = uri.match(/^[^@]+@([^:]+):/);\n        if (match && match[1]) {\n          (components as unknown).host = match[1];\n        }\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository-uri.ts",
      "line": 117,
      "content": "if ((components as unknown)?.type === (RepositoryURIType as unknown)?.LOCAL_FILE) {",
      "context": "    } else {\n      // For local repositories, extract path\n      if ((components as unknown)?.type === (RepositoryURIType as unknown)?.LOCAL_FILE) {\n        (components as unknown).path = (normalizedInfo.uri as unknown).replace(/^file:\\/\\//, \"\");\n      } else {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository-uri.ts",
      "line": 118,
      "content": "(components as unknown).path = (normalizedInfo.uri as unknown).replace(/^file:\\/\\//, \"\");",
      "context": "      // For local repositories, extract path\n      if ((components as unknown)?.type === (RepositoryURIType as unknown)?.LOCAL_FILE) {\n        (components as unknown).path = (normalizedInfo.uri as unknown).replace(/^file:\\/\\//, \"\");\n      } else {\n        (components as unknown).path = (normalizedInfo as unknown)?.uri;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository-uri.ts",
      "line": 120,
      "content": "(components as unknown).path = (normalizedInfo as unknown)?.uri;",
      "context": "        (components as unknown).path = (normalizedInfo.uri as unknown).replace(/^file:\\/\\//, \"\");\n      } else {\n        (components as unknown).path = (normalizedInfo as unknown)?.uri;\n      }\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository-uri.ts",
      "line": 128,
      "content": "type: (RepositoryURIType as unknown).LOCAL_PATH,",
      "context": "    // Fallback for any errors\n    return {\n      type: (RepositoryURIType as unknown).LOCAL_PATH,\n      path: uri,\n      normalized: `local/${basename(uri)}`,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository-uri.ts",
      "line": 145,
      "content": "return (result as unknown)!.name as unknown;",
      "context": "  try {\n    const result = normalizeRepositoryUri(uri, { validateLocalExists: false });\n    return (result as unknown)!.name as unknown;\n  } catch (error) {\n    // Fallback to simple basename normalization (filesystem-safe)",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository-uri.ts",
      "line": 183,
      "content": "const targetFormat = targetType as unknown as UriFormat;",
      "context": "  try {\n    // Map our RepositoryURIType to UriFormat\n    const targetFormat = targetType as unknown as UriFormat;\n    return convertRepositoryUri(uri, targetFormat);\n  } catch (error) {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/repository-uri.ts",
      "line": 199,
      "content": "return (normalized as unknown).isLocal;",
      "context": "  try {\n    const normalized = normalizeRepositoryUri(uri, { validateLocalExists: false });\n    return (normalized as unknown).isLocal;\n  } catch (error) {\n    // If we can\"t parse it, assume it's a local path",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 174,
      "content": "}) as unknown,",
      "context": "          }\n          return { stdout: \"\", stderr: \"\" };\n        }) as unknown,\n        getSession: createMock(() =>\n          Promise.resolve({",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 181,
      "content": ") as unknown,",
      "context": "            repoUrl: \"https://github.com/user/repo.git\",\n          })\n        ) as unknown,\n        getSessionWorkdir: createMock(() => \"/test/repo/sessions/test-session\") as unknown,\n      };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 182,
      "content": "getSessionWorkdir: createMock(() => \"/test/repo/sessions/test-session\") as unknown,",
      "context": "          })\n        ) as unknown,\n        getSessionWorkdir: createMock(() => \"/test/repo/sessions/test-session\") as unknown,\n      };\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 197,
      "content": "execAsync: createMock() as unknown,",
      "context": "    test(\"should handle missing session in PR workflow\", async () => {\n      const mockDeps = {\n        execAsync: createMock() as unknown,\n        getSession: createMock(() => Promise.resolve(null)) as unknown,\n        getSessionWorkdir: createMock() as unknown,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 198,
      "content": "getSession: createMock(() => Promise.resolve(null)) as unknown,",
      "context": "      const mockDeps = {\n        execAsync: createMock() as unknown,\n        getSession: createMock(() => Promise.resolve(null)) as unknown,\n        getSessionWorkdir: createMock() as unknown,\n      };",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 199,
      "content": "getSessionWorkdir: createMock() as unknown,",
      "context": "        execAsync: createMock() as unknown,\n        getSession: createMock(() => Promise.resolve(null)) as unknown,\n        getSessionWorkdir: createMock() as unknown,\n      };\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 238,
      "content": "}) as unknown,",
      "context": "          }\n          return { stdout: \"\", stderr: \"\" };\n        }) as unknown,\n        getSession: createMock(() =>\n          Promise.resolve({",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 245,
      "content": ") as unknown,",
      "context": "            repoUrl: \"https://github.com/user/repo.git\",\n          })\n        ) as unknown,\n        getSessionWorkdir: createMock(() => \"/test/repo/sessions/task-143-session\") as unknown,\n        getSessionByTaskId: createMock(() =>",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 246,
      "content": "getSessionWorkdir: createMock(() => \"/test/repo/sessions/task-143-session\") as unknown,",
      "context": "          })\n        ) as unknown,\n        getSessionWorkdir: createMock(() => \"/test/repo/sessions/task-143-session\") as unknown,\n        getSessionByTaskId: createMock(() =>\n          Promise.resolve({",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 254,
      "content": ") as unknown,",
      "context": "            taskId: \"143\",\n          })\n        ) as unknown,\n      };\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 272,
      "content": "execAsync: createMock() as unknown,",
      "context": "    test(\"should throw error when taskId has no associated session\", async () => {\n      const mockDeps = {\n        execAsync: createMock() as unknown,\n        getSession: createMock() as unknown,\n        getSessionWorkdir: createMock() as unknown,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 273,
      "content": "getSession: createMock() as unknown,",
      "context": "      const mockDeps = {\n        execAsync: createMock() as unknown,\n        getSession: createMock() as unknown,\n        getSessionWorkdir: createMock() as unknown,\n        getSessionByTaskId: createMock(() => Promise.resolve(null)) as unknown,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 274,
      "content": "getSessionWorkdir: createMock() as unknown,",
      "context": "        execAsync: createMock() as unknown,\n        getSession: createMock() as unknown,\n        getSessionWorkdir: createMock() as unknown,\n        getSessionByTaskId: createMock(() => Promise.resolve(null)) as unknown,\n      };",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 275,
      "content": "getSessionByTaskId: createMock(() => Promise.resolve(null)) as unknown,",
      "context": "        getSession: createMock() as unknown,\n        getSessionWorkdir: createMock() as unknown,\n        getSessionByTaskId: createMock(() => Promise.resolve(null)) as unknown,\n      };\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 289,
      "content": "execAsync: createMock() as unknown,",
      "context": "    test(\"should throw error when getSessionByTaskId dependency is not available\", async () => {\n      const mockDeps = {\n        execAsync: createMock() as unknown,\n        getSession: createMock() as unknown,\n        getSessionWorkdir: createMock() as unknown,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 290,
      "content": "getSession: createMock() as unknown,",
      "context": "      const mockDeps = {\n        execAsync: createMock() as unknown,\n        getSession: createMock() as unknown,\n        getSessionWorkdir: createMock() as unknown,\n        // getSessionByTaskId is intentionally omitted",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 291,
      "content": "getSessionWorkdir: createMock() as unknown,",
      "context": "        execAsync: createMock() as unknown,\n        getSession: createMock() as unknown,\n        getSessionWorkdir: createMock() as unknown,\n        // getSessionByTaskId is intentionally omitted\n      };",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 331,
      "content": "}) as unknown,",
      "context": "          }\n          return { stdout: \"\", stderr: \"\" };\n        }) as unknown,\n        getSession: createMock(() =>\n          Promise.resolve({",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 338,
      "content": ") as unknown,",
      "context": "            repoUrl: \"https://github.com/user/repo.git\",\n          })\n        ) as unknown,\n        getSessionWorkdir: createMock(() => \"/test/repo/sessions/direct-session\") as unknown,\n        getSessionByTaskId: createMock() as unknown,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 339,
      "content": "getSessionWorkdir: createMock(() => \"/test/repo/sessions/direct-session\") as unknown,",
      "context": "          })\n        ) as unknown,\n        getSessionWorkdir: createMock(() => \"/test/repo/sessions/direct-session\") as unknown,\n        getSessionByTaskId: createMock() as unknown,\n      };",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 340,
      "content": "getSessionByTaskId: createMock() as unknown,",
      "context": "        ) as unknown,\n        getSessionWorkdir: createMock(() => \"/test/repo/sessions/direct-session\") as unknown,\n        getSessionByTaskId: createMock() as unknown,\n      };\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 373,
      "content": "}) as unknown,",
      "context": "          // Fail other git commands to test error handling\n          throw new Error(\"git: command not found\");\n        }) as unknown,\n        getSession: createMock(() =>\n          Promise.resolve({",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 379,
      "content": ") as unknown,",
      "context": "            repoName: \"test-repo\",\n          })\n        ) as unknown,\n        getSessionWorkdir: createMock(() => \"/test/repo\") as unknown,\n      };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 380,
      "content": "getSessionWorkdir: createMock(() => \"/test/repo\") as unknown,",
      "context": "          })\n        ) as unknown,\n        getSessionWorkdir: createMock(() => \"/test/repo\") as unknown,\n      };\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 410,
      "content": "}) as unknown,",
      "context": "          }\n          return { stdout: \"\", stderr: \"\" };\n        }) as unknown,\n      };\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 435,
      "content": "})) as unknown,",
      "context": "            stdout: testCase.output,\n            stderr: \"\",\n          })) as unknown,\n        };\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 448,
      "content": "})) as unknown,",
      "context": "          stdout: \"Invalid git output\",\n          stderr: \"\",\n        })) as unknown,\n      };\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 462,
      "content": "}) as unknown,",
      "context": "          expect(cmd).toContain(\"--amend\");\n          return { stdout: \"[main def456] Amended commit\\n 1 file changed\", stderr: \"\" };\n        }) as unknown,\n      };\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 485,
      "content": "}) as unknown,",
      "context": "          }\n          return { stdout: \"\", stderr: \"\" };\n        }) as unknown,\n      };\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 503,
      "content": "}) as unknown,",
      "context": "          }\n          return { stdout: \"\", stderr: \"\" };\n        }) as unknown,\n      };\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 523,
      "content": "}) as unknown,",
      "context": "          }\n          return { stdout: \"\", stderr: \"\" };\n        }) as unknown,\n      };\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 540,
      "content": "}) as unknown,",
      "context": "          }\n          return { stdout: \"\", stderr: \"\" };\n        }) as unknown,\n      };\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 566,
      "content": "}) as unknown,",
      "context": "          }\n          return { stdout: \"\", stderr: \"\" };\n        }) as unknown,\n      };\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 594,
      "content": "}) as unknown,",
      "context": "          }\n          return { stdout: \"\", stderr: \"\" };\n        }) as unknown,\n      };\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 613,
      "content": "}) as unknown,",
      "context": "          expect(command.includes(\"git -C /test/repo add\")).toBe(true);\n          return { stdout: \"\", stderr: \"\" };\n        }) as unknown,\n      };\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 632,
      "content": "}) as unknown,",
      "context": "          capturedCommand = command;\n          return { stdout: \"\", stderr: \"\" };\n        }) as unknown,\n      };\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 658,
      "content": "}) as unknown,",
      "context": "          }\n          return { stdout: \"\", stderr: \"\" };\n        }) as unknown,\n      };\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 677,
      "content": "}) as unknown,",
      "context": "          }\n          return { stdout: \"\", stderr: \"\" };\n        }) as unknown,\n      };\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 697,
      "content": "}) as unknown,",
      "context": "          }\n          return { stdout: \"\", stderr: \"\" };\n        }) as unknown,\n      };\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 716,
      "content": "}) as unknown,",
      "context": "          }\n          return { stdout: \"\", stderr: \"\" };\n        }) as unknown,\n        mkdir: createMock(async () => {}) as unknown,\n        readdir: createMock(async () => {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 717,
      "content": "mkdir: createMock(async () => {}) as unknown,",
      "context": "          return { stdout: \"\", stderr: \"\" };\n        }) as unknown,\n        mkdir: createMock(async () => {}) as unknown,\n        readdir: createMock(async () => {\n          throw new Error(\"ENOENT: no such file or directory\"); // Directory doesn't exist",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 720,
      "content": "}) as unknown,",
      "context": "        readdir: createMock(async () => {\n          throw new Error(\"ENOENT: no such file or directory\"); // Directory doesn't exist\n        }) as unknown,\n        access: createMock(async () => {}) as unknown, // .git directory exists\n      };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 721,
      "content": "access: createMock(async () => {}) as unknown, // .git directory exists",
      "context": "          throw new Error(\"ENOENT: no such file or directory\"); // Directory doesn't exist\n        }) as unknown,\n        access: createMock(async () => {}) as unknown, // .git directory exists\n      };\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 740,
      "content": "execAsync: createMock() as unknown,",
      "context": "    test(\"should handle clone with empty repository URL validation\", async () => {\n      const mockDeps = {\n        execAsync: createMock() as unknown,\n        mkdir: createMock() as unknown,\n        readdir: createMock() as unknown,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 741,
      "content": "mkdir: createMock() as unknown,",
      "context": "      const mockDeps = {\n        execAsync: createMock() as unknown,\n        mkdir: createMock() as unknown,\n        readdir: createMock() as unknown,\n        access: createMock() as unknown,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 742,
      "content": "readdir: createMock() as unknown,",
      "context": "        execAsync: createMock() as unknown,\n        mkdir: createMock() as unknown,\n        readdir: createMock() as unknown,\n        access: createMock() as unknown,\n      };",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 743,
      "content": "access: createMock() as unknown,",
      "context": "        mkdir: createMock() as unknown,\n        readdir: createMock() as unknown,\n        access: createMock() as unknown,\n      };\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 764,
      "content": "}) as unknown,",
      "context": "          }\n          return { stdout: \"\", stderr: \"\" };\n        }) as unknown,\n        mkdir: createMock() as unknown,\n        readdir: createMock(async () => [\"existing-file.txt\"]) as unknown, // Directory exists and not empty",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 765,
      "content": "mkdir: createMock() as unknown,",
      "context": "          return { stdout: \"\", stderr: \"\" };\n        }) as unknown,\n        mkdir: createMock() as unknown,\n        readdir: createMock(async () => [\"existing-file.txt\"]) as unknown, // Directory exists and not empty\n        access: createMock() as unknown,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 766,
      "content": "readdir: createMock(async () => [\"existing-file.txt\"]) as unknown, // Directory exists and not empty",
      "context": "        }) as unknown,\n        mkdir: createMock() as unknown,\n        readdir: createMock(async () => [\"existing-file.txt\"]) as unknown, // Directory exists and not empty\n        access: createMock() as unknown,\n      };",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 767,
      "content": "access: createMock() as unknown,",
      "context": "        mkdir: createMock() as unknown,\n        readdir: createMock(async () => [\"existing-file.txt\"]) as unknown, // Directory exists and not empty\n        access: createMock() as unknown,\n      };\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 792,
      "content": "}) as unknown,",
      "context": "          }\n          return { stdout: \"\", stderr: \"\" };\n        }) as unknown,\n        mkdir: createMock() as unknown,\n        readdir: createMock(async () => {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 793,
      "content": "mkdir: createMock() as unknown,",
      "context": "          return { stdout: \"\", stderr: \"\" };\n        }) as unknown,\n        mkdir: createMock() as unknown,\n        readdir: createMock(async () => {\n          throw new Error(\"ENOENT\");",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 796,
      "content": "}) as unknown,",
      "context": "        readdir: createMock(async () => {\n          throw new Error(\"ENOENT\");\n        }) as unknown,\n        access: createMock() as unknown,\n      };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 797,
      "content": "access: createMock() as unknown,",
      "context": "          throw new Error(\"ENOENT\");\n        }) as unknown,\n        access: createMock() as unknown,\n      };\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 818,
      "content": "}) as unknown,",
      "context": "          }\n          return { stdout: \"\", stderr: \"\" };\n        }) as unknown,\n        mkdir: createMock() as unknown,\n        readdir: createMock(async () => {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 819,
      "content": "mkdir: createMock() as unknown,",
      "context": "          return { stdout: \"\", stderr: \"\" };\n        }) as unknown,\n        mkdir: createMock() as unknown,\n        readdir: createMock(async () => {\n          throw new Error(\"ENOENT\");",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 822,
      "content": "}) as unknown,",
      "context": "        readdir: createMock(async () => {\n          throw new Error(\"ENOENT\");\n        }) as unknown,\n        access: createMock(async () => {\n          throw new Error(\"ENOENT: .git directory not found\"); // Clone verification fails",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 825,
      "content": "}) as unknown,",
      "context": "        access: createMock(async () => {\n          throw new Error(\"ENOENT: .git directory not found\"); // Clone verification fails\n        }) as unknown,\n      };\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 841,
      "content": "execAsync: createMock(async () => ({ stdout: \"Cloning...\", stderr: \"\" })) as unknown,",
      "context": "    test(\"should handle clone with local repository normalization\", async () => {\n      const mockDeps = {\n        execAsync: createMock(async () => ({ stdout: \"Cloning...\", stderr: \"\" })) as unknown,\n        mkdir: createMock() as unknown,\n        readdir: createMock(async () => {",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 842,
      "content": "mkdir: createMock() as unknown,",
      "context": "      const mockDeps = {\n        execAsync: createMock(async () => ({ stdout: \"Cloning...\", stderr: \"\" })) as unknown,\n        mkdir: createMock() as unknown,\n        readdir: createMock(async () => {\n          throw new Error(\"ENOENT\");",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 845,
      "content": "}) as unknown,",
      "context": "        readdir: createMock(async () => {\n          throw new Error(\"ENOENT\");\n        }) as unknown,\n        access: createMock() as unknown,\n      };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 846,
      "content": "access: createMock() as unknown,",
      "context": "          throw new Error(\"ENOENT\");\n        }) as unknown,\n        access: createMock() as unknown,\n      };\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 867,
      "content": "}) as unknown,",
      "context": "        execAsync: createMock(async () => {\n          throw new Error(\"fatal: not a git repository\");\n        }) as unknown,\n      };\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git.test.ts",
      "line": 922,
      "content": "createGitService(null as unknown as { baseDir?: string });",
      "context": "  test(\"should handle null options parameter without throwing runtime error\", () => {\n    expect(() => {\n      createGitService(null as unknown as { baseDir?: string });\n    }).not.toThrow();\n  });",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "src/domain/session.ts",
      "line": 1155,
      "content": "const zodError = error as unknown;",
      "context": "    if (error instanceof Error && error.name === \"ZodError\") {\n      // Extract the validation error message\n      const zodError = error as unknown;\n      const message = zodError.errors?.[0]?.message || \"Invalid parameters\";\n      throw new ValidationError(message);",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/session.ts",
      "line": 2052,
      "content": "typeof (taskService as unknown).getTaskSpecData === \"function\"",
      "context": "      if (\n        \"getTaskSpecData\" in taskService &&\n        typeof (taskService as unknown).getTaskSpecData === \"function\"\n      ) {\n        const taskSpec = await (taskService as unknown).getTaskSpecData(taskId);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/session.ts",
      "line": 2054,
      "content": "const taskSpec = await (taskService as unknown).getTaskSpecData(taskId);",
      "context": "        typeof (taskService as unknown).getTaskSpecData === \"function\"\n      ) {\n        const taskSpec = await (taskService as unknown).getTaskSpecData(taskId);\n        result.taskSpec = taskSpec;\n      } else {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/prepared-merge-commit-workflow.test.ts",
      "line": 74,
      "content": "(gitService as unknown).preparePr = preparePrSpy;",
      "context": "\n      // Replace the preparePr method with our spy\n      (gitService as unknown).preparePr = preparePrSpy;\n\n      // Execute the preparePr method",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/prepared-merge-commit-workflow.test.ts",
      "line": 144,
      "content": "(gitService as unknown).preparePr = correctPreparePrSpy;",
      "context": "\n      // Replace with correct implementation\n      (gitService as unknown).preparePr = correctPreparePrSpy;\n\n      // Execute the CORRECT preparePr method",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/prepared-merge-commit-workflow.test.ts",
      "line": 213,
      "content": "(require(\"../git.js\") as unknown).preparePrFromParams = mockPreparePrFromParams;",
      "context": "      // Replace the preparePrFromParams function\n      const originalPreparePr = require(\"../git.js\").preparePrFromParams;\n      (require(\"../git.js\") as unknown).preparePrFromParams = mockPreparePrFromParams;\n\n      try {",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/prepared-merge-commit-workflow.test.ts",
      "line": 240,
      "content": "(require(\"../git.js\") as unknown).preparePrFromParams = originalPreparePr;",
      "context": "      } finally {\n        // Restore original function\n        (require(\"../git.js\") as unknown).preparePrFromParams = originalPreparePr;\n      }\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/prepared-merge-commit-workflow.test.ts",
      "line": 321,
      "content": "(gitService as unknown).preparePr = preparePrWithConflictSpy;",
      "context": "      });\n\n      (gitService as unknown).preparePr = preparePrWithConflictSpy;\n\n      // Should throw error on merge conflict",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 12,
      "content": "const matter = (grayMatterNamespace as unknown).default || grayMatterNamespace;",
      "context": "import * as jsYaml from \"js-yaml\";\n\nconst matter = (grayMatterNamespace as unknown).default || grayMatterNamespace;\n\n// Create a custom stringify function that doesn't add unnecessary quotes",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 17,
      "content": "let yamlStr = jsYaml.dump(data as unknown, {",
      "context": "function customMatterStringify(content: string, data: any): string {\n  // Use js-yaml's dump function directly with options to control quoting behavior\n  let yamlStr = jsYaml.dump(data as unknown, {\n    lineWidth: -1, // Don't wrap lines\n    noCompatMode: true, // Use YAML 1.2",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 102,
      "content": "const formats: RuleFormat[] = (options as unknown).format ? [(options as unknown).format] : [\"cursor\", \"generic\"];",
      "context": "  async listRules(options: RuleOptions = {}): Promise<Rule[]> {\n    const rules: Rule[] = [];\n    const formats: RuleFormat[] = (options as unknown).format ? [(options as unknown).format] : [\"cursor\", \"generic\"];\n\n    for (const format of formats) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 107,
      "content": "if ((options as unknown).debug) {",
      "context": "      const dirPath = this.getRuleDirPath(format);\n\n      if ((options as unknown).debug) {\n        log.debug(\"Listing rules\", { directory: dirPath, format });\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 115,
      "content": "if (!(file as unknown).endsWith(\".mdc\")) continue;",
      "context": "\n        for (const file of files) {\n          if (!(file as unknown).endsWith(\".mdc\")) continue;\n\n          try {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 120,
      "content": "debug: (options as unknown).debug,",
      "context": "            const rule = await this.getRule(file.replace(/\\.mdc$/, \"\"), {\n              format,\n              debug: (options as unknown).debug,\n            });\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 124,
      "content": "if ((options as unknown).tag && (!(rule as unknown).tags || !(rule.tags as unknown).includes((options as unknown).tag))) {",
      "context": "\n            // Filter by tag if specified\n            if ((options as unknown).tag && (!(rule as unknown).tags || !(rule.tags as unknown).includes((options as unknown).tag))) {\n              continue;\n            }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 159,
      "content": "if ((options as unknown).debug) {",
      "context": "    const bareId = id.replace(/\\.mdc$/, \"\");\n\n    if ((options as unknown).debug) {\n      log.debug(\"Getting rule\", { id: bareId, requestedFormat: (options as unknown).format });\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 160,
      "content": "log.debug(\"Getting rule\", { id: bareId, requestedFormat: (options as unknown).format });",
      "context": "\n    if ((options as unknown).debug) {\n      log.debug(\"Getting rule\", { id: bareId, requestedFormat: (options as unknown).format });\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 164,
      "content": "if ((options as unknown).format) {",
      "context": "\n    // If a specific format is requested, try that first\n    if ((options as unknown).format) {\n      const requestedFormat = (options as unknown).format;\n      const dirPath = this.getRuleDirPath(requestedFormat);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 165,
      "content": "const requestedFormat = (options as unknown).format;",
      "context": "    // If a specific format is requested, try that first\n    if ((options as unknown).format) {\n      const requestedFormat = (options as unknown).format;\n      const dirPath = this.getRuleDirPath(requestedFormat);\n      const filePath = join(dirPath, `${bareId}.mdc`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 169,
      "content": "if ((options as unknown).debug) {",
      "context": "      const filePath = join(dirPath, `${bareId}.mdc`);\n\n      if ((options as unknown).debug) {\n        log.debug(\"Checking requested format\", { format: requestedFormat, filePath });\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 177,
      "content": "if ((options as unknown).debug) {",
      "context": "        await fs.access(filePath);\n\n        if ((options as unknown).debug) {\n          log.debug(\"File exists in requested format\", { filePath });\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 189,
      "content": "if ((options as unknown).debug) {",
      "context": "          const { data, content: ruleContent } = matter(content);\n\n          if ((options as unknown).debug) {\n            log.debug(\"Successfully parsed frontmatter\", {\n              filePath,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 192,
      "content": "dataKeys: Object.keys(data as unknown) as unknown,",
      "context": "            log.debug(\"Successfully parsed frontmatter\", {\n              filePath,\n              dataKeys: Object.keys(data as unknown) as unknown,\n              contentLength: ruleContent.length,\n            });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 199,
      "content": "name: (data as unknown).name,",
      "context": "          return {\n            id: bareId,\n            name: (data as unknown).name,\n            description: (data as unknown).description,\n            globs: (data as unknown).globs,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 200,
      "content": "description: (data as unknown).description,",
      "context": "            id: bareId,\n            name: (data as unknown).name,\n            description: (data as unknown).description,\n            globs: (data as unknown).globs,\n            alwaysApply: (data as unknown).alwaysApply,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 201,
      "content": "globs: (data as unknown).globs,",
      "context": "            name: (data as unknown).name,\n            description: (data as unknown).description,\n            globs: (data as unknown).globs,\n            alwaysApply: (data as unknown).alwaysApply,\n            tags: (data as unknown).tags,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 202,
      "content": "alwaysApply: (data as unknown).alwaysApply,",
      "context": "            description: (data as unknown).description,\n            globs: (data as unknown).globs,\n            alwaysApply: (data as unknown).alwaysApply,\n            tags: (data as unknown).tags,\n            content: ruleContent.trim(),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 203,
      "content": "tags: (data as unknown).tags,",
      "context": "            globs: (data as unknown).globs,\n            alwaysApply: (data as unknown).alwaysApply,\n            tags: (data as unknown).tags,\n            content: ruleContent.trim(),\n            format: requestedFormat,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 207,
      "content": "} as unknown;",
      "context": "            format: requestedFormat,\n            path: filePath,\n          } as unknown;\n        } catch (error) {\n          // FIXED: Gracefully handle errors in frontmatter parsing",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 211,
      "content": "if ((options as unknown).debug) {",
      "context": "          // FIXED: Gracefully handle errors in frontmatter parsing\n          // This allows rules with invalid YAML frontmatter to still be loaded and used\n          if ((options as unknown).debug) {\n            log.error(\"Error parsing frontmatter\", {\n              filePath,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 222,
      "content": "const frontmatterEndIndex = (((content) as unknown).toString() as unknown).indexOf(\"---\", 3);",
      "context": "          // Just extract content after the second '---' or use the whole content if no frontmatter markers\n          let extractedContent = content;\n          const frontmatterEndIndex = (((content) as unknown).toString() as unknown).indexOf(\"---\", 3);\n          if ((content as unknown).startsWith(\"---\") && frontmatterEndIndex > 0) {\n            extractedContent = ((((content).toString().substring(frontmatterEndIndex + 3)) as unknown).toString() as unknown).trim();",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 223,
      "content": "if ((content as unknown).startsWith(\"---\") && frontmatterEndIndex > 0) {",
      "context": "          let extractedContent = content;\n          const frontmatterEndIndex = (((content) as unknown).toString() as unknown).indexOf(\"---\", 3);\n          if ((content as unknown).startsWith(\"---\") && frontmatterEndIndex > 0) {\n            extractedContent = ((((content).toString().substring(frontmatterEndIndex + 3)) as unknown).toString() as unknown).trim();\n          }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 224,
      "content": "extractedContent = ((((content).toString().substring(frontmatterEndIndex + 3)) as unknown).toString() as unknown).trim();",
      "context": "          const frontmatterEndIndex = (((content) as unknown).toString() as unknown).indexOf(\"---\", 3);\n          if ((content as unknown).startsWith(\"---\") && frontmatterEndIndex > 0) {\n            extractedContent = ((((content).toString().substring(frontmatterEndIndex + 3)) as unknown).toString() as unknown).trim();\n          }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 238,
      "content": "if ((options as unknown).debug) {",
      "context": "      } catch (error) {\n        // Rule not found in the requested format\n        if ((options as unknown).debug) {\n          log.debug(\"File not found in requested format\", {\n            filePath,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 253,
      "content": "if ((options as unknown).format === format) continue;",
      "context": "    for (const format of formatsToSearch) {\n      // Skip if we already checked this format above\n      if ((options as unknown).format === format) continue;\n\n      const dirPath = this.getRuleDirPath(format);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 258,
      "content": "if ((options as unknown).debug) {",
      "context": "      const filePath = join(dirPath, `${bareId}.mdc`);\n\n      if ((options as unknown).debug) {\n        log.debug(\"Checking alternative format\", { format, filePath });\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 266,
      "content": "if ((options as unknown).debug) {",
      "context": "        await fs.access(filePath);\n\n        if ((options as unknown).debug) {\n          log.debug(\"File exists in alternative format\", { filePath });\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 277,
      "content": "if ((options as unknown).debug) {",
      "context": "          const { data, content: ruleContent } = matter(content);\n\n          if ((options as unknown).debug) {\n            log.debug(\"Successfully parsed frontmatter in alternative format\", {\n              filePath,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 280,
      "content": "dataKeys: Object.keys(data as unknown) as unknown,",
      "context": "            log.debug(\"Successfully parsed frontmatter in alternative format\", {\n              filePath,\n              dataKeys: Object.keys(data as unknown) as unknown,\n              contentLength: ruleContent.length,\n            });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 286,
      "content": "if ((options as unknown).format && format !== (options as unknown).format) {",
      "context": "\n          // If we found the rule in a different format than requested, return with appropriate notice\n          if ((options as unknown).format && format !== (options as unknown).format) {\n            const originalFormat = format;\n            const requestedFormat = (options as unknown).format;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 288,
      "content": "const requestedFormat = (options as unknown).format;",
      "context": "          if ((options as unknown).format && format !== (options as unknown).format) {\n            const originalFormat = format;\n            const requestedFormat = (options as unknown).format;\n\n            // Return the rule in its original format, but with a notice that format conversion was requested",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 294,
      "content": "name: (data as unknown).name,",
      "context": "            return {\n              id: bareId,\n              name: (data as unknown).name,\n              description: (data as unknown).description,\n              globs: (data as unknown).globs,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 295,
      "content": "description: (data as unknown).description,",
      "context": "              id: bareId,\n              name: (data as unknown).name,\n              description: (data as unknown).description,\n              globs: (data as unknown).globs,\n              alwaysApply: (data as unknown).alwaysApply,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 296,
      "content": "globs: (data as unknown).globs,",
      "context": "              name: (data as unknown).name,\n              description: (data as unknown).description,\n              globs: (data as unknown).globs,\n              alwaysApply: (data as unknown).alwaysApply,\n              tags: (data as unknown).tags,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 297,
      "content": "alwaysApply: (data as unknown).alwaysApply,",
      "context": "              description: (data as unknown).description,\n              globs: (data as unknown).globs,\n              alwaysApply: (data as unknown).alwaysApply,\n              tags: (data as unknown).tags,\n              content: ruleContent.trim(),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 298,
      "content": "tags: (data as unknown).tags,",
      "context": "              globs: (data as unknown).globs,\n              alwaysApply: (data as unknown).alwaysApply,\n              tags: (data as unknown).tags,\n              content: ruleContent.trim(),\n              format: originalFormat, // Return actual format, not requested format",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 303,
      "content": "} as unknown;",
      "context": "              path: filePath,\n              formatNote: `Rule found in '${originalFormat}' format but '${requestedFormat}' was requested. Format conversion is not supported yet.`,\n            } as unknown;\n          }\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 309,
      "content": "name: (data as unknown).name,",
      "context": "          return {\n            id: bareId,\n            name: (data as unknown).name,\n            description: (data as unknown).description,\n            globs: (data as unknown).globs,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 310,
      "content": "description: (data as unknown).description,",
      "context": "            id: bareId,\n            name: (data as unknown).name,\n            description: (data as unknown).description,\n            globs: (data as unknown).globs,\n            alwaysApply: (data as unknown).alwaysApply,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 311,
      "content": "globs: (data as unknown).globs,",
      "context": "            name: (data as unknown).name,\n            description: (data as unknown).description,\n            globs: (data as unknown).globs,\n            alwaysApply: (data as unknown).alwaysApply,\n            tags: (data as unknown).tags,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 312,
      "content": "alwaysApply: (data as unknown).alwaysApply,",
      "context": "            description: (data as unknown).description,\n            globs: (data as unknown).globs,\n            alwaysApply: (data as unknown).alwaysApply,\n            tags: (data as unknown).tags,\n            content: ruleContent.trim(),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 313,
      "content": "tags: (data as unknown).tags,",
      "context": "            globs: (data as unknown).globs,\n            alwaysApply: (data as unknown).alwaysApply,\n            tags: (data as unknown).tags,\n            content: ruleContent.trim(),\n            format,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 317,
      "content": "} as unknown;",
      "context": "            format,\n            path: filePath,\n          } as unknown;\n        } catch (error) {\n          // FIXED: Gracefully handle errors in frontmatter parsing for alternative formats",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 320,
      "content": "if ((options as unknown).debug) {",
      "context": "        } catch (error) {\n          // FIXED: Gracefully handle errors in frontmatter parsing for alternative formats\n          if ((options as unknown).debug) {\n            log.error(\"Error parsing frontmatter in alternative format\", {\n              filePath,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 330,
      "content": "const frontmatterEndIndex = (((content) as unknown).toString() as unknown).indexOf(\"---\", 3);",
      "context": "          // Same frontmatter error handling as above for consistency\n          let extractedContent = content;\n          const frontmatterEndIndex = (((content) as unknown).toString() as unknown).indexOf(\"---\", 3);\n          if ((content as unknown).startsWith(\"---\") && frontmatterEndIndex > 0) {\n            extractedContent = ((((content).toString().substring(frontmatterEndIndex + 3)) as unknown).toString() as unknown).trim();",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 331,
      "content": "if ((content as unknown).startsWith(\"---\") && frontmatterEndIndex > 0) {",
      "context": "          let extractedContent = content;\n          const frontmatterEndIndex = (((content) as unknown).toString() as unknown).indexOf(\"---\", 3);\n          if ((content as unknown).startsWith(\"---\") && frontmatterEndIndex > 0) {\n            extractedContent = ((((content).toString().substring(frontmatterEndIndex + 3)) as unknown).toString() as unknown).trim();\n          }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 332,
      "content": "extractedContent = ((((content).toString().substring(frontmatterEndIndex + 3)) as unknown).toString() as unknown).trim();",
      "context": "          const frontmatterEndIndex = (((content) as unknown).toString() as unknown).indexOf(\"---\", 3);\n          if ((content as unknown).startsWith(\"---\") && frontmatterEndIndex > 0) {\n            extractedContent = ((((content).toString().substring(frontmatterEndIndex + 3)) as unknown).toString() as unknown).trim();\n          }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 344,
      "content": "if ((options as unknown).debug) {",
      "context": "      } catch (error) {\n        // File doesn't exist in this format, try the next one\n        if ((options as unknown).debug) {\n          log.debug(\"File not found in alternative format\", {\n            filePath,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 355,
      "content": "if ((options as unknown).debug) {",
      "context": "\n    // If we reach here, the rule was not found in any format\n    if ((options as unknown).debug) {\n      log.error(\"Rule not found in any format\", { id: bareId, requestedFormat: (options as unknown).format });\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 356,
      "content": "log.error(\"Rule not found in any format\", { id: bareId, requestedFormat: (options as unknown).format });",
      "context": "    // If we reach here, the rule was not found in any format\n    if ((options as unknown).debug) {\n      log.error(\"Rule not found in any format\", { id: bareId, requestedFormat: (options as unknown).format });\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 359,
      "content": "if ((options as unknown).format) {",
      "context": "    }\n\n    if ((options as unknown).format) {\n      throw new Error(\n        `Rule '${id}' not found in '${(options as unknown).format}' format or any other available format`",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 361,
      "content": "`Rule '${id}' not found in '${(options as unknown).format}' format or any other available format`",
      "context": "    if ((options as unknown).format) {\n      throw new Error(\n        `Rule '${id}' not found in '${(options as unknown).format}' format or any other available format`\n      );\n    } else {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 376,
      "content": "const format = (options as unknown).format || \"cursor\";",
      "context": "    options: CreateRuleOptions = {}\n  ): Promise<Rule> {\n    const format = (options as unknown).format || \"cursor\";\n    const dirPath = this.getRuleDirPath(format);\n    const filePath = join(dirPath, `${id}.mdc`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 384,
      "content": "if (existsSync(filePath) && !(options as unknown).overwrite) {",
      "context": "\n    // Check if rule already exists\n    if (existsSync(filePath) && !(options as unknown).overwrite) {\n      throw new Error(`Rule already exists: ${id}. Use --overwrite to replace it.`);\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 390,
      "content": "(Object.entries(meta) as unknown).forEach(([key, value]) => {",
      "context": "    // Clean up meta to remove undefined values that YAML can't handle\n    const cleanMeta: RuleMeta = {};\n    (Object.entries(meta) as unknown).forEach(([key, value]) => {\n      if (value !== undefined) {\n        cleanMeta[key] = value;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 406,
      "content": "globs: (cleanMeta as unknown).globs,",
      "context": "      id,\n      format,\n      globs: (cleanMeta as unknown).globs,\n    });\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 429,
      "content": "if (!(options as unknown).content && !(options as unknown).meta) {",
      "context": "\n    // No changes needed\n    if (!(options as unknown).content && !(options as unknown).meta) {\n      return rule;\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 436,
      "content": "name: (rule as unknown).name,",
      "context": "    const metaForFrontmatter: RuleMeta = {};\n    const currentRuleMeta: Partial<RuleMeta> = {\n      name: (rule as unknown).name,\n      description: (rule as unknown).description,\n      globs: (rule as unknown).globs,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 437,
      "content": "description: (rule as unknown).description,",
      "context": "    const currentRuleMeta: Partial<RuleMeta> = {\n      name: (rule as unknown).name,\n      description: (rule as unknown).description,\n      globs: (rule as unknown).globs,\n      alwaysApply: (rule as unknown).alwaysApply,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 438,
      "content": "globs: (rule as unknown).globs,",
      "context": "      name: (rule as unknown).name,\n      description: (rule as unknown).description,\n      globs: (rule as unknown).globs,\n      alwaysApply: (rule as unknown).alwaysApply,\n      tags: (rule as unknown).tags,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 439,
      "content": "alwaysApply: (rule as unknown).alwaysApply,",
      "context": "      description: (rule as unknown).description,\n      globs: (rule as unknown).globs,\n      alwaysApply: (rule as unknown).alwaysApply,\n      tags: (rule as unknown).tags,\n    };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 440,
      "content": "tags: (rule as unknown).tags,",
      "context": "      globs: (rule as unknown).globs,\n      alwaysApply: (rule as unknown).alwaysApply,\n      tags: (rule as unknown).tags,\n    };\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 444,
      "content": "const mergedMeta = { ...currentRuleMeta, ...(options as unknown).meta };",
      "context": "\n    // Merge current rule meta with updates from options.meta\n    const mergedMeta = { ...currentRuleMeta, ...(options as unknown).meta };\n\n    // Populate metaForFrontmatter with defined values from mergedMeta",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 449,
      "content": "(Object.prototype.hasOwnProperty as unknown).call(mergedMeta, key) &&",
      "context": "    for (const key in mergedMeta) {\n      if (\n        (Object.prototype.hasOwnProperty as unknown).call(mergedMeta, key) &&\n        mergedMeta[key as keyof RuleMeta] !== undefined\n      ) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 457,
      "content": "const updatedContent = (options as unknown).content || (rule as unknown).content;",
      "context": "\n    // Content to use\n    const updatedContent = (options as unknown).content || (rule as unknown).content;\n\n    // Use custom stringify function instead of matterStringify",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 463,
      "content": "await fs.writeFile((rule as unknown).path, fileContent, \"utf-8\");",
      "context": "\n    // Write the file\n    await fs.writeFile((rule as unknown).path, fileContent, \"utf-8\");\n\n    log.debug(\"Rule updated\", {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 466,
      "content": "_path: (rule as unknown).path,",
      "context": "\n    log.debug(\"Rule updated\", {\n      _path: (rule as unknown).path,\n      id,\n      format: (rule as unknown).format,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 468,
      "content": "format: (rule as unknown).format,",
      "context": "      _path: (rule as unknown).path,\n      id,\n      format: (rule as unknown).format,\n      contentChanged: !!(options as unknown).content,\n      metaChanged: !!(options as unknown).meta,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 469,
      "content": "contentChanged: !!(options as unknown).content,",
      "context": "      id,\n      format: (rule as unknown).format,\n      contentChanged: !!(options as unknown).content,\n      metaChanged: !!(options as unknown).meta,\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 470,
      "content": "metaChanged: !!(options as unknown).meta,",
      "context": "      format: (rule as unknown).format,\n      contentChanged: !!(options as unknown).content,\n      metaChanged: !!(options as unknown).meta,\n    });\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 473,
      "content": "return this.getRule(id, { format: (rule as unknown).format, debug: (ruleOptions as unknown).debug }); // Re-fetch to get updated rule",
      "context": "    });\n\n    return this.getRule(id, { format: (rule as unknown).format, debug: (ruleOptions as unknown).debug }); // Re-fetch to get updated rule\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 482,
      "content": "format: (options as unknown).format,",
      "context": "    // Get all rules first (with format filtering if specified)\n    const rules = await this.listRules({\n      format: (options as unknown).format,\n      tag: (options as unknown).tag,\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 483,
      "content": "tag: (options as unknown).tag,",
      "context": "    const rules = await this.listRules({\n      format: (options as unknown).format,\n      tag: (options as unknown).tag,\n    });\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 487,
      "content": "if (!(options as unknown).query) {",
      "context": "\n    // No search query, just return the filtered rules\n    if (!(options as unknown).query) {\n      return rules;\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 491,
      "content": "const searchTerm = (options.query as unknown).toLowerCase();",
      "context": "    }\n\n    const searchTerm = (options.query as unknown).toLowerCase();\n\n    // Filter by search term",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 496,
      "content": "if ((((rule.content.toLowerCase()) as unknown).toString() as unknown).includes(searchTerm)) {",
      "context": "    return rules.filter((rule) => {\n      // Search in content\n      if ((((rule.content.toLowerCase()) as unknown).toString() as unknown).includes(searchTerm)) {\n        return true;\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 501,
      "content": "if ((rule as unknown).name && (rule.name.toLowerCase() as unknown).includes(searchTerm)) {",
      "context": "\n      // Search in name\n      if ((rule as unknown).name && (rule.name.toLowerCase() as unknown).includes(searchTerm)) {\n        return true;\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 506,
      "content": "if ((rule as unknown).description && (rule.description.toLowerCase() as unknown).includes(searchTerm)) {",
      "context": "\n      // Search in description\n      if ((rule as unknown).description && (rule.description.toLowerCase() as unknown).includes(searchTerm)) {\n        return true;\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/rules.ts",
      "line": 511,
      "content": "if ((rule as unknown).tags && (rule.tags as unknown).some((tag) => (tag.toLowerCase() as unknown).includes(searchTerm))) {",
      "context": "\n      // Search in tags\n      if ((rule as unknown).tags && (rule.tags as unknown).some((tag) => (tag.toLowerCase() as unknown).includes(searchTerm))) {\n        return true;\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/session-lookup-bug-simple.test.ts",
      "line": 47,
      "content": "} as unknown;",
      "context": "      deleteSession: async () => true,\n      getNewSessionRepoPath: () => join(tempDir, \"local-minsky\", \"sessions\", \"test-session\"),\n    } as unknown;\n\n    const mockTaskService = {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/session-lookup-bug-simple.test.ts",
      "line": 53,
      "content": "} as unknown;",
      "context": "      getTaskStatus: async () => \"TODO\",\n      setTaskStatus: async () => undefined,\n    } as unknown;\n\n    const mockWorkspaceUtils = {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/session-lookup-bug-simple.test.ts",
      "line": 58,
      "content": "} as unknown;",
      "context": "      isSessionWorkspace: () => false,\n      getWorkspaceRepoName: () => \"local-minsky\",\n    } as unknown;\n\n    // This mock simulates the ACTUAL GitService bug behavior",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/session-lookup-bug-simple.test.ts",
      "line": 76,
      "content": "} as unknown;",
      "context": "      },\n      branchWithoutSession: async () => ({ branch: \"test\" }),\n    } as unknown;\n\n    // Act: Try to start a session (should fail cleanly)",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/remoteGitBackend.ts",
      "line": 60,
      "content": "this.cache = (RepositoryMetadataCache as unknown).getInstance();",
      "context": "    this.baseDir = getMinskyStateDir();\n    this.sessionDb = createSessionProvider();\n    this.cache = (RepositoryMetadataCache as unknown).getInstance();\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/remoteGitBackend.ts",
      "line": 155,
      "content": "return (this.cache as unknown).get(",
      "context": "    const cacheKey = generateRepoKey(this.localPath, \"status\");\n\n    return (this.cache as unknown).get(\n      cacheKey,\n      async () => {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/remoteGitBackend.ts",
      "line": 256,
      "content": "(this.cache as unknown).invalidateByPrefix(generateRepoKey(this.localPath, \"status\"));",
      "context": "\n      // Invalidate status cache after pushing\n      (this.cache as unknown).invalidateByPrefix(generateRepoKey(this.localPath, \"status\"));\n    } catch (error) {\n      throw new RepositoryError(",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/remoteGitBackend.ts",
      "line": 281,
      "content": "(this.cache as unknown).invalidateByPrefix(generateRepoKey(this.localPath, \"status\"));",
      "context": "\n      // Invalidate status cache after pulling\n      (this.cache as unknown).invalidateByPrefix(generateRepoKey(this.localPath, \"status\"));\n    } catch (error) {\n      throw new RepositoryError(",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/remoteGitBackend.ts",
      "line": 306,
      "content": "(this.cache as unknown).invalidateByPrefix(generateRepoKey(this.localPath, \"status\"));",
      "context": "\n      // Invalidate status cache after branch creation\n      (this.cache as unknown).invalidateByPrefix(generateRepoKey(this.localPath, \"status\"));\n\n      return {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/remoteGitBackend.ts",
      "line": 334,
      "content": "(this.cache as unknown).invalidateByPrefix(generateRepoKey(this.localPath, \"status\"));",
      "context": "\n      // Invalidate status cache after checkout\n      (this.cache as unknown).invalidateByPrefix(generateRepoKey(this.localPath, \"status\"));\n    } catch (error) {\n      throw new RepositoryError(",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/session-update.test.ts",
      "line": 58,
      "content": "} as unknown);",
      "context": "        noPush: false,\n        force: false,\n      } as unknown);\n      throw new Error(\"Should have thrown an error\");\n    } catch (error: unknown) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/uri-utils.ts",
      "line": 99,
      "content": "if ((normalizedUri as unknown).startsWith(\"https://\")) {",
      "context": "\n  // 1. Handle HTTPS URLs\n  if ((normalizedUri as unknown).startsWith(\"https://\")) {\n    format = UriFormat?.HTTPS;\n    // Extract org/repo from the URL",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/uri-utils.ts",
      "line": 102,
      "content": "const match = (normalizedUri as unknown).match(/https:\\/\\/[^\\/]+\\/([^\\/]+)\\/([^\\/]+?)(\\.git)?$/);",
      "context": "    format = UriFormat?.HTTPS;\n    // Extract org/repo from the URL\n    const match = (normalizedUri as unknown).match(/https:\\/\\/[^\\/]+\\/([^\\/]+)\\/([^\\/]+?)(\\.git)?$/);\n    if (!match || !match[1] || !match[2]) {\n      throw new ValidationError(`Invalid HTTPS repository URL: ${uri}`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/uri-utils.ts",
      "line": 108,
      "content": "const repo = (match[2] as unknown).replace(/\\.git$/, \"\");",
      "context": "\n    const org = match[1];\n    const repo = (match[2] as unknown).replace(/\\.git$/, \"\");\n    normalizedName = `${org}/${repo}`;\n    // Remove .git suffix for consistency",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/uri-utils.ts",
      "line": 114,
      "content": "else if ((normalizedUri as unknown).includes(\"@\") && (normalizedUri as unknown).includes(\":\")) {",
      "context": "  }\n  // 2. Handle SSH URLs\n  else if ((normalizedUri as unknown).includes(\"@\") && (normalizedUri as unknown).includes(\":\")) {\n    format = UriFormat?.SSH;\n    // Extract org/repo from the URL",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/uri-utils.ts",
      "line": 117,
      "content": "const match = (normalizedUri as unknown).match(/[^@]+@[^:]+:([^\\/]+)\\/([^\\/]+?)(\\.git)?$/);",
      "context": "    format = UriFormat?.SSH;\n    // Extract org/repo from the URL\n    const match = (normalizedUri as unknown).match(/[^@]+@[^:]+:([^\\/]+)\\/([^\\/]+?)(\\.git)?$/);\n    if (!match || !match[1] || !match[2]) {\n      throw new ValidationError(`Invalid SSH repository URL: ${uri}`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/uri-utils.ts",
      "line": 123,
      "content": "const repo = (match[2] as unknown).replace(/\\.git$/, \"\");",
      "context": "\n    const org = match[1];\n    const repo = (match[2] as unknown).replace(/\\.git$/, \"\");\n    normalizedName = `${org}/${repo}`;\n    // Remove .git suffix for consistency",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/uri-utils.ts",
      "line": 129,
      "content": "else if ((normalizedUri as unknown).startsWith(\"file://\")) {",
      "context": "  }\n  // 3. Handle local file:// URIs\n  else if ((normalizedUri as unknown).startsWith(\"file://\")) {\n    format = UriFormat?.FILE;\n    isLocal = true;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/uri-utils.ts",
      "line": 143,
      "content": "else if ((normalizedUri as unknown).startsWith(\"/\") || (normalizedUri as unknown).match(/^[A-Z]:\\\\/i)) {",
      "context": "  }\n  // 4. Handle plain filesystem paths\n  else if ((normalizedUri as unknown).startsWith(\"/\") || (normalizedUri as unknown).match(/^[A-Z]:\\\\/i)) {\n    format = UriFormat?.PATH;\n    isLocal = true;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/uri-utils.ts",
      "line": 161,
      "content": "else if ((normalizedUri as unknown).match(/^[^\\/]+\\/[^\\/]+$/)) {",
      "context": "  }\n  // DEFAULT_RETRY_COUNT. Handle GitHub shorthand notation (org/repo)\n  else if ((normalizedUri as unknown).match(/^[^\\/]+\\/[^\\/]+$/)) {\n    format = UriFormat?.SHORTHAND;\n    // Shorthand is already in org/repo format",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/uri-utils.ts",
      "line": 198,
      "content": "normalizeRepositoryUri(uri, options as unknown);",
      "context": "): boolean {\n  // This will throw if validation fails\n  normalizeRepositoryUri(uri, options as unknown);\n  return true;\n}",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/uri-utils.ts",
      "line": 215,
      "content": "if ((normalized as unknown)?.format === targetFormat) {",
      "context": "\n  // If it's already in the target format, return as is\n  if ((normalized as unknown)?.format === targetFormat) {\n    return (normalized as unknown).uri;\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/uri-utils.ts",
      "line": 216,
      "content": "return (normalized as unknown).uri;",
      "context": "  // If it's already in the target format, return as is\n  if ((normalized as unknown)?.format === targetFormat) {\n    return (normalized as unknown).uri;\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/uri-utils.ts",
      "line": 220,
      "content": "if ((normalized as unknown)?.isLocal) {",
      "context": "\n  // Local repositories can only be converted between PATH and FILE formats\n  if ((normalized as unknown)?.isLocal) {\n    if (targetFormat === UriFormat?.PATH) {\n      return (normalized.uri as unknown).replace(/^file:\\/\\//, \"\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/uri-utils.ts",
      "line": 222,
      "content": "return (normalized.uri as unknown).replace(/^file:\\/\\//, \"\");",
      "context": "  if ((normalized as unknown)?.isLocal) {\n    if (targetFormat === UriFormat?.PATH) {\n      return (normalized.uri as unknown).replace(/^file:\\/\\//, \"\");\n    }\n    if (targetFormat === UriFormat?.FILE) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/uri-utils.ts",
      "line": 225,
      "content": "return (normalized.uri as unknown).startsWith(\"file://\") ? (normalized as unknown)?.uri : `file://${(normalized as unknown).uri}`;",
      "context": "    }\n    if (targetFormat === UriFormat?.FILE) {\n      return (normalized.uri as unknown).startsWith(\"file://\") ? (normalized as unknown)?.uri : `file://${(normalized as unknown).uri}`;\n    }\n    throw new ValidationError(`Cannot convert local repository to ${targetFormat} format`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/uri-utils.ts",
      "line": 231,
      "content": "const [org, repo] = (normalized.name as unknown).split(\"/\");",
      "context": "\n  // GitHub repositories can be converted between formats\n  const [org, repo] = (normalized.name as unknown).split(\"/\");\n\n  switch (targetFormat) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/uri-utils.ts",
      "line": 254,
      "content": "const [owner, repo] = (normalized.name as unknown).split(\"/\");",
      "context": "export function extractRepositoryInfo(url: string): { owner: string; repo: string } {\n  const normalized = normalizeRepositoryUri(url);\n  const [owner, repo] = (normalized.name as unknown).split(\"/\");\n\n  if (!owner || !repo) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git-default-branch.test.ts",
      "line": 26,
      "content": "const execMock = GitService.prototype.execInRepository as unknown;",
      "context": "\n  test(\"should detect default branch from origin HEAD ref\", async () => {\n    const execMock = GitService.prototype.execInRepository as unknown;\n\n    // Mock to return a specific branch name",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-default-branch.test.ts",
      "line": 44,
      "content": "const execMock = GitService.prototype.execInRepository as unknown;",
      "context": "\n  test(\"should properly remove origin prefix from branch name\", async () => {\n    const execMock = GitService.prototype.execInRepository as unknown;\n\n    // Mock to return a branch with extra whitespace",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-default-branch.test.ts",
      "line": 57,
      "content": "const execMock = GitService.prototype.execInRepository as unknown;",
      "context": "\n  test(\"should fall back to 'main' when command fails\", async () => {\n    const execMock = GitService.prototype.execInRepository as unknown;\n\n    // Mock to throw an error",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/workspace.ts",
      "line": 42,
      "content": "if ((repoUrl as unknown)!.startsWith(\"file://\")) {",
      "context": "export function resolveMainWorkspaceFromRepoUrl(repoUrl: string): string {\n  // For file:// URLs, just remove the file:// prefix\n  if ((repoUrl as unknown)!.startsWith(\"file://\")) {\n    return (repoUrl as unknown)!.replace(\"file://\", \"\");\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace.ts",
      "line": 43,
      "content": "return (repoUrl as unknown)!.replace(\"file://\", \"\");",
      "context": "  // For file:// URLs, just remove the file:// prefix\n  if ((repoUrl as unknown)!.startsWith(\"file://\")) {\n    return (repoUrl as unknown)!.replace(\"file://\", \"\");\n  }\n  // For other URLs, assume they refer to the current directory",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace.ts",
      "line": 56,
      "content": "return (workspacePath as unknown)!.startsWith(minskySessionsPath);",
      "context": "export function isSessionWorkspace(workspacePath: string): boolean {\n  const minskySessionsPath = getSessionsDir();\n  return (workspacePath as unknown)!.startsWith(minskySessionsPath);\n}\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace.ts",
      "line": 99,
      "content": "if (!sessionRecord || !(sessionRecord as unknown)!.repoUrl) {",
      "context": "    const sessionRecord = await db.getSession(sessionName);\n\n    if (!sessionRecord || !(sessionRecord as unknown)!.repoUrl) {\n      return null;\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace.ts",
      "line": 105,
      "content": "upstreamRepository: (sessionRecord as unknown)!.repoUrl,",
      "context": "    return {\n      session: sessionName,\n      upstreamRepository: (sessionRecord as unknown)!.repoUrl,\n      gitRoot,\n    };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace.ts",
      "line": 161,
      "content": "const sessionRecord = await (sessionProvider as unknown)!.getSession(sessionName);",
      "context": "        try {\n          const sessionProvider = createSessionProvider();\n          const sessionRecord = await (sessionProvider as unknown)!.getSession(sessionName);\n          if (sessionRecord && (sessionRecord as unknown)!.repoUrl) {\n            return (sessionRecord as unknown)!.repoUrl;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace.ts",
      "line": 162,
      "content": "if (sessionRecord && (sessionRecord as unknown)!.repoUrl) {",
      "context": "          const sessionProvider = createSessionProvider();\n          const sessionRecord = await (sessionProvider as unknown)!.getSession(sessionName);\n          if (sessionRecord && (sessionRecord as unknown)!.repoUrl) {\n            return (sessionRecord as unknown)!.repoUrl;\n          }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace.ts",
      "line": 163,
      "content": "return (sessionRecord as unknown)!.repoUrl;",
      "context": "          const sessionRecord = await (sessionProvider as unknown)!.getSession(sessionName);\n          if (sessionRecord && (sessionRecord as unknown)!.repoUrl) {\n            return (sessionRecord as unknown)!.repoUrl;\n          }\n        } catch (sessionError) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace.ts",
      "line": 198,
      "content": "return resolveMainWorkspaceFromRepoUrl((sessionInfo as unknown)!.upstreamRepository);",
      "context": "    const sessionInfo = await getSessionFromWorkspace((process as any).cwd());\n    if (sessionInfo && (sessionInfo as any)!.upstreamRepository) {\n      return resolveMainWorkspaceFromRepoUrl((sessionInfo as unknown)!.upstreamRepository);\n    }\n    // If not in a session, or session has no upstream, fall through to normal logic.",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace.ts",
      "line": 240,
      "content": "return sessionInfo ? (sessionInfo as unknown)!.session : null;",
      "context": "): Promise<string | undefined> {\n  const sessionInfo = await getSessionFromWorkspace(cwd, execAsyncFn, sessionDbOverride);\n  return sessionInfo ? (sessionInfo as unknown)!.session : null;\n}\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace.ts",
      "line": 272,
      "content": "const sessionRecord = await (sessionDb as unknown)!.getSession(sessionId);",
      "context": "    // Query the SessionDB to get task information\n    const sessionDb = sessionDbOverride || createSessionProvider();\n    const sessionRecord = await (sessionDb as unknown)!.getSession(sessionId);\n\n    if (!sessionRecord) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace.ts",
      "line": 280,
      "content": "taskId: (sessionRecord as unknown)!.taskId,",
      "context": "    return {\n      sessionId,\n      taskId: (sessionRecord as unknown)!.taskId,\n    };\n  } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace.ts",
      "line": 362,
      "content": "return sessionInfo ? (sessionInfo as unknown)!.session : null;",
      "context": "    getCurrentSession: async (repoPath: string): Promise<string | undefined> => {\n      const sessionInfo = await getSessionFromRepo(repoPath);\n      return sessionInfo ? (sessionInfo as unknown)!.session : null;\n    },\n    getSessionFromWorkspace: async (workspacePath: string): Promise<string | undefined> => {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace.ts",
      "line": 366,
      "content": "return sessionInfo ? (sessionInfo as unknown)!.session : null;",
      "context": "    getSessionFromWorkspace: async (workspacePath: string): Promise<string | undefined> => {\n      const sessionInfo = await getSessionFromWorkspace(workspacePath);\n      return sessionInfo ? (sessionInfo as unknown)!.session : null;\n    },\n    resolveWorkspacePath: resolveWorkspacePath,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace.ts",
      "line": 389,
      "content": "session: (sessionInfo as unknown)!.session,",
      "context": "      gitRoot,\n      workspacePath,\n      session: (sessionInfo as unknown)!.session,\n      sessionDbPath: \"\", // Placeholder for session DB path\n      sessionData: {}, // Placeholder for session data",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/validationUtils.ts",
      "line": 5,
      "content": "return !(value as unknown).includes(\"\\n\");",
      "context": "    // Returns true if valid (no newlines or undefined/empty), false otherwise.\n    if (value === undefined || value === null) return true; // Allow empty/undefined descriptions\n    return !(value as unknown).includes(\"\\n\");\n  },\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/validationUtils.ts",
      "line": 11,
      "content": "if (value && (value as unknown).includes(\"\\n\")) {",
      "context": "\n  forPrompt: (value?: string): string | undefined => {\n    if (value && (value as unknown).includes(\"\\n\")) {\n      return (validateSingleLineDescription as unknown).errorMessage;\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/validationUtils.ts",
      "line": 12,
      "content": "return (validateSingleLineDescription as unknown).errorMessage;",
      "context": "  forPrompt: (value?: string): string | undefined => {\n    if (value && (value as unknown).includes(\"\\n\")) {\n      return (validateSingleLineDescription as unknown).errorMessage;\n    }\n    return undefined;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 98,
      "content": "(mockFn as unknown).mockReset();",
      "context": "    for (const mockFn of Object.values(mockSessionDB)) {\n      if (typeof mockFn === \"function\" && \"mockReset\" in mockFn) {\n        (mockFn as unknown).mockReset();\n      }\n    }",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 104,
      "content": "(mockFn as unknown).mockReset();",
      "context": "    for (const mockFn of Object.values(mockGitService)) {\n      if (typeof mockFn === \"function\" && \"mockReset\" in mockFn) {\n        (mockFn as unknown).mockReset();\n      }\n    }",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 110,
      "content": "(mockFn as unknown).mockReset();",
      "context": "    for (const mockFn of Object.values(mockTaskService)) {\n      if (typeof mockFn === \"function\" && \"mockReset\" in mockFn) {\n        (mockFn as unknown).mockReset();\n      }\n    }",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 114,
      "content": "(mockGetCurrentSession as unknown).mockReset();",
      "context": "    }\n\n    (mockGetCurrentSession as unknown).mockReset();\n\n    // Restore mock implementations after reset",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 117,
      "content": "(mockSessionDB.getSession as unknown).mockImplementation(() => ({",
      "context": "\n    // Restore mock implementations after reset\n    (mockSessionDB.getSession as unknown).mockImplementation(() => ({\n      session: \"testSession\",\n      taskId: \"#TEST_VALUE\",",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 126,
      "content": "(mockSessionDB.getSessionByTaskId as unknown).mockImplementation(() => ({",
      "context": "    }));\n\n    (mockSessionDB.getSessionByTaskId as unknown).mockImplementation(() => ({\n      session: \"task#TEST_VALUE\",\n      taskId: \"#TEST_VALUE\",",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 135,
      "content": "(mockSessionDB.getSessionWorkdir as unknown).mockImplementation(() => \"/fake/path/to/session\");",
      "context": "    }));\n\n    (mockSessionDB.getSessionWorkdir as unknown).mockImplementation(() => \"/fake/path/to/session\");\n    (mockSessionDB.listSessions as unknown).mockImplementation(() => []);\n    (mockSessionDB.addSession as unknown).mockImplementation(() => Promise.resolve());",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 136,
      "content": "(mockSessionDB.listSessions as unknown).mockImplementation(() => []);",
      "context": "\n    (mockSessionDB.getSessionWorkdir as unknown).mockImplementation(() => \"/fake/path/to/session\");\n    (mockSessionDB.listSessions as unknown).mockImplementation(() => []);\n    (mockSessionDB.addSession as unknown).mockImplementation(() => Promise.resolve());\n    (mockSessionDB.updateSession as unknown).mockImplementation(() => Promise.resolve());",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 137,
      "content": "(mockSessionDB.addSession as unknown).mockImplementation(() => Promise.resolve());",
      "context": "    (mockSessionDB.getSessionWorkdir as unknown).mockImplementation(() => \"/fake/path/to/session\");\n    (mockSessionDB.listSessions as unknown).mockImplementation(() => []);\n    (mockSessionDB.addSession as unknown).mockImplementation(() => Promise.resolve());\n    (mockSessionDB.updateSession as unknown).mockImplementation(() => Promise.resolve());\n    (mockSessionDB.deleteSession as unknown).mockImplementation(() => Promise.resolve(true));",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 138,
      "content": "(mockSessionDB.updateSession as unknown).mockImplementation(() => Promise.resolve());",
      "context": "    (mockSessionDB.listSessions as unknown).mockImplementation(() => []);\n    (mockSessionDB.addSession as unknown).mockImplementation(() => Promise.resolve());\n    (mockSessionDB.updateSession as unknown).mockImplementation(() => Promise.resolve());\n    (mockSessionDB.deleteSession as unknown).mockImplementation(() => Promise.resolve(true));\n    (mockSessionDB.getRepoPath as unknown).mockImplementation(() => \"/fake/path/to/repo\");",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 139,
      "content": "(mockSessionDB.deleteSession as unknown).mockImplementation(() => Promise.resolve(true));",
      "context": "    (mockSessionDB.addSession as unknown).mockImplementation(() => Promise.resolve());\n    (mockSessionDB.updateSession as unknown).mockImplementation(() => Promise.resolve());\n    (mockSessionDB.deleteSession as unknown).mockImplementation(() => Promise.resolve(true));\n    (mockSessionDB.getRepoPath as unknown).mockImplementation(() => \"/fake/path/to/repo\");\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 140,
      "content": "(mockSessionDB.getRepoPath as unknown).mockImplementation(() => \"/fake/path/to/repo\");",
      "context": "    (mockSessionDB.updateSession as unknown).mockImplementation(() => Promise.resolve());\n    (mockSessionDB.deleteSession as unknown).mockImplementation(() => Promise.resolve(true));\n    (mockSessionDB.getRepoPath as unknown).mockImplementation(() => \"/fake/path/to/repo\");\n\n    (mockGitService.execInRepository as unknown).mockImplementation((_path: unknown) => {",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 142,
      "content": "(mockGitService.execInRepository as unknown).mockImplementation((_path: unknown) => {",
      "context": "    (mockSessionDB.getRepoPath as unknown).mockImplementation(() => \"/fake/path/to/repo\");\n\n    (mockGitService.execInRepository as unknown).mockImplementation((_path: unknown) => {\n      if (command.includes(\"git ls-remote\")) {\n        return \"refs/heads/pr/testSession\";",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 158,
      "content": "(mockTaskService.getTaskSpecData as unknown).mockImplementation(() =>",
      "context": "    });\n\n    (mockTaskService.getTaskSpecData as unknown).mockImplementation(() =>\n      Promise.resolve(\"# Task Specification\\n\\nThis is a test task\")\n    );",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 161,
      "content": "(mockWorkspaceUtils.isSessionWorkspace as unknown).mockImplementation(() => Promise.resolve(false));",
      "context": "      Promise.resolve(\"# Task Specification\\n\\nThis is a test task\")\n    );\n    (mockWorkspaceUtils.isSessionWorkspace as unknown).mockImplementation(() => Promise.resolve(false));\n    (mockGetCurrentSession as unknown).mockImplementation(() => Promise.resolve(\"testSession\"));\n  });",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 162,
      "content": "(mockGetCurrentSession as unknown).mockImplementation(() => Promise.resolve(\"testSession\"));",
      "context": "    );\n    (mockWorkspaceUtils.isSessionWorkspace as unknown).mockImplementation(() => Promise.resolve(false));\n    (mockGetCurrentSession as unknown).mockImplementation(() => Promise.resolve(\"testSession\"));\n  });\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 181,
      "content": "expect((mockSessionDB.getSession as unknown).mock.calls.length).toBe(1);",
      "context": "    expect(result.diff).toBe(\"diff --git a/file.txt b/file.txt\\n+new line\\n-old line\");\n\n    expect((mockSessionDB.getSession as unknown).mock.calls.length).toBe(1);\n    expect((mockSessionDB.getSession as unknown).mock.calls[0][0]).toBe(\"testSession\");\n    expect((mockSessionDB.getSessionWorkdir as unknown).mock.calls.length).toBe(1);",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 182,
      "content": "expect((mockSessionDB.getSession as unknown).mock.calls[0][0]).toBe(\"testSession\");",
      "context": "\n    expect((mockSessionDB.getSession as unknown).mock.calls.length).toBe(1);\n    expect((mockSessionDB.getSession as unknown).mock.calls[0][0]).toBe(\"testSession\");\n    expect((mockSessionDB.getSessionWorkdir as unknown).mock.calls.length).toBe(1);\n    expect((mockSessionDB.getSessionWorkdir as unknown).mock.calls[0][0]).toBe(\"testSession\");",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 183,
      "content": "expect((mockSessionDB.getSessionWorkdir as unknown).mock.calls.length).toBe(1);",
      "context": "    expect((mockSessionDB.getSession as unknown).mock.calls.length).toBe(1);\n    expect((mockSessionDB.getSession as unknown).mock.calls[0][0]).toBe(\"testSession\");\n    expect((mockSessionDB.getSessionWorkdir as unknown).mock.calls.length).toBe(1);\n    expect((mockSessionDB.getSessionWorkdir as unknown).mock.calls[0][0]).toBe(\"testSession\");\n  });",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 184,
      "content": "expect((mockSessionDB.getSessionWorkdir as unknown).mock.calls[0][0]).toBe(\"testSession\");",
      "context": "    expect((mockSessionDB.getSession as unknown).mock.calls[0][0]).toBe(\"testSession\");\n    expect((mockSessionDB.getSessionWorkdir as unknown).mock.calls.length).toBe(1);\n    expect((mockSessionDB.getSessionWorkdir as unknown).mock.calls[0][0]).toBe(\"testSession\");\n  });\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 192,
      "content": "expect((mockSessionDB.getSessionByTaskId as unknown).mock.calls.length).toBe(1);",
      "context": "    expect(result._session).toBe(\"task#TEST_VALUE\");\n    expect(result.taskId).toBe(\"#TEST_VALUE\");\n    expect((mockSessionDB.getSessionByTaskId as unknown).mock.calls.length).toBe(1);\n    expect((mockSessionDB.getSessionByTaskId as unknown).mock.calls[0][0]).toBe(\"#TEST_VALUE\");\n  });",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 193,
      "content": "expect((mockSessionDB.getSessionByTaskId as unknown).mock.calls[0][0]).toBe(\"#TEST_VALUE\");",
      "context": "    expect(result.taskId).toBe(\"#TEST_VALUE\");\n    expect((mockSessionDB.getSessionByTaskId as unknown).mock.calls.length).toBe(1);\n    expect((mockSessionDB.getSessionByTaskId as unknown).mock.calls[0][0]).toBe(\"#TEST_VALUE\");\n  });\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 204,
      "content": "(mockGetCurrentSession as unknown).mockImplementationOnce(() => Promise.resolve(null));",
      "context": "\n  test(\"throws error when no session can be determined\", async () => {\n    (mockGetCurrentSession as unknown).mockImplementationOnce(() => Promise.resolve(null));\n\n    await expect(sessionReviewFromParams({}, deps)).rejects.toThrow(ValidationError);",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/session-review.test.ts",
      "line": 210,
      "content": "(mockSessionDB.getSession as unknown).mockImplementationOnce(() => null);",
      "context": "\n  test(\"throws error when session not found\", async () => {\n    (mockSessionDB.getSession as unknown).mockImplementationOnce(() => null);\n\n    await expect(sessionReviewFromParams({ _session: \"nonexistent\" }, deps)).rejects.toThrow(",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/init.ts",
      "line": 13,
      "content": "enabled: (z.boolean().optional() as unknown).default(true),",
      "context": "  mcp: z\n    .object({\n      enabled: (z.boolean().optional() as unknown).default(true),\n      transport: z.enum([\"stdio\", \"sse\", \"httpStream\"]).optional().default(\"stdio\"),\n      port: (z.number() as unknown).optional(),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/init.ts",
      "line": 15,
      "content": "port: (z.number() as unknown).optional(),",
      "context": "      enabled: (z.boolean().optional() as unknown).default(true),\n      transport: z.enum([\"stdio\", \"sse\", \"httpStream\"]).optional().default(\"stdio\"),\n      port: (z.number() as unknown).optional(),\n      host: z.string().optional(),\n    })",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/init.ts",
      "line": 19,
      "content": "mcpOnly: (z.boolean().optional() as unknown).default(false),",
      "context": "    })\n    .optional(),\n  mcpOnly: (z.boolean().optional() as unknown).default(false),\n  overwrite: (z.boolean().optional() as unknown).default(false),\n});",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/init.ts",
      "line": 20,
      "content": "overwrite: (z.boolean().optional() as unknown).default(false),",
      "context": "    .optional(),\n  mcpOnly: (z.boolean().optional() as unknown).default(false),\n  overwrite: (z.boolean().optional() as unknown).default(false),\n});\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/init.ts",
      "line": 31,
      "content": "const validatedParams = (initializeProjectParamsSchema as unknown).parse(params as unknown);",
      "context": "export async function initializeProjectFromParams(params: InitializeProjectParams): Promise<void> {\n  // Validate the parameters\n  const validatedParams = (initializeProjectParamsSchema as unknown).parse(params as unknown);\n\n  // Call the original initialization function",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/init.ts",
      "line": 139,
      "content": "if (!(fileSystem as unknown).existsSync(dirPath)) {",
      "context": "  fileSystem: FileSystem = fs\n): Promise<void> {\n  if (!(fileSystem as unknown).existsSync(dirPath)) {\n    (fileSystem as unknown).mkdirSync(dirPath, { recursive: true });\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/init.ts",
      "line": 140,
      "content": "(fileSystem as unknown).mkdirSync(dirPath, { recursive: true });",
      "context": "): Promise<void> {\n  if (!(fileSystem as unknown).existsSync(dirPath)) {\n    (fileSystem as unknown).mkdirSync(dirPath, { recursive: true });\n  }\n}",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/init.ts",
      "line": 153,
      "content": "if ((fileSystem as unknown).existsSync(filePath)) {",
      "context": "  fileSystem: FileSystem = fs\n): Promise<void> {\n  if ((fileSystem as unknown).existsSync(filePath)) {\n    if (!overwrite) {\n      throw new Error(`File already exists: ${filePath}`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/init.ts",
      "line": 165,
      "content": "(fileSystem as unknown).writeFileSync(filePath, content);",
      "context": "\n  // Write the file\n  (fileSystem as unknown).writeFileSync(filePath, content);\n}\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/init.ts",
      "line": 499,
      "content": "if ((fileSystem as unknown).existsSync(tasksFilePath) && !overwrite) {",
      "context": "\n      // Check if files exist\n      if ((fileSystem as unknown).existsSync(tasksFilePath) && !overwrite) {\n        throw new Error(`File already exists: ${tasksFilePath}`);\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/init.ts",
      "line": 504,
      "content": "if (!(fileSystem as unknown).existsSync(tasksDirPath)) {",
      "context": "\n      // Create directories\n      if (!(fileSystem as unknown).existsSync(tasksDirPath)) {\n        (fileSystem as unknown).mkdirSync(tasksDirPath, { recursive: true });\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/init.ts",
      "line": 505,
      "content": "(fileSystem as unknown).mkdirSync(tasksDirPath, { recursive: true });",
      "context": "      // Create directories\n      if (!(fileSystem as unknown).existsSync(tasksDirPath)) {\n        (fileSystem as unknown).mkdirSync(tasksDirPath, { recursive: true });\n      }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/init.ts",
      "line": 509,
      "content": "(fileSystem as unknown).writeFileSync(tasksFilePath, \"# Minsky Tasks\\n\\n- [ ] Example task\\n\");",
      "context": "\n      // Create tasks.md file\n      (fileSystem as unknown).writeFileSync(tasksFilePath, \"# Minsky Tasks\\n\\n- [ ] Example task\\n\");\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/init.ts",
      "line": 516,
      "content": "if (!(fileSystem as unknown).existsSync(rulesDirPath)) {",
      "context": "\n    // Create directories for rules\n    if (!(fileSystem as unknown).existsSync(rulesDirPath)) {\n      (fileSystem as unknown).mkdirSync(rulesDirPath, { recursive: true });\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/init.ts",
      "line": 517,
      "content": "(fileSystem as unknown).mkdirSync(rulesDirPath, { recursive: true });",
      "context": "    // Create directories for rules\n    if (!(fileSystem as unknown).existsSync(rulesDirPath)) {\n      (fileSystem as unknown).mkdirSync(rulesDirPath, { recursive: true });\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/init.ts",
      "line": 525,
      "content": "if ((fileSystem as unknown).existsSync(workflowRulePath) && !overwrite) {",
      "context": "      const indexRulePath = path.join(rulesDirPath, \"index.mdc\");\n\n      if ((fileSystem as unknown).existsSync(workflowRulePath) && !overwrite) {\n        throw new Error(`File already exists: ${workflowRulePath}`);\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/init.ts",
      "line": 529,
      "content": "(fileSystem as unknown).writeFileSync(workflowRulePath, getMinskyRuleContent());",
      "context": "      }\n\n      (fileSystem as unknown).writeFileSync(workflowRulePath, getMinskyRuleContent());\n      (fileSystem as unknown).writeFileSync(indexRulePath, getRulesIndexContent());\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/init.ts",
      "line": 530,
      "content": "(fileSystem as unknown).writeFileSync(indexRulePath, getRulesIndexContent());",
      "context": "\n      (fileSystem as unknown).writeFileSync(workflowRulePath, getMinskyRuleContent());\n      (fileSystem as unknown).writeFileSync(indexRulePath, getRulesIndexContent());\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/init.ts",
      "line": 539,
      "content": "if (!(fileSystem as unknown).existsSync(cursorDirPath)) {",
      "context": "      // Create .cursor directory if it doesn't exist (even for generic rule format)\n      const cursorDirPath = path.join(repoPath, \".cursor\");\n      if (!(fileSystem as unknown).existsSync(cursorDirPath)) {\n        (fileSystem as unknown).mkdirSync(cursorDirPath, { recursive: true });\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/init.ts",
      "line": 540,
      "content": "(fileSystem as unknown).mkdirSync(cursorDirPath, { recursive: true });",
      "context": "      const cursorDirPath = path.join(repoPath, \".cursor\");\n      if (!(fileSystem as unknown).existsSync(cursorDirPath)) {\n        (fileSystem as unknown).mkdirSync(cursorDirPath, { recursive: true });\n      }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/init.ts",
      "line": 543,
      "content": "if ((fileSystem as unknown).existsSync(mcpConfigPath) && !overwrite) {",
      "context": "      }\n\n      if ((fileSystem as unknown).existsSync(mcpConfigPath) && !overwrite) {\n        throw new Error(`File already exists: ${mcpConfigPath}`);\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/init.ts",
      "line": 548,
      "content": "(fileSystem as unknown).writeFileSync(mcpConfigPath, getMCPConfigContent(mcp));",
      "context": "\n      // Create MCP config file\n      (fileSystem as unknown).writeFileSync(mcpConfigPath, getMCPConfigContent(mcp));\n\n      // Create MCP usage rule",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/init.ts",
      "line": 552,
      "content": "if (!(fileSystem as unknown).existsSync(mcpRuleFilePath) || overwrite) {",
      "context": "      // Create MCP usage rule\n      const mcpRuleFilePath = path.join(rulesDirPath, \"mcp-usage.mdc\");\n      if (!(fileSystem as unknown).existsSync(mcpRuleFilePath) || overwrite) {\n        (fileSystem as unknown).writeFileSync(mcpRuleFilePath, getMCPRuleContent());\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/init.ts",
      "line": 553,
      "content": "(fileSystem as unknown).writeFileSync(mcpRuleFilePath, getMCPRuleContent());",
      "context": "      const mcpRuleFilePath = path.join(rulesDirPath, \"mcp-usage.mdc\");\n      if (!(fileSystem as unknown).existsSync(mcpRuleFilePath) || overwrite) {\n        (fileSystem as unknown).writeFileSync(mcpRuleFilePath, getMCPRuleContent());\n      }\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 243,
      "content": "switch ((config as unknown).type) {",
      "context": "  config: RepositoryConfig\n): Promise<RepositoryBackend> {\n  switch ((config as unknown).type) {\n  case (RepositoryBackendType as unknown).LOCAL: {\n    const { LocalGitBackend } = await import(\"./localGitBackend.js\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 244,
      "content": "case (RepositoryBackendType as unknown).LOCAL: {",
      "context": "): Promise<RepositoryBackend> {\n  switch ((config as unknown).type) {\n  case (RepositoryBackendType as unknown).LOCAL: {\n    const { LocalGitBackend } = await import(\"./localGitBackend.js\");\n    return new LocalGitBackend(config as unknown);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 246,
      "content": "return new LocalGitBackend(config as unknown);",
      "context": "  case (RepositoryBackendType as unknown).LOCAL: {\n    const { LocalGitBackend } = await import(\"./localGitBackend.js\");\n    return new LocalGitBackend(config as unknown);\n  }\n  case (RepositoryBackendType as unknown).REMOTE: {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 248,
      "content": "case (RepositoryBackendType as unknown).REMOTE: {",
      "context": "    return new LocalGitBackend(config as unknown);\n  }\n  case (RepositoryBackendType as unknown).REMOTE: {\n    const { RemoteGitBackend } = await import(\"./remoteGitBackend.js\");\n    return new RemoteGitBackend(config as unknown);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 250,
      "content": "return new RemoteGitBackend(config as unknown);",
      "context": "  case (RepositoryBackendType as unknown).REMOTE: {\n    const { RemoteGitBackend } = await import(\"./remoteGitBackend.js\");\n    return new RemoteGitBackend(config as unknown);\n  }\n  case (RepositoryBackendType as unknown).GITHUB: {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 252,
      "content": "case (RepositoryBackendType as unknown).GITHUB: {",
      "context": "    return new RemoteGitBackend(config as unknown);\n  }\n  case (RepositoryBackendType as unknown).GITHUB: {\n    const { GitService } = await import(\"./git.js\");\n    const gitService = new GitService();",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 259,
      "content": "const workdir = (gitService as unknown).getSessionWorkdir(session);",
      "context": "    return {\n      clone: async (session: string): Promise<CloneResult> => {\n        const workdir = (gitService as unknown).getSessionWorkdir(session);\n        return await (gitService as unknown).clone({\n          repoUrl: (config as unknown).url || \"\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 260,
      "content": "return await (gitService as unknown).clone({",
      "context": "      clone: async (session: string): Promise<CloneResult> => {\n        const workdir = (gitService as unknown).getSessionWorkdir(session);\n        return await (gitService as unknown).clone({\n          repoUrl: (config as unknown).url || \"\",\n          session,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 261,
      "content": "repoUrl: (config as unknown).url || \"\",",
      "context": "        const workdir = (gitService as unknown).getSessionWorkdir(session);\n        return await (gitService as unknown).clone({\n          repoUrl: (config as unknown).url || \"\",\n          session,\n          workdir,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 270,
      "content": "const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();",
      "context": "        // If no session is provided, work with the most recent session\n        if (!session) {\n          const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();\n          const sessions = await (sessionDb as unknown).listSessions();\n          const repoName = normalizeRepoName((config as unknown).url || \"\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 271,
      "content": "const sessions = await (sessionDb as unknown).listSessions();",
      "context": "        if (!session) {\n          const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();\n          const sessions = await (sessionDb as unknown).listSessions();\n          const repoName = normalizeRepoName((config as unknown).url || \"\");\n          const repoSession = sessions.find((s) => (s as unknown).repoName === repoName);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 272,
      "content": "const repoName = normalizeRepoName((config as unknown).url || \"\");",
      "context": "          const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();\n          const sessions = await (sessionDb as unknown).listSessions();\n          const repoName = normalizeRepoName((config as unknown).url || \"\");\n          const repoSession = sessions.find((s) => (s as unknown).repoName === repoName);\n          if (!repoSession) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 273,
      "content": "const repoSession = sessions.find((s) => (s as unknown).repoName === repoName);",
      "context": "          const sessions = await (sessionDb as unknown).listSessions();\n          const repoName = normalizeRepoName((config as unknown).url || \"\");\n          const repoSession = sessions.find((s) => (s as unknown).repoName === repoName);\n          if (!repoSession) {\n            throw new Error(\"No session found for this repository\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 277,
      "content": "session = (repoSession as unknown).session;",
      "context": "            throw new Error(\"No session found for this repository\");\n          }\n          session = (repoSession as unknown).session;\n        }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 280,
      "content": "const repoName = normalizeRepoName((config as unknown).url || \"\");",
      "context": "        }\n\n        const repoName = normalizeRepoName((config as unknown).url || \"\");\n        const workdir = (gitService as unknown).getSessionWorkdir(session);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 281,
      "content": "const workdir = (gitService as unknown).getSessionWorkdir(session);",
      "context": "\n        const repoName = normalizeRepoName((config as unknown).url || \"\");\n        const workdir = (gitService as unknown).getSessionWorkdir(session);\n\n        const gitStatus = await (gitService as unknown).getStatus(workdir);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 283,
      "content": "const gitStatus = await (gitService as unknown).getStatus(workdir);",
      "context": "        const workdir = (gitService as unknown).getSessionWorkdir(session);\n\n        const gitStatus = await (gitService as unknown).getStatus(workdir);\n\n        // Get additional status info directly via Git commands",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 288,
      "content": ").promisify(((await import(\"child_process\")) as unknown).exec)(",
      "context": "        const { stdout: branchOutput } = await (\n          await import(\"util\")\n        ).promisify(((await import(\"child_process\")) as unknown).exec)(\n          `git -C ${workdir} rev-parse --abbrev-ref HEAD`\n        );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 314,
      "content": "const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();",
      "context": "        // If no session is provided, work with the most recent session\n        if (!session) {\n          const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();\n          const sessions = await (sessionDb as unknown).listSessions();\n          const repoName = normalizeRepoName((config as unknown).url || \"\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 315,
      "content": "const sessions = await (sessionDb as unknown).listSessions();",
      "context": "        if (!session) {\n          const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();\n          const sessions = await (sessionDb as unknown).listSessions();\n          const repoName = normalizeRepoName((config as unknown).url || \"\");\n          const repoSession = sessions.find((s) => (s as unknown).repoName === repoName);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 316,
      "content": "const repoName = normalizeRepoName((config as unknown).url || \"\");",
      "context": "          const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();\n          const sessions = await (sessionDb as unknown).listSessions();\n          const repoName = normalizeRepoName((config as unknown).url || \"\");\n          const repoSession = sessions.find((s) => (s as unknown).repoName === repoName);\n          if (!repoSession) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 317,
      "content": "const repoSession = sessions.find((s) => (s as unknown).repoName === repoName);",
      "context": "          const sessions = await (sessionDb as unknown).listSessions();\n          const repoName = normalizeRepoName((config as unknown).url || \"\");\n          const repoSession = sessions.find((s) => (s as unknown).repoName === repoName);\n          if (!repoSession) {\n            throw new Error(\"No session found for this repository\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 321,
      "content": "session = (repoSession as unknown).session;",
      "context": "            throw new Error(\"No session found for this repository\");\n          }\n          session = (repoSession as unknown).session;\n        }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 324,
      "content": "const repoName = normalizeRepoName((config as unknown).url || \"\");",
      "context": "        }\n\n        const repoName = normalizeRepoName((config as unknown).url || \"\");\n        return (gitService as unknown).getSessionWorkdir(session);\n      },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 325,
      "content": "return (gitService as unknown).getSessionWorkdir(session);",
      "context": "\n        const repoName = normalizeRepoName((config as unknown).url || \"\");\n        return (gitService as unknown).getSessionWorkdir(session);\n      },\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 330,
      "content": "if (!(config as unknown).url) {",
      "context": "      validate: async (): Promise<ValidationResult> => {\n        // Basic validation of the GitHub configuration\n        if (!(config as unknown).url) {\n          return {\n            valid: false,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 348,
      "content": "const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();",
      "context": "      push: async (branch?: string): Promise<void> => {\n        // Find an existing session for this repository\n        const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();\n        const sessions = await (sessionDb as unknown).listSessions();\n        const repoName = normalizeRepoName((config as unknown).url || \"\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 349,
      "content": "const sessions = await (sessionDb as unknown).listSessions();",
      "context": "        // Find an existing session for this repository\n        const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();\n        const sessions = await (sessionDb as unknown).listSessions();\n        const repoName = normalizeRepoName((config as unknown).url || \"\");\n        const repoSession = sessions.find((s) => (s as unknown).repoName === repoName);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 350,
      "content": "const repoName = normalizeRepoName((config as unknown).url || \"\");",
      "context": "        const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();\n        const sessions = await (sessionDb as unknown).listSessions();\n        const repoName = normalizeRepoName((config as unknown).url || \"\");\n        const repoSession = sessions.find((s) => (s as unknown).repoName === repoName);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 351,
      "content": "const repoSession = sessions.find((s) => (s as unknown).repoName === repoName);",
      "context": "        const sessions = await (sessionDb as unknown).listSessions();\n        const repoName = normalizeRepoName((config as unknown).url || \"\");\n        const repoSession = sessions.find((s) => (s as unknown).repoName === repoName);\n\n        if (!repoSession) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 357,
      "content": "const sessionName = (repoSession as unknown).session;",
      "context": "        }\n\n        const sessionName = (repoSession as unknown).session;\n        const workdir = (gitService as unknown).getSessionWorkdir(sessionName);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 358,
      "content": "const workdir = (gitService as unknown).getSessionWorkdir(sessionName);",
      "context": "\n        const sessionName = (repoSession as unknown).session;\n        const workdir = (gitService as unknown).getSessionWorkdir(sessionName);\n\n        await gitService.push({",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 368,
      "content": "const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();",
      "context": "      pull: async (branch?: string): Promise<void> => {\n        // Find an existing session for this repository\n        const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();\n        const sessions = await (sessionDb as unknown).listSessions();\n        const repoName = normalizeRepoName((config as unknown).url || \"\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 369,
      "content": "const sessions = await (sessionDb as unknown).listSessions();",
      "context": "        // Find an existing session for this repository\n        const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();\n        const sessions = await (sessionDb as unknown).listSessions();\n        const repoName = normalizeRepoName((config as unknown).url || \"\");\n        const repoSession = sessions.find((s) => (s as unknown).repoName === repoName);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 370,
      "content": "const repoName = normalizeRepoName((config as unknown).url || \"\");",
      "context": "        const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();\n        const sessions = await (sessionDb as unknown).listSessions();\n        const repoName = normalizeRepoName((config as unknown).url || \"\");\n        const repoSession = sessions.find((s) => (s as unknown).repoName === repoName);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 371,
      "content": "const repoSession = sessions.find((s) => (s as unknown).repoName === repoName);",
      "context": "        const sessions = await (sessionDb as unknown).listSessions();\n        const repoName = normalizeRepoName((config as unknown).url || \"\");\n        const repoSession = sessions.find((s) => (s as unknown).repoName === repoName);\n\n        if (!repoSession) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 377,
      "content": "const workdir = (gitService as unknown).getSessionWorkdir((repoSession as unknown).session);",
      "context": "        }\n\n        const workdir = (gitService as unknown).getSessionWorkdir((repoSession as unknown).session);\n        await (gitService as unknown).pullLatest(workdir);\n      },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 378,
      "content": "await (gitService as unknown).pullLatest(workdir);",
      "context": "\n        const workdir = (gitService as unknown).getSessionWorkdir((repoSession as unknown).session);\n        await (gitService as unknown).pullLatest(workdir);\n      },\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 382,
      "content": "const repoName = normalizeRepoName((config as unknown).url || \"\");",
      "context": "\n      branch: async (session: string, name: string): Promise<BranchResult> => {\n        const repoName = normalizeRepoName((config as unknown).url || \"\");\n        const workdir = (gitService as unknown).getSessionWorkdir(session);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 383,
      "content": "const workdir = (gitService as unknown).getSessionWorkdir(session);",
      "context": "      branch: async (session: string, name: string): Promise<BranchResult> => {\n        const repoName = normalizeRepoName((config as unknown).url || \"\");\n        const workdir = (gitService as unknown).getSessionWorkdir(session);\n\n        // Execute branch creation via Git command",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 386,
      "content": "await (await import(\"util\")).promisify(((await import(\"child_process\")) as unknown).exec)(",
      "context": "\n        // Execute branch creation via Git command\n        await (await import(\"util\")).promisify(((await import(\"child_process\")) as unknown).exec)(\n          `git -C ${workdir} checkout -b ${name}`\n        );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 398,
      "content": "const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();",
      "context": "      checkout: async (branch: string): Promise<void> => {\n        // Find an existing session for this repository\n        const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();\n        const sessions = await (sessionDb as unknown).listSessions();\n        const repoName = normalizeRepoName((config as unknown).url || \"\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 399,
      "content": "const sessions = await (sessionDb as unknown).listSessions();",
      "context": "        // Find an existing session for this repository\n        const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();\n        const sessions = await (sessionDb as unknown).listSessions();\n        const repoName = normalizeRepoName((config as unknown).url || \"\");\n        const repoSession = sessions.find((s) => (s as unknown).repoName === repoName);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 400,
      "content": "const repoName = normalizeRepoName((config as unknown).url || \"\");",
      "context": "        const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();\n        const sessions = await (sessionDb as unknown).listSessions();\n        const repoName = normalizeRepoName((config as unknown).url || \"\");\n        const repoSession = sessions.find((s) => (s as unknown).repoName === repoName);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 401,
      "content": "const repoSession = sessions.find((s) => (s as unknown).repoName === repoName);",
      "context": "        const sessions = await (sessionDb as unknown).listSessions();\n        const repoName = normalizeRepoName((config as unknown).url || \"\");\n        const repoSession = sessions.find((s) => (s as unknown).repoName === repoName);\n\n        if (!repoSession) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 407,
      "content": "const workdir = (gitService as unknown).getSessionWorkdir((repoSession as unknown).session);",
      "context": "        }\n\n        const workdir = (gitService as unknown).getSessionWorkdir((repoSession as unknown).session);\n\n        // Execute checkout via Git command",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 410,
      "content": "await (await import(\"util\")).promisify(((await import(\"child_process\")) as unknown).exec)(",
      "context": "\n        // Execute checkout via Git command\n        await (await import(\"util\")).promisify(((await import(\"child_process\")) as unknown).exec)(\n          `git -C ${workdir} checkout ${branch}`\n        );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 417,
      "content": "type: (RepositoryBackendType as unknown).GITHUB,",
      "context": "      getConfig: (): RepositoryConfig => {\n        return {\n          type: (RepositoryBackendType as unknown).GITHUB,\n          url: (config as unknown).url,\n          owner: (config as GitHubConfig).owner,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 418,
      "content": "url: (config as unknown).url,",
      "context": "        return {\n          type: (RepositoryBackendType as unknown).GITHUB,\n          url: (config as unknown).url,\n          owner: (config as GitHubConfig).owner,\n          repo: (config as GitHubConfig).repo,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 427,
      "content": "throw new Error(`Unsupported repository backend type: ${(config as unknown).type}`);",
      "context": "  }\n  default: {\n    throw new Error(`Unsupported repository backend type: ${(config as unknown).type}`);\n  }\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 452,
      "content": "let backendType = (RepositoryBackendType as unknown).LOCAL;",
      "context": "\n  let repositoryUri: string | undefined;\n  let backendType = (RepositoryBackendType as unknown).LOCAL;\n\n  // 1. Try to resolve from explicit URI",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 460,
      "content": "const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();",
      "context": "  // 2. Try to resolve from session\n  else if (session) {\n    const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();\n    const sessionRecord = await (sessionDb as unknown).getSession(session);\n    if (!sessionRecord) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 461,
      "content": "const sessionRecord = await (sessionDb as unknown).getSession(session);",
      "context": "  else if (session) {\n    const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();\n    const sessionRecord = await (sessionDb as unknown).getSession(session);\n    if (!sessionRecord) {\n      throw new ValidationError(`Session not found: ${session}`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 465,
      "content": "repositoryUri = (sessionRecord as unknown).repoUrl;",
      "context": "      throw new ValidationError(`Session not found: ${session}`);\n    }\n    repositoryUri = (sessionRecord as unknown).repoUrl;\n    backendType =\n      ((sessionRecord as unknown).backendType as RepositoryBackendType) || (RepositoryBackendType as unknown).LOCAL;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 467,
      "content": "((sessionRecord as unknown).backendType as RepositoryBackendType) || (RepositoryBackendType as unknown).LOCAL;",
      "context": "    repositoryUri = (sessionRecord as unknown).repoUrl;\n    backendType =\n      ((sessionRecord as unknown).backendType as RepositoryBackendType) || (RepositoryBackendType as unknown).LOCAL;\n  }\n  // 3. Try to resolve from task ID",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 472,
      "content": "const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();",
      "context": "  else if (taskId) {\n    const normalizedTaskId = taskId.startsWith(\"#\") ? taskId : `#${taskId}`;\n    const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();\n    const sessionRecord = await (sessionDb as unknown).getSessionByTaskId(normalizedTaskId);\n    if (!sessionRecord) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 473,
      "content": "const sessionRecord = await (sessionDb as unknown).getSessionByTaskId(normalizedTaskId);",
      "context": "    const normalizedTaskId = taskId.startsWith(\"#\") ? taskId : `#${taskId}`;\n    const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();\n    const sessionRecord = await (sessionDb as unknown).getSessionByTaskId(normalizedTaskId);\n    if (!sessionRecord) {\n      throw new ValidationError(`No session found for task: ${taskId}`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 477,
      "content": "repositoryUri = (sessionRecord as unknown).repoUrl;",
      "context": "      throw new ValidationError(`No session found for task: ${taskId}`);\n    }\n    repositoryUri = (sessionRecord as unknown).repoUrl;\n    backendType =\n      ((sessionRecord as unknown).backendType as RepositoryBackendType) || (RepositoryBackendType as unknown).LOCAL;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 479,
      "content": "((sessionRecord as unknown).backendType as RepositoryBackendType) || (RepositoryBackendType as unknown).LOCAL;",
      "context": "    repositoryUri = (sessionRecord as unknown).repoUrl;\n    backendType =\n      ((sessionRecord as unknown).backendType as RepositoryBackendType) || (RepositoryBackendType as unknown).LOCAL;\n  }\n  // 4. Try auto-detection from current directory",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 503,
      "content": "if ((normalized as unknown).isLocal) {",
      "context": "\n    // Determine backend type based on URI format\n    if ((normalized as unknown).isLocal) {\n      backendType = (RepositoryBackendType as unknown).LOCAL;\n    } else {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 504,
      "content": "backendType = (RepositoryBackendType as unknown).LOCAL;",
      "context": "    // Determine backend type based on URI format\n    if ((normalized as unknown).isLocal) {\n      backendType = (RepositoryBackendType as unknown).LOCAL;\n    } else {\n      // Default to GITHUB for remote repositories unless specified otherwise",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 507,
      "content": "if (backendType === (RepositoryBackendType as unknown).LOCAL) {",
      "context": "    } else {\n      // Default to GITHUB for remote repositories unless specified otherwise\n      if (backendType === (RepositoryBackendType as unknown).LOCAL) {\n        backendType = (RepositoryBackendType as unknown).GITHUB;\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 508,
      "content": "backendType = (RepositoryBackendType as unknown).GITHUB;",
      "context": "      // Default to GITHUB for remote repositories unless specified otherwise\n      if (backendType === (RepositoryBackendType as unknown).LOCAL) {\n        backendType = (RepositoryBackendType as unknown).GITHUB;\n      }\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 514,
      "content": "if ((normalized as unknown).isLocal) {",
      "context": "    // For local repositories, extract the path\n    let path: string | undefined;\n    if ((normalized as unknown).isLocal) {\n      path =\n        (normalized as unknown).format === UriFormat.FILE",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 516,
      "content": "(normalized as unknown).format === UriFormat.FILE",
      "context": "    if ((normalized as unknown).isLocal) {\n      path =\n        (normalized as unknown).format === UriFormat.FILE\n          ? (normalized.uri as unknown).replace(/^file:\\/\\//, \"\")\n          : (normalized as unknown).uri;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 517,
      "content": "? (normalized.uri as unknown).replace(/^file:\\/\\//, \"\")",
      "context": "      path =\n        (normalized as unknown).format === UriFormat.FILE\n          ? (normalized.uri as unknown).replace(/^file:\\/\\//, \"\")\n          : (normalized as unknown).uri;\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 518,
      "content": ": (normalized as unknown).uri;",
      "context": "        (normalized as unknown).format === UriFormat.FILE\n          ? (normalized.uri as unknown).replace(/^file:\\/\\//, \"\")\n          : (normalized as unknown).uri;\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 522,
      "content": "uri: (normalized as unknown).uri,",
      "context": "\n    return {\n      uri: (normalized as unknown).uri,\n      name: (normalized as unknown).name,\n      isLocal: (normalized as unknown).isLocal,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 523,
      "content": "name: (normalized as unknown).name,",
      "context": "    return {\n      uri: (normalized as unknown).uri,\n      name: (normalized as unknown).name,\n      isLocal: (normalized as unknown).isLocal,\n      path,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 524,
      "content": "isLocal: (normalized as unknown).isLocal,",
      "context": "      uri: (normalized as unknown).uri,\n      name: (normalized as unknown).name,\n      isLocal: (normalized as unknown).isLocal,\n      path,\n      backendType,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 527,
      "content": "format: (normalized as unknown).format,",
      "context": "      path,\n      backendType,\n      format: (normalized as unknown).format,\n    };\n  } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 549,
      "content": "uri: (options as unknown).repo,",
      "context": "  try {\n    const repository = await resolveRepository({\n      uri: (options as unknown).repo,\n      session: (options as unknown).session,\n      autoDetect: true,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 550,
      "content": "session: (options as unknown).session,",
      "context": "    const repository = await resolveRepository({\n      uri: (options as unknown).repo,\n      session: (options as unknown).session,\n      autoDetect: true,\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 554,
      "content": "if ((repository as unknown).isLocal) {",
      "context": "    });\n\n    if ((repository as unknown).isLocal) {\n      return (repository as unknown).path || \"\";\n    } else {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 555,
      "content": "return (repository as unknown).path || \"\";",
      "context": "\n    if ((repository as unknown).isLocal) {\n      return (repository as unknown).path || \"\";\n    } else {\n      // For backward compatibility, return the URI for remote repositories",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 558,
      "content": "return (repository as unknown).uri;",
      "context": "    } else {\n      // For backward compatibility, return the URI for remote repositories\n      return (repository as unknown).uri;\n    }\n  } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repo-utils.ts",
      "line": 39,
      "content": "if ((options as unknown).repo) {",
      "context": "  };\n\n  if ((options as unknown).repo) {\n    return (options as unknown).repo;\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repo-utils.ts",
      "line": 40,
      "content": "return (options as unknown).repo;",
      "context": "\n  if ((options as unknown).repo) {\n    return (options as unknown).repo;\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repo-utils.ts",
      "line": 43,
      "content": "if ((options as unknown).session) {",
      "context": "  }\n\n  if ((options as unknown).session) {\n    const record = await (deps.sessionProvider as unknown).getSession((options as unknown).session);\n    if (!record) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repo-utils.ts",
      "line": 44,
      "content": "const record = await (deps.sessionProvider as unknown).getSession((options as unknown).session);",
      "context": "\n  if ((options as unknown).session) {\n    const record = await (deps.sessionProvider as unknown).getSession((options as unknown).session);\n    if (!record) {\n      throw new Error(`Session '${(options as unknown).session}' not found.`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repo-utils.ts",
      "line": 46,
      "content": "throw new Error(`Session '${(options as unknown).session}' not found.`);",
      "context": "    const record = await (deps.sessionProvider as unknown).getSession((options as unknown).session);\n    if (!record) {\n      throw new Error(`Session '${(options as unknown).session}' not found.`);\n    }\n    return (record as unknown).repoUrl;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repo-utils.ts",
      "line": 48,
      "content": "return (record as unknown).repoUrl;",
      "context": "      throw new Error(`Session '${(options as unknown).session}' not found.`);\n    }\n    return (record as unknown).repoUrl;\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repo-utils.ts",
      "line": 53,
      "content": "const { stdout } = await (deps as unknown).execCwd(\"git rev-parse --show-toplevel\");",
      "context": "  // Fallback: use current git repo\n  try {\n    const { stdout } = await (deps as unknown).execCwd(\"git rev-parse --show-toplevel\");\n    return stdout.trim();\n  } catch (_error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repo-utils.ts",
      "line": 57,
      "content": "return (deps as unknown).getCurrentDirectory();",
      "context": "  } catch (_error) {\n    // If git command fails, fall back to process.cwd()\n    return (deps as unknown).getCurrentDirectory();\n  }\n}",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 69,
      "content": "gitService: mockGitService as unknown,",
      "context": "      { _session: \"test-session\" },\n      {\n        gitService: mockGitService as unknown,\n        taskService: mockTaskService as unknown,\n        sessionDB: mockSessionDB as unknown,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 70,
      "content": "taskService: mockTaskService as unknown,",
      "context": "      {\n        gitService: mockGitService as unknown,\n        taskService: mockTaskService as unknown,\n        sessionDB: mockSessionDB as unknown,\n        workspaceUtils: WorkspaceUtils,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 71,
      "content": "sessionDB: mockSessionDB as unknown,",
      "context": "        gitService: mockGitService as unknown,\n        taskService: mockTaskService as unknown,\n        sessionDB: mockSessionDB as unknown,\n        workspaceUtils: WorkspaceUtils,\n      }",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 97,
      "content": "gitService: mockGitService as unknown,",
      "context": "        {},\n        {\n          gitService: mockGitService as unknown,\n          taskService: mockTaskService as unknown,\n          sessionDB: mockSessionDB as unknown,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 98,
      "content": "taskService: mockTaskService as unknown,",
      "context": "        {\n          gitService: mockGitService as unknown,\n          taskService: mockTaskService as unknown,\n          sessionDB: mockSessionDB as unknown,\n          workspaceUtils: WorkspaceUtils,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 99,
      "content": "sessionDB: mockSessionDB as unknown,",
      "context": "          gitService: mockGitService as unknown,\n          taskService: mockTaskService as unknown,\n          sessionDB: mockSessionDB as unknown,\n          workspaceUtils: WorkspaceUtils,\n        }",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 120,
      "content": "gitService: mockGitService as unknown,",
      "context": "        { _session: \"non-existent-session\" },\n        {\n          gitService: mockGitService as unknown,\n          taskService: mockTaskService as unknown,\n          sessionDB: mockSessionDBWithNull as unknown,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 121,
      "content": "taskService: mockTaskService as unknown,",
      "context": "        {\n          gitService: mockGitService as unknown,\n          taskService: mockTaskService as unknown,\n          sessionDB: mockSessionDBWithNull as unknown,\n          workspaceUtils: WorkspaceUtils,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 122,
      "content": "sessionDB: mockSessionDBWithNull as unknown,",
      "context": "          gitService: mockGitService as unknown,\n          taskService: mockTaskService as unknown,\n          sessionDB: mockSessionDBWithNull as unknown,\n          workspaceUtils: WorkspaceUtils,\n        }",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 143,
      "content": "gitService: mockGitServiceWithError as unknown,",
      "context": "        { _session: \"test-session\" },\n        {\n          gitService: mockGitServiceWithError as unknown,\n          taskService: mockTaskService as unknown,\n          sessionDB: mockSessionDB as unknown,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 144,
      "content": "taskService: mockTaskService as unknown,",
      "context": "        {\n          gitService: mockGitServiceWithError as unknown,\n          taskService: mockTaskService as unknown,\n          sessionDB: mockSessionDB as unknown,\n          workspaceUtils: WorkspaceUtils,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 145,
      "content": "sessionDB: mockSessionDB as unknown,",
      "context": "          gitService: mockGitServiceWithError as unknown,\n          taskService: mockTaskService as unknown,\n          sessionDB: mockSessionDB as unknown,\n          workspaceUtils: WorkspaceUtils,\n        }",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/schemas/git.ts",
      "line": 24,
      "content": "}) as unknown).merge(commonCommandOptionsSchema);",
      "context": "    branch: z.string().optional().describe(\"Branch to checkout after cloning\"),\n    depth: z.number().optional().describe(\"Create a shallow clone with specified depth\"),\n  }) as unknown).merge(commonCommandOptionsSchema);\n\n/**",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/git.ts",
      "line": 38,
      "content": "}) as unknown).merge(commonCommandOptionsSchema);",
      "context": "    name: z.string().min(1).describe(\"Name of the _branch to create\"),\n    repo: repoPathSchema.optional().describe(\"Path to the git repository\"),\n  }) as unknown).merge(commonCommandOptionsSchema);\n\n/**",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/git.ts",
      "line": 49,
      "content": "...(commonRepoSchema as unknown).shape,",
      "context": " */\nexport const gitCommonOptionsSchema = z.object({\n  ...(commonRepoSchema as unknown).shape,\n  branch: z.string().optional().describe(\"Branch name\"),\n  remote: z.string().optional().describe(\"Remote name\"),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/git.ts",
      "line": 57,
      "content": "export const createPrParamsSchema = (gitCommonOptionsSchema as unknown).extend({",
      "context": " * PR Command parameters schema\n */\nexport const createPrParamsSchema = (gitCommonOptionsSchema as unknown).extend({\n  debug: (z.boolean().optional() as unknown).describe(\"Enable debug logging\"),\n  noStatusUpdate: (z.boolean().optional() as unknown).describe(\"Skip updating task status\"),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/git.ts",
      "line": 58,
      "content": "debug: (z.boolean().optional() as unknown).describe(\"Enable debug logging\"),",
      "context": " */\nexport const createPrParamsSchema = (gitCommonOptionsSchema as unknown).extend({\n  debug: (z.boolean().optional() as unknown).describe(\"Enable debug logging\"),\n  noStatusUpdate: (z.boolean().optional() as unknown).describe(\"Skip updating task status\"),\n  taskId: (taskIdSchema.optional() as unknown).describe(\"Task ID associated with this PR\"),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/git.ts",
      "line": 59,
      "content": "noStatusUpdate: (z.boolean().optional() as unknown).describe(\"Skip updating task status\"),",
      "context": "export const createPrParamsSchema = (gitCommonOptionsSchema as unknown).extend({\n  debug: (z.boolean().optional() as unknown).describe(\"Enable debug logging\"),\n  noStatusUpdate: (z.boolean().optional() as unknown).describe(\"Skip updating task status\"),\n  taskId: (taskIdSchema.optional() as unknown).describe(\"Task ID associated with this PR\"),\n  json: (z.boolean().optional() as unknown).describe(\"Return output as JSON\"),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/git.ts",
      "line": 60,
      "content": "taskId: (taskIdSchema.optional() as unknown).describe(\"Task ID associated with this PR\"),",
      "context": "  debug: (z.boolean().optional() as unknown).describe(\"Enable debug logging\"),\n  noStatusUpdate: (z.boolean().optional() as unknown).describe(\"Skip updating task status\"),\n  taskId: (taskIdSchema.optional() as unknown).describe(\"Task ID associated with this PR\"),\n  json: (z.boolean().optional() as unknown).describe(\"Return output as JSON\"),\n});",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/git.ts",
      "line": 61,
      "content": "json: (z.boolean().optional() as unknown).describe(\"Return output as JSON\"),",
      "context": "  noStatusUpdate: (z.boolean().optional() as unknown).describe(\"Skip updating task status\"),\n  taskId: (taskIdSchema.optional() as unknown).describe(\"Task ID associated with this PR\"),\n  json: (z.boolean().optional() as unknown).describe(\"Return output as JSON\"),\n});\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/git.ts",
      "line": 69,
      "content": "export const commitChangesParamsSchema = (gitCommonOptionsSchema as unknown).extend({",
      "context": " * Commit command parameters schema\n */\nexport const commitChangesParamsSchema = (gitCommonOptionsSchema as unknown).extend({\n  message: z.string().min(1).describe(\"Commit message\"),\n  amend: (z.boolean().optional() as unknown).describe(\"Amend the previous commit\"),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/git.ts",
      "line": 71,
      "content": "amend: (z.boolean().optional() as unknown).describe(\"Amend the previous commit\"),",
      "context": "export const commitChangesParamsSchema = (gitCommonOptionsSchema as unknown).extend({\n  message: z.string().min(1).describe(\"Commit message\"),\n  amend: (z.boolean().optional() as unknown).describe(\"Amend the previous commit\"),\n  all: (z.boolean().optional() as unknown).describe(\"Stage all changes including deletions\"),\n  noStage: (z.boolean().optional() as unknown).describe(\"Skip staging changes\"),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/git.ts",
      "line": 72,
      "content": "all: (z.boolean().optional() as unknown).describe(\"Stage all changes including deletions\"),",
      "context": "  message: z.string().min(1).describe(\"Commit message\"),\n  amend: (z.boolean().optional() as unknown).describe(\"Amend the previous commit\"),\n  all: (z.boolean().optional() as unknown).describe(\"Stage all changes including deletions\"),\n  noStage: (z.boolean().optional() as unknown).describe(\"Skip staging changes\"),\n});",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/git.ts",
      "line": 73,
      "content": "noStage: (z.boolean().optional() as unknown).describe(\"Skip staging changes\"),",
      "context": "  amend: (z.boolean().optional() as unknown).describe(\"Amend the previous commit\"),\n  all: (z.boolean().optional() as unknown).describe(\"Stage all changes including deletions\"),\n  noStage: (z.boolean().optional() as unknown).describe(\"Skip staging changes\"),\n});\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/git.ts",
      "line": 93,
      "content": "}) as unknown).merge(commonCommandOptionsSchema);",
      "context": "    branch: z.string().optional().describe(\"Branch to push\"),\n    force: flagSchema(\"Force push\"),\n  }) as unknown).merge(commonCommandOptionsSchema);\n\n/**",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/tasks.ts",
      "line": 32,
      "content": "export const taskListParamsSchema = (commonCommandOptionsSchema as unknown).extend({",
      "context": " * Schema for task list parameters\n */\nexport const taskListParamsSchema = (commonCommandOptionsSchema as unknown).extend({\n  filter: z.string().optional().describe(\"Filter tasks by status or other criteria\"),\n  limit: (z.number().optional() as unknown).describe(\"Limit the number of tasks returned\"),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/tasks.ts",
      "line": 34,
      "content": "limit: (z.number().optional() as unknown).describe(\"Limit the number of tasks returned\"),",
      "context": "export const taskListParamsSchema = (commonCommandOptionsSchema as unknown).extend({\n  filter: z.string().optional().describe(\"Filter tasks by status or other criteria\"),\n  limit: (z.number().optional() as unknown).describe(\"Limit the number of tasks returned\"),\n  all: flagSchema(\"Include completed tasks\"),\n  backend: z",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/tasks.ts",
      "line": 50,
      "content": "export const taskGetParamsSchema = (commonCommandOptionsSchema as unknown).extend({",
      "context": " * Schema for task get parameters\n */\nexport const taskGetParamsSchema = (commonCommandOptionsSchema as unknown).extend({\n  taskId: (z\n    .union([",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/tasks.ts",
      "line": 55,
      "content": "]) as unknown).describe(\"Task ID or array of task IDs to retrieve\"),",
      "context": "      taskIdSchema.describe(\"ID of the task to retrieve\"),\n      z.array(taskIdSchema).describe(\"Array of task IDs to retrieve\"),\n    ]) as unknown).describe(\"Task ID or array of task IDs to retrieve\"),\n  backend: z\n    .string()",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/tasks.ts",
      "line": 77,
      "content": "}) as unknown).merge(commonCommandOptionsSchema);",
      "context": "      .optional()\n      .describe(\"Specify task backend (markdown, json-file, github-issues)\"),\n  }) as unknown).merge(commonCommandOptionsSchema);\n\n/**",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/tasks.ts",
      "line": 95,
      "content": "}) as unknown).merge(commonCommandOptionsSchema);",
      "context": "      .optional()\n      .describe(\"Specify task backend (markdown, json-file, github-issues)\"),\n  }) as unknown).merge(commonCommandOptionsSchema);\n\n/**",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/tasks.ts",
      "line": 116,
      "content": ".merge(commonCommandOptionsSchema) as unknown).refine(",
      "context": "      .describe(\"Specify task backend (markdown, json-file, github-issues)\"),\n  })\n  .merge(commonCommandOptionsSchema) as unknown).refine(\n  (data) => {\n    // Either description or descriptionPath must be provided",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/tasks.ts",
      "line": 119,
      "content": "return (data as unknown).description || (data as unknown).descriptionPath as unknown;",
      "context": "  (data) => {\n    // Either description or descriptionPath must be provided\n    return (data as unknown).description || (data as unknown).descriptionPath as unknown;\n  },\n  {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/tasks.ts",
      "line": 150,
      "content": ".merge(commonCommandOptionsSchema) as unknown).refine((data) => (data as unknown).description || (data as unknown).descriptionPath, {",
      "context": "      .describe(\"Specify task backend (markdown, json-file, github-issues)\"),\n  })\n  .merge(commonCommandOptionsSchema) as unknown).refine((data) => (data as unknown).description || (data as unknown).descriptionPath, {\n  message: \"Either 'description' or 'descriptionPath' must be provided\",\n  path: [\"description\"],",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/tasks.ts",
      "line": 169,
      "content": "}) as unknown).merge(commonCommandOptionsSchema);",
      "context": "      .optional()\n      .describe(\"Specify task backend (markdown, json-file, github-issues)\"),\n  }) as unknown).merge(commonCommandOptionsSchema);\n\n/**",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/tasks.ts",
      "line": 187,
      "content": "}) as unknown).merge(commonCommandOptionsSchema);",
      "context": "      .optional()\n      .describe(\"Specify task backend (markdown, json-file, github-issues)\"),\n  }) as unknown).merge(commonCommandOptionsSchema);\n\n/**",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/error.ts",
      "line": 5,
      "content": "* replacing unsafe `(err as unknown).message` patterns with proper validation.",
      "context": " * \n * This module provides Zod schemas for validating error objects throughout the codebase,\n * replacing unsafe `(err as unknown).message` patterns with proper validation.\n */\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/session.ts",
      "line": 17,
      "content": "session: (sessionNameSchema as unknown).describe(\"Unique name of the session\"),",
      "context": " */\nexport const sessionRecordSchema = z.object({\n  session: (sessionNameSchema as unknown).describe(\"Unique name of the session\"),\n  repoUrl: z.string().describe(\"URL of the repository\"),\n  repoName: z.string().describe(\"Normalized name of the repository\"),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/session.ts",
      "line": 22,
      "content": "taskId: (taskIdSchema.optional() as unknown).describe(\"Task ID associated with the session\"),",
      "context": "  repoPath: z.string().optional().describe(\"Path to the session repository\"),\n  createdAt: z.string().describe(\"ISO timestamp of when the session was created\"),\n  taskId: (taskIdSchema.optional() as unknown).describe(\"Task ID associated with the session\"),\n  branch: z.string().optional().describe(\"Branch name for this session\"),\n  backendType: z.string().describe(\"Backend type (local, remote, etc.)\"),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/session.ts",
      "line": 29,
      "content": "}) as unknown).describe(\"Remote repository configuration\"),",
      "context": "      authMethod: z.string().describe(\"Authentication method for remote operations\"),\n      depth: z.number().describe(\"Clone depth\"),\n    }) as unknown).describe(\"Remote repository configuration\"),\n});\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/session.ts",
      "line": 50,
      "content": ".merge(commonCommandOptionsSchema) as unknown).refine((data) => (data as unknown).name !== undefined || (data as unknown).task !== undefined, {",
      "context": "    task: taskIdSchema.optional().describe(\"Task ID associated with the session\"),\n  })\n  .merge(commonCommandOptionsSchema) as unknown).refine((data) => (data as unknown).name !== undefined || (data as unknown).task !== undefined, {\n  message: \"Either session name or task ID must be provided\",\n});",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/session.ts",
      "line": 64,
      "content": "name: (sessionNameSchema.optional() as unknown).describe(\"Name for the new session\"),",
      "context": "export const sessionStartParamsSchema = z\n  .object({\n    name: (sessionNameSchema.optional() as unknown).describe(\"Name for the new session\"),\n    repo: (repoPathSchema.optional() as unknown).describe(\"Repository to start the session in\"),\n    task: (taskIdSchema.optional() as unknown).describe(\"Task ID to associate with the session\"),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/session.ts",
      "line": 65,
      "content": "repo: (repoPathSchema.optional() as unknown).describe(\"Repository to start the session in\"),",
      "context": "  .object({\n    name: (sessionNameSchema.optional() as unknown).describe(\"Name for the new session\"),\n    repo: (repoPathSchema.optional() as unknown).describe(\"Repository to start the session in\"),\n    task: (taskIdSchema.optional() as unknown).describe(\"Task ID to associate with the session\"),\n    description: z.string().min(1).optional().describe(\"Description for auto-created task\"),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/session.ts",
      "line": 66,
      "content": "task: (taskIdSchema.optional() as unknown).describe(\"Task ID to associate with the session\"),",
      "context": "    name: (sessionNameSchema.optional() as unknown).describe(\"Name for the new session\"),\n    repo: (repoPathSchema.optional() as unknown).describe(\"Repository to start the session in\"),\n    task: (taskIdSchema.optional() as unknown).describe(\"Task ID to associate with the session\"),\n    description: z.string().min(1).optional().describe(\"Description for auto-created task\"),\n    branch: z.string().optional().describe(\"Branch name to create\"),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/session.ts",
      "line": 81,
      "content": "if (!(data as unknown).task && !(data as unknown).description) {",
      "context": "    (data) => {\n      // Phase 2: Task association is required\n      if (!(data as unknown).task && !(data as unknown).description) {\n        return false;\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/session.ts",
      "line": 85,
      "content": "return (data as unknown).name || (data as unknown).task || (data as unknown).description;",
      "context": "      }\n      // Either name or task or description must be provided\n      return (data as unknown).name || (data as unknown).task || (data as unknown).description;\n    },\n    {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/session.ts",
      "line": 106,
      "content": ".merge(commonCommandOptionsSchema) as unknown).refine((data) => (data as unknown).name !== undefined || (data as unknown).task !== undefined, {",
      "context": "    force: flagSchema(\"Skip confirmation prompt\"),\n  })\n  .merge(commonCommandOptionsSchema) as unknown).refine((data) => (data as unknown).name !== undefined || (data as unknown).task !== undefined, {\n  message: \"Either session name or task ID must be provided\",\n});",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/session.ts",
      "line": 123,
      "content": ".merge(commonCommandOptionsSchema) as unknown).refine((data) => (data as unknown).name !== undefined || (data as unknown).task !== undefined, {",
      "context": "    task: taskIdSchema.optional().describe(\"Task ID associated with the session\"),\n  })\n  .merge(commonCommandOptionsSchema) as unknown).refine((data) => (data as unknown).name !== undefined || (data as unknown).task !== undefined, {\n  message: \"Either session name or task ID must be provided\",\n});",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/session.ts",
      "line": 149,
      "content": ".merge(commonCommandOptionsSchema) as unknown).refine((data) => (data as unknown).name !== undefined || (data as unknown).task !== undefined, {",
      "context": "    skipIfAlreadyMerged: flagSchema(\"Skip update if session changes are already in base branch\"),\n  })\n  .merge(commonCommandOptionsSchema) as unknown).refine((data) => (data as unknown).name !== undefined || (data as unknown).task !== undefined, {\n  message: \"Either session name or task ID must be provided\",\n});",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/session.ts",
      "line": 167,
      "content": ".merge(commonCommandOptionsSchema) as unknown).refine((data) => (data as unknown).name !== undefined || (data as unknown).task !== undefined || (data as unknown).repo !== undefined, {",
      "context": "    repo: repoPathSchema.optional().describe(\"Repository path\"),\n  })\n  .merge(commonCommandOptionsSchema) as unknown).refine((data) => (data as unknown).name !== undefined || (data as unknown).task !== undefined || (data as unknown).repo !== undefined, {\n  message: \"Either session name, task ID, or repo path must be provided\",\n});",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/session.ts",
      "line": 193,
      "content": ".merge(commonCommandOptionsSchema) as unknown).refine((data) => !((data as unknown).body && (data as unknown).bodyPath), {",
      "context": "    skipConflictCheck: flagSchema(\"Skip proactive conflict detection during update\"),\n  })\n  .merge(commonCommandOptionsSchema) as unknown).refine((data) => !((data as unknown).body && (data as unknown).bodyPath), {\n  message: \"Cannot provide both 'body' and 'bodyPath' - use one or the other\",\n  path: [\"body\"],",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/session.ts",
      "line": 213,
      "content": "}) as unknown).merge(commonCommandOptionsSchema);",
      "context": "    output: z.string().optional().describe(\"File path to save the review output\"),\n    prBranch: z.string().optional().describe(\"PR branch name (defaults to 'pr/<session>')\"),\n  }) as unknown).merge(commonCommandOptionsSchema);\n\n/**",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/session.ts",
      "line": 223,
      "content": "export const sessionInspectParamsSchema = (z.object({}) as unknown).merge(commonCommandOptionsSchema);",
      "context": " * Schema for session inspect parameters\n */\nexport const sessionInspectParamsSchema = (z.object({}) as unknown).merge(commonCommandOptionsSchema);\n\n/**",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/runtime.ts",
      "line": 5,
      "content": "* replacing unsafe `(Bun as unknown).argv` patterns with proper validation.",
      "context": " * \n * This module provides Zod schemas for validating runtime environment APIs,\n * replacing unsafe `(Bun as unknown).argv` patterns with proper validation.\n */\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/common.ts",
      "line": 15,
      "content": ".min(1, \"Path cannot be empty\") as unknown).describe(\"File or directory path\");",
      "context": "export const pathSchema = (z\n  .string()\n  .min(1, \"Path cannot be empty\") as unknown).describe(\"File or directory path\");\n\n/**",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/common.ts",
      "line": 25,
      "content": ".min(1, \"Repository URI cannot be empty\") as unknown).describe(\"Repository URI\");",
      "context": "export const repoPathSchema = (z\n  .string()\n  .min(1, \"Repository URI cannot be empty\") as unknown).describe(\"Repository URI\");\n\n/**",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/common.ts",
      "line": 48,
      "content": "normalized = (normalized as unknown).substring(5); // \"task#\".length",
      "context": "    // Handle formats like \"task#064\" or \"task#64\"\n    if (normalized.toLowerCase().startsWith(\"task#\")) {\n      normalized = (normalized as unknown).substring(5); // \"task#\".length\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/common.ts",
      "line": 53,
      "content": "normalized = (normalized as unknown).substring(1);",
      "context": "    // Remove all leading '#' characters to avoid multiple hashes\n    while (normalized.startsWith(\"#\")) {\n      normalized = (normalized as unknown).substring(1);\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/common.ts",
      "line": 64,
      "content": "}) as unknown).refine((val) => /^#[a-zA-Z0-9_]+$/.test(val), {",
      "context": "    // Add the '#' prefix to ensure canonical format\n    return `#${normalized}`;\n  }) as unknown).refine((val) => /^#[a-zA-Z0-9_]+$/.test(val), {\n  message: \"Task ID must be in format #TEST_VALUE or TEST_VALUE\",\n});",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/common.ts",
      "line": 72,
      "content": "(z.boolean().optional().default(false) as unknown).describe(_description);",
      "context": " */\nexport const flagSchema = (_description: string) =>\n  (z.boolean().optional().default(false) as unknown).describe(_description);\n\n/**",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/common.ts",
      "line": 89,
      "content": "}) as unknown).partial();",
      "context": "    workspace: pathSchema.optional().describe(\"URI of the upstream repository\"),\n    task: taskIdSchema.optional().describe(\"Task ID\"),\n  }) as unknown).partial();\n\n/**",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/common.ts",
      "line": 107,
      "content": "session: (sessionSchema.optional() as unknown).describe(\"Session name\"),",
      "context": " */\nexport const commonRepoSchema = z.object({\n  session: (sessionSchema.optional() as unknown).describe(\"Session name\"),\n  repo: z.string().optional().describe(\"Repository URI\"),\n  workspace: z.string().optional().describe(\"URI of the upstream repository\"),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/common.ts",
      "line": 110,
      "content": "json: (z.boolean().optional() as unknown).describe(\"Return output as JSON\"),",
      "context": "  repo: z.string().optional().describe(\"Repository URI\"),\n  workspace: z.string().optional().describe(\"URI of the upstream repository\"),\n  json: (z.boolean().optional() as unknown).describe(\"Return output as JSON\"),\n});\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/init.ts",
      "line": 15,
      "content": "mcp: (z.union([z.string(), z.boolean()]) as unknown).optional(),",
      "context": "  backend: z.string().optional(),\n  ruleFormat: z.string().optional(),\n  mcp: (z.union([z.string(), z.boolean()]) as unknown).optional(),\n  mcpTransport: z.string().optional(),\n  mcpPort: z.string().optional(),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/init.ts",
      "line": 19,
      "content": "mcpOnly: (z.boolean() as unknown).optional(),",
      "context": "  mcpPort: z.string().optional(),\n  mcpHost: z.string().optional(),\n  mcpOnly: (z.boolean() as unknown).optional(),\n  overwrite: (z.boolean() as unknown).optional(),\n  workspacePath: z.string().optional(),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/init.ts",
      "line": 20,
      "content": "overwrite: (z.boolean() as unknown).optional(),",
      "context": "  mcpHost: z.string().optional(),\n  mcpOnly: (z.boolean() as unknown).optional(),\n  overwrite: (z.boolean() as unknown).optional(),\n  workspacePath: z.string().optional(),\n});",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/schemas/session-db-config.ts",
      "line": 5,
      "content": "* replacing unsafe `(config as unknown)` patterns with proper validation.",
      "context": " * \n * This module provides Zod schemas for validating session database configuration,\n * replacing unsafe `(config as unknown)` patterns with proper validation.\n */\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/git-exec-enhanced.ts",
      "line": 52,
      "content": "const startTime = (Date as unknown).now();",
      "context": "  } = options;\n\n  const startTime = (Date as unknown).now();\n  const fullCommand = workdir ? `git -C ${workdir} ${command}` : `git ${command}`;\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/git-exec-enhanced.ts",
      "line": 61,
      "content": "const executionTimeMs = (Date as unknown).now() - startTime;",
      "context": "    });\n\n    const executionTimeMs = (Date as unknown).now() - startTime;\n\n    return {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/git-exec-enhanced.ts",
      "line": 71,
      "content": "const executionTimeMs = (Date as unknown).now() - startTime;",
      "context": "    };\n  } catch (error: any) {\n    const executionTimeMs = (Date as unknown).now() - startTime;\n\n    // Handle timeout errors with enhanced error messages",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/git-exec-enhanced.ts",
      "line": 123,
      "content": "(line as unknown).includes(\"CONFLICT\") && (line as unknown).includes(\" in \")",
      "context": "  const output = `${stdout}\\n${stderr}`;\n  const conflictLines = output.split(\"\\n\").filter(line => \n    (line as unknown).includes(\"CONFLICT\") && (line as unknown).includes(\" in \")\n  );\n  ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/git-exec-enhanced.ts",
      "line": 146,
      "content": "(conflictFiles as unknown).forEach(file => {",
      "context": "  const types: { [file: string]: \"modify/modify\" | \"add/add\" | \"delete/modify\" | \"other\" } = {};\n\n  (conflictFiles as unknown).forEach(file => {\n    if ((output as unknown).includes(`CONFLICT (content): Merge conflict in ${file}`)) {\n      types[file] = \"modify/modify\";",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/git-exec-enhanced.ts",
      "line": 147,
      "content": "if ((output as unknown).includes(`CONFLICT (content): Merge conflict in ${file}`)) {",
      "context": "\n  (conflictFiles as unknown).forEach(file => {\n    if ((output as unknown).includes(`CONFLICT (content): Merge conflict in ${file}`)) {\n      types[file] = \"modify/modify\";\n    } else if ((output as unknown).includes(`CONFLICT (add/add): Merge conflict in ${file}`)) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/git-exec-enhanced.ts",
      "line": 149,
      "content": "} else if ((output as unknown).includes(`CONFLICT (add/add): Merge conflict in ${file}`)) {",
      "context": "    if ((output as unknown).includes(`CONFLICT (content): Merge conflict in ${file}`)) {\n      types[file] = \"modify/modify\";\n    } else if ((output as unknown).includes(`CONFLICT (add/add): Merge conflict in ${file}`)) {\n      types[file] = \"add/add\";\n    } else if ((output as unknown).includes(`CONFLICT (modify/delete): ${file}`)) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/git-exec-enhanced.ts",
      "line": 151,
      "content": "} else if ((output as unknown).includes(`CONFLICT (modify/delete): ${file}`)) {",
      "context": "    } else if ((output as unknown).includes(`CONFLICT (add/add): Merge conflict in ${file}`)) {\n      types[file] = \"add/add\";\n    } else if ((output as unknown).includes(`CONFLICT (modify/delete): ${file}`)) {\n      types[file] = \"delete/modify\";\n    } else {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/git-exec-enhanced.ts",
      "line": 176,
      "content": "...(options as unknown)!.context || [],",
      "context": "      ...options,\n      context: [\n        ...(options as unknown)!.context || [],\n        { label: \"Repository URL\", value: repoUrl },\n        { label: \"Target directory\", value: targetDir }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/git-exec-enhanced.ts",
      "line": 196,
      "content": "...(options as unknown)!.context || [],",
      "context": "      ...options,\n      context: [\n        ...(options as unknown)!.context || [],\n        { label: \"Remote\", value: remote },\n        ...(branch ? [{ label: \"Branch\", value: branch }] : [])",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/git-exec-enhanced.ts",
      "line": 216,
      "content": "...(options as unknown)!.context || [],",
      "context": "      ...options,\n      context: [\n        ...(options as unknown)!.context || [],\n        { label: \"Remote\", value: remote },\n        ...(branch ? [{ label: \"Branch\", value: branch }] : [])",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/git-exec-enhanced.ts",
      "line": 236,
      "content": "...(options as unknown)!.context || [],",
      "context": "      ...options,\n      context: [\n        ...(options as unknown)!.context || [],\n        { label: \"Remote\", value: remote },\n        ...(branch ? [{ label: \"Branch\", value: branch }] : [])",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/git-exec-enhanced.ts",
      "line": 254,
      "content": "...(options as unknown)!.context || [],",
      "context": "      ...options,\n      context: [\n        ...(options as unknown)!.context || [],\n        { label: \"Branch to merge\", value: branch }\n      ]",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/filter-messages.ts",
      "line": 36,
      "content": "const status = (options as unknown)!.status;",
      "context": "\n  // Add status filter message if status is provided\n  const status = (options as unknown)!.status;\n  if (status) {\n    messages.push(getStatusFilterMessage(status));",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/filter-messages.ts",
      "line": 41,
      "content": "else if (!(options as unknown)!.all) {",
      "context": "  }\n  // Add active tasks message if not showing all tasks and no specific status filter\n  else if (!(options as unknown)!.all) {\n    messages.push(getActiveTasksMessage());\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/package-manager.ts",
      "line": 74,
      "content": "const detectedPackageManager = (options as unknown)!.packageManager || detectPackageManager(repoPath);",
      "context": "  try {\n    // Detect or use provided package manager\n    const detectedPackageManager = (options as unknown)!.packageManager || detectPackageManager(repoPath);\n\n    if (!detectedPackageManager) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/package-manager.ts",
      "line": 93,
      "content": "if (!(options as unknown)!.quiet) {",
      "context": "\n    // Log installation start unless quiet\n    if (!(options as unknown)!.quiet) {\n      log.debug(`Installing dependencies using ${detectedPackageManager}...`);\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/package-manager.ts",
      "line": 100,
      "content": "stdio: (options as unknown)!.quiet ? \"ignore\" : \"inherit\",",
      "context": "    const result = execSync(installCmd, {\n      cwd: repoPath,\n      stdio: (options as unknown)!.quiet ? \"ignore\" : \"inherit\",\n    }) as unknown;\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/package-manager.ts",
      "line": 101,
      "content": "}) as unknown;",
      "context": "      cwd: repoPath,\n      stdio: (options as unknown)!.quiet ? \"ignore\" : \"inherit\",\n    }) as unknown;\n\n    // Handle the case where execSync returns null when stdio is \"ignore\"",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/package-manager.ts",
      "line": 104,
      "content": "const output = result ? (result as unknown).toString() : \"\";",
      "context": "\n    // Handle the case where execSync returns null when stdio is \"ignore\"\n    const output = result ? (result as unknown).toString() : \"\";\n\n    return { success: true, output };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/paths.ts",
      "line": 110,
      "content": "if ((filePath as unknown).startsWith(\"~/\")) {",
      "context": " */\nexport function expandTilde(filePath: string): string {\n  if ((filePath as unknown).startsWith(\"~/\")) {\n    return join(process.env.HOME || homedir(), (filePath as unknown).slice(2));\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/paths.ts",
      "line": 111,
      "content": "return join(process.env.HOME || homedir(), (filePath as unknown).slice(2));",
      "context": "export function expandTilde(filePath: string): string {\n  if ((filePath as unknown).startsWith(\"~/\")) {\n    return join(process.env.HOME || homedir(), (filePath as unknown).slice(2));\n  }\n  return filePath;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/param-schemas.ts",
      "line": 19,
      "content": "export const optionalString = (description: string) => (z.string().describe(description) as unknown).optional();",
      "context": " * Create an optional string parameter with a description\n */\nexport const optionalString = (description: string) => (z.string().describe(description) as unknown).optional();\n\n/**",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/param-schemas.ts",
      "line": 30,
      "content": "(z.boolean().describe(description) as unknown).optional();",
      "context": " */\nexport const optionalBoolean = (description: string) =>\n  (z.boolean().describe(description) as unknown).optional();\n\n// ------------------------------------------------------------------",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/param-schemas.ts",
      "line": 39,
      "content": "export const sessionParam = optionalString((descriptions as unknown).SESSION_DESCRIPTION);",
      "context": " * Parameter for session name\n */\nexport const sessionParam = optionalString((descriptions as unknown).SESSION_DESCRIPTION);\n\n/**",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/param-schemas.ts",
      "line": 44,
      "content": "export const repoParam = optionalString((descriptions as unknown).REPO_DESCRIPTION);",
      "context": " * Parameter for repository URI\n */\nexport const repoParam = optionalString((descriptions as unknown).REPO_DESCRIPTION);\n\n/**",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/param-schemas.ts",
      "line": 49,
      "content": "export const upstreamRepoParam = optionalString((descriptions as unknown).UPSTREAM_REPO_DESCRIPTION);",
      "context": " * Parameter for upstream repository URI\n */\nexport const upstreamRepoParam = optionalString((descriptions as unknown).UPSTREAM_REPO_DESCRIPTION);\n\n// ------------------------------------------------------------------",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/param-schemas.ts",
      "line": 58,
      "content": "export const jsonParam = optionalBoolean((descriptions as unknown).JSON_DESCRIPTION);",
      "context": " * Parameter for JSON output\n */\nexport const jsonParam = optionalBoolean((descriptions as unknown).JSON_DESCRIPTION);\n\n/**",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/param-schemas.ts",
      "line": 63,
      "content": "export const debugParam = optionalBoolean((descriptions as unknown).DEBUG_DESCRIPTION);",
      "context": " * Parameter for debug output\n */\nexport const debugParam = optionalBoolean((descriptions as unknown).DEBUG_DESCRIPTION);\n\n// ------------------------------------------------------------------",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/param-schemas.ts",
      "line": 72,
      "content": "export const taskIdParam = optionalString((descriptions as unknown).TASK_ID_DESCRIPTION);",
      "context": " * Parameter for task ID\n */\nexport const taskIdParam = optionalString((descriptions as unknown).TASK_ID_DESCRIPTION);\n\n/**",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/param-schemas.ts",
      "line": 77,
      "content": "export const taskStatusFilterParam = optionalString((descriptions as unknown).TASK_STATUS_FILTER_DESCRIPTION);",
      "context": " * Parameter for task status filter\n */\nexport const taskStatusFilterParam = optionalString((descriptions as unknown).TASK_STATUS_FILTER_DESCRIPTION);\n\n/**",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/param-schemas.ts",
      "line": 82,
      "content": "export const taskStatusParam = requiredString((descriptions as unknown).TASK_STATUS_DESCRIPTION);",
      "context": " * Parameter for task status\n */\nexport const taskStatusParam = requiredString((descriptions as unknown).TASK_STATUS_DESCRIPTION);\n\n/**",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/param-schemas.ts",
      "line": 87,
      "content": "export const taskAllParam = optionalBoolean((descriptions as unknown).TASK_ALL_DESCRIPTION);",
      "context": " * Parameter for all tasks inclusion\n */\nexport const taskAllParam = optionalBoolean((descriptions as unknown).TASK_ALL_DESCRIPTION);\n\n// ------------------------------------------------------------------",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/param-schemas.ts",
      "line": 96,
      "content": "export const backendParam = optionalString((descriptions as unknown).BACKEND_DESCRIPTION);",
      "context": " * Parameter for backend type\n */\nexport const backendParam = optionalString((descriptions as unknown).BACKEND_DESCRIPTION);\n\n/**",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/param-schemas.ts",
      "line": 101,
      "content": "export const taskBackendParam = optionalString((descriptions as unknown).TASK_BACKEND_DESCRIPTION);",
      "context": " * Parameter for task backend\n */\nexport const taskBackendParam = optionalString((descriptions as unknown).TASK_BACKEND_DESCRIPTION);\n\n// ------------------------------------------------------------------",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/param-schemas.ts",
      "line": 110,
      "content": "export const forceParam = optionalBoolean((descriptions as unknown).FORCE_DESCRIPTION);",
      "context": " * Parameter for force operation\n */\nexport const forceParam = optionalBoolean((descriptions as unknown).FORCE_DESCRIPTION);\n\n/**",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/param-schemas.ts",
      "line": 115,
      "content": "export const overwriteParam = optionalBoolean((descriptions as unknown).OVERWRITE_DESCRIPTION);",
      "context": " * Parameter for overwrite option\n */\nexport const overwriteParam = optionalBoolean((descriptions as unknown).OVERWRITE_DESCRIPTION);\n\n// ------------------------------------------------------------------",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/param-schemas.ts",
      "line": 124,
      "content": "export const remoteParam = optionalString((descriptions as unknown).GIT_REMOTE_DESCRIPTION);",
      "context": " * Parameter for git remote\n */\nexport const remoteParam = optionalString((descriptions as unknown).GIT_REMOTE_DESCRIPTION);\n\n/**",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/param-schemas.ts",
      "line": 129,
      "content": "export const branchParam = optionalString((descriptions as unknown).GIT_BRANCH_DESCRIPTION);",
      "context": " * Parameter for branch name\n */\nexport const branchParam = optionalString((descriptions as unknown).GIT_BRANCH_DESCRIPTION);\n\n/**",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/param-schemas.ts",
      "line": 134,
      "content": "export const gitForceParam = optionalBoolean((descriptions as unknown).GIT_FORCE_DESCRIPTION);",
      "context": " * Parameter for git force option\n */\nexport const gitForceParam = optionalBoolean((descriptions as unknown).GIT_FORCE_DESCRIPTION);\n\n/**",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/param-schemas.ts",
      "line": 139,
      "content": "export const noStatusUpdateParam = optionalBoolean((descriptions as unknown).NO_STATUS_UPDATE_DESCRIPTION);",
      "context": " * Parameter for no status update option\n */\nexport const noStatusUpdateParam = optionalBoolean((descriptions as unknown).NO_STATUS_UPDATE_DESCRIPTION);\n\n// ------------------------------------------------------------------",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/param-schemas.ts",
      "line": 148,
      "content": "export const ruleContentParam = optionalString((descriptions as unknown).RULE_CONTENT_DESCRIPTION);",
      "context": " * Parameter for rule content\n */\nexport const ruleContentParam = optionalString((descriptions as unknown).RULE_CONTENT_DESCRIPTION);\n\n/**",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/param-schemas.ts",
      "line": 153,
      "content": "export const ruleDescriptionParam = optionalString((descriptions as unknown).RULE_DESCRIPTION_DESCRIPTION);",
      "context": " * Parameter for rule description\n */\nexport const ruleDescriptionParam = optionalString((descriptions as unknown).RULE_DESCRIPTION_DESCRIPTION);\n\n/**",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/param-schemas.ts",
      "line": 158,
      "content": "export const ruleNameParam = optionalString((descriptions as unknown).RULE_NAME_DESCRIPTION);",
      "context": " * Parameter for rule name\n */\nexport const ruleNameParam = optionalString((descriptions as unknown).RULE_NAME_DESCRIPTION);\n\n/**",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/param-schemas.ts",
      "line": 163,
      "content": "export const ruleFormatParam = optionalString((descriptions as unknown).RULE_FORMAT_DESCRIPTION);",
      "context": " * Parameter for rule format\n */\nexport const ruleFormatParam = optionalString((descriptions as unknown).RULE_FORMAT_DESCRIPTION);\n\n/**",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/param-schemas.ts",
      "line": 168,
      "content": "export const ruleTagsParam = optionalString((descriptions as unknown).RULE_TAGS_DESCRIPTION);",
      "context": " * Parameter for rule tags\n */\nexport const ruleTagsParam = optionalString((descriptions as unknown).RULE_TAGS_DESCRIPTION);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 33,
      "content": "const envMode = (process.env.MINSKY_LOG_MODE as unknown) || null;",
      "context": "function getLoggerConfig(): LoggerConfig {\n  // First try environment variables to avoid early node-config initialization\n  const envMode = (process.env.MINSKY_LOG_MODE as unknown) || null;\n  const envLevel = (process.env.LOGLEVEL as unknown) || null;\n  const envAgentLogs = (process.env.ENABLE_AGENT_LOGS as unknown) === \"true\";",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 34,
      "content": "const envLevel = (process.env.LOGLEVEL as unknown) || null;",
      "context": "  // First try environment variables to avoid early node-config initialization\n  const envMode = (process.env.MINSKY_LOG_MODE as unknown) || null;\n  const envLevel = (process.env.LOGLEVEL as unknown) || null;\n  const envAgentLogs = (process.env.ENABLE_AGENT_LOGS as unknown) === \"true\";\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 35,
      "content": "const envAgentLogs = (process.env.ENABLE_AGENT_LOGS as unknown) === \"true\";",
      "context": "  const envMode = (process.env.MINSKY_LOG_MODE as unknown) || null;\n  const envLevel = (process.env.LOGLEVEL as unknown) || null;\n  const envAgentLogs = (process.env.ENABLE_AGENT_LOGS as unknown) === \"true\";\n\n  // If we have all config from environment, use it",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 107,
      "content": "(format as unknown).timestamp(),",
      "context": "  // Common format for agent logs (JSON)\n  const agentLogFormat = format.combine(\n    (format as unknown).timestamp(),\n    format.errors({ stack: true }), // Log stack traces\n    format.json()",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 120,
      "content": "typeof (logInfo as unknown).message === \"string\"",
      "context": "      // Ensure message is a string\n      const message =\n        typeof (logInfo as unknown).message === \"string\"\n          ? (logInfo as unknown).message\n          : JSON.stringify((logInfo as unknown).message);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 121,
      "content": "? (logInfo as unknown).message",
      "context": "      const message =\n        typeof (logInfo as unknown).message === \"string\"\n          ? (logInfo as unknown).message\n          : JSON.stringify((logInfo as unknown).message);\n      // For user-facing CLI output, just show the message without timestamp and log level",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 122,
      "content": ": JSON.stringify((logInfo as unknown).message);",
      "context": "        typeof (logInfo as unknown).message === \"string\"\n          ? (logInfo as unknown).message\n          : JSON.stringify((logInfo as unknown).message);\n      // For user-facing CLI output, just show the message without timestamp and log level\n      let log = message;",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 129,
      "content": "const metadata = (Object.keys(logInfo) as unknown).reduce(",
      "context": "      }\n      // Add other metadata if it exists\n      const metadata = (Object.keys(logInfo) as unknown).reduce(\n        (acc, key) => {\n          if (([\"level\", \"message\", \"timestamp\", \"stack\"] as unknown).includes(key)) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 131,
      "content": "if (([\"level\", \"message\", \"timestamp\", \"stack\"] as unknown).includes(key)) {",
      "context": "      const metadata = (Object.keys(logInfo) as unknown).reduce(\n        (acc, key) => {\n          if (([\"level\", \"message\", \"timestamp\", \"stack\"] as unknown).includes(key)) {\n            return acc;\n          }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 140,
      "content": "if ((Object as unknown).keysmetadata.length > 0) {",
      "context": "      );\n\n      if ((Object as unknown).keysmetadata.length > 0) {\n        try {\n          log += ` ${JSON.stringify(metadata as unknown)}`;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 142,
      "content": "log += ` ${JSON.stringify(metadata as unknown)}`;",
      "context": "      if ((Object as unknown).keysmetadata.length > 0) {\n        try {\n          log += ` ${JSON.stringify(metadata as unknown)}`;\n        } catch (error) {\n          // ignore serialization errors for metadata in text logs",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 161,
      "content": "(agentLogger as unknown).add(new transports.Console({ stderrLevels: [] })); // Ensure only stdout",
      "context": "  // Only add stdout transport if in STRUCTURED mode or explicitly enabled in HUMAN mode\n  if (currentLogMode === LogMode.STRUCTURED || enableAgentLogs) {\n    (agentLogger as unknown).add(new transports.Console({ stderrLevels: [] })); // Ensure only stdout\n    (agentLogger.exceptions as unknown).handle(\n      new transports.Console({ format: agentLogFormat, stderrLevels: [] })",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 162,
      "content": "(agentLogger.exceptions as unknown).handle(",
      "context": "  if (currentLogMode === LogMode.STRUCTURED || enableAgentLogs) {\n    (agentLogger as unknown).add(new transports.Console({ stderrLevels: [] })); // Ensure only stdout\n    (agentLogger.exceptions as unknown).handle(\n      new transports.Console({ format: agentLogFormat, stderrLevels: [] })\n    );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 165,
      "content": "(agentLogger.rejections as unknown).handle(",
      "context": "      new transports.Console({ format: agentLogFormat, stderrLevels: [] })\n    );\n    (agentLogger.rejections as unknown).handle(\n      new transports.Console({ format: agentLogFormat, stderrLevels: [] })\n    );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 183,
      "content": "(programLogger.exceptions as unknown).handle(new transports.Console({ format: programLogFormat }));",
      "context": "\n  // Always setup exception handlers for programLogger\n  (programLogger.exceptions as unknown).handle(new transports.Console({ format: programLogFormat }));\n  (programLogger.rejections as unknown).handle(new transports.Console({ format: programLogFormat }));\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 184,
      "content": "(programLogger.rejections as unknown).handle(new transports.Console({ format: programLogFormat }));",
      "context": "  // Always setup exception handlers for programLogger\n  (programLogger.exceptions as unknown).handle(new transports.Console({ format: programLogFormat }));\n  (programLogger.rejections as unknown).handle(new transports.Console({ format: programLogFormat }));\n\n  // Check if we're in structured mode",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 199,
      "content": "(agentLogger as unknown).info(message);",
      "context": "        return;\n      }\n      (agentLogger as unknown).info(message);\n    },\n    debug: (message: string, context?: LogContext) => {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 209,
      "content": "(agentLogger as unknown).debug(message, context as unknown);",
      "context": "      // Otherwise, use agentLogger as normal\n      if (context) {\n        (agentLogger as unknown).debug(message, context as unknown);\n      } else {\n        (agentLogger as unknown).debug(message);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 211,
      "content": "(agentLogger as unknown).debug(message);",
      "context": "        (agentLogger as unknown).debug(message, context as unknown);\n      } else {\n        (agentLogger as unknown).debug(message);\n      }\n    },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 220,
      "content": "(agentLogger as unknown).info(message, context as unknown);",
      "context": "      }\n      if (context) {\n        (agentLogger as unknown).info(message, context as unknown);\n      } else {\n        (agentLogger as unknown).info(message);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 222,
      "content": "(agentLogger as unknown).info(message);",
      "context": "        (agentLogger as unknown).info(message, context as unknown);\n      } else {\n        (agentLogger as unknown).info(message);\n      }\n    },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 231,
      "content": "(agentLogger as unknown).warn(message, context as unknown);",
      "context": "      }\n      if (context) {\n        (agentLogger as unknown).warn(message, context as unknown);\n      } else {\n        (agentLogger as unknown).warn(message);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 233,
      "content": "(agentLogger as unknown).warn(message);",
      "context": "        (agentLogger as unknown).warn(message, context as unknown);\n      } else {\n        (agentLogger as unknown).warn(message);\n      }\n    },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 244,
      "content": "(programLogger as unknown).error(`${message}: ${(context as unknown).message}`);",
      "context": "        // Format the error for the programLogger\n        if (context instanceof Error) {\n          (programLogger as unknown).error(`${message}: ${(context as unknown).message}`);\n          if ((context as unknown).stack) {\n            (programLogger as unknown).error((context as unknown).stack);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 245,
      "content": "if ((context as unknown).stack) {",
      "context": "        if (context instanceof Error) {\n          (programLogger as unknown).error(`${message}: ${(context as unknown).message}`);\n          if ((context as unknown).stack) {\n            (programLogger as unknown).error((context as unknown).stack);\n          }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 246,
      "content": "(programLogger as unknown).error((context as unknown).stack);",
      "context": "          (programLogger as unknown).error(`${message}: ${(context as unknown).message}`);\n          if ((context as unknown).stack) {\n            (programLogger as unknown).error((context as unknown).stack);\n          }\n        } else if (",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 251,
      "content": "((context as unknown).originalError || (context as unknown).stack)",
      "context": "          typeof context === \"object\" &&\n          context !== null &&\n          ((context as unknown).originalError || (context as unknown).stack)\n        ) {\n          (programLogger as unknown).error(",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 253,
      "content": "(programLogger as unknown).error(",
      "context": "          ((context as unknown).originalError || (context as unknown).stack)\n        ) {\n          (programLogger as unknown).error(\n            `${message}: ${(context as unknown).originalError || JSON.stringify(context as unknown)}`\n          );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 254,
      "content": "`${message}: ${(context as unknown).originalError || JSON.stringify(context as unknown)}`",
      "context": "        ) {\n          (programLogger as unknown).error(\n            `${message}: ${(context as unknown).originalError || JSON.stringify(context as unknown)}`\n          );\n          if ((context as unknown).stack) {",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 256,
      "content": "if ((context as unknown).stack) {",
      "context": "            `${message}: ${(context as unknown).originalError || JSON.stringify(context as unknown)}`\n          );\n          if ((context as unknown).stack) {\n            (programLogger as unknown).error((context as unknown).stack);\n          }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 257,
      "content": "(programLogger as unknown).error((context as unknown).stack);",
      "context": "          );\n          if ((context as unknown).stack) {\n            (programLogger as unknown).error((context as unknown).stack);\n          }\n        } else {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 260,
      "content": "(programLogger as unknown).error(message, context as unknown);",
      "context": "          }\n        } else {\n          (programLogger as unknown).error(message, context as unknown);\n        }\n        return;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 267,
      "content": "(agentLogger as unknown).error(message, {",
      "context": "      // In STRUCTURED mode or if agent logs explicitly enabled, use agentLogger\n      if (context instanceof Error) {\n        (agentLogger as unknown).error(message, {\n          originalError: (context as unknown).message,\n          stack: (context as unknown).stack,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 268,
      "content": "originalError: (context as unknown).message,",
      "context": "      if (context instanceof Error) {\n        (agentLogger as unknown).error(message, {\n          originalError: (context as unknown).message,\n          stack: (context as unknown).stack,\n          name: (context as unknown).name,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 269,
      "content": "stack: (context as unknown).stack,",
      "context": "        (agentLogger as unknown).error(message, {\n          originalError: (context as unknown).message,\n          stack: (context as unknown).stack,\n          name: (context as unknown).name,\n        });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 270,
      "content": "name: (context as unknown).name,",
      "context": "          originalError: (context as unknown).message,\n          stack: (context as unknown).stack,\n          name: (context as unknown).name,\n        });\n      } else if (",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 275,
      "content": "((context as unknown).originalError || (context as unknown).stack)",
      "context": "        typeof context === \"object\" &&\n        context !== null &&\n        ((context as unknown).originalError || (context as unknown).stack)\n      ) {\n        (agentLogger as unknown).error(message, context as unknown);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 277,
      "content": "(agentLogger as unknown).error(message, context as unknown);",
      "context": "        ((context as unknown).originalError || (context as unknown).stack)\n      ) {\n        (agentLogger as unknown).error(message, context as unknown);\n      } else {\n        (agentLogger as unknown).error(message, context as unknown);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 279,
      "content": "(agentLogger as unknown).error(message, context as unknown);",
      "context": "        (agentLogger as unknown).error(message, context as unknown);\n      } else {\n        (agentLogger as unknown).error(message, context as unknown);\n      }\n    },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 283,
      "content": "cli: (message: any) => (programLogger as unknown).info(String(message)),",
      "context": "    },\n    // Program/CLI logs (plain text to stderr)\n    cli: (message: any) => (programLogger as unknown).info(String(message)),\n    cliWarn: (message: any) => (programLogger as unknown).warn(String(message)),\n    cliError: (message: any) => (programLogger as unknown).error(String(message)),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 284,
      "content": "cliWarn: (message: any) => (programLogger as unknown).warn(String(message)),",
      "context": "    // Program/CLI logs (plain text to stderr)\n    cli: (message: any) => (programLogger as unknown).info(String(message)),\n    cliWarn: (message: any) => (programLogger as unknown).warn(String(message)),\n    cliError: (message: any) => (programLogger as unknown).error(String(message)),\n    // Add ability to set log level",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 285,
      "content": "cliError: (message: any) => (programLogger as unknown).error(String(message)),",
      "context": "    cli: (message: any) => (programLogger as unknown).info(String(message)),\n    cliWarn: (message: any) => (programLogger as unknown).warn(String(message)),\n    cliError: (message: any) => (programLogger as unknown).error(String(message)),\n    // Add ability to set log level\n    setLevel: (level: string) => {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 288,
      "content": "(agentLogger as unknown).level = level;",
      "context": "    // Add ability to set log level\n    setLevel: (level: string) => {\n      (agentLogger as unknown).level = level;\n      (programLogger as unknown).level = level;\n    },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 289,
      "content": "(programLogger as unknown).level = level;",
      "context": "    setLevel: (level: string) => {\n      (agentLogger as unknown).level = level;\n      (programLogger as unknown).level = level;\n    },\n    // Add additional CLI-oriented debug log",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 292,
      "content": "cliDebug: (message: any) => (programLogger as unknown).debug(String(message)),",
      "context": "    },\n    // Add additional CLI-oriented debug log\n    cliDebug: (message: any) => (programLogger as unknown).debug(String(message)),\n    // Add system-level debug logging that always goes to stderr, bypassing the mode limitations\n    // Use this for important system debugging that should always be visible when debug level is set",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 297,
      "content": "(programLogger as unknown).debug(String(message));",
      "context": "    systemDebug: (message: any) => {\n      // Always log to programLogger (stderr) regardless of mode\n      (programLogger as unknown).debug(String(message));\n    },\n    // Expose log mode information",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 330,
      "content": "(defaultLogger._internal.programLogger as unknown).error(\"Unhandled error or rejection, exiting.\", error as unknown);",
      "context": "  if (error) {\n    // Use default logger's internal program logger for unhandled errors that might crash the CLI\n    (defaultLogger._internal.programLogger as unknown).error(\"Unhandled error or rejection, exiting.\", error as unknown);\n  }\n  // Give logs a moment to flush",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/logger.ts",
      "line": 356,
      "content": "log.cli(`Is Terminal (TTY): ${Boolean((process.stdout as unknown).isTTY)}`);",
      "context": "  log.cli(`Is Structured Mode: ${log.isStructuredMode()}`);\n  log.cli(`Is Human Mode: ${log.isHumanMode()}`);\n  log.cli(`Is Terminal (TTY): ${Boolean((process.stdout as unknown).isTTY)}`);\n}\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/rules-helpers.ts",
      "line": 22,
      "content": "return (content as unknown).toString();",
      "context": "        // If it's a file, read its contents\n        const content = String(await fs.readFile(contentPath, \"utf-8\"));\n        return (content as unknown).toString();\n      } else {\n        // If it exists but is not a file (e.g., directory), throw an error",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-utils.ts",
      "line": 42,
      "content": "const processExitSpy = spyOn(process, \"exit\" as unknown).mockImplementation(() => { throw new Error(\"process.exit called\"); });",
      "context": "  const consoleLogSpy = spyOn(console, \"log\").mockImplementation(() => {});\n  const consoleErrorSpy = spyOn(console, \"error\").mockImplementation(() => {});\n  const processExitSpy = spyOn(process, \"exit\" as unknown).mockImplementation(() => { throw new Error(\"process.exit called\"); });\n\n  return { consoleLogSpy, consoleErrorSpy, processExitSpy };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-utils.ts",
      "line": 58,
      "content": "} as unknown as DateConstructor as unknown;",
      "context": "  const MockDate = function () {\n    return new originalDate(fixedDate);\n  } as unknown as DateConstructor as unknown;\n\n  // Copy all the static methods from the original Date",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/repository-utils.ts",
      "line": 41,
      "content": "if (!(RepositoryMetadataCache as unknown)!.instance) {",
      "context": "   */\n  static getInstance(): RepositoryMetadataCache {\n    if (!(RepositoryMetadataCache as unknown)!.instance) {\n      (RepositoryMetadataCache as unknown)!.instance = new RepositoryMetadataCache();\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/repository-utils.ts",
      "line": 42,
      "content": "(RepositoryMetadataCache as unknown)!.instance = new RepositoryMetadataCache();",
      "context": "  static getInstance(): RepositoryMetadataCache {\n    if (!(RepositoryMetadataCache as unknown)!.instance) {\n      (RepositoryMetadataCache as unknown)!.instance = new RepositoryMetadataCache();\n    }\n    return (RepositoryMetadataCache as unknown)!.instance;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/repository-utils.ts",
      "line": 44,
      "content": "return (RepositoryMetadataCache as unknown)!.instance;",
      "context": "      (RepositoryMetadataCache as unknown)!.instance = new RepositoryMetadataCache();\n    }\n    return (RepositoryMetadataCache as unknown)!.instance;\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/repository-utils.ts",
      "line": 56,
      "content": "const cacheEntry = (this.cache as unknown).get(key) as CacheEntry<T> | undefined;",
      "context": "   */\n  async get<T>(key: string, fetcher: () => Promise<T>, ttl: number = this.DEFAULT_TTL): Promise<T> {\n    const cacheEntry = (this.cache as unknown).get(key) as CacheEntry<T> | undefined;\n    const now = (Date as unknown).now();\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/repository-utils.ts",
      "line": 57,
      "content": "const now = (Date as unknown).now();",
      "context": "  async get<T>(key: string, fetcher: () => Promise<T>, ttl: number = this.DEFAULT_TTL): Promise<T> {\n    const cacheEntry = (this.cache as unknown).get(key) as CacheEntry<T> | undefined;\n    const now = (Date as unknown).now();\n\n    // If the entry exists and is not expired, return it",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/repository-utils.ts",
      "line": 60,
      "content": "if (cacheEntry && now - (cacheEntry as unknown)?.timestamp < ttl) {",
      "context": "\n    // If the entry exists and is not expired, return it\n    if (cacheEntry && now - (cacheEntry as unknown)?.timestamp < ttl) {\n      return (cacheEntry as unknown)!.data;\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/repository-utils.ts",
      "line": 61,
      "content": "return (cacheEntry as unknown)!.data;",
      "context": "    // If the entry exists and is not expired, return it\n    if (cacheEntry && now - (cacheEntry as unknown)?.timestamp < ttl) {\n      return (cacheEntry as unknown)!.data;\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/repository-utils.ts",
      "line": 66,
      "content": "(this.cache as unknown).set(key, { data, timestamp: now });",
      "context": "    // Otherwise fetch the data and update the cache\n    const data = await fetcher();\n    (this.cache as unknown).set(key, { data, timestamp: now });\n    return data;\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/repository-utils.ts",
      "line": 77,
      "content": "(this.cache as unknown).set(key, { data, timestamp: (Date as unknown).now() });",
      "context": "   */\n  set<T>(key: string, data: T): void {\n    (this.cache as unknown).set(key, { data, timestamp: (Date as unknown).now() });\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/repository-utils.ts",
      "line": 86,
      "content": "(this.cache as unknown).delete(key);",
      "context": "   */\n  invalidate(key: string): void {\n    (this.cache as unknown).delete(key);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/repository-utils.ts",
      "line": 97,
      "content": "if ((key as unknown).startsWith(prefix)) {",
      "context": "  invalidateByPrefix(prefix: string): void {\n    for (const key of Array.from(this.cache.keys())) {\n      if ((key as unknown).startsWith(prefix)) {\n        (this.cache as unknown).delete(key);\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/repository-utils.ts",
      "line": 98,
      "content": "(this.cache as unknown).delete(key);",
      "context": "    for (const key of Array.from(this.cache.keys())) {\n      if ((key as unknown).startsWith(prefix)) {\n        (this.cache as unknown).delete(key);\n      }\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/repository-utils.ts",
      "line": 107,
      "content": "(this.cache as unknown).clear();",
      "context": "   */\n  invalidateAll(): void {\n    (this.cache as unknown).clear();\n  }\n}",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/repository-utils.ts",
      "line": 127,
      "content": "key += `:${JSON.stringify(params as unknown)}`;",
      "context": "\n  if (params) {\n    key += `:${JSON.stringify(params as unknown)}`;\n  }\n",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/utils/repo.ts",
      "line": 13,
      "content": "return resolveRepoPathInternal(options as unknown);",
      "context": " */\nexport async function resolveRepoPath(options: RepoResolutionOptions = {}): Promise<string> {\n  return resolveRepoPathInternal(options as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/zod-error-formatter.ts",
      "line": 72,
      "content": "const enumIssue = issue as unknown; // Cast to access enum-specific properties",
      "context": "  }\n  \n  const enumIssue = issue as unknown; // Cast to access enum-specific properties\n  const value = enumIssue.received;\n  const options = enumIssue.options as string[];",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/zod-error-formatter.ts",
      "line": 109,
      "content": "const typeIssue = issue as unknown; // Cast to access type-specific properties",
      "context": "  }\n  \n  const typeIssue = issue as unknown; // Cast to access type-specific properties\n  const expectedType = typeIssue.expected;\n  const receivedType = typeIssue.received;",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/zod-error-formatter.ts",
      "line": 124,
      "content": "const sizeIssue = issue as unknown; // Cast to access size-specific properties",
      "context": "  }\n  \n  const sizeIssue = issue as unknown; // Cast to access size-specific properties\n  const minimum = sizeIssue.minimum;\n  const type = sizeIssue.type;",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/zod-error-formatter.ts",
      "line": 147,
      "content": "const sizeIssue = issue as unknown; // Cast to access size-specific properties",
      "context": "  }\n  \n  const sizeIssue = issue as unknown; // Cast to access size-specific properties\n  const maximum = sizeIssue.maximum;\n  const type = sizeIssue.type;",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/zod-error-formatter.ts",
      "line": 170,
      "content": "const stringIssue = issue as unknown; // Cast to access string-specific properties",
      "context": "  }\n  \n  const stringIssue = issue as unknown; // Cast to access string-specific properties\n  const validation = stringIssue.validation;\n  ",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/test-helpers.ts",
      "line": 22,
      "content": "if ((_options as unknown)!.recursive) {",
      "context": "\n  // If recursive, create parent directories\n  if ((_options as unknown)!.recursive) {\n    let parent = dirname(path);\n    while (parent && parent !== \".\" && parent !== \"/\") {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-helpers.ts",
      "line": 44,
      "content": "if ((_options as unknown)!.recursive) {",
      "context": "\n  // If recursive, remove all children first\n  if ((_options as unknown)!.recursive) {\n    const children = Array.from(virtualFS.keys()).filter((key) => (key as unknown).startsWith(`${path}/`));\n    for (const child of children) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-helpers.ts",
      "line": 45,
      "content": "const children = Array.from(virtualFS.keys()).filter((key) => (key as unknown).startsWith(`${path}/`));",
      "context": "  // If recursive, remove all children first\n  if ((_options as unknown)!.recursive) {\n    const children = Array.from(virtualFS.keys()).filter((key) => (key as unknown).startsWith(`${path}/`));\n    for (const child of children) {\n      virtualFS.delete(child);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-helpers.ts",
      "line": 68,
      "content": "if (!file || (file as unknown)?.isDirectory) {",
      "context": "  log.debug(`[MOCK] Reading file ${path}`);\n  const file = virtualFS.get(path);\n  if (!file || (file as unknown)?.isDirectory) {\n    throw new Error(`ENOENT: no such file or directory, open '${path}'`);\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-helpers.ts",
      "line": 71,
      "content": "return (file as unknown)?.content || \"\";",
      "context": "    throw new Error(`ENOENT: no such file or directory, open '${path}'`);\n  }\n  return (file as unknown)?.content || \"\";\n}\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-helpers.ts",
      "line": 100,
      "content": "return `/tmp/${prefix}-${(process as any)?.pid || 0}-${(Date as any).now()}-${(Math.random().toString(UUID_LENGTH) as unknown).substring(2, SHORT_ID_LENGTH)}`;",
      "context": " */\nexport function createUniqueTestDir(prefix: string): string {\n  return `/tmp/${prefix}-${(process as any)?.pid || 0}-${(Date as any).now()}-${(Math.random().toString(UUID_LENGTH) as unknown).substring(2, SHORT_ID_LENGTH)}`;\n}\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-helpers.ts",
      "line": 179,
      "content": "if (!result || (result as unknown)!.status === null) {",
      "context": " */\nexport function ensureValidCommandResult(result: SpawnSyncReturns<string>): void {\n  if (!result || (result as unknown)!.status === null) {\n    log.error(\"Command execution failed or was killed\");\n    throw new Error(\"Command execution failed\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-helpers.ts",
      "line": 184,
      "content": "if ((result as unknown)!.status !== 0) {",
      "context": "  }\n\n  if ((result as unknown)!.status !== 0) {\n    log.error(`Command failed with status ${(result as unknown)!.status}`);\n    log.error(`Stderr: ${(result as unknown)!.stderr}`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-helpers.ts",
      "line": 185,
      "content": "log.error(`Command failed with status ${(result as unknown)!.status}`);",
      "context": "\n  if ((result as unknown)!.status !== 0) {\n    log.error(`Command failed with status ${(result as unknown)!.status}`);\n    log.error(`Stderr: ${(result as unknown)!.stderr}`);\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-helpers.ts",
      "line": 186,
      "content": "log.error(`Stderr: ${(result as unknown)!.stderr}`);",
      "context": "  if ((result as unknown)!.status !== 0) {\n    log.error(`Command failed with status ${(result as unknown)!.status}`);\n    log.error(`Stderr: ${(result as unknown)!.stderr}`);\n  }\n}",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 27,
      "content": "repositoryPath: (projectContext as unknown).repositoryPath,",
      "context": "    if (projectContext) {\n      log.debug(\"CommandMapper initialized with project context\", {\n        repositoryPath: (projectContext as unknown).repositoryPath,\n      });\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 84,
      "content": "const normalizedName = this.normalizeMethodName((command as unknown).name);",
      "context": "  }): void {\n    // Normalize the method name for consistency and compatibility\n    const normalizedName = this.normalizeMethodName((command as unknown).name);\n\n    // Log the addition of the tool to help with debugging",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 89,
      "content": "originalName: (command as unknown).name,",
      "context": "    log.debug(\"Registering MCP tool\", {\n      methodName: normalizedName,\n      originalName: (command as unknown).name,\n      description: (command as unknown).description,\n      hasParameters: (command as unknown).parameters ? true : false,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 90,
      "content": "description: (command as unknown).description,",
      "context": "      methodName: normalizedName,\n      originalName: (command as unknown).name,\n      description: (command as unknown).description,\n      hasParameters: (command as unknown).parameters ? true : false,\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 91,
      "content": "hasParameters: (command as unknown).parameters ? true : false,",
      "context": "      originalName: (command as unknown).name,\n      description: (command as unknown).description,\n      hasParameters: (command as unknown).parameters ? true : false,\n    });\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 98,
      "content": "(this.server as unknown).addTool({",
      "context": "\n    // Register the tool with FastMCP\n    (this.server as unknown).addTool({\n      name: normalizedName,\n      description: (command as unknown).description,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 100,
      "content": "description: (command as unknown).description,",
      "context": "    (this.server as unknown).addTool({\n      name: normalizedName,\n      description: (command as unknown).description,\n      parameters: (command as unknown).parameters || z.object({}),\n      execute: async (args) => {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 101,
      "content": "parameters: (command as unknown).parameters || z.object({}),",
      "context": "      name: normalizedName,\n      description: (command as unknown).description,\n      parameters: (command as unknown).parameters || z.object({}),\n      execute: async (args) => {\n        try {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 108,
      "content": "(this.projectContext as unknown).repositoryPath &&",
      "context": "          if (\n            this.projectContext &&\n            (this.projectContext as unknown).repositoryPath &&\n            args &&\n            typeof args === \"object\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 115,
      "content": "repositoryPath: (this.projectContext as unknown).repositoryPath,",
      "context": "              args = {\n                ...args,\n                repositoryPath: (this.projectContext as unknown).repositoryPath,\n              };\n              log.debug(`Using default repository path for command ${normalizedName}`, {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 118,
      "content": "repositoryPath: (this.projectContext as unknown).repositoryPath,",
      "context": "              };\n              log.debug(`Using default repository path for command ${normalizedName}`, {\n                repositoryPath: (this.projectContext as unknown).repositoryPath,\n              });\n            }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 135,
      "content": "return JSON.stringify(result as unknown, undefined, 2);",
      "context": "          }\n          // Otherwise, return it as a JSON string for structured data\n          return JSON.stringify(result as unknown, undefined, 2);\n        } catch (error) {\n          const errorMessage = getErrorMessage(error as any);",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 151,
      "content": "if ((normalizedName as unknown).includes(\".\")) {",
      "context": "    // Also register the method with an underscore-based name if it contains dots\n    // This provides a fallback for JSON-RPC clients that have issues with dot notation\n    if ((normalizedName as unknown).includes(\".\")) {\n      const underscoreName = normalizedName.replace(/\\./g, \"_\");\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 165,
      "content": "(this.server as unknown).addTool({",
      "context": "\n        // Register the alias\n        (this.server as unknown).addTool({\n          name: underscoreName,\n          description: `${(command as unknown).description} (underscore alias)`,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 167,
      "content": "description: `${(command as unknown).description} (underscore alias)`,",
      "context": "        (this.server as unknown).addTool({\n          name: underscoreName,\n          description: `${(command as unknown).description} (underscore alias)`,\n          parameters: (command as unknown).parameters || z.object({}),\n          execute: async (args) => {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 168,
      "content": "parameters: (command as unknown).parameters || z.object({}),",
      "context": "          name: underscoreName,\n          description: `${(command as unknown).description} (underscore alias)`,\n          parameters: (command as unknown).parameters || z.object({}),\n          execute: async (args) => {\n            try {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 181,
      "content": "(this.projectContext as unknown).repositoryPath &&",
      "context": "              if (\n                this.projectContext &&\n                (this.projectContext as unknown).repositoryPath &&\n                args &&\n                typeof args === \"object\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 188,
      "content": "repositoryPath: (this.projectContext as unknown).repositoryPath,",
      "context": "                  args = {\n                    ...args,\n                    repositoryPath: (this.projectContext as unknown).repositoryPath,\n                  };\n                }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 199,
      "content": "return JSON.stringify(result as unknown, undefined, 2);",
      "context": "              }\n              // Otherwise, return it as a JSON string for structured data\n              return JSON.stringify(result as unknown, undefined, 2);\n            } catch (error) {\n              const errorMessage = getErrorMessage(error as any);",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 231,
      "content": "const hasRepositoryPath = (Object.keys(parameters.shape) as unknown).includes(\"repositoryPath\");",
      "context": "  ): void {\n    // Extend parameters to include optional repositoryPath if not already present\n    const hasRepositoryPath = (Object.keys(parameters.shape) as unknown).includes(\"repositoryPath\");\n\n    let extendedParameters: z.ZodTypeAny;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 236,
      "content": "extendedParameters = (parameters as unknown).extend({",
      "context": "    if (!hasRepositoryPath) {\n      // Create extended parameters including repositoryPath\n      extendedParameters = (parameters as unknown).extend({\n        repositoryPath: z\n          .string()",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 270,
      "content": "const hasRepositoryPath = (Object.keys(parameters.shape) as unknown).includes(\"repositoryPath\");",
      "context": "  ): void {\n    // Extend parameters to include optional repositoryPath if not already present\n    const hasRepositoryPath = (Object.keys(parameters.shape) as unknown).includes(\"repositoryPath\");\n\n    let extendedParameters: z.ZodTypeAny;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 274,
      "content": "extendedParameters = (parameters as unknown).extend({",
      "context": "    let extendedParameters: z.ZodTypeAny;\n    if (!hasRepositoryPath) {\n      extendedParameters = (parameters as unknown).extend({\n        repositoryPath: z\n          .string()",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 308,
      "content": "const hasRepositoryPath = (Object.keys(parameters.shape) as unknown).includes(\"repositoryPath\");",
      "context": "  ): void {\n    // Extend parameters to include optional repositoryPath if not already present\n    const hasRepositoryPath = (Object.keys(parameters.shape) as unknown).includes(\"repositoryPath\");\n\n    let extendedParameters: z.ZodTypeAny;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 312,
      "content": "extendedParameters = (parameters as unknown).extend({",
      "context": "    let extendedParameters: z.ZodTypeAny;\n    if (!hasRepositoryPath) {\n      extendedParameters = (parameters as unknown).extend({\n        repositoryPath: z\n          .string()",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 346,
      "content": "const hasRepositoryPath = (Object.keys(parameters.shape) as unknown).includes(\"repositoryPath\");",
      "context": "  ): void {\n    // Extend parameters to include optional repositoryPath if not already present\n    const hasRepositoryPath = (Object.keys(parameters.shape) as unknown).includes(\"repositoryPath\");\n\n    let extendedParameters: z.ZodTypeAny;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.ts",
      "line": 350,
      "content": "extendedParameters = (parameters as unknown).extend({",
      "context": "    let extendedParameters: z.ZodTypeAny;\n    if (!hasRepositoryPath) {\n      extendedParameters = (parameters as unknown).extend({\n        repositoryPath: z\n          .string()",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 99,
      "content": "this.projectContext = (options as unknown).projectContext || createProjectContextFromCwd();",
      "context": "    // Store the project context or create a default one\n    try {\n      this.projectContext = (options as unknown).projectContext || createProjectContextFromCwd();\n      log.debug(\"Using project context\", {\n        repositoryPath: (this.projectContext as unknown).repositoryPath,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 101,
      "content": "repositoryPath: (this.projectContext as unknown).repositoryPath,",
      "context": "      this.projectContext = (options as unknown).projectContext || createProjectContextFromCwd();\n      log.debug(\"Using project context\", {\n        repositoryPath: (this.projectContext as unknown).repositoryPath,\n      });\n    } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 115,
      "content": "name: (options as unknown).name || \"Minsky MCP Server\",",
      "context": "\n    this.options = {\n      name: (options as unknown).name || \"Minsky MCP Server\",\n      version: (options as unknown).version || \"1.0.0\", // Should be dynamically pulled from package.json\n      /* TODO: Verify if transportType is valid property */ transportType: (options as unknown).transportType || \"stdio\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 116,
      "content": "version: (options as unknown).version || \"1.0.0\", // Should be dynamically pulled from package.json",
      "context": "    this.options = {\n      name: (options as unknown).name || \"Minsky MCP Server\",\n      version: (options as unknown).version || \"1.0.0\", // Should be dynamically pulled from package.json\n      /* TODO: Verify if transportType is valid property */ transportType: (options as unknown).transportType || \"stdio\",\n      projectContext: this.projectContext,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 117,
      "content": "/* TODO: Verify if transportType is valid property */ transportType: (options as unknown).transportType || \"stdio\",",
      "context": "      name: (options as unknown).name || \"Minsky MCP Server\",\n      version: (options as unknown).version || \"1.0.0\", // Should be dynamically pulled from package.json\n      /* TODO: Verify if transportType is valid property */ transportType: (options as unknown).transportType || \"stdio\",\n      projectContext: this.projectContext,\n      sse: {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 120,
      "content": "/* TODO: Verify if endpoint is valid property */ endpoint: (options.sse as unknown).endpoint || \"/sse\",",
      "context": "      projectContext: this.projectContext,\n      sse: {\n        /* TODO: Verify if endpoint is valid property */ endpoint: (options.sse as unknown).endpoint || \"/sse\",\n        port: (options.sse as unknown).port || 8080,\n        host: (options.sse as unknown).host || \"localhost\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 121,
      "content": "port: (options.sse as unknown).port || 8080,",
      "context": "      sse: {\n        /* TODO: Verify if endpoint is valid property */ endpoint: (options.sse as unknown).endpoint || \"/sse\",\n        port: (options.sse as unknown).port || 8080,\n        host: (options.sse as unknown).host || \"localhost\",\n        path: (options.sse as unknown).path || \"/sse\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 122,
      "content": "host: (options.sse as unknown).host || \"localhost\",",
      "context": "        /* TODO: Verify if endpoint is valid property */ endpoint: (options.sse as unknown).endpoint || \"/sse\",\n        port: (options.sse as unknown).port || 8080,\n        host: (options.sse as unknown).host || \"localhost\",\n        path: (options.sse as unknown).path || \"/sse\",\n      },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 123,
      "content": "path: (options.sse as unknown).path || \"/sse\",",
      "context": "        port: (options.sse as unknown).port || 8080,\n        host: (options.sse as unknown).host || \"localhost\",\n        path: (options.sse as unknown).path || \"/sse\",\n      },\n      /* TODO: Verify if httpStream is valid property */ httpStream: {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 126,
      "content": "endpoint: (options.httpStream as unknown).endpoint || \"/mcp\",",
      "context": "      },\n      /* TODO: Verify if httpStream is valid property */ httpStream: {\n        endpoint: (options.httpStream as unknown).endpoint || \"/mcp\",\n        port: (options.httpStream as unknown).port || 8080,\n      },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 127,
      "content": "port: (options.httpStream as unknown).port || 8080,",
      "context": "      /* TODO: Verify if httpStream is valid property */ httpStream: {\n        endpoint: (options.httpStream as unknown).endpoint || \"/mcp\",\n        port: (options.httpStream as unknown).port || 8080,\n      },\n    };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 132,
      "content": "const serverName = (this.options as unknown).name || \"Minsky MCP Server\";",
      "context": "\n    // Ensure name and version are not undefined for FastMCP\n    const serverName = (this.options as unknown).name || \"Minsky MCP Server\";\n    // Use a valid semver format for the version string\n    const serverVersion = \"1.0.0\"; // Hard-coded to meet FastMCP's version type requirement",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 141,
      "content": "enabled: (this.options as unknown).transportType !== \"stdio\",",
      "context": "      ping: {\n        // Enable pings for network transports, disable for stdio\n        enabled: (this.options as unknown).transportType !== \"stdio\",\n        intervalMs: 5000,\n      },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 157,
      "content": "(this.server as unknown).on(\"connect\", () => {",
      "context": "\n    // Listen for client connections\n    (this.server as unknown).on(\"connect\", () => {\n      log.agent(\"Client connected to Minsky MCP Server\");\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 162,
      "content": "(this.server as unknown).on(\"disconnect\", () => {",
      "context": "\n    // Listen for client disconnections\n    (this.server as unknown).on(\"disconnect\", () => {\n      log.agent(\"Client disconnected from Minsky MCP Server\");\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 174,
      "content": "if (!(this.options as unknown).transportType) {",
      "context": "  async start(): Promise<void> {\n    try {\n      if (!(this.options as unknown).transportType) {\n        (this.options as unknown).transportType = \"stdio\";\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 175,
      "content": "(this.options as unknown).transportType = \"stdio\";",
      "context": "    try {\n      if (!(this.options as unknown).transportType) {\n        (this.options as unknown).transportType = \"stdio\";\n      }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 178,
      "content": "if ((this.options as unknown).transportType === \"stdio\") {",
      "context": "      }\n\n      if ((this.options as unknown).transportType === \"stdio\") {\n        await (this.server as unknown).start({ transportType: \"stdio\" });\n      } else if ((this.options as unknown).transportType === \"sse\" && (this.options as unknown).sse) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 179,
      "content": "await (this.server as unknown).start({ transportType: \"stdio\" });",
      "context": "\n      if ((this.options as unknown).transportType === \"stdio\") {\n        await (this.server as unknown).start({ transportType: \"stdio\" });\n      } else if ((this.options as unknown).transportType === \"sse\" && (this.options as unknown).sse) {\n        await (this.server as unknown).start({",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 180,
      "content": "} else if ((this.options as unknown).transportType === \"sse\" && (this.options as unknown).sse) {",
      "context": "      if ((this.options as unknown).transportType === \"stdio\") {\n        await (this.server as unknown).start({ transportType: \"stdio\" });\n      } else if ((this.options as unknown).transportType === \"sse\" && (this.options as unknown).sse) {\n        await (this.server as unknown).start({\n          transportType: \"sse\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 181,
      "content": "await (this.server as unknown).start({",
      "context": "        await (this.server as unknown).start({ transportType: \"stdio\" });\n      } else if ((this.options as unknown).transportType === \"sse\" && (this.options as unknown).sse) {\n        await (this.server as unknown).start({\n          transportType: \"sse\",\n          sse: {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 185,
      "content": "port: (this.options.sse as unknown).port || 8080,",
      "context": "          sse: {\n            endpoint: \"/sse\", // Endpoint must start with a / character\n            port: (this.options.sse as unknown).port || 8080,\n          },\n        });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 188,
      "content": "} else if ((this.options as unknown).transportType === \"httpStream\" && (this.options as unknown).httpStream) {",
      "context": "          },\n        });\n      } else if ((this.options as unknown).transportType === \"httpStream\" && (this.options as unknown).httpStream) {\n        await (this.server as unknown).start({\n          transportType: \"httpStream\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 189,
      "content": "await (this.server as unknown).start({",
      "context": "        });\n      } else if ((this.options as unknown).transportType === \"httpStream\" && (this.options as unknown).httpStream) {\n        await (this.server as unknown).start({\n          transportType: \"httpStream\",\n          httpStream: {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 193,
      "content": "port: (this.options.httpStream as unknown).port || 8080,",
      "context": "          httpStream: {\n            endpoint: \"/mcp\", // Updated endpoint to /mcp\n            port: (this.options.httpStream as unknown).port || 8080,\n          },\n        });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 198,
      "content": "await (this.server as unknown).start({ transportType: \"stdio\" });",
      "context": "      } else {\n        // Default to stdio if transport type is invalid\n        await (this.server as unknown).start({ transportType: \"stdio\" });\n      }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 209,
      "content": "if ((this.server as unknown)._tools) {",
      "context": "        const methods = [];\n        // @ts-ignore - Accessing a private property for debugging\n        if ((this.server as unknown)._tools) {\n          // @ts-ignore\n          methods.push(...Object.keys((this.server as unknown)._tools) as unknown);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 211,
      "content": "methods.push(...Object.keys((this.server as unknown)._tools) as unknown);",
      "context": "        if ((this.server as unknown)._tools) {\n          // @ts-ignore\n          methods.push(...Object.keys((this.server as unknown)._tools) as unknown);\n        }\n        log.debug(\"MCP Server registered methods\", {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 219,
      "content": "error: getErrorMessage(e as unknown),",
      "context": "      } catch (e) {\n        log.debug(\"Could not log MCP server methods\", {\n          error: getErrorMessage(e as unknown),\n        });\n      }",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/mcp/fastmcp-server.ts",
      "line": 38,
      "content": "name: (options as unknown).name ?? \"Minsky MCP Server\",",
      "context": "  constructor(options: MinskyMCPServerOptions = {}) {\n    this.options = {\n      name: (options as unknown).name ?? \"Minsky MCP Server\",\n      version: (options as unknown).version ?? \"1.0.0\",\n      /* TODO: Verify if transportType is valid property */ transportType: (options as unknown).transportType ?? \"stdio\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/fastmcp-server.ts",
      "line": 39,
      "content": "version: (options as unknown).version ?? \"1.0.0\",",
      "context": "    this.options = {\n      name: (options as unknown).name ?? \"Minsky MCP Server\",\n      version: (options as unknown).version ?? \"1.0.0\",\n      /* TODO: Verify if transportType is valid property */ transportType: (options as unknown).transportType ?? \"stdio\",\n      projectContext: (options as unknown).projectContext ?? createProjectContextFromCwd(),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/fastmcp-server.ts",
      "line": 40,
      "content": "/* TODO: Verify if transportType is valid property */ transportType: (options as unknown).transportType ?? \"stdio\",",
      "context": "      name: (options as unknown).name ?? \"Minsky MCP Server\",\n      version: (options as unknown).version ?? \"1.0.0\",\n      /* TODO: Verify if transportType is valid property */ transportType: (options as unknown).transportType ?? \"stdio\",\n      projectContext: (options as unknown).projectContext ?? createProjectContextFromCwd(),\n      sse: {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/fastmcp-server.ts",
      "line": 41,
      "content": "projectContext: (options as unknown).projectContext ?? createProjectContextFromCwd(),",
      "context": "      version: (options as unknown).version ?? \"1.0.0\",\n      /* TODO: Verify if transportType is valid property */ transportType: (options as unknown).transportType ?? \"stdio\",\n      projectContext: (options as unknown).projectContext ?? createProjectContextFromCwd(),\n      sse: {\n        host: (options.sse as unknown).host ?? \"localhost\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/fastmcp-server.ts",
      "line": 43,
      "content": "host: (options.sse as unknown).host ?? \"localhost\",",
      "context": "      projectContext: (options as unknown).projectContext ?? createProjectContextFromCwd(),\n      sse: {\n        host: (options.sse as unknown).host ?? \"localhost\",\n        path: (options.sse as unknown).path ?? \"/sse\",\n        port: (options.sse as unknown).port ?? 3000",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/fastmcp-server.ts",
      "line": 44,
      "content": "path: (options.sse as unknown).path ?? \"/sse\",",
      "context": "      sse: {\n        host: (options.sse as unknown).host ?? \"localhost\",\n        path: (options.sse as unknown).path ?? \"/sse\",\n        port: (options.sse as unknown).port ?? 3000\n      },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/fastmcp-server.ts",
      "line": 45,
      "content": "port: (options.sse as unknown).port ?? 3000",
      "context": "        host: (options.sse as unknown).host ?? \"localhost\",\n        path: (options.sse as unknown).path ?? \"/sse\",\n        port: (options.sse as unknown).port ?? 3000\n      },\n      /* TODO: Verify if httpStream is valid property */ httpStream: {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/fastmcp-server.ts",
      "line": 48,
      "content": "endpoint: (options.httpStream as unknown).endpoint ?? \"/mcp\",",
      "context": "      },\n      /* TODO: Verify if httpStream is valid property */ httpStream: {\n        endpoint: (options.httpStream as unknown).endpoint ?? \"/mcp\",\n        port: (options.httpStream as unknown).port ?? 8080\n      },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/fastmcp-server.ts",
      "line": 49,
      "content": "port: (options.httpStream as unknown).port ?? 8080",
      "context": "      /* TODO: Verify if httpStream is valid property */ httpStream: {\n        endpoint: (options.httpStream as unknown).endpoint ?? \"/mcp\",\n        port: (options.httpStream as unknown).port ?? 8080\n      },\n    };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/fastmcp-server.ts",
      "line": 53,
      "content": "this.projectContext = (this.options as unknown).projectContext;",
      "context": "    };\n\n    this.projectContext = (this.options as unknown).projectContext;\n\n    // Create the FastMCP server",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/fastmcp-server.ts",
      "line": 57,
      "content": "name: (this.options as unknown).name,",
      "context": "    // Create the FastMCP server\n    this.fastmcp = new FastMCP({\n      name: (this.options as unknown).name,\n      version: (this.options as unknown).version,\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/fastmcp-server.ts",
      "line": 58,
      "content": "version: (this.options as unknown).version,",
      "context": "    this.fastmcp = new FastMCP({\n      name: (this.options as unknown).name,\n      version: (this.options as unknown).version,\n    });\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/fastmcp-server.ts",
      "line": 80,
      "content": "log.agent(`Starting ${(this.options as unknown).name} with ${(this.options as unknown).transportType} transport`);",
      "context": "   */\n  async start(): Promise<void> {\n    log.agent(`Starting ${(this.options as unknown).name} with ${(this.options as unknown).transportType} transport`);\n\n    if ((this.options as unknown).transportType === \"stdio\") {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/fastmcp-server.ts",
      "line": 82,
      "content": "if ((this.options as unknown).transportType === \"stdio\") {",
      "context": "    log.agent(`Starting ${(this.options as unknown).name} with ${(this.options as unknown).transportType} transport`);\n\n    if ((this.options as unknown).transportType === \"stdio\") {\n      await this.fastmcp.start();\n      log.agent(\"MCP Server started with stdio transport\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/fastmcp-server.ts",
      "line": 85,
      "content": "} else if ((this.options as unknown).transportType === \"sse\") {",
      "context": "      await this.fastmcp.start();\n      log.agent(\"MCP Server started with stdio transport\");\n    } else if ((this.options as unknown).transportType === \"sse\") {\n      // SSE is not supported by FastMCP, fall back to httpStream\n      await this.fastmcp.start({",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/fastmcp-server.ts",
      "line": 90,
      "content": "port: (this.options.sse as unknown).port",
      "context": "        transportType: \"httpStream\",\n        httpStream: {\n          port: (this.options.sse as unknown).port\n        }\n      });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/fastmcp-server.ts",
      "line": 94,
      "content": "`MCP Server started with HTTP Stream transport (SSE fallback) on port ${(this.options.sse as unknown).port}`",
      "context": "      });\n      log.agent(\n        `MCP Server started with HTTP Stream transport (SSE fallback) on port ${(this.options.sse as unknown).port}`\n      );\n    } else if ((this.options as unknown).transportType === \"httpStream\") {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/fastmcp-server.ts",
      "line": 96,
      "content": "} else if ((this.options as unknown).transportType === \"httpStream\") {",
      "context": "        `MCP Server started with HTTP Stream transport (SSE fallback) on port ${(this.options.sse as unknown).port}`\n      );\n    } else if ((this.options as unknown).transportType === \"httpStream\") {\n      await this.fastmcp.start({\n        transportType: \"httpStream\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/fastmcp-server.ts",
      "line": 100,
      "content": "port: (this.options.httpStream as unknown).port",
      "context": "        transportType: \"httpStream\",\n        httpStream: {\n          port: (this.options.httpStream as unknown).port\n        }\n      });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/fastmcp-server.ts",
      "line": 104,
      "content": "`MCP Server started with HTTP Stream transport on port ${(this.options.httpStream as unknown).port}`",
      "context": "      });\n      log.agent(\n        `MCP Server started with HTTP Stream transport on port ${(this.options.httpStream as unknown).port}`\n      );\n    } else {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/fastmcp-server.ts",
      "line": 107,
      "content": "throw new Error(`Unsupported transport type: ${(this.options as unknown).transportType}`);",
      "context": "      );\n    } else {\n      throw new Error(`Unsupported transport type: ${(this.options as unknown).transportType}`);\n    }\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/fastmcp-command-mapper.ts",
      "line": 32,
      "content": "(this.server as unknown).addTool({",
      "context": "    log.debug(`Registering tool: ${name}`, { description });\n\n    (this.server as unknown).addTool({\n      name,\n      description,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/fastmcp-command-mapper.ts",
      "line": 49,
      "content": "this.addTool(`session.${name}`, description, schema, handler as unknown);",
      "context": "    handler: (args: z.infer<T>) => Promise<Record<string, any>>\n  ): void {\n    this.addTool(`session.${name}`, description, schema, handler as unknown);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/fastmcp-command-mapper.ts",
      "line": 61,
      "content": "this.addTool(`tasks.${name}`, description, schema, handler as unknown);",
      "context": "    handler: (args: z.infer<T>) => Promise<Record<string, any>>\n  ): void {\n    this.addTool(`tasks.${name}`, description, schema, handler as unknown);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/fastmcp-command-mapper.ts",
      "line": 73,
      "content": "this.addTool(`git.${name}`, description, schema, handler as unknown);",
      "context": "    handler: (args: z.infer<T>) => Promise<Record<string, any>>\n  ): void {\n    this.addTool(`git.${name}`, description, schema, handler as unknown);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/fastmcp-command-mapper.ts",
      "line": 80,
      "content": "(this.server as unknown).addTool({",
      "context": "   */\n  addCommand(command: { name: string; description: string; inputSchema?: any }): void {\n    (this.server as unknown).addTool({\n      name: (command as unknown).name,\n      description: (command as unknown).description,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/fastmcp-command-mapper.ts",
      "line": 81,
      "content": "name: (command as unknown).name,",
      "context": "  addCommand(command: { name: string; description: string; inputSchema?: any }): void {\n    (this.server as unknown).addTool({\n      name: (command as unknown).name,\n      description: (command as unknown).description,\n      parameters: command?.inputSchema || z.object({}),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/fastmcp-command-mapper.ts",
      "line": 82,
      "content": "description: (command as unknown).description,",
      "context": "    (this.server as unknown).addTool({\n      name: (command as unknown).name,\n      description: (command as unknown).description,\n      parameters: command?.inputSchema || z.object({}),\n      execute: async () => ({ success: true }),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/inspector-launcher.ts",
      "line": 101,
      "content": "SERVER_PORT: ((port + 3) as unknown).toString(), // Use a different port for the inspector server",
      "context": "      ...(process as any).env,\n      CLIENT_PORT: (port as any).toString(),\n      SERVER_PORT: ((port + 3) as unknown).toString(), // Use a different port for the inspector server\n    };\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/inspector-launcher.ts",
      "line": 106,
      "content": "(env as unknown).MCP_AUTO_OPEN_ENABLED = \"false\";",
      "context": "    // Configure auto-open based on openBrowser option\n    if (!openBrowser) {\n      (env as unknown).MCP_AUTO_OPEN_ENABLED = \"false\";\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/inspector-launcher.ts",
      "line": 110,
      "content": "(env as unknown).DANGEROUSLY_OMIT_AUTH = \"true\";",
      "context": "\n    // For security, we'll need to set this for auto-open to work\n    (env as unknown).DANGEROUSLY_OMIT_AUTH = \"true\";\n\n    log.debug(\"Launching MCP Inspector\", {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/inspector-launcher.ts",
      "line": 133,
      "content": "if (!(inspectorProcess as unknown).pid) {",
      "context": "\n    // Check for immediate launch errors\n    if (!(inspectorProcess as unknown).pid) {\n      return {\n        success: false,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/inspector-launcher.ts",
      "line": 141,
      "content": "(inspectorProcess as unknown).on(\"error\", (error) => {",
      "context": "\n    // Handle process events\n    (inspectorProcess as unknown).on(\"error\", (error) => {\n      log.error(\"MCP Inspector process error\", {\n        error: (error as any).message as any,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/inspector-launcher.ts",
      "line": 148,
      "content": "(inspectorProcess.stderr as unknown).on(\"data\", (data) => {",
      "context": "    });\n\n    (inspectorProcess.stderr as unknown).on(\"data\", (data) => {\n      log.error(`MCP Inspector stderr: ${(data as unknown)!.toString()}`);\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/inspector-launcher.ts",
      "line": 149,
      "content": "log.error(`MCP Inspector stderr: ${(data as unknown)!.toString()}`);",
      "context": "\n    (inspectorProcess.stderr as unknown).on(\"data\", (data) => {\n      log.error(`MCP Inspector stderr: ${(data as unknown)!.toString()}`);\n    });\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/inspector-launcher.ts",
      "line": 152,
      "content": "(inspectorProcess as unknown).on(\"exit\", (code, signal) => {",
      "context": "    });\n\n    (inspectorProcess as unknown).on(\"exit\", (code, signal) => {\n      log.debug(\"MCP Inspector process exited\", { code, signal });\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/command-mapper.test.ts",
      "line": 31,
      "content": "commandMapper = new CommandMapper(mockServer as unknown, mockProjectContext);",
      "context": "    } as ProjectContext;\n\n    commandMapper = new CommandMapper(mockServer as unknown, mockProjectContext);\n  });\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/types/project.ts",
      "line": 55,
      "content": "throw new Error(errorMessage as unknown);",
      "context": "    const errorMessage = `Invalid repository path: ${normalizedPath}`;\n    log.error(errorMessage);\n    throw new Error(errorMessage as unknown);\n  }\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/commands/mcp/index.ts",
      "line": 38,
      "content": "(mcpCommand as unknown).description(\"Model Context Protocol (MCP) server commands\");",
      "context": "export function createMCPCommand(): Command {\n  const mcpCommand = new Command(\"mcp\");\n  (mcpCommand as unknown).description(\"Model Context Protocol (MCP) server commands\");\n\n  // Start command",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/mcp/index.ts",
      "line": 42,
      "content": "(startCommand as unknown).description(\"Start the MCP server\");",
      "context": "  // Start command\n  const startCommand = new Command(\"start\");\n  (startCommand as unknown).description(\"Start the MCP server\");\n  (startCommand\n    .option(\"--stdio\", \"Use stdio transport (default)\")",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/mcp/index.ts",
      "line": 46,
      "content": ".option(\"-p, --port <port>\", \"Port for HTTP Stream server\", (DEFAULT_DEV_PORT as unknown).toString())",
      "context": "    .option(\"--stdio\", \"Use stdio transport (default)\")\n    .option(\"--http-stream\", \"Use HTTP Stream transport\")\n    .option(\"-p, --port <port>\", \"Port for HTTP Stream server\", (DEFAULT_DEV_PORT as unknown).toString())\n    .option(\"-h, --host <host>\", \"Host for HTTP Stream server\", \"localhost\")\n    .option(",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/mcp/index.ts",
      "line": 53,
      "content": ".option(\"--inspector-port <port>\", \"Port for the MCP inspector\", (INSPECTOR_PORT as unknown).toString()) as unknown).action(async (options) => {",
      "context": "    )\n    .option(\"--with-inspector\", \"Launch MCP inspector alongside the server\")\n    .option(\"--inspector-port <port>\", \"Port for the MCP inspector\", (INSPECTOR_PORT as unknown).toString()) as unknown).action(async (options) => {\n    try {\n      // Determine transport type based on options",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/mcp/index.ts",
      "line": 57,
      "content": "if ((options as unknown).httpStream) {",
      "context": "      // Determine transport type based on options\n      let transportType: \"stdio\" | \"sse\" | \"httpStream\" = \"stdio\";\n      if ((options as unknown).httpStream) {\n        transportType = \"httpStream\";\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/mcp/index.ts",
      "line": 62,
      "content": "const port = parseInt((options as unknown).port, 10);",
      "context": "\n      // Set port (used for HTTP Stream)\n      const port = parseInt((options as unknown).port, 10);\n\n      // Validate and prepare repository path if provided",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/mcp/index.ts",
      "line": 66,
      "content": "if ((options as unknown).repo) {",
      "context": "      // Validate and prepare repository path if provided\n      let projectContext;\n      if ((options as unknown).repo) {\n        const repositoryPath = path.resolve((options as unknown).repo);\n        // Validate that the path exists and is a directory",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/mcp/index.ts",
      "line": 67,
      "content": "const repositoryPath = path.resolve((options as unknown).repo);",
      "context": "      let projectContext;\n      if ((options as unknown).repo) {\n        const repositoryPath = path.resolve((options as unknown).repo);\n        // Validate that the path exists and is a directory\n        if (!fs.existsSync(repositoryPath)) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/mcp/index.ts",
      "line": 85,
      "content": "if ((SharedErrorHandler as unknown).isDebugMode() && error instanceof Error) {",
      "context": "        } catch (error) {\n          log.cliError(`Invalid repository path: ${repositoryPath}`);\n          if ((SharedErrorHandler as unknown).isDebugMode() && error instanceof Error) {\n            log.cliError((error as any).message);\n          }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/mcp/index.ts",
      "line": 95,
      "content": "host: (options as unknown).host,",
      "context": "        transportType,\n        port,\n        host: (options as unknown).host,\n        repositoryPath: (projectContext as any).repositoryPath || (process as any).cwd(),\n        withInspector: (options as any).withInspector || false,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/mcp/index.ts",
      "line": 98,
      "content": "inspectorPort: (options as unknown).inspectorPort,",
      "context": "        repositoryPath: (projectContext as any).repositoryPath || (process as any).cwd(),\n        withInspector: (options as any).withInspector || false,\n        inspectorPort: (options as unknown).inspectorPort,\n      });\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/mcp/index.ts",
      "line": 109,
      "content": "host: (options as unknown).host,",
      "context": "        sse: {\n          port: 8080, // Default SSE port (not currently used via CLI)\n          host: (options as unknown).host,\n          path: \"/mcp\", // Updated from /stream to /mcp per fastmcp v3.x\n        },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/mcp/index.ts",
      "line": 120,
      "content": "(server as unknown).getFastMCPServer(),",
      "context": "      // Register tools via adapter-based approach\n      const commandMapper = new CommandMapper(\n        (server as unknown).getFastMCPServer(),\n        (server as unknown).getProjectContext()\n      );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/mcp/index.ts",
      "line": 121,
      "content": "(server as unknown).getProjectContext()",
      "context": "      const commandMapper = new CommandMapper(\n        (server as unknown).getFastMCPServer(),\n        (server as unknown).getProjectContext()\n      );\n        // Register debug tools first to ensure they're available for debugging",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/mcp/index.ts",
      "line": 137,
      "content": "await (server as unknown).start();",
      "context": "\n      // Start the server\n      await (server as unknown).start();\n\n      log.cli(`Minsky MCP Server started with ${transportType} transport`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/mcp/index.ts",
      "line": 141,
      "content": "log.cli(`Repository path: ${(projectContext as unknown).repositoryPath}`);",
      "context": "      log.cli(`Minsky MCP Server started with ${transportType} transport`);\n      if (projectContext) {\n        log.cli(`Repository path: ${(projectContext as unknown).repositoryPath}`);\n      }\n      if (transportType !== \"stdio\") {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/mcp/index.ts",
      "line": 144,
      "content": "log.cli(`Listening on ${(options as unknown).host}:${port}`);",
      "context": "      }\n      if (transportType !== \"stdio\") {\n        log.cli(`Listening on ${(options as unknown).host}:${port}`);\n      }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/mcp/index.ts",
      "line": 148,
      "content": "if ((options as unknown).withInspector) {",
      "context": "\n      // Launch inspector if requested\n      if ((options as unknown).withInspector) {\n        // Check if inspector is available\n        if (!isInspectorAvailable()) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/mcp/index.ts",
      "line": 155,
      "content": "const inspectorPort = parseInt((options as unknown).inspectorPort, 10);",
      "context": "          );\n        } else {\n          const inspectorPort = parseInt((options as unknown).inspectorPort, 10);\n\n          // Launch the inspector",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/mcp/index.ts",
      "line": 163,
      "content": "mcpHost: transportType !== \"stdio\" ? (options as unknown).host : undefined,",
      "context": "            mcpTransportType: transportType,\n            mcpPort: transportType !== \"stdio\" ? port : undefined,\n            mcpHost: transportType !== \"stdio\" ? (options as unknown).host : undefined,\n          }) as unknown;\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/mcp/index.ts",
      "line": 164,
      "content": "}) as unknown;",
      "context": "            mcpPort: transportType !== \"stdio\" ? port : undefined,\n            mcpHost: transportType !== \"stdio\" ? (options as unknown).host : undefined,\n          }) as unknown;\n\n          if ((inspectorResult as unknown).success) {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/commands/mcp/index.ts",
      "line": 166,
      "content": "if ((inspectorResult as unknown).success) {",
      "context": "          }) as unknown;\n\n          if ((inspectorResult as unknown).success) {\n            log.cli(`MCP Inspector started on port ${inspectorPort}`);\n            log.cli(`Open your browser at ${(inspectorResult as unknown).url} to access the inspector`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/mcp/index.ts",
      "line": 168,
      "content": "log.cli(`Open your browser at ${(inspectorResult as unknown).url} to access the inspector`);",
      "context": "          if ((inspectorResult as unknown).success) {\n            log.cli(`MCP Inspector started on port ${inspectorPort}`);\n            log.cli(`Open your browser at ${(inspectorResult as unknown).url} to access the inspector`);\n          } else {\n            log.cliError(`Failed to start MCP Inspector: ${(inspectorResult as unknown).error}`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/mcp/index.ts",
      "line": 170,
      "content": "log.cliError(`Failed to start MCP Inspector: ${(inspectorResult as unknown).error}`);",
      "context": "            log.cli(`Open your browser at ${(inspectorResult as unknown).url} to access the inspector`);\n          } else {\n            log.cliError(`Failed to start MCP Inspector: ${(inspectorResult as unknown).error}`);\n            log.cliError(\"The MCP server will continue running without the inspector.\");\n          }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/mcp/index.ts",
      "line": 191,
      "content": "transportType: (options as unknown).httpStream ? \"httpStream\" : \"stdio\",",
      "context": "      // Log detailed error info for debugging\n      log.error(\"Failed to start MCP server\", {\n        transportType: (options as unknown).httpStream ? \"httpStream\" : \"stdio\",\n        port: (options as unknown).port,\n        host: (options as unknown).host,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/mcp/index.ts",
      "line": 192,
      "content": "port: (options as unknown).port,",
      "context": "      log.error(\"Failed to start MCP server\", {\n        transportType: (options as unknown).httpStream ? \"httpStream\" : \"stdio\",\n        port: (options as unknown).port,\n        host: (options as unknown).host,\n        withInspector: (options as unknown).withInspector || false,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/mcp/index.ts",
      "line": 193,
      "content": "host: (options as unknown).host,",
      "context": "        transportType: (options as unknown).httpStream ? \"httpStream\" : \"stdio\",\n        port: (options as unknown).port,\n        host: (options as unknown).host,\n        withInspector: (options as unknown).withInspector || false,\n        error: getErrorMessage(error as any),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/mcp/index.ts",
      "line": 194,
      "content": "withInspector: (options as unknown).withInspector || false,",
      "context": "        port: (options as unknown).port,\n        host: (options as unknown).host,\n        withInspector: (options as unknown).withInspector || false,\n        error: getErrorMessage(error as any),\n        stack: error instanceof Error ? (error as any).stack as any : undefined as any,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/mcp/index.ts",
      "line": 202,
      "content": "const networkError = createNetworkError(error as unknown, port, (options as unknown).host);",
      "context": "      if (isNetworkError(error as any)) {\n        const port = parseInt((options as any).port, 10);\n        const networkError = createNetworkError(error as unknown, port, (options as unknown).host);\n        const isDebug = (SharedErrorHandler as unknown).isDebugMode();\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/mcp/index.ts",
      "line": 203,
      "content": "const isDebug = (SharedErrorHandler as unknown).isDebugMode();",
      "context": "        const port = parseInt((options as any).port, 10);\n        const networkError = createNetworkError(error as unknown, port, (options as unknown).host);\n        const isDebug = (SharedErrorHandler as unknown).isDebugMode();\n\n        // Output user-friendly message with suggestions",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/mcp/index.ts",
      "line": 218,
      "content": "if ((SharedErrorHandler as unknown).isDebugMode() && error instanceof Error && (error as any).stack) {",
      "context": "\n        // Show stack trace only in debug mode\n        if ((SharedErrorHandler as unknown).isDebugMode() && error instanceof Error && (error as any).stack) {\n          log.cliError(\"\\nDebug information:\");\n          log.cliError((error as any).stack);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/config/show.ts",
      "line": 19,
      "content": ".option(\"--working-dir <dir>\", \"Working directory\", process.cwd()) as unknown).action(async (options: ShowOptions) => {",
      "context": "    .description(\"Show the final resolved configuration\")\n    .option(\"--json\", \"Output in JSON format\", false)\n    .option(\"--working-dir <dir>\", \"Working directory\", process.cwd()) as unknown).action(async (options: ShowOptions) => {\n    try {\n      // Use node-config directly for resolved configuration",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/config/show.ts",
      "line": 23,
      "content": "backend: (config as unknown).get(\"backend\"),",
      "context": "      // Use node-config directly for resolved configuration\n      const resolved = {\n        backend: (config as unknown).get(\"backend\"),\n        backendConfig: (config as unknown).get(\"backendConfig\"),\n        credentials: (config as unknown).get(\"credentials\"),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/config/show.ts",
      "line": 24,
      "content": "backendConfig: (config as unknown).get(\"backendConfig\"),",
      "context": "      const resolved = {\n        backend: (config as unknown).get(\"backend\"),\n        backendConfig: (config as unknown).get(\"backendConfig\"),\n        credentials: (config as unknown).get(\"credentials\"),\n        sessiondb: (config as unknown).get(\"sessiondb\"),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/config/show.ts",
      "line": 25,
      "content": "credentials: (config as unknown).get(\"credentials\"),",
      "context": "        backend: (config as unknown).get(\"backend\"),\n        backendConfig: (config as unknown).get(\"backendConfig\"),\n        credentials: (config as unknown).get(\"credentials\"),\n        sessiondb: (config as unknown).get(\"sessiondb\"),\n        ai: (config as unknown).has(\"ai\") ? (config as unknown).get(\"ai\") : undefined,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/config/show.ts",
      "line": 26,
      "content": "sessiondb: (config as unknown).get(\"sessiondb\"),",
      "context": "        backendConfig: (config as unknown).get(\"backendConfig\"),\n        credentials: (config as unknown).get(\"credentials\"),\n        sessiondb: (config as unknown).get(\"sessiondb\"),\n        ai: (config as unknown).has(\"ai\") ? (config as unknown).get(\"ai\") : undefined,\n      };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/config/show.ts",
      "line": 27,
      "content": "ai: (config as unknown).has(\"ai\") ? (config as unknown).get(\"ai\") : undefined,",
      "context": "        credentials: (config as unknown).get(\"credentials\"),\n        sessiondb: (config as unknown).get(\"sessiondb\"),\n        ai: (config as unknown).has(\"ai\") ? (config as unknown).get(\"ai\") : undefined,\n      };\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/config/show.ts",
      "line": 30,
      "content": "if ((options as unknown).json) {",
      "context": "      };\n\n      if ((options as unknown).json) {\n        await Bun.write(Bun.stdout, `${JSON.stringify(resolved)}\\n`);\n      } else {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/config/show.ts",
      "line": 39,
      "content": "}) as unknown;",
      "context": "      exit(1);\n    }\n  }) as unknown;\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/commands/config/show.ts",
      "line": 46,
      "content": "await Bun.write(Bun.stdout, `Backend: ${(resolved as unknown).backend}\\n`);",
      "context": "  await Bun.write(Bun.stdout, `${\"=\".repeat(40)}\\n`);\n\n  await Bun.write(Bun.stdout, `Backend: ${(resolved as unknown).backend}\\n`);\n\n  if (Object.keys(resolved.backendConfig).length > 0) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/config/show.ts",
      "line": 50,
      "content": "for (const [backend, config] of Object.entries((resolved as unknown).backendConfig)) {",
      "context": "  if (Object.keys(resolved.backendConfig).length > 0) {\n    await Bun.write(Bun.stdout, \"\\nBackend Configuration:\\n\");\n    for (const [backend, config] of Object.entries((resolved as unknown).backendConfig)) {\n      if (config && typeof config === \"object\" && Object.keys(config as object).length > 0) {\n        await Bun.write(Bun.stdout, `  ${backend}:\\n`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/config/show.ts",
      "line": 62,
      "content": "for (const [service, creds] of Object.entries((resolved as unknown).credentials)) {",
      "context": "  if (Object.keys(resolved.credentials).length > 0) {\n    await Bun.write(Bun.stdout, \"\\nCredentials:\\n\");\n    for (const [service, creds] of Object.entries((resolved as unknown).credentials)) {\n      if (creds && typeof creds === \"object\") {\n        await Bun.write(Bun.stdout, `  ${service}:\\n`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/config/show.ts",
      "line": 65,
      "content": "const credsObj = creds as unknown;",
      "context": "      if (creds && typeof creds === \"object\") {\n        await Bun.write(Bun.stdout, `  ${service}:\\n`);\n        const credsObj = creds as unknown;\n        if ((credsObj as unknown).source) {\n          await Bun.write(Bun.stdout, `    Source: ${(credsObj as unknown).source}\\n`);",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/commands/config/show.ts",
      "line": 66,
      "content": "if ((credsObj as unknown).source) {",
      "context": "        await Bun.write(Bun.stdout, `  ${service}:\\n`);\n        const credsObj = creds as unknown;\n        if ((credsObj as unknown).source) {\n          await Bun.write(Bun.stdout, `    Source: ${(credsObj as unknown).source}\\n`);\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/config/show.ts",
      "line": 67,
      "content": "await Bun.write(Bun.stdout, `    Source: ${(credsObj as unknown).source}\\n`);",
      "context": "        const credsObj = creds as unknown;\n        if ((credsObj as unknown).source) {\n          await Bun.write(Bun.stdout, `    Source: ${(credsObj as unknown).source}\\n`);\n        }\n        if ((credsObj as unknown).token) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/config/show.ts",
      "line": 69,
      "content": "if ((credsObj as unknown).token) {",
      "context": "          await Bun.write(Bun.stdout, `    Source: ${(credsObj as unknown).source}\\n`);\n        }\n        if ((credsObj as unknown).token) {\n          await Bun.write(Bun.stdout, `    Token: ${\"*\".repeat(20)} (hidden)\\n`);\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/config/list.ts",
      "line": 18,
      "content": ".option(\"--json\", \"Output in JSON format\", false) as unknown).action(async (options: ListOptions) => {",
      "context": "  return (new Command(\"list\")\n    .description(\"List all configuration values and their sources\")\n    .option(\"--json\", \"Output in JSON format\", false) as unknown).action(async (options: ListOptions) => {\n    try {\n      // Use node-config directly - it provides source information via config.util.getConfigSources()",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/config/list.ts",
      "line": 21,
      "content": "const sources = (config.util as unknown).getConfigSources();",
      "context": "    try {\n      // Use node-config directly - it provides source information via config.util.getConfigSources()\n      const sources = (config.util as unknown).getConfigSources();\n      const resolved = {\n        backend: (config as unknown).get(\"backend\"),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/config/list.ts",
      "line": 23,
      "content": "backend: (config as unknown).get(\"backend\"),",
      "context": "      const sources = (config.util as unknown).getConfigSources();\n      const resolved = {\n        backend: (config as unknown).get(\"backend\"),\n        backendConfig: (config as unknown).get(\"backendConfig\"),\n        credentials: (config as unknown).get(\"credentials\"),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/config/list.ts",
      "line": 24,
      "content": "backendConfig: (config as unknown).get(\"backendConfig\"),",
      "context": "      const resolved = {\n        backend: (config as unknown).get(\"backend\"),\n        backendConfig: (config as unknown).get(\"backendConfig\"),\n        credentials: (config as unknown).get(\"credentials\"),\n        sessiondb: (config as unknown).get(\"sessiondb\"),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/config/list.ts",
      "line": 25,
      "content": "credentials: (config as unknown).get(\"credentials\"),",
      "context": "        backend: (config as unknown).get(\"backend\"),\n        backendConfig: (config as unknown).get(\"backendConfig\"),\n        credentials: (config as unknown).get(\"credentials\"),\n        sessiondb: (config as unknown).get(\"sessiondb\"),\n        ai: (config as unknown).has(\"ai\") ? (config as unknown).get(\"ai\") : undefined,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/config/list.ts",
      "line": 26,
      "content": "sessiondb: (config as unknown).get(\"sessiondb\"),",
      "context": "        backendConfig: (config as unknown).get(\"backendConfig\"),\n        credentials: (config as unknown).get(\"credentials\"),\n        sessiondb: (config as unknown).get(\"sessiondb\"),\n        ai: (config as unknown).has(\"ai\") ? (config as unknown).get(\"ai\") : undefined,\n      };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/config/list.ts",
      "line": 27,
      "content": "ai: (config as unknown).has(\"ai\") ? (config as unknown).get(\"ai\") : undefined,",
      "context": "        credentials: (config as unknown).get(\"credentials\"),\n        sessiondb: (config as unknown).get(\"sessiondb\"),\n        ai: (config as unknown).has(\"ai\") ? (config as unknown).get(\"ai\") : undefined,\n      };\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/config/list.ts",
      "line": 30,
      "content": "if ((options as unknown).json) {",
      "context": "      };\n\n      if ((options as unknown).json) {\n        const output = {\n          resolved,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/config/list.ts",
      "line": 34,
      "content": "name: (source as unknown).name,",
      "context": "          resolved,\n          sources: sources.map(source => ({\n            name: (source as unknown).name,\n            original: (source as unknown).original,\n            parsed: (source as unknown).parsed",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/config/list.ts",
      "line": 35,
      "content": "original: (source as unknown).original,",
      "context": "          sources: sources.map(source => ({\n            name: (source as unknown).name,\n            original: (source as unknown).original,\n            parsed: (source as unknown).parsed\n          }))",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/config/list.ts",
      "line": 36,
      "content": "parsed: (source as unknown).parsed",
      "context": "            name: (source as unknown).name,\n            original: (source as unknown).original,\n            parsed: (source as unknown).parsed\n          }))\n        };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/config/list.ts",
      "line": 39,
      "content": "await Bun.write(Bun.stdout, `${JSON.stringify(output as unknown, undefined, 2)}\\n`);",
      "context": "          }))\n        };\n        await Bun.write(Bun.stdout, `${JSON.stringify(output as unknown, undefined, 2)}\\n`);\n      } else {\n        await displayConfigurationSources(resolved, sources);",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/commands/config/list.ts",
      "line": 47,
      "content": "}) as unknown;",
      "context": "      exit(1);\n    }\n  }) as unknown;\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/commands/config/list.ts",
      "line": 57,
      "content": "await Bun.write(Bun.stdout, `  ${sources.indexOf(source) + 1}. ${(source as unknown).name}\\n`);",
      "context": "  await Bun.write(Bun.stdout, \"Source Precedence (highest to lowest):\\n\");\n  for (const source of sources) {\n    await Bun.write(Bun.stdout, `  ${sources.indexOf(source) + 1}. ${(source as unknown).name}\\n`);\n  };\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/config/list.ts",
      "line": 61,
      "content": "await Bun.write(Bun.stdout, `Backend: ${(resolved as unknown).backend}\\n`);",
      "context": "\n  await Bun.write(Bun.stdout, \"\\nResolved Configuration:\\n\");\n  await Bun.write(Bun.stdout, `Backend: ${(resolved as unknown).backend}\\n`);\n  \n  if ((resolved as unknown).sessiondb) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/config/list.ts",
      "line": 63,
      "content": "if ((resolved as unknown).sessiondb) {",
      "context": "  await Bun.write(Bun.stdout, `Backend: ${(resolved as unknown).backend}\\n`);\n  \n  if ((resolved as unknown).sessiondb) {\n    await Bun.write(Bun.stdout, `SessionDB Backend: ${(resolved.sessiondb as unknown).backend}\\n`);\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/config/list.ts",
      "line": 64,
      "content": "await Bun.write(Bun.stdout, `SessionDB Backend: ${(resolved.sessiondb as unknown).backend}\\n`);",
      "context": "  \n  if ((resolved as unknown).sessiondb) {\n    await Bun.write(Bun.stdout, `SessionDB Backend: ${(resolved.sessiondb as unknown).backend}\\n`);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/config/index.ts",
      "line": 13,
      "content": ".description(\"Configuration management commands\") as unknown).addHelpText(",
      "context": "export function createConfigCommand(): Command {\n  const configCmd = (new Command(\"config\")\n    .description(\"Configuration management commands\") as unknown).addHelpText(\n    \"after\",\n    `",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/config/index.ts",
      "line": 24,
      "content": "(configCmd as unknown).addCommand(createConfigListCommand());",
      "context": "\n  // Add subcommands\n  (configCmd as unknown).addCommand(createConfigListCommand());\n  (configCmd as unknown).addCommand(createConfigShowCommand());\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/commands/config/index.ts",
      "line": 25,
      "content": "(configCmd as unknown).addCommand(createConfigShowCommand());",
      "context": "  // Add subcommands\n  (configCmd as unknown).addCommand(createConfigListCommand());\n  (configCmd as unknown).addCommand(createConfigShowCommand());\n\n  return configCmd;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/session/session-db-io.test.ts",
      "line": 67,
      "content": "const result = readSessionDbFile(undefined as unknown);",
      "context": "      // \"undefined is not an object (evaluating 'options.baseDir')\"\n      expect(() => {\n        const result = readSessionDbFile(undefined as unknown);\n        expect(result).toHaveProperty(\"sessions\");\n        expect(Array.isArray(result.sessions)).toBe(true);",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "src/domain/session/session-db-io.test.ts",
      "line": 78,
      "content": "const result = readSessionDbFile(null as unknown);",
      "context": "    test(\"should handle null options parameter without throwing runtime error\", () => {\n      expect(() => {\n        const result = readSessionDbFile(null as unknown);\n        expect(result).toHaveProperty(\"sessions\");\n        expect(Array.isArray(result.sessions)).toBe(true);",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "src/domain/session/session-db-io.test.ts",
      "line": 132,
      "content": "await writeSessionsToFile(testState.sessions, undefined as unknown);",
      "context": "\n      expect(() => {\n        await writeSessionsToFile(testState.sessions, undefined as unknown);\n        expect(typeof success).toBe(\"boolean\");\n      }).not.toThrow();",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "src/domain/session/session-db-io.test.ts",
      "line": 144,
      "content": "await writeSessionsToFile(testState.sessions, null as unknown);",
      "context": "\n      expect(() => {\n        await writeSessionsToFile(testState.sessions, null as unknown);\n        expect(typeof success).toBe(\"boolean\");\n      }).not.toThrow();",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "src/domain/session/session-db.test.ts",
      "line": 67,
      "content": "const state = initializeSessionDbState(undefined as unknown);",
      "context": "      // \"undefined is not an object (evaluating 'options.baseDir')\"\n      expect(() => {\n        const state = initializeSessionDbState(undefined as unknown);\n        expect(state).toHaveProperty(\"sessions\");\n        expect(state.sessions).toEqual([]);",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "src/domain/session/session-db.test.ts",
      "line": 79,
      "content": "const state = initializeSessionDbState(null as unknown);",
      "context": "      // Additional edge case to ensure robustness\n      expect(() => {\n        const state = initializeSessionDbState(null as unknown);\n        expect(state).toHaveProperty(\"sessions\");\n        expect(state.sessions).toEqual([]);",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "src/domain/session/session-db.test.ts",
      "line": 195,
      "content": "} as unknown;",
      "context": "        session: \"attempted-rename\",\n        branch: \"updated-branch\",\n      } as unknown;\n\n      const newState = updateSessionFn(state, \"test-session-1\", updates);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/session/session-db.test.ts",
      "line": 238,
      "content": "expect(() => getRepoPathFn(state, null as unknown)).toThrow(\"Session record is required\");",
      "context": "    it(\"should throw error for invalid input\", () => {\n      const state = createTestState();\n      expect(() => getRepoPathFn(state, null as unknown)).toThrow(\"Session record is required\");\n    });\n  });",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "src/domain/session/session-db.ts",
      "line": 69,
      "content": "state.sessions.find((s) => (s.taskId as unknown).replace(/^#/, \"\") === normalizedTaskId) ||",
      "context": "  const normalizedTaskId = taskId.replace(/^#/, \"\");\n  return (\n    state.sessions.find((s) => (s.taskId as unknown).replace(/^#/, \"\") === normalizedTaskId) ||\n    null\n  );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/session/session-db.ts",
      "line": 97,
      "content": "const { session: _, ...safeUpdates } = updates as unknown;",
      "context": "  }\n\n  const { session: _, ...safeUpdates } = updates as unknown;\n  const updatedSessions = [...state.sessions];\n  updatedSessions[index] = { ...updatedSessions[index], ...safeUpdates };",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/session/session-adapter.ts",
      "line": 146,
      "content": "await this.writeDb((newState as unknown).sessions);",
      "context": "    await this.readDb();\n    const newState = addSessionFn(this.state, _record);\n    await this.writeDb((newState as unknown).sessions);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/session/session-adapter.ts",
      "line": 158,
      "content": "await this.writeDb((newState as unknown).sessions);",
      "context": "    await this.readDb();\n    const newState = updateSessionFn(this.state, session, _updates);\n    await this.writeDb((newState as unknown).sessions);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/session/session-adapter.ts",
      "line": 174,
      "content": "await this.writeDb((newState as unknown).sessions);",
      "context": "    }\n\n    await this.writeDb((newState as unknown).sessions);\n    return true;\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/session/session-db-io.ts",
      "line": 35,
      "content": "const sessions = JSON.parse(data as unknown);",
      "context": "\n    const data = readFileSync(dbPath, \"utf8\") as string;\n    const sessions = JSON.parse(data as unknown);\n\n    return sessions;",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/domain/ai/config-service.ts",
      "line": 46,
      "content": "provider: provider as unknown,",
      "context": "      // Create provider config from unified configuration\n      return {\n        provider: provider as unknown,\n        apiKey,\n        baseURL: providerConfig.base_url,",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/ai/config-service.ts",
      "line": 71,
      "content": "return (result.resolved.ai as any).default_provider || \"openai\" as unknown;",
      "context": "    try {\n      const result = await (this.configService as any).loadConfiguration((process as any).cwd());\n      return (result.resolved.ai as any).default_provider || \"openai\" as unknown;\n    } catch (error) {\n      log.error(\"Failed to get default provider\", { error });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/__tests__/tasks.test.ts",
      "line": 43,
      "content": "backends: [] as unknown,",
      "context": "  ),\n  setTaskStatus: createMock(() => Promise.resolve()),\n  backends: [] as unknown,\n  currentBackend: {} as unknown,\n  getWorkspacePath: createMock(() => \"/mock/workspace/path\"),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/__tests__/tasks.test.ts",
      "line": 44,
      "content": "currentBackend: {} as unknown,",
      "context": "  setTaskStatus: createMock(() => Promise.resolve()),\n  backends: [] as unknown,\n  currentBackend: {} as unknown,\n  getWorkspacePath: createMock(() => \"/mock/workspace/path\"),\n  createTask: createMock((_specPath: unknown) => Promise.resolve({ ...mockTask, id: \"#new\" })),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/__tests__/tasks.test.ts",
      "line": 51,
      "content": "const mockCreateTaskService = createMock(() => mockTaskService as unknown);",
      "context": "const mockResolveRepoPath = createMock(() => Promise.resolve(\"/mock/repo/path\"));\nconst mockResolveMainWorkspacePath = createMock(() => Promise.resolve(\"/mock/workspace/path\"));\nconst mockCreateTaskService = createMock(() => mockTaskService as unknown);\n\n// Type assertion for mock dependencies",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/__tests__/tasks.test.ts",
      "line": 58,
      "content": "} as unknown; // Cast to any to avoid TypeScript errors with the deps parameter",
      "context": "  resolveMainWorkspacePath: mockResolveMainWorkspacePath,\n  createTaskService: mockCreateTaskService,\n} as unknown; // Cast to any to avoid TypeScript errors with the deps parameter\n\ndescribe(\"interface-agnostic task functions\", () => {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/__tests__/tasks.test.ts",
      "line": 214,
      "content": "status: \"INVALID-STATUS\" as unknown,",
      "context": "      const params = {\n        taskId: \"#TEST_VALUE\",\n        status: \"INVALID-STATUS\" as unknown,\n        backend: \"markdown\",\n      };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/workspace/special-workspace-manager.ts",
      "line": 303,
      "content": "const startTime = (Date as unknown).now();",
      "context": "   */\n  private async acquireLock(operation: string): Promise<void> {\n    const startTime = (Date as unknown).now();\n\n    while ((Date as unknown).now() - startTime < this?.lockTimeoutMs) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace/special-workspace-manager.ts",
      "line": 305,
      "content": "while ((Date as unknown).now() - startTime < this?.lockTimeoutMs) {",
      "context": "    const startTime = (Date as unknown).now();\n\n    while ((Date as unknown).now() - startTime < this?.lockTimeoutMs) {\n      try {\n        // Check if lock file exists",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace/special-workspace-manager.ts",
      "line": 313,
      "content": "if ((Date as unknown).now() - (lockInfo as unknown)?.timestamp > this?.lockTimeoutMs) {",
      "context": "\n          // Check if lock is stale\n          if ((Date as unknown).now() - (lockInfo as unknown)?.timestamp > this?.lockTimeoutMs) {\n            log.warn(\"Removing stale lock\", {\n              lockPath: this.lockPath,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace/local-workspace-backend.ts",
      "line": 35,
      "content": "if ((relativeToBoundary as unknown).startsWith(\"..\") || relativeToBoundary === \"..\") {",
      "context": "    \n    // If the relative path starts with \"..\", it's outside the workspace\n    if ((relativeToBoundary as unknown).startsWith(\"..\") || relativeToBoundary === \"..\") {\n      throw new InvalidPathError(\n        `Path '${relativePath}' resolves outside workspace boundaries`,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace/local-workspace-backend.ts",
      "line": 63,
      "content": "name: (relativePath.split(\"/\") as unknown).pop() || relativePath,",
      "context": "      \n      return {\n        name: (relativePath.split(\"/\") as unknown).pop() || relativePath,\n        path: relativePath,\n        type: stats.isDirectory() ? \"directory\" : \"file\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace/local-workspace-backend.ts",
      "line": 66,
      "content": "size: stats.isFile() ? (stats as unknown)?.size : undefined,",
      "context": "        path: relativePath,\n        type: stats.isDirectory() ? \"directory\" : \"file\",\n        size: stats.isFile() ? (stats as unknown)?.size : undefined,\n        lastModified: stats.mtime,\n      };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace/local-workspace-backend.ts",
      "line": 110,
      "content": "throw new FileNotFoundError(workspaceDir, relativePath, error as unknown);",
      "context": "      // Handle file not found\n      if (error instanceof Error && \"code\" in error && (error as any)?.code === \"ENOENT\") {\n        throw new FileNotFoundError(workspaceDir, relativePath, error as unknown);\n      }\n      ",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/workspace/local-workspace-backend.ts",
      "line": 132,
      "content": "const tempPath = `${fullPath}.tmp.${(Date as unknown).now()}`;",
      "context": "      \n      // Write the file atomically by writing to a temp file first\n      const tempPath = `${fullPath}.tmp.${(Date as unknown).now()}`;\n      \n      try {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace/local-workspace-backend.ts",
      "line": 209,
      "content": "throw new FileNotFoundError(workspaceDir, relativePath, error as unknown);",
      "context": "      // Handle file not found\n      if (error instanceof Error && \"code\" in error && (error as any)?.code === \"ENOENT\") {\n        throw new FileNotFoundError(workspaceDir, relativePath, error as unknown);\n      }\n      ",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/workspace/local-workspace-backend.ts",
      "line": 243,
      "content": "const entryPath = join(fullPath, entry as unknown);",
      "context": "      \n      for (const entry of entries) {\n        const entryPath = join(fullPath, entry as unknown);\n        try {\n          const fileInfo = await this.getFileInfo(entryPath, workspaceDir);",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/workspace/local-workspace-backend.ts",
      "line": 262,
      "content": "return (fileInfos as unknown).sort((a, b) => {",
      "context": "      });\n      \n      return (fileInfos as unknown).sort((a, b) => {\n        // Sort directories first, then files, then alphabetically\n        if ((a as unknown)?.type !== (b as unknown)?.type) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace/local-workspace-backend.ts",
      "line": 264,
      "content": "if ((a as unknown)?.type !== (b as unknown)?.type) {",
      "context": "      return (fileInfos as unknown).sort((a, b) => {\n        // Sort directories first, then files, then alphabetically\n        if ((a as unknown)?.type !== (b as unknown)?.type) {\n          return (a as unknown)?.type === \"directory\" ? -1 : 1;\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace/local-workspace-backend.ts",
      "line": 265,
      "content": "return (a as unknown)?.type === \"directory\" ? -1 : 1;",
      "context": "        // Sort directories first, then files, then alphabetically\n        if ((a as unknown)?.type !== (b as unknown)?.type) {\n          return (a as unknown)?.type === \"directory\" ? -1 : 1;\n        }\n        return (a.name as unknown).localeCompare((b as unknown).name);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace/local-workspace-backend.ts",
      "line": 267,
      "content": "return (a.name as unknown).localeCompare((b as unknown).name);",
      "context": "          return (a as unknown)?.type === \"directory\" ? -1 : 1;\n        }\n        return (a.name as unknown).localeCompare((b as unknown).name);\n      });\n    } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/workspace/local-workspace-backend.ts",
      "line": 276,
      "content": "throw new FileNotFoundError(workspaceDir, relativePath || \".\", error as unknown);",
      "context": "      // Handle directory not found\n      if (error instanceof Error && \"code\" in error && (error as any)?.code === \"ENOENT\") {\n        throw new FileNotFoundError(workspaceDir, relativePath || \".\", error as unknown);\n      }\n      ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 100,
      "content": "this.filePath = (options as unknown).filePath;",
      "context": "   */\n  constructor(options: JsonFileStorageOptions<S>) {\n    this.filePath = (options as unknown).filePath;\n    this.initializeState = (options as unknown).initializeState;\n    this.idField = (options as unknown).idField || \"id\";",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 101,
      "content": "this.initializeState = (options as unknown).initializeState;",
      "context": "  constructor(options: JsonFileStorageOptions<S>) {\n    this.filePath = (options as unknown).filePath;\n    this.initializeState = (options as unknown).initializeState;\n    this.idField = (options as unknown).idField || \"id\";\n    this.entitiesField = (options as unknown).entitiesField;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 102,
      "content": "this.idField = (options as unknown).idField || \"id\";",
      "context": "    this.filePath = (options as unknown).filePath;\n    this.initializeState = (options as unknown).initializeState;\n    this.idField = (options as unknown).idField || \"id\";\n    this.entitiesField = (options as unknown).entitiesField;\n    this.prettyPrint = (options as unknown).prettyPrint !== false;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 103,
      "content": "this.entitiesField = (options as unknown).entitiesField;",
      "context": "    this.initializeState = (options as unknown).initializeState;\n    this.idField = (options as unknown).idField || \"id\";\n    this.entitiesField = (options as unknown).entitiesField;\n    this.prettyPrint = (options as unknown).prettyPrint !== false;\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 104,
      "content": "this.prettyPrint = (options as unknown).prettyPrint !== false;",
      "context": "    this.idField = (options as unknown).idField || \"id\";\n    this.entitiesField = (options as unknown).entitiesField;\n    this.prettyPrint = (options as unknown).prettyPrint !== false;\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 120,
      "content": "const dataStr = typeof data === \"string\" ? data : String((data as unknown).toString());",
      "context": "\n      const data = readFileSync(this.filePath, \"utf8\").toString();\n      const dataStr = typeof data === \"string\" ? data : String((data as unknown).toString());\n\n      // Validate JSON before parsing to prevent stack overflow",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 123,
      "content": "if (!(((dataStr) as unknown).toString() as unknown).trim()) {",
      "context": "\n      // Validate JSON before parsing to prevent stack overflow\n      if (!(((dataStr) as unknown).toString() as unknown).trim()) {\n        // Handle empty file\n        const state = this.initializeState();",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 148,
      "content": "log.error(`Error reading database file ${this.filePath}: ${(typedError as unknown).message}`);",
      "context": "    } catch (error) {\n      const typedError = error instanceof Error ? error : new Error(String(error as any));\n      log.error(`Error reading database file ${this.filePath}: ${(typedError as unknown).message}`);\n      return {\n        success: false,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 168,
      "content": "throw new Error(\"Cannot serialize null or undefined state\" as unknown);",
      "context": "      // Validate state before serialization to prevent circular references\n      if (state === null || state === undefined) {\n        throw new Error(\"Cannot serialize null or undefined state\" as unknown);\n      }\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 178,
      "content": "(serializationError.message as unknown).includes(\"circular\")",
      "context": "        if (\n          serializationError instanceof Error &&\n          (serializationError.message as unknown).includes(\"circular\")\n        ) {\n          throw new Error(\"Cannot serialize state: circular reference detected\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 194,
      "content": "log.error(`Error writing database file ${this.filePath}: ${(typedError as unknown).message}`);",
      "context": "    } catch (error) {\n      const typedError = error instanceof Error ? error : new Error(String(error as any));\n      log.error(`Error writing database file ${this.filePath}: ${(typedError as unknown).message}`);\n      return {\n        success: false,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 210,
      "content": "if (!(result as unknown).success || !(result as unknown).data) {",
      "context": "  async getEntity(id: string, options?: DatabaseQueryOptions): Promise<T | null> {\n    const result = await this.readState();\n    if (!(result as unknown).success || !(result as unknown).data) {\n      return null;\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 214,
      "content": "const state = (result as unknown).data;",
      "context": "    }\n\n    const state = (result as unknown).data;\n    const entities = this.getEntitiesFromState(state);\n    const entity = entities.find((e) => (e as unknown)[this.idField] === id);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 216,
      "content": "const entity = entities.find((e) => (e as unknown)[this.idField] === id);",
      "context": "    const state = (result as unknown).data;\n    const entities = this.getEntitiesFromState(state);\n    const entity = entities.find((e) => (e as unknown)[this.idField] === id);\n\n    return entity || null;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 228,
      "content": "if (!(result as unknown).success || !(result as unknown).data) {",
      "context": "  async getEntities(options?: DatabaseQueryOptions): Promise<T[]> {\n    const result = await this.readState();\n    if (!(result as unknown).success || !(result as unknown).data) {\n      return [];\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 232,
      "content": "const state = (result as unknown).data;",
      "context": "    }\n\n    const state = (result as unknown).data;\n    const entities = this.getEntitiesFromState(state);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 241,
      "content": "for (const [key, value] of Object.entries(options as unknown)) {",
      "context": "    // Filter entities based on query options\n    return entities.filter((entity) => {\n      for (const [key, value] of Object.entries(options as unknown)) {\n        if ((entity as unknown)[key] !== value) {\n          return false;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 242,
      "content": "if ((entity as unknown)[key] !== value) {",
      "context": "    return entities.filter((entity) => {\n      for (const [key, value] of Object.entries(options as unknown)) {\n        if ((entity as unknown)[key] !== value) {\n          return false;\n        }",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 256,
      "content": "return (FileOperationLock as unknown).withLock(this.filePath, async () => {",
      "context": "   */\n  async createEntity(entity: T): Promise<T> {\n    return (FileOperationLock as unknown).withLock(this.filePath, async () => {\n      const result = await this.readState();\n      if (!(result as unknown).success) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 258,
      "content": "if (!(result as unknown).success) {",
      "context": "    return (FileOperationLock as unknown).withLock(this.filePath, async () => {\n      const result = await this.readState();\n      if (!(result as unknown).success) {\n        throw new Error(\n          `Failed to read database state: ${(result.error as unknown).message || \"Unknown error\"}`",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 260,
      "content": "`Failed to read database state: ${(result.error as unknown).message || \"Unknown error\"}`",
      "context": "      if (!(result as unknown).success) {\n        throw new Error(\n          `Failed to read database state: ${(result.error as unknown).message || \"Unknown error\"}`\n        );\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 264,
      "content": "const state = (result as unknown).data || this.initializeState();",
      "context": "      }\n\n      const state = (result as unknown).data || this.initializeState();\n      const entities = this.getEntitiesFromState(state);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 268,
      "content": "const id = (entity as unknown)[this.idField];",
      "context": "\n      // Check if entity with this ID already exists\n      const id = (entity as unknown)[this.idField];\n      if (id && (entities as unknown).some((e) => (e as unknown)[this.idField] === id)) {\n        throw new Error(`Entity with ID ${id} already exists`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 269,
      "content": "if (id && (entities as unknown).some((e) => (e as unknown)[this.idField] === id)) {",
      "context": "      // Check if entity with this ID already exists\n      const id = (entity as unknown)[this.idField];\n      if (id && (entities as unknown).some((e) => (e as unknown)[this.idField] === id)) {\n        throw new Error(`Entity with ID ${id} already exists`);\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 281,
      "content": "if (!(writeResult as unknown).success) {",
      "context": "      // Write updated state\n      const writeResult = await this.writeState(state);\n      if (!(writeResult as unknown).success) {\n        throw (writeResult as unknown).error || new Error(\"Failed to write database state\");\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 282,
      "content": "throw (writeResult as unknown).error || new Error(\"Failed to write database state\");",
      "context": "      const writeResult = await this.writeState(state);\n      if (!(writeResult as unknown).success) {\n        throw (writeResult as unknown).error || new Error(\"Failed to write database state\");\n      }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 296,
      "content": "return (FileOperationLock as unknown).withLock(this.filePath, async () => {",
      "context": "   */\n  async updateEntity(id: string, updates: Partial<T>): Promise<T | null> {\n    return (FileOperationLock as unknown).withLock(this.filePath, async () => {\n      const result = await this.readState();\n      if (!(result as unknown).success) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 298,
      "content": "if (!(result as unknown).success) {",
      "context": "    return (FileOperationLock as unknown).withLock(this.filePath, async () => {\n      const result = await this.readState();\n      if (!(result as unknown).success) {\n        throw new Error(\n          `Failed to read database state: ${(result.error as unknown).message || \"Unknown error\"}`",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 300,
      "content": "`Failed to read database state: ${(result.error as unknown).message || \"Unknown error\"}`",
      "context": "      if (!(result as unknown).success) {\n        throw new Error(\n          `Failed to read database state: ${(result.error as unknown).message || \"Unknown error\"}`\n        );\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 304,
      "content": "const state = (result as unknown).data || this.initializeState();",
      "context": "      }\n\n      const state = (result as unknown).data || this.initializeState();\n      const entities = this.getEntitiesFromState(state);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 308,
      "content": "const index = entities.findIndex((e) => (e as unknown)[this.idField] === id);",
      "context": "\n      // Find entity index\n      const index = entities.findIndex((e) => (e as unknown)[this.idField] === id);\n      if (index === -1) {\n        return null;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 322,
      "content": "if (!(writeResult as unknown).success) {",
      "context": "      // Write updated state\n      const writeResult = await this.writeState(state);\n      if (!(writeResult as unknown).success) {\n        throw (writeResult as unknown).error || new Error(\"Failed to write database state\");\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 323,
      "content": "throw (writeResult as unknown).error || new Error(\"Failed to write database state\");",
      "context": "      const writeResult = await this.writeState(state);\n      if (!(writeResult as unknown).success) {\n        throw (writeResult as unknown).error || new Error(\"Failed to write database state\");\n      }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 336,
      "content": "return (FileOperationLock as unknown).withLock(this.filePath, async () => {",
      "context": "   */\n  async deleteEntity(id: string): Promise<boolean> {\n    return (FileOperationLock as unknown).withLock(this.filePath, async () => {\n      const result = await this.readState();\n      if (!(result as unknown).success) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 338,
      "content": "if (!(result as unknown).success) {",
      "context": "    return (FileOperationLock as unknown).withLock(this.filePath, async () => {\n      const result = await this.readState();\n      if (!(result as unknown).success) {\n        throw new Error(\n          `Failed to read database state: ${(result.error as unknown).message || \"Unknown error\"}`",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 340,
      "content": "`Failed to read database state: ${(result.error as unknown).message || \"Unknown error\"}`",
      "context": "      if (!(result as unknown).success) {\n        throw new Error(\n          `Failed to read database state: ${(result.error as unknown).message || \"Unknown error\"}`\n        );\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 344,
      "content": "const state = (result as unknown).data || this.initializeState();",
      "context": "      }\n\n      const state = (result as unknown).data || this.initializeState();\n      const entities = this.getEntitiesFromState(state);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 348,
      "content": "const index = entities.findIndex((e) => (e as unknown)[this.idField] === id);",
      "context": "\n      // Find entity index\n      const index = entities.findIndex((e) => (e as unknown)[this.idField] === id);\n      if (index === -1) {\n        return false;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 361,
      "content": "if (!(writeResult as unknown).success) {",
      "context": "      // Write updated state\n      const writeResult = await this.writeState(state);\n      if (!(writeResult as unknown).success) {\n        throw (writeResult as unknown).error || new Error(\"Failed to write database state\");\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 362,
      "content": "throw (writeResult as unknown).error || new Error(\"Failed to write database state\");",
      "context": "      const writeResult = await this.writeState(state);\n      if (!(writeResult as unknown).success) {\n        throw (writeResult as unknown).error || new Error(\"Failed to write database state\");\n      }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 400,
      "content": "return (writeResult as unknown).success;",
      "context": "        const state = this.initializeState();\n        const writeResult = await this.writeState(state);\n        return (writeResult as unknown).success;\n      }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 452,
      "content": "return new JsonFileStorage<T, S>(options as unknown);",
      "context": "  options: JsonFileStorageOptions<S>\n): DatabaseStorage<T, S> {\n  return new JsonFileStorage<T, S>(options as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/storage/database-integrity-checker.ts",
      "line": 248,
      "content": "const integrityResult = db.prepare(\"PRAGMA integrity_check\").get() as unknown;",
      "context": "        try {\n          // Check database integrity\n          const integrityResult = db.prepare(\"PRAGMA integrity_check\").get() as unknown;\n          if (integrityResult?.integrity_check !== \"ok\") {\n            result.isValid = false;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/database-integrity-checker.ts",
      "line": 264,
      "content": "const sessionCount = db.prepare(\"SELECT COUNT(*) as count FROM sessions\").get() as unknown;",
      "context": "          // Check session count\n          try {\n            const sessionCount = db.prepare(\"SELECT COUNT(*) as count FROM sessions\").get() as unknown;\n            if (sessionCount?.count === 0) {\n              result.warnings.push(\"Database is empty - no sessions found\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 54,
      "content": "this.workspacePath = (options as unknown).workspacePath;",
      "context": "\n  constructor(options: JsonFileTaskBackendOptions) {\n    this.workspacePath = (options as unknown).workspacePath;\n    this.tasksDirectory = join(this.workspacePath, \"process\", \"tasks\");\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 63,
      "content": "if ((options as unknown).dbFilePath) {",
      "context": "    let dbFilePath: string;\n\n    if ((options as unknown).dbFilePath) {\n      // Use provided path (likely from special workspace or team configuration)\n      dbFilePath = (options as unknown).dbFilePath;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 65,
      "content": "dbFilePath = (options as unknown).dbFilePath;",
      "context": "    if ((options as unknown).dbFilePath) {\n      // Use provided path (likely from special workspace or team configuration)\n      dbFilePath = (options as unknown).dbFilePath;\n    } else {\n      // Try team-shareable location first",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 82,
      "content": "lastUpdated: (new Date() as unknown).toISOString(),",
      "context": "      initializeState: () => ({\n        tasks: [],\n        lastUpdated: (new Date() as unknown).toISOString(),\n        metadata: {\n          storageLocation: dbFilePath,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 86,
      "content": "createdAt: (new Date() as unknown).toISOString(),",
      "context": "          storageLocation: dbFilePath,\n          backendType: \"json-file\",\n          createdAt: (new Date() as unknown).toISOString(),\n        },\n      }),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 97,
      "content": "const result = await (this.storage as unknown).readState();",
      "context": "  async getTasksData(): Promise<TaskReadOperationResult> {\n    try {\n      const result = await (this.storage as unknown).readState();\n      if (!(result as unknown).success) {\n        return {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 98,
      "content": "if (!(result as unknown).success) {",
      "context": "    try {\n      const result = await (this.storage as unknown).readState();\n      if (!(result as unknown).success) {\n        return {\n          success: false,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 101,
      "content": "error: (result as unknown).error,",
      "context": "        return {\n          success: false,\n          error: (result as unknown).error,\n          filePath: (this.storage as unknown).getStorageLocation(),\n        } as unknown;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 102,
      "content": "filePath: (this.storage as unknown).getStorageLocation(),",
      "context": "          success: false,\n          error: (result as unknown).error,\n          filePath: (this.storage as unknown).getStorageLocation(),\n        } as unknown;\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 103,
      "content": "} as unknown;",
      "context": "          error: (result as unknown).error,\n          filePath: (this.storage as unknown).getStorageLocation(),\n        } as unknown;\n      }\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 107,
      "content": "const tasks = (result.data as unknown).tasks || [];",
      "context": "\n      // Convert state to a tasks.md-like format for compatibility\n      const tasks = (result.data as unknown).tasks || [];\n      const content = this.formatTasks(tasks);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 113,
      "content": "filePath: (this.storage as unknown).getStorageLocation(),",
      "context": "        success: true,\n        content,\n        filePath: (this.storage as unknown).getStorageLocation(),\n      };\n    } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 120,
      "content": "filePath: (this.storage as unknown).getStorageLocation(),",
      "context": "        success: false,\n        error: typedError,\n        filePath: (this.storage as unknown).getStorageLocation(),\n      };\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 127,
      "content": "const fullPath = (specPath as unknown).startsWith(\"/\")",
      "context": "  async getTaskSpecData(specPath: string): Promise<TaskReadOperationResult> {\n    try {\n      const fullPath = (specPath as unknown).startsWith(\"/\")\n        ? specPath\n        : join(this.workspacePath, specPath);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 165,
      "content": "lastUpdated: (new Date() as unknown).toISOString(),",
      "context": "    const state: TaskState = {\n      tasks: tasks,\n      lastUpdated: (new Date() as unknown).toISOString(),\n      metadata: {\n        storageLocation: (this.storage as unknown).getStorageLocation(),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 167,
      "content": "storageLocation: (this.storage as unknown).getStorageLocation(),",
      "context": "      lastUpdated: (new Date() as unknown).toISOString(),\n      metadata: {\n        storageLocation: (this.storage as unknown).getStorageLocation(),\n        backendType: this.name,\n        workspacePath: this.workspacePath,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 177,
      "content": "const lines = ((content as unknown).toString() as unknown).split(\"\\n\");",
      "context": "  parseTaskSpec(content: string): TaskSpecData {\n    // Basic parsing of task spec content\n    const lines = ((content as unknown).toString() as unknown).split(\"\\n\");\n    let title = \"\";\n    let description = \"\";",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 185,
      "content": "if ((trimmed as unknown).startsWith(\"# \")) {",
      "context": "    for (const line of lines) {\n      const trimmed = line.trim();\n      if ((trimmed as unknown).startsWith(\"# \")) {\n        const headerText = (trimmed as unknown).slice(2);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 186,
      "content": "const headerText = (trimmed as unknown).slice(2);",
      "context": "      const trimmed = line.trim();\n      if ((trimmed as unknown).startsWith(\"# \")) {\n        const headerText = (trimmed as unknown).slice(2);\n\n        // Try to extract task ID and title from header like \"Task #TEST_VALUE: Title\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 189,
      "content": "const taskMatch = (headerText as unknown).match(/^Task\\s+#?([A-Za-z0-9_]+):\\s*(.+)$/);",
      "context": "\n        // Try to extract task ID and title from header like \"Task #TEST_VALUE: Title\"\n        const taskMatch = (headerText as unknown).match(/^Task\\s+#?([A-Za-z0-9_]+):\\s*(.+)$/);\n        if (taskMatch && taskMatch[1] && taskMatch[2]) {\n          id = `#${taskMatch[1]}`;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 192,
      "content": "title = (taskMatch[2] as unknown).trim();",
      "context": "        if (taskMatch && taskMatch[1] && taskMatch[2]) {\n          id = `#${taskMatch[1]}`;\n          title = (taskMatch[2] as unknown).trim();\n        } else {\n          // Fallback: use entire header as title",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 199,
      "content": "} else if ((trimmed as unknown).startsWith(\"## \") && inDescription) {",
      "context": "      } else if (trimmed === \"## Context\" || trimmed === \"## Description\") {\n        inDescription = true;\n      } else if ((trimmed as unknown).startsWith(\"## \") && inDescription) {\n        inDescription = false;\n      } else if (inDescription && trimmed) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 216,
      "content": "return `# ${(spec as unknown).title}\\n\\n## Context\\n\\n${(spec as unknown).description}\\n`;",
      "context": "  formatTaskSpec(spec: TaskSpecData): string {\n    // Create markdown content\n    return `# ${(spec as unknown).title}\\n\\n## Context\\n\\n${(spec as unknown).description}\\n`;\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 283,
      "content": "lastUpdated: (new Date() as unknown).toISOString(),",
      "context": "      const state: TaskState = {\n        tasks,\n        lastUpdated: (new Date() as unknown).toISOString(),\n        metadata: {\n          storageLocation: (this.storage as unknown).getStorageLocation(),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 285,
      "content": "storageLocation: (this.storage as unknown).getStorageLocation(),",
      "context": "        lastUpdated: (new Date() as unknown).toISOString(),\n        metadata: {\n          storageLocation: (this.storage as unknown).getStorageLocation(),\n          backendType: this.name,\n          workspacePath: this.workspacePath,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 292,
      "content": "await (this.storage as unknown).initialize();",
      "context": "\n      // Initialize storage if needed\n      await (this.storage as unknown).initialize();\n\n      // Write to storage",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 295,
      "content": "const result = await (this.storage as unknown).writeState(state);",
      "context": "\n      // Write to storage\n      const result = await (this.storage as unknown).writeState(state);\n\n      return {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 298,
      "content": "success: (result as unknown).success,",
      "context": "\n      return {\n        success: (result as unknown).success,\n        error: (result as unknown).error,\n        bytesWritten: (result as unknown).bytesWritten,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 299,
      "content": "error: (result as unknown).error,",
      "context": "      return {\n        success: (result as unknown).success,\n        error: (result as unknown).error,\n        bytesWritten: (result as unknown).bytesWritten,\n        filePath: (this.storage as unknown).getStorageLocation(),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 300,
      "content": "bytesWritten: (result as unknown).bytesWritten,",
      "context": "        success: (result as unknown).success,\n        error: (result as unknown).error,\n        bytesWritten: (result as unknown).bytesWritten,\n        filePath: (this.storage as unknown).getStorageLocation(),\n      } as unknown;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 301,
      "content": "filePath: (this.storage as unknown).getStorageLocation(),",
      "context": "        error: (result as unknown).error,\n        bytesWritten: (result as unknown).bytesWritten,\n        filePath: (this.storage as unknown).getStorageLocation(),\n      } as unknown;\n    } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 302,
      "content": "} as unknown;",
      "context": "        bytesWritten: (result as unknown).bytesWritten,\n        filePath: (this.storage as unknown).getStorageLocation(),\n      } as unknown;\n    } catch (error) {\n      const typedError = error instanceof Error ? error : new Error(String(error as any));",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 308,
      "content": "filePath: (this.storage as unknown).getStorageLocation(),",
      "context": "        success: false,\n        error: typedError,\n        filePath: (this.storage as unknown).getStorageLocation(),\n      };\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 315,
      "content": "const fullPath = (specPath as unknown).startsWith(\"/\")",
      "context": "  async saveTaskSpecData(specPath: string, content: string): Promise<TaskWriteOperationResult> {\n    try {\n      const fullPath = (specPath as unknown).startsWith(\"/\")\n        ? specPath\n        : join(this.workspacePath, specPath);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 355,
      "content": "if (deleted && (existingTask as unknown).specPath) {",
      "context": "      const deleted = await this.deleteTaskData(normalizedId);\n\n      if (deleted && (existingTask as unknown).specPath) {\n        // Delete the spec file if it exists\n        try {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 358,
      "content": "const fullSpecPath = (existingTask.specPath as unknown).startsWith(\"/\")",
      "context": "        // Delete the spec file if it exists\n        try {\n          const fullSpecPath = (existingTask.specPath as unknown).startsWith(\"/\")\n            ? (existingTask as unknown).specPath\n            : join(this.workspacePath, (existingTask as unknown).specPath);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 359,
      "content": "? (existingTask as unknown).specPath",
      "context": "        try {\n          const fullSpecPath = (existingTask.specPath as unknown).startsWith(\"/\")\n            ? (existingTask as unknown).specPath\n            : join(this.workspacePath, (existingTask as unknown).specPath);\n          await unlink(fullSpecPath);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 360,
      "content": ": join(this.workspacePath, (existingTask as unknown).specPath);",
      "context": "          const fullSpecPath = (existingTask.specPath as unknown).startsWith(\"/\")\n            ? (existingTask as unknown).specPath\n            : join(this.workspacePath, (existingTask as unknown).specPath);\n          await unlink(fullSpecPath);\n        } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 364,
      "content": "log.debug(`Spec file could not be deleted: ${(existingTask as unknown).specPath}`, {",
      "context": "        } catch (error) {\n          // Spec file might not exist, log but don't fail the operation\n          log.debug(`Spec file could not be deleted: ${(existingTask as unknown).specPath}`, {\n            error: getErrorMessage(error as any),\n          });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 406,
      "content": "await (this.storage as unknown).initialize();",
      "context": "  async getAllTasks(): Promise<TaskData[]> {\n    try {\n      await (this.storage as unknown).initialize();\n      return await (this.storage as unknown).getEntities();\n    } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 407,
      "content": "return await (this.storage as unknown).getEntities();",
      "context": "    try {\n      await (this.storage as unknown).initialize();\n      return await (this.storage as unknown).getEntities();\n    } catch (error) {\n      log.error(\"Failed to get all tasks from database\", {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 423,
      "content": "await (this.storage as unknown).initialize();",
      "context": "  async getTaskById(id: string): Promise<TaskData | null> {\n    try {\n      await (this.storage as unknown).initialize();\n      return await (this.storage as unknown).getEntity(id);\n    } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 424,
      "content": "return await (this.storage as unknown).getEntity(id);",
      "context": "    try {\n      await (this.storage as unknown).initialize();\n      return await (this.storage as unknown).getEntity(id);\n    } catch (error) {\n      log.error(\"Failed to get task by ID from database\", {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 441,
      "content": "await (this.storage as unknown).initialize();",
      "context": "  async createTaskData(task: TaskData): Promise<TaskData> {\n    try {\n      await (this.storage as unknown).initialize();\n      return await (this.storage as unknown).createEntity(task);\n    } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 442,
      "content": "return await (this.storage as unknown).createEntity(task);",
      "context": "    try {\n      await (this.storage as unknown).initialize();\n      return await (this.storage as unknown).createEntity(task);\n    } catch (error) {\n      log.error(\"Failed to create task in database\", {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 460,
      "content": "await (this.storage as unknown).initialize();",
      "context": "  async updateTaskData(id: string, updates: Partial<TaskData>): Promise<TaskData | null> {\n    try {\n      await (this.storage as unknown).initialize();\n      return await (this.storage as unknown).updateEntity(id, updates);\n    } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 461,
      "content": "return await (this.storage as unknown).updateEntity(id, updates);",
      "context": "    try {\n      await (this.storage as unknown).initialize();\n      return await (this.storage as unknown).updateEntity(id, updates);\n    } catch (error) {\n      log.error(\"Failed to update task in database\", {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 479,
      "content": "await (this.storage as unknown).initialize();",
      "context": "  async deleteTaskData(id: string): Promise<boolean> {\n    try {\n      await (this.storage as unknown).initialize();\n      return await (this.storage as unknown).deleteEntity(id);\n    } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 480,
      "content": "return await (this.storage as unknown).deleteEntity(id);",
      "context": "    try {\n      await (this.storage as unknown).initialize();\n      return await (this.storage as unknown).deleteEntity(id);\n    } catch (error) {\n      log.error(\"Failed to delete task from database\", {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 495,
      "content": "return (this.storage as unknown).getStorageLocation();",
      "context": "   */\n  getStorageLocation(): string {\n    return (this.storage as unknown).getStorageLocation();\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 516,
      "content": "const lines = ((content as unknown).toString() as unknown).split(\"\\n\");",
      "context": "  private parseMarkdownTasks(content: string): TaskData[] {\n    const tasks: TaskData[] = [];\n    const lines = ((content as unknown).toString() as unknown).split(\"\\n\");\n\n    for (const line of lines) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 520,
      "content": "if ((trimmed as unknown).startsWith(\"- [ ] \") || (trimmed as unknown).startsWith(\"- [x] \")) {",
      "context": "    for (const line of lines) {\n      const trimmed = line.trim();\n      if ((trimmed as unknown).startsWith(\"- [ ] \") || (trimmed as unknown).startsWith(\"- [x] \")) {\n        const completed = (trimmed as unknown).startsWith(\"- [x] \");\n        const taskLine = (trimmed as unknown).slice(SIZE_6); // Remove '- [ ] ' or '- [x] '",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 521,
      "content": "const completed = (trimmed as unknown).startsWith(\"- [x] \");",
      "context": "      const trimmed = line.trim();\n      if ((trimmed as unknown).startsWith(\"- [ ] \") || (trimmed as unknown).startsWith(\"- [x] \")) {\n        const completed = (trimmed as unknown).startsWith(\"- [x] \");\n        const taskLine = (trimmed as unknown).slice(SIZE_6); // Remove '- [ ] ' or '- [x] '\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 522,
      "content": "const taskLine = (trimmed as unknown).slice(SIZE_6); // Remove '- [ ] ' or '- [x] '",
      "context": "      if ((trimmed as unknown).startsWith(\"- [ ] \") || (trimmed as unknown).startsWith(\"- [x] \")) {\n        const completed = (trimmed as unknown).startsWith(\"- [x] \");\n        const taskLine = (trimmed as unknown).slice(SIZE_6); // Remove '- [ ] ' or '- [x] '\n\n        // Extract task ID and title",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 525,
      "content": "const idMatch = (taskLine as unknown).match(/\\[#(\\d+)\\]/);",
      "context": "\n        // Extract task ID and title\n        const idMatch = (taskLine as unknown).match(/\\[#(\\d+)\\]/);\n        const linkMatch = (taskLine as unknown).match(/\\[([^\\]]+)\\]\\(([^)]+)\\)/);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 526,
      "content": "const linkMatch = (taskLine as unknown).match(/\\[([^\\]]+)\\]\\(([^)]+)\\)/);",
      "context": "        // Extract task ID and title\n        const idMatch = (taskLine as unknown).match(/\\[#(\\d+)\\]/);\n        const linkMatch = (taskLine as unknown).match(/\\[([^\\]]+)\\]\\(([^)]+)\\)/);\n\n        if (idMatch && idMatch[1] && linkMatch && linkMatch[1] && linkMatch[2]) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 554,
      "content": "return new JsonFileTaskBackend(config as unknown);",
      "context": "export function createJsonFileTaskBackend(config: JsonFileTaskBackendOptions): TaskBackend {\n  // Simply return the instance since JsonFileTaskBackend already implements TaskBackend\n  return new JsonFileTaskBackend(config as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks/task-backend-router.ts",
      "line": 53,
      "content": "const constructorName = (backend.constructor.name as unknown).toLowerCase();",
      "context": "   */\n  private autoDetectBackendCategory(backend: TaskBackend): BackendRoutingInfo {\n    const constructorName = (backend.constructor.name as unknown).toLowerCase();\n\n    // Markdown backends - always in-tree",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/task-backend-router.ts",
      "line": 56,
      "content": "if (backend instanceof MarkdownTaskBackend || (constructorName as unknown).includes(\"markdowntaskbackend\")) {",
      "context": "\n    // Markdown backends - always in-tree\n    if (backend instanceof MarkdownTaskBackend || (constructorName as unknown).includes(\"markdowntaskbackend\")) {\n      return {\n        category: \"in-tree\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/task-backend-router.ts",
      "line": 65,
      "content": "if (backend instanceof JsonFileTaskBackend || (constructorName as unknown).includes(\"jsonfiletaskbackend\")) {",
      "context": "\n    // JSON file backends - depends on file location\n    if (backend instanceof JsonFileTaskBackend || (constructorName as unknown).includes(\"jsonfiletaskbackend\")) {\n      return this.categorizeJsonBackend(backend as JsonFileTaskBackend);\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/task-backend-router.ts",
      "line": 109,
      "content": "if ((filePath as unknown).includes(\"process/tasks.json\") || (filePath as unknown).includes(\"process/.minsky/\")) {",
      "context": "      \n      // Check if it's in the repository directory structure\n      if ((filePath as unknown).includes(\"process/tasks.json\") || (filePath as unknown).includes(\"process/.minsky/\")) {\n        return {\n          category: \"in-tree\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/task-backend-router.ts",
      "line": 118,
      "content": "if ((filePath as unknown).includes(\".minsky/tasks.json\")) {",
      "context": "\n      // Check if it's in a local workspace directory\n      if ((filePath as unknown).includes(\".minsky/tasks.json\")) {\n        return {\n          category: \"in-tree\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/task-backend-router.ts",
      "line": 151,
      "content": "if ((dbPath as unknown).includes(\"process/\") || (dbPath as unknown).includes(\".git/\")) {",
      "context": "      \n      // Check if it's in the repository directory structure\n      if ((dbPath as unknown).includes(\"process/\") || (dbPath as unknown).includes(\".git/\")) {\n        return {\n          category: \"in-tree\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/task-backend-router.ts",
      "line": 184,
      "content": "this.specialWorkspaceManager = await (SpecialWorkspaceManager as unknown).create(this.repoUrl);",
      "context": "\n    if (!this.specialWorkspaceManager) {\n      this.specialWorkspaceManager = await (SpecialWorkspaceManager as unknown).create(this.repoUrl);\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/task-backend-router.ts",
      "line": 187,
      "content": "return (this.specialWorkspaceManager as unknown).getWorkspacePath();",
      "context": "    }\n\n    return (this.specialWorkspaceManager as unknown).getWorkspacePath();\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/task-backend-router.ts",
      "line": 206,
      "content": "this.specialWorkspaceManager = await (SpecialWorkspaceManager as unknown).create(this.repoUrl);",
      "context": "          throw new Error(\"Repository URL required for in-tree backend operations\");\n        }\n        this.specialWorkspaceManager = await (SpecialWorkspaceManager as unknown).create(this.repoUrl);\n      }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/task-backend-router.ts",
      "line": 209,
      "content": "return (this.specialWorkspaceManager as unknown).performOperation(operation, callback as unknown);",
      "context": "      }\n\n      return (this.specialWorkspaceManager as unknown).performOperation(operation, callback as unknown);\n    } else {\n      // Use current working directory for external backends",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/task-backend-router.ts",
      "line": 222,
      "content": "return (backend.constructor.name.toLowerCase() as unknown).includes(\"github\") ||",
      "context": "  private isGitHubBackend(backend: TaskBackend): boolean {\n    // Check if backend constructor name or class indicates GitHub\n    return (backend.constructor.name.toLowerCase() as unknown).includes(\"github\") ||\n           (backend.name.toLowerCase() as unknown).includes(\"github\");\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/task-backend-router.ts",
      "line": 223,
      "content": "(backend.name.toLowerCase() as unknown).includes(\"github\");",
      "context": "    // Check if backend constructor name or class indicates GitHub\n    return (backend.constructor.name.toLowerCase() as unknown).includes(\"github\") ||\n           (backend.name.toLowerCase() as unknown).includes(\"github\");\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/task-backend-router.ts",
      "line": 228,
      "content": "return (backend.constructor.name.toLowerCase() as unknown).includes(\"sqlite\") ||",
      "context": "  private isSqliteBackend(backend: TaskBackend): boolean {\n    // Check if backend constructor name or class indicates SQLite\n    return (backend.constructor.name.toLowerCase() as unknown).includes(\"sqlite\") ||\n           (backend.constructor.name.toLowerCase() as unknown).includes(\"sql\");\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/task-backend-router.ts",
      "line": 229,
      "content": "(backend.constructor.name.toLowerCase() as unknown).includes(\"sql\");",
      "context": "    // Check if backend constructor name or class indicates SQLite\n    return (backend.constructor.name.toLowerCase() as unknown).includes(\"sqlite\") ||\n           (backend.constructor.name.toLowerCase() as unknown).includes(\"sql\");\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/task-backend-router.ts",
      "line": 234,
      "content": "return (backend.constructor.name.toLowerCase() as unknown).includes(\"postgres\") ||",
      "context": "  private isPostgresBackend(backend: TaskBackend): boolean {\n    // Check if backend constructor name or class indicates PostgreSQL\n    return (backend.constructor.name.toLowerCase() as unknown).includes(\"postgres\") ||\n           (backend.constructor.name.toLowerCase() as unknown).includes(\"pg\");\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/task-backend-router.ts",
      "line": 235,
      "content": "(backend.constructor.name.toLowerCase() as unknown).includes(\"pg\");",
      "context": "    // Check if backend constructor name or class indicates PostgreSQL\n    return (backend.constructor.name.toLowerCase() as unknown).includes(\"postgres\") ||\n           (backend.constructor.name.toLowerCase() as unknown).includes(\"pg\");\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/task-backend-router.ts",
      "line": 243,
      "content": "if (typeof (backend as unknown).getStorageLocation === \"function\") {",
      "context": "  private getJsonBackendFilePath(backend: JsonFileTaskBackend): string {\n    // Try to get the storage location from the backend\n    if (typeof (backend as unknown).getStorageLocation === \"function\") {\n      return (backend as unknown).getStorageLocation();\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/task-backend-router.ts",
      "line": 244,
      "content": "return (backend as unknown).getStorageLocation();",
      "context": "    // Try to get the storage location from the backend\n    if (typeof (backend as unknown).getStorageLocation === \"function\") {\n      return (backend as unknown).getStorageLocation();\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/task-backend-router.ts",
      "line": 249,
      "content": "return (backend as unknown).filePath;",
      "context": "    // Try to access other file path properties\n    if (\"filePath\" in backend) {\n      return (backend as unknown).filePath;\n    }\n    ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/task-backend-router.ts",
      "line": 253,
      "content": "return (backend as unknown).fileName;",
      "context": "    \n    if (\"fileName\" in backend) {\n      return (backend as unknown).fileName;\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/task-backend-router.ts",
      "line": 266,
      "content": "return (backend as unknown).dbPath;",
      "context": "    // Try to access the database path property\n    if (\"dbPath\" in backend) {\n      return (backend as unknown).dbPath;\n    }\n    ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/task-backend-router.ts",
      "line": 270,
      "content": "return (backend as unknown).databasePath;",
      "context": "    \n    if (\"databasePath\" in backend) {\n      return (backend as unknown).databasePath;\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.test.ts",
      "line": 240,
      "content": "const updatedTasks = setTaskStatus(testTasks, \"#001\", \"INVALID\" as unknown);",
      "context": "\n    test(\"should return original array if status is invalid\", () => {\n      const updatedTasks = setTaskStatus(testTasks, \"#001\", \"INVALID\" as unknown);\n      expect(updatedTasks).toEqual(testTasks);\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/taskConstants.ts",
      "line": 71,
      "content": "return (Object.values(TASK_STATUS) as unknown).includes(status as TaskStatus);",
      "context": " */\nexport function isValidTaskStatus(status: string): status is TaskStatus {\n  return (Object.values(TASK_STATUS) as unknown).includes(status as TaskStatus);\n}\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskConstants.ts",
      "line": 87,
      "content": "}) as unknown).join(\"|\");",
      "context": "    if (char === \" \") return \" \";\n    return specialRegexChars.includes(char) ? `\\\\${char}` : char;\n  }) as unknown).join(\"|\");\n  return checkboxChars;\n}",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/task-backend-router.test.ts",
      "line": 70,
      "content": "delete (markdownBackend as unknown).isInTreeBackend;",
      "context": "\n      // Remove the isInTreeBackend method to test auto-detection\n      delete (markdownBackend as unknown).isInTreeBackend;\n      // Also delete from prototype if needed\n      const proto = Object.getPrototypeOf(markdownBackend);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/task-backend-router.test.ts",
      "line": 78,
      "content": "expect(typeof (markdownBackend as unknown).isInTreeBackend).toBe(\"undefined\");",
      "context": "\n      // Verify it's actually deleted\n      expect(typeof (markdownBackend as unknown).isInTreeBackend).toBe(\"undefined\");\n\n      const routingInfo = router.getBackendRoutingInfo(markdownBackend);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/task-backend-router.test.ts",
      "line": 96,
      "content": "delete (jsonBackend as unknown).isInTreeBackend;",
      "context": "\n      // Remove the isInTreeBackend method to test auto-detection\n      delete (jsonBackend as unknown).isInTreeBackend;\n      // Also delete from prototype if needed\n      const proto = Object.getPrototypeOf(jsonBackend);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/task-backend-router.test.ts",
      "line": 104,
      "content": "expect(typeof (jsonBackend as unknown).isInTreeBackend).toBe(\"undefined\");",
      "context": "\n      // Verify it's actually deleted\n      expect(typeof (jsonBackend as unknown).isInTreeBackend).toBe(\"undefined\");\n\n      const routingInfo = router.getBackendRoutingInfo(jsonBackend);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/task-backend-router.test.ts",
      "line": 122,
      "content": "delete (jsonBackend as unknown).isInTreeBackend;",
      "context": "\n      // Remove the isInTreeBackend method to test auto-detection\n      delete (jsonBackend as unknown).isInTreeBackend;\n      // Also delete from prototype if needed\n      const proto = Object.getPrototypeOf(jsonBackend);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/task-backend-router.test.ts",
      "line": 130,
      "content": "expect(typeof (jsonBackend as unknown).isInTreeBackend).toBe(\"undefined\");",
      "context": "\n      // Verify it's actually deleted\n      expect(typeof (jsonBackend as unknown).isInTreeBackend).toBe(\"undefined\");\n\n      const routingInfo = router.getBackendRoutingInfo(jsonBackend);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/task-backend-router.test.ts",
      "line": 148,
      "content": "delete (jsonBackend as unknown).isInTreeBackend;",
      "context": "\n      // Remove the isInTreeBackend method to test auto-detection\n      delete (jsonBackend as unknown).isInTreeBackend;\n      // Also delete from prototype if needed\n      const proto = Object.getPrototypeOf(jsonBackend);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/task-backend-router.test.ts",
      "line": 156,
      "content": "expect(typeof (jsonBackend as unknown).isInTreeBackend).toBe(\"undefined\");",
      "context": "\n      // Verify it's actually deleted\n      expect(typeof (jsonBackend as unknown).isInTreeBackend).toBe(\"undefined\");\n\n      const routingInfo = router.getBackendRoutingInfo(jsonBackend);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/task-backend-router.test.ts",
      "line": 176,
      "content": "(backend as unknown).isInTreeBackend = () => true;",
      "context": "\n      // Mock the isInTreeBackend method to return true\n      (backend as unknown).isInTreeBackend = () => true;\n\n      const routingInfo = router.getBackendRoutingInfo(backend);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/task-backend-router.test.ts",
      "line": 193,
      "content": "(backend as unknown).isInTreeBackend = () => false;",
      "context": "\n      // Mock the isInTreeBackend method to return false\n      (backend as unknown).isInTreeBackend = () => false;\n\n      const routingInfo = router.getBackendRoutingInfo(backend);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/task-backend-router.test.ts",
      "line": 226,
      "content": "delete (backend as unknown).isInTreeBackend;",
      "context": "\n      // Remove the isInTreeBackend method to use auto-detection\n      delete (backend as unknown).isInTreeBackend;\n      // Also delete from prototype if needed\n      const proto = Object.getPrototypeOf(backend);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/task-backend-router.test.ts",
      "line": 270,
      "content": "} as unknown;",
      "context": "        name: \"sqlite\",\n        constructor: { name: \"SqliteTaskBackend\" }\n      } as unknown;\n\n      const routingInfo = router.getBackendRoutingInfo(mockSqliteBackend);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/task-backend-router.test.ts",
      "line": 285,
      "content": "} as unknown;",
      "context": "        name: \"postgres\",\n        constructor: { name: \"PostgresTaskBackend\" }\n      } as unknown;\n\n      const routingInfo = router.getBackendRoutingInfo(mockPostgresBackend);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/task-backend-router.test.ts",
      "line": 301,
      "content": "} as unknown;",
      "context": "        name: \"unknown\",\n        constructor: { name: \"UnknownTaskBackend\" }\n      } as unknown;\n\n      const routingInfo = router.getBackendRoutingInfo(mockUnknownBackend);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/task-backend-router.test.ts",
      "line": 322,
      "content": "} as unknown;",
      "context": "          throw new Error(\"Storage location not available\");\n        }\n      } as unknown;\n\n      const routingInfo = router.getBackendRoutingInfo(mockBackend);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/githubBackendFactory.ts",
      "line": 20,
      "content": "const [{ getGitHubBackendConfig }, { createGitHubIssuesTaskBackend }] = await (Promise as unknown).all([",
      "context": "  try {\n    // Dynamic import to avoid hard dependency\n    const [{ getGitHubBackendConfig }, { createGitHubIssuesTaskBackend }] = await (Promise as unknown).all([\n      import(\"./githubBackendConfig\"),\n      import(\"./githubIssuesTaskBackend\"),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubBackendFactory.ts",
      "line": 26,
      "content": "if (!config || !(config as unknown)!.githubToken || !(config as unknown)!.owner || !(config as unknown)!.repo) {",
      "context": "\n    const config = getGitHubBackendConfig(workspacePath, { logErrors: shouldLogErrors });\n    if (!config || !(config as unknown)!.githubToken || !(config as unknown)!.owner || !(config as unknown)!.repo) {\n      return null;\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubBackendFactory.ts",
      "line": 33,
      "content": "githubToken: (config as unknown)!.githubToken,",
      "context": "      name: \"github-issues\",\n      workspacePath: workspacePath,\n      githubToken: (config as unknown)!.githubToken,\n      owner: (config as unknown)!.owner,\n      repo: (config as unknown)!.repo,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubBackendFactory.ts",
      "line": 34,
      "content": "owner: (config as unknown)!.owner,",
      "context": "      workspacePath: workspacePath,\n      githubToken: (config as unknown)!.githubToken,\n      owner: (config as unknown)!.owner,\n      repo: (config as unknown)!.repo,\n      statusLabels: (config as unknown)!.statusLabels,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubBackendFactory.ts",
      "line": 35,
      "content": "repo: (config as unknown)!.repo,",
      "context": "      githubToken: (config as unknown)!.githubToken,\n      owner: (config as unknown)!.owner,\n      repo: (config as unknown)!.repo,\n      statusLabels: (config as unknown)!.statusLabels,\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubBackendFactory.ts",
      "line": 36,
      "content": "statusLabels: (config as unknown)!.statusLabels,",
      "context": "      owner: (config as unknown)!.owner,\n      repo: (config as unknown)!.repo,\n      statusLabels: (config as unknown)!.statusLabels,\n    });\n  } catch (_error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubBackendConfig.ts",
      "line": 32,
      "content": "}) as unknown).toString() as unknown).trim();",
      "context": "      cwd: workspacePath,\n      encoding: \"utf8\",\n    }) as unknown).toString() as unknown).trim();\n\n    // Parse GitHub repository from various URL formats",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubBackendConfig.ts",
      "line": 37,
      "content": "const sshMatch = (remoteUrl as unknown).match(/git@github\\.com:([^\\/]+)\\/([^\\.]+)/);",
      "context": "    // SSH: git@github.com:owner/repo.git\n    // HTTPS: https://github.com/owner/repo.git\n    const sshMatch = (remoteUrl as unknown).match(/git@github\\.com:([^\\/]+)\\/([^\\.]+)/);\n    const httpsMatch = (remoteUrl as unknown).match(/https:\\/\\/github\\.com\\/([^\\/]+)\\/([^\\.]+)/);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubBackendConfig.ts",
      "line": 38,
      "content": "const httpsMatch = (remoteUrl as unknown).match(/https:\\/\\/github\\.com\\/([^\\/]+)\\/([^\\.]+)/);",
      "context": "    // HTTPS: https://github.com/owner/repo.git\n    const sshMatch = (remoteUrl as unknown).match(/git@github\\.com:([^\\/]+)\\/([^\\.]+)/);\n    const httpsMatch = (remoteUrl as unknown).match(/https:\\/\\/github\\.com\\/([^\\/]+)\\/([^\\.]+)/);\n\n    const match = sshMatch || httpsMatch;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubBackendConfig.ts",
      "line": 44,
      "content": "repo: (match[2] as unknown).replace(/\\.git$/, \"\"), // Remove .git suffix",
      "context": "      return {\n        owner: match[1],\n        repo: (match[2] as unknown).replace(/\\.git$/, \"\"), // Remove .git suffix\n      };\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubBackendConfig.ts",
      "line": 91,
      "content": "owner: (repoInfo as unknown).owner,",
      "context": "    workspacePath,\n    githubToken,\n    owner: (repoInfo as unknown).owner,\n    repo: (repoInfo as unknown).repo,\n  };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubBackendConfig.ts",
      "line": 92,
      "content": "repo: (repoInfo as unknown).repo,",
      "context": "    githubToken,\n    owner: (repoInfo as unknown).owner,\n    repo: (repoInfo as unknown).repo,\n  };\n}",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubBackendConfig.ts",
      "line": 109,
      "content": "await (octokit.rest.issues as unknown).getLabel({",
      "context": "      // Check if label already exists\n      try {\n        await (octokit.rest.issues as unknown).getLabel({\n          owner,\n          repo,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubBackendConfig.ts",
      "line": 124,
      "content": "await (octokit.rest.issues as unknown).createLabel({",
      "context": "\n      // Create the label\n      await (octokit.rest.issues as unknown).createLabel({\n        owner,\n        repo,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.test.ts",
      "line": 172,
      "content": "const saveTasksDataSpy = mockBackend.saveTasksData as unknown as jest.SpyInstance;",
      "context": "    test(\"should update a task's status\", async () => {\n      // Setup spy to check what's passed to saveTasksData\n      const saveTasksDataSpy = mockBackend.saveTasksData as unknown as jest.SpyInstance;\n      const formatTasksSpy = mockBackend.formatTasks as unknown as jest.SpyInstance;\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/tasks/taskService.test.ts",
      "line": 173,
      "content": "const formatTasksSpy = mockBackend.formatTasks as unknown as jest.SpyInstance;",
      "context": "      // Setup spy to check what's passed to saveTasksData\n      const saveTasksDataSpy = mockBackend.saveTasksData as unknown as jest.SpyInstance;\n      const formatTasksSpy = mockBackend.formatTasks as unknown as jest.SpyInstance;\n\n      await taskService.setTaskStatus(\"#001\", \"DONE\");",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 97,
      "content": "const sshMatch = (remoteUrl as unknown).match(/git@github\\.com:([^\\/]+)\\/([^\\.]+)/);",
      "context": "    // SSH: git@github.com:owner/repo.git\n    // HTTPS: https://github.com/owner/repo.git\n    const sshMatch = (remoteUrl as unknown).match(/git@github\\.com:([^\\/]+)\\/([^\\.]+)/);\n    const httpsMatch = (remoteUrl as unknown).match(/https:\\/\\/github\\.com\\/([^\\/]+)\\/([^\\.]+)/);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 98,
      "content": "const httpsMatch = (remoteUrl as unknown).match(/https:\\/\\/github\\.com\\/([^\\/]+)\\/([^\\.]+)/);",
      "context": "    // HTTPS: https://github.com/owner/repo.git\n    const sshMatch = (remoteUrl as unknown).match(/git@github\\.com:([^\\/]+)\\/([^\\.]+)/);\n    const httpsMatch = (remoteUrl as unknown).match(/https:\\/\\/github\\.com\\/([^\\/]+)\\/([^\\.]+)/);\n\n    const match = sshMatch || httpsMatch;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 104,
      "content": "repo: (match[2] as unknown).replace(/\\.git$/, \"\"), // Remove .git suffix",
      "context": "      return {\n        owner: match[1],\n        repo: (match[2] as unknown).replace(/\\.git$/, \"\"), // Remove .git suffix\n      };\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 173,
      "content": "const labelQueries = (Object.values(this.statusLabels) as unknown).join(\",\");",
      "context": "\n      // Fetch all issues with Minsky labels\n      const labelQueries = (Object.values(this.statusLabels) as unknown).join(\",\");\n      const response = await (this.octokit.rest.issues as unknown).listForRepo({\n        owner: this.owner,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 174,
      "content": "const response = await (this.octokit.rest.issues as unknown).listForRepo({",
      "context": "      // Fetch all issues with Minsky labels\n      const labelQueries = (Object.values(this.statusLabels) as unknown).join(\",\");\n      const response = await (this.octokit.rest.issues as unknown).listForRepo({\n        owner: this.owner,\n        repo: this.repo,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 182,
      "content": "const issues = (response as unknown).data;",
      "context": "      });\n\n      const issues = (response as unknown).data;\n      log.debug(`Retrieved ${issues.length} issues from GitHub`, {\n        owner: this.owner,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 189,
      "content": "const issueData = JSON.stringify(issues) as unknown;",
      "context": "\n      // Convert issues to a format that can be parsed by parseTasks\n      const issueData = JSON.stringify(issues) as unknown;\n\n      return {",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 218,
      "content": "const taskIdMatch = (fileName as unknown).match(/^(\\d+)-/);",
      "context": "      const pathParts = specPath.split(\"/\");\n      const fileName = pathParts[pathParts.length - 1];\n      const taskIdMatch = (fileName as unknown).match(/^(\\d+)-/);\n\n      if (!taskIdMatch || !taskIdMatch[1]) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 227,
      "content": "const response = await (this.octokit.rest.issues as unknown).listForRepo({",
      "context": "\n      // Try to find the corresponding GitHub issue\n      const response = await (this.octokit.rest.issues as unknown).listForRepo({\n        owner: this.owner,\n        repo: this.repo,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 230,
      "content": "labels: (Object.values(this.statusLabels) as unknown).join(\",\") as unknown,",
      "context": "        owner: this.owner,\n        repo: this.repo,\n        labels: (Object.values(this.statusLabels) as unknown).join(\",\") as unknown,\n        state: \"all\",\n      }) as unknown;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 232,
      "content": "}) as unknown;",
      "context": "        labels: (Object.values(this.statusLabels) as unknown).join(\",\") as unknown,\n        state: \"all\",\n      }) as unknown;\n\n      const issue = response.data.find((issue) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 236,
      "content": "return (issue.title as unknown).includes(taskId) || (issue.body as unknown).includes(taskId);",
      "context": "      const issue = response.data.find((issue) => {\n        // Look for issue with matching task ID in title or body\n        return (issue.title as unknown).includes(taskId) || (issue.body as unknown).includes(taskId);\n      });\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 247,
      "content": "const specContent = `# Task ${taskId}: ${(issue as unknown).title}",
      "context": "\n      // Generate spec content from issue\n      const specContent = `# Task ${taskId}: ${(issue as unknown).title}\n\n## Status",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 253,
      "content": "${(issue as unknown).body || \"No description provided\"}",
      "context": "\n## Description\n${(issue as unknown).body || \"No description provided\"}\n\n## GitHub Issue",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 256,
      "content": "- Issue: #${(issue as unknown).number}",
      "context": "\n## GitHub Issue\n- Issue: #${(issue as unknown).number}\n- URL: ${(issue as unknown).html_url}\n- State: ${(issue as unknown).state}",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 257,
      "content": "- URL: ${(issue as unknown).html_url}",
      "context": "## GitHub Issue\n- Issue: #${(issue as unknown).number}\n- URL: ${(issue as unknown).html_url}\n- State: ${(issue as unknown).state}\n- Created: ${(issue as unknown).created_at}",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 258,
      "content": "- State: ${(issue as unknown).state}",
      "context": "- Issue: #${(issue as unknown).number}\n- URL: ${(issue as unknown).html_url}\n- State: ${(issue as unknown).state}\n- Created: ${(issue as unknown).created_at}\n- Updated: ${(issue as unknown).updated_at}",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 259,
      "content": "- Created: ${(issue as unknown).created_at}",
      "context": "- URL: ${(issue as unknown).html_url}\n- State: ${(issue as unknown).state}\n- Created: ${(issue as unknown).created_at}\n- Updated: ${(issue as unknown).updated_at}\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 260,
      "content": "- Updated: ${(issue as unknown).updated_at}",
      "context": "- State: ${(issue as unknown).state}\n- Created: ${(issue as unknown).created_at}\n- Updated: ${(issue as unknown).updated_at}\n\n## Labels",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 263,
      "content": "${(issue.labels.map((label) => `- ${typeof label === \"string\" ? label : label.name}`) as unknown).join(\"\\n\")}",
      "context": "\n## Labels\n${(issue.labels.map((label) => `- ${typeof label === \"string\" ? label : label.name}`) as unknown).join(\"\\n\")}\n`;\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 306,
      "content": "const lines = (((content) as unknown).toString() as unknown).split(\"\\n\");",
      "context": "  parseTaskSpec(content: string): TaskSpecData {\n    // Parse markdown content to extract task specification\n    const lines = (((content) as unknown).toString() as unknown).split(\"\\n\");\n    let title = \"\";\n    let description = \"\";",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 317,
      "content": "if ((trimmed as unknown).startsWith(\"# \")) {",
      "context": "      const trimmed = line.trim();\n\n      if ((trimmed as unknown).startsWith(\"# \")) {\n        title = ((trimmed as unknown).substring(2) as unknown).trim();\n        // Extract task ID from title if present",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 318,
      "content": "title = ((trimmed as unknown).substring(2) as unknown).trim();",
      "context": "\n      if ((trimmed as unknown).startsWith(\"# \")) {\n        title = ((trimmed as unknown).substring(2) as unknown).trim();\n        // Extract task ID from title if present\n        const taskIdMatch = (title as unknown).match(/^Task (#\\d+):/);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 320,
      "content": "const taskIdMatch = (title as unknown).match(/^Task (#\\d+):/);",
      "context": "        title = ((trimmed as unknown).substring(2) as unknown).trim();\n        // Extract task ID from title if present\n        const taskIdMatch = (title as unknown).match(/^Task (#\\d+):/);\n        if (taskIdMatch) {\n          (metadata as unknown).taskId = taskIdMatch[1];",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 322,
      "content": "(metadata as unknown).taskId = taskIdMatch[1];",
      "context": "        const taskIdMatch = (title as unknown).match(/^Task (#\\d+):/);\n        if (taskIdMatch) {\n          (metadata as unknown).taskId = taskIdMatch[1];\n          title = ((title as unknown).substring(taskIdMatch[0].length) as unknown).trim();\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 323,
      "content": "title = ((title as unknown).substring(taskIdMatch[0].length) as unknown).trim();",
      "context": "        if (taskIdMatch) {\n          (metadata as unknown).taskId = taskIdMatch[1];\n          title = ((title as unknown).substring(taskIdMatch[0].length) as unknown).trim();\n        }\n      } else if ((trimmed as unknown).startsWith(\"## \")) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 325,
      "content": "} else if ((trimmed as unknown).startsWith(\"## \")) {",
      "context": "          title = ((title as unknown).substring(taskIdMatch[0].length) as unknown).trim();\n        }\n      } else if ((trimmed as unknown).startsWith(\"## \")) {\n        currentSection = ((trimmed.substring(3) as unknown).trim() as unknown).toLowerCase();\n        if (currentSection === \"description\") {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 326,
      "content": "currentSection = ((trimmed.substring(3) as unknown).trim() as unknown).toLowerCase();",
      "context": "        }\n      } else if ((trimmed as unknown).startsWith(\"## \")) {\n        currentSection = ((trimmed.substring(3) as unknown).trim() as unknown).toLowerCase();\n        if (currentSection === \"description\") {\n          descriptionLines = [];",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 335,
      "content": "description = (descriptionLines as unknown).join(\"\\n\");",
      "context": "    }\n\n    description = (descriptionLines as unknown).join(\"\\n\");\n\n    return {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 347,
      "content": "let content = `# Task ${(metadata as unknown).taskId || \"#000\"}: ${title}\\n\\n`;",
      "context": "    const { title, description, metadata } = spec;\n\n    let content = `# Task ${(metadata as unknown).taskId || \"#000\"}: ${title}\\n\\n`;\n\n    if (description) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 354,
      "content": "if ((metadata as unknown).githubIssue) {",
      "context": "\n    // Add GitHub-specific metadata if available\n    if ((metadata as unknown).githubIssue) {\n      const githubIssue = (metadata as unknown).githubIssue as unknown;\n      content += \"## GitHub Issue\\n\";",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 355,
      "content": "const githubIssue = (metadata as unknown).githubIssue as unknown;",
      "context": "    // Add GitHub-specific metadata if available\n    if ((metadata as unknown).githubIssue) {\n      const githubIssue = (metadata as unknown).githubIssue as unknown;\n      content += \"## GitHub Issue\\n\";\n      content += `- Issue: #${(githubIssue as unknown).number}\\n`;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 357,
      "content": "content += `- Issue: #${(githubIssue as unknown).number}\\n`;",
      "context": "      const githubIssue = (metadata as unknown).githubIssue as unknown;\n      content += \"## GitHub Issue\\n\";\n      content += `- Issue: #${(githubIssue as unknown).number}\\n`;\n      content += `- URL: ${(githubIssue as unknown).html_url}\\n`;\n      content += `- State: ${(githubIssue as unknown).state}\\n\\n`;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 358,
      "content": "content += `- URL: ${(githubIssue as unknown).html_url}\\n`;",
      "context": "      content += \"## GitHub Issue\\n\";\n      content += `- Issue: #${(githubIssue as unknown).number}\\n`;\n      content += `- URL: ${(githubIssue as unknown).html_url}\\n`;\n      content += `- State: ${(githubIssue as unknown).state}\\n\\n`;\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 359,
      "content": "content += `- State: ${(githubIssue as unknown).state}\\n\\n`;",
      "context": "      content += `- Issue: #${(githubIssue as unknown).number}\\n`;\n      content += `- URL: ${(githubIssue as unknown).html_url}\\n`;\n      content += `- State: ${(githubIssue as unknown).state}\\n\\n`;\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 442,
      "content": "title: (task as unknown).title,",
      "context": "  private convertTaskDataToIssueFormat(task: TaskData): any {\n    return {\n      title: (task as unknown).title,\n      body: (task as unknown).description,\n      labels: this.getLabelsForTaskStatus((task as unknown).status),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 443,
      "content": "body: (task as unknown).description,",
      "context": "    return {\n      title: (task as unknown).title,\n      body: (task as unknown).description,\n      labels: this.getLabelsForTaskStatus((task as unknown).status),\n      state: (task as unknown).status === \"DONE\" ? \"closed\" : \"open\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 444,
      "content": "labels: this.getLabelsForTaskStatus((task as unknown).status),",
      "context": "      title: (task as unknown).title,\n      body: (task as unknown).description,\n      labels: this.getLabelsForTaskStatus((task as unknown).status),\n      state: (task as unknown).status === \"DONE\" ? \"closed\" : \"open\",\n    };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 445,
      "content": "state: (task as unknown).status === \"DONE\" ? \"closed\" : \"open\",",
      "context": "      body: (task as unknown).description,\n      labels: this.getLabelsForTaskStatus((task as unknown).status),\n      state: (task as unknown).status === \"DONE\" ? \"closed\" : \"open\",\n    };\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 451,
      "content": "const titleMatch = (issue.title as unknown).match(/#(\\d+)/);",
      "context": "  private extractTaskIdFromIssue(issue: any): string {\n    // Try to find task ID like #123 in title\n    const titleMatch = (issue.title as unknown).match(/#(\\d+)/);\n    if (titleMatch && titleMatch[1]) {\n      return `#${titleMatch[1]}`;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 457,
      "content": "const bodyMatch = (issue.body as unknown).match(/Task ID: #(\\d+)/);",
      "context": "\n    // If not in title, look in body\n    const bodyMatch = (issue.body as unknown).match(/Task ID: #(\\d+)/);\n    if (bodyMatch && bodyMatch[1]) {\n      return `#${bodyMatch[1]}`;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 463,
      "content": "return `#${(issue as unknown).number}`;",
      "context": "\n    // Fallback to issue number\n    return `#${(issue as unknown).number}`;\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 468,
      "content": "if ((issue.labels as unknown).some((l: any) => (l as unknown).name === label)) {",
      "context": "  private getTaskStatusFromIssue(issue: any): TaskStatus {\n    for (const [status, label] of Object.entries(this.statusLabels)) {\n      if ((issue.labels as unknown).some((l: any) => (l as unknown).name === label)) {\n        return status as TaskStatus;\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 477,
      "content": "return [(this.statusLabels as unknown)[status] || this.statusLabels.TODO];",
      "context": "\n  private getLabelsForTaskStatus(status: string): string[] {\n    return [(this.statusLabels as unknown)[status] || this.statusLabels.TODO];\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 658,
      "content": "return new GitHubIssuesTaskBackend(config as unknown);",
      "context": " */\nexport function createGitHubIssuesTaskBackend(config: GitHubIssuesTaskBackendOptions): TaskBackend {\n  return new GitHubIssuesTaskBackend(config as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 21,
      "content": "const lines = (((content) as unknown).toString() as unknown).split(\"\\n\");",
      "context": "\n  // Split into lines and track code block state\n  const lines = (((content) as unknown).toString() as unknown).split(\"\\n\");\n  let inCodeBlock = false;\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 26,
      "content": "if ((line.trim() as unknown).startsWith(\"```\")) {",
      "context": "  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i] ?? \"\";\n    if ((line.trim() as unknown).startsWith(\"```\")) {\n      inCodeBlock = !inCodeBlock;\n      continue;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 45,
      "content": "if ((subline.trim() as unknown).startsWith(\"```\")) break;",
      "context": "    for (let j = i + 1; j < lines.length; j++) {\n      const subline = lines[j] ?? \"\";\n      if ((subline.trim() as unknown).startsWith(\"```\")) break;\n      if (/^- \\[.\\]/.test(subline)) break; // next top-level task\n      if (/^\\s+- /.test(subline)) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 48,
      "content": "description += `${(subline.trim() as unknown).replace(/^- /, \"\") ?? \"\"}\\n`;",
      "context": "      if (/^- \\[.\\]/.test(subline)) break; // next top-level task\n      if (/^\\s+- /.test(subline)) {\n        description += `${(subline.trim() as unknown).replace(/^- /, \"\") ?? \"\"}\\n`;\n      } else if ((subline.trim() ?? \"\") === \"\") {\n        continue;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 82,
      "content": "}) as unknown).join(\"\\n\\n\");",
      "context": "    // Always return only the task line - descriptions should remain in spec files\n    return taskLine;\n  }) as unknown).join(\"\\n\\n\");\n}\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 95,
      "content": "const exactMatch = tasks.find((task) => (task as unknown).id === id);",
      "context": "\n  // First try exact match\n  const exactMatch = tasks.find((task) => (task as unknown).id === id);\n  if (exactMatch) {\n    return exactMatch;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 109,
      "content": "const taskNumericId = parseInt((task.id as unknown).replace(/^#/, \"\"), 10);",
      "context": "\n  const numericMatch = tasks.find((task) => {\n    const taskNumericId = parseInt((task.id as unknown).replace(/^#/, \"\"), 10);\n    return !isNaN(taskNumericId) && taskNumericId === numericId;\n  });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 152,
      "content": "const id = parseInt((task.id as unknown).replace(/^#/, \"\"), 10);",
      "context": "\n  const maxId = tasks.reduce((max, task) => {\n    const id = parseInt((task.id as unknown).replace(/^#/, \"\"), 10);\n    return !isNaN(id) && id > max ? id : max;\n  }, 0);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 178,
      "content": "(task as unknown).id === normalizedId ||",
      "context": "\n  return tasks.map((task) =>\n    (task as unknown).id === normalizedId ||\n    parseInt((task.id as unknown).replace(/^#/, \"\"), 10) === parseInt(normalizedId.replace(/^#/, \"\"), 10)\n      ? { ...task, status }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 179,
      "content": "parseInt((task.id as unknown).replace(/^#/, \"\"), 10) === parseInt(normalizedId.replace(/^#/, \"\"), 10)",
      "context": "  return tasks.map((task) =>\n    (task as unknown).id === normalizedId ||\n    parseInt((task.id as unknown).replace(/^#/, \"\"), 10) === parseInt(normalizedId.replace(/^#/, \"\"), 10)\n      ? { ...task, status }\n      : task",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 195,
      "content": "if (!(newTask as unknown).id || !normalizeTaskId((newTask as unknown).id)) {",
      "context": "\n  // Ensure the task has a valid ID\n  if (!(newTask as unknown).id || !normalizeTaskId((newTask as unknown).id)) {\n    newTask = {\n      ...newTask,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 203,
      "content": "const existingTask = getTaskById(tasks, (newTask as unknown).id);",
      "context": "\n  // Check if task with the same ID already exists\n  const existingTask = getTaskById(tasks, (newTask as unknown).id);\n  if (existingTask) {\n    // Replace the existing task",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 206,
      "content": "return tasks.map((task) => ((task as unknown).id === (existingTask as unknown).id ? newTask : task));",
      "context": "  if (existingTask) {\n    // Replace the existing task\n    return tasks.map((task) => ((task as unknown).id === (existingTask as unknown).id ? newTask : task));\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 225,
      "content": "if ((filter as unknown).status && (task as unknown).status !== (filter as unknown).status) {",
      "context": "  return tasks.filter((task) => {\n    // Filter by status\n    if ((filter as unknown).status && (task as unknown).status !== (filter as unknown).status) {\n      return false;\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 230,
      "content": "if ((filter as unknown).id) {",
      "context": "\n    // Filter by ID\n    if ((filter as unknown).id) {\n      // Handle special case: if filter.id is a simple number (like \"2\") and task.id is \"#002\"\n      if (/^\\d+$/.test((filter as unknown).id)) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 232,
      "content": "if (/^\\d+$/.test((filter as unknown).id)) {",
      "context": "    if ((filter as unknown).id) {\n      // Handle special case: if filter.id is a simple number (like \"2\") and task.id is \"#002\"\n      if (/^\\d+$/.test((filter as unknown).id)) {\n        // If filter is just digits, compare numeric values directly\n        const filterNum = parseInt((filter as unknown).id, 10);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 234,
      "content": "const filterNum = parseInt((filter as unknown).id, 10);",
      "context": "      if (/^\\d+$/.test((filter as unknown).id)) {\n        // If filter is just digits, compare numeric values directly\n        const filterNum = parseInt((filter as unknown).id, 10);\n        const taskNum = parseInt((task.id as unknown).replace(/\\D/g, \"\"), 10);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 235,
      "content": "const taskNum = parseInt((task.id as unknown).replace(/\\D/g, \"\"), 10);",
      "context": "        // If filter is just digits, compare numeric values directly\n        const filterNum = parseInt((filter as unknown).id, 10);\n        const taskNum = parseInt((task.id as unknown).replace(/\\D/g, \"\"), 10);\n\n        if (!isNaN(filterNum) && !isNaN(taskNum) && filterNum === taskNum) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 243,
      "content": "const normalizedFilterId = normalizeTaskId((filter as unknown).id);",
      "context": "\n      // Try normalized string comparison\n      const normalizedFilterId = normalizeTaskId((filter as unknown).id);\n      const normalizedTaskId = normalizeTaskId((task as unknown).id);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 244,
      "content": "const normalizedTaskId = normalizeTaskId((task as unknown).id);",
      "context": "      // Try normalized string comparison\n      const normalizedFilterId = normalizeTaskId((filter as unknown).id);\n      const normalizedTaskId = normalizeTaskId((task as unknown).id);\n\n      if (normalizedFilterId && normalizedTaskId) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 263,
      "content": "if ((filter as unknown).title && typeof (filter as unknown).title === \"string\") {",
      "context": "\n    // Filter by title (string match)\n    if ((filter as unknown).title && typeof (filter as unknown).title === \"string\") {\n      return (task.title.toLowerCase() as unknown).includes((filter.title as unknown).toLowerCase());\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 264,
      "content": "return (task.title.toLowerCase() as unknown).includes((filter.title as unknown).toLowerCase());",
      "context": "    // Filter by title (string match)\n    if ((filter as unknown).title && typeof (filter as unknown).title === \"string\") {\n      return (task.title.toLowerCase() as unknown).includes((filter.title as unknown).toLowerCase());\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 268,
      "content": "if ((filter as unknown).title && (filter as unknown).title instanceof RegExp) {",
      "context": "\n    // Filter by title (regex match)\n    if ((filter as unknown).title && (filter as unknown).title instanceof RegExp) {\n      return (filter.title as unknown).test((task as unknown).title);\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 269,
      "content": "return (filter.title as unknown).test((task as unknown).title);",
      "context": "    // Filter by title (regex match)\n    if ((filter as unknown).title && (filter as unknown).title instanceof RegExp) {\n      return (filter.title as unknown).test((task as unknown).title);\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 273,
      "content": "if ((filter as unknown).hasSpecPath !== undefined) {",
      "context": "\n    // Filter by spec path existence\n    if ((filter as unknown).hasSpecPath !== undefined) {\n      return (filter as unknown).hasSpecPath ? !!task.specPath : !task.specPath;\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 274,
      "content": "return (filter as unknown).hasSpecPath ? !!task.specPath : !task.specPath;",
      "context": "    // Filter by spec path existence\n    if ((filter as unknown).hasSpecPath !== undefined) {\n      return (filter as unknown).hasSpecPath ? !!task.specPath : !task.specPath;\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 291,
      "content": "const lines = (((content) as unknown).toString() as unknown).split(\"\\n\");",
      "context": "  }\n\n  const lines = (((content) as unknown).toString() as unknown).split(\"\\n\");\n\n  // Extract title from the first heading",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 294,
      "content": "const titleLine = lines.find((line) => (line as unknown).startsWith(\"# \"));",
      "context": "\n  // Extract title from the first heading\n  const titleLine = lines.find((line) => (line as unknown).startsWith(\"# \"));\n  if (!titleLine) {\n    return { title: \"\", description: \"\" };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 303,
      "content": "const titleWithIdMatch = (titleLine as unknown).match(/^# Task #(\\d+): (.+)$/);",
      "context": "  // 2. Old format without number: \"# Task: Title\"\n  // 3. New clean format: \"# Title\"\n  const titleWithIdMatch = (titleLine as unknown).match(/^# Task #(\\d+): (.+)$/);\n  const titleWithoutIdMatch = (titleLine as unknown).match(/^# Task: (.+)$/);\n  const cleanTitleMatch = (titleLine as unknown).match(/^# (.+)$/);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 304,
      "content": "const titleWithoutIdMatch = (titleLine as unknown).match(/^# Task: (.+)$/);",
      "context": "  // 3. New clean format: \"# Title\"\n  const titleWithIdMatch = (titleLine as unknown).match(/^# Task #(\\d+): (.+)$/);\n  const titleWithoutIdMatch = (titleLine as unknown).match(/^# Task: (.+)$/);\n  const cleanTitleMatch = (titleLine as unknown).match(/^# (.+)$/);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 305,
      "content": "const cleanTitleMatch = (titleLine as unknown).match(/^# (.+)$/);",
      "context": "  const titleWithIdMatch = (titleLine as unknown).match(/^# Task #(\\d+): (.+)$/);\n  const titleWithoutIdMatch = (titleLine as unknown).match(/^# Task: (.+)$/);\n  const cleanTitleMatch = (titleLine as unknown).match(/^# (.+)$/);\n\n  let title = \"\";",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 321,
      "content": "if (!(title as unknown).startsWith(\"Task \")) {",
      "context": "    title = cleanTitleMatch[1];\n    // Skip if this looks like an old task format to avoid false positives\n    if (!(title as unknown).startsWith(\"Task \")) {\n      // This is likely the new clean format\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 333,
      "content": "if ((line.trim() as unknown).startsWith(\"## \")) break;",
      "context": "    for (let i = contextIndex + 1; i < lines.length; i++) {\n      const line = lines[i] || \"\";\n      if ((line.trim() as unknown).startsWith(\"## \")) break;\n      if (line.trim()) description += `${line.trim()}\\n`;\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 354,
      "content": "const titleLine = `# ${(spec as unknown).title}`;",
      "context": "\n  // Generate clean title format without task numbers\n  const titleLine = `# ${(spec as unknown).title}`;\n\n  const contextSection = `",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskFunctions.ts",
      "line": 359,
      "content": "${(spec as unknown).description}",
      "context": "## Context\n\n${(spec as unknown).description}\n\n## Requirements",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/real-world-workflow.test.ts",
      "line": 39,
      "content": "expect((jsonBackend as unknown).getStorageLocation()).toBe(testJsonPath);",
      "context": "\n      // 2. Verify the backend knows its storage location\n      expect((jsonBackend as unknown).getStorageLocation()).toBe(testJsonPath);\n\n      // 3. Create some test task data",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/real-world-workflow.test.ts",
      "line": 97,
      "content": "expect((jsonBackend as unknown).getStorageLocation()).toBe(expectedPath);",
      "context": "      // Should default to team-shareable location\n      const expectedPath = join(testBaseDir, \"process\", \"tasks.json\");\n      expect((jsonBackend as unknown).getStorageLocation()).toBe(expectedPath);\n    });\n  });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/markdownTaskBackend.ts",
      "line": 60,
      "content": "this.workspacePath = (config as unknown).workspacePath;",
      "context": "\n  constructor(config: TaskBackendConfig) {\n    this.workspacePath = (config as unknown).workspacePath;\n    this.tasksFilePath = getTasksFilePath(this.workspacePath);\n    this.tasksDirectory = join(this.workspacePath, \"process\", \"tasks\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/markdownTaskBackend.ts",
      "line": 178,
      "content": "if (!(tasksResult as unknown).success || !(tasksResult as unknown).content) {",
      "context": "      // Get all tasks first\n      const tasksResult = await this.getTasksData();\n      if (!(tasksResult as unknown).success || !(tasksResult as unknown).content) {\n        return false;\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/markdownTaskBackend.ts",
      "line": 183,
      "content": "const tasks = this.parseTasks((tasksResult as unknown).content);",
      "context": "\n      // Parse tasks and find the one to delete\n      const tasks = this.parseTasks((tasksResult as unknown).content);\n      const taskToDelete = tasks.find(\n        (task) =>",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/markdownTaskBackend.ts",
      "line": 186,
      "content": "(task as unknown).id === id ||",
      "context": "      const taskToDelete = tasks.find(\n        (task) =>\n          (task as unknown).id === id ||\n          (task as unknown).id === `#${id}` ||\n          (task as unknown).id.slice(1) === id",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/markdownTaskBackend.ts",
      "line": 187,
      "content": "(task as unknown).id === `#${id}` ||",
      "context": "        (task) =>\n          (task as unknown).id === id ||\n          (task as unknown).id === `#${id}` ||\n          (task as unknown).id.slice(1) === id\n      );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/markdownTaskBackend.ts",
      "line": 188,
      "content": "(task as unknown).id.slice(1) === id",
      "context": "          (task as unknown).id === id ||\n          (task as unknown).id === `#${id}` ||\n          (task as unknown).id.slice(1) === id\n      );\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/markdownTaskBackend.ts",
      "line": 197,
      "content": "const updatedTasks = tasks.filter((task) => (task as unknown).id !== (taskToDelete as unknown).id);",
      "context": "\n      // Remove the task from the array\n      const updatedTasks = tasks.filter((task) => (task as unknown).id !== (taskToDelete as unknown).id);\n\n      // Save the updated tasks",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/markdownTaskBackend.ts",
      "line": 203,
      "content": "if (!(saveResult as unknown).success) {",
      "context": "      const saveResult = await this.saveTasksData(updatedContent);\n\n      if (!(saveResult as unknown).success) {\n        log.error(`Failed to save tasks after deleting ${id}:`, {\n          error: (saveResult.error as unknown).message,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/markdownTaskBackend.ts",
      "line": 205,
      "content": "error: (saveResult.error as unknown).message,",
      "context": "      if (!(saveResult as unknown).success) {\n        log.error(`Failed to save tasks after deleting ${id}:`, {\n          error: (saveResult.error as unknown).message,\n        });\n        return false;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/markdownTaskBackend.ts",
      "line": 211,
      "content": "if ((taskToDelete as unknown).specPath) {",
      "context": "\n      // Try to delete the spec file if it exists\n      if ((taskToDelete as unknown).specPath) {\n        try {\n          const fullSpecPath = (taskToDelete.specPath as unknown).startsWith(\"/\")",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/markdownTaskBackend.ts",
      "line": 213,
      "content": "const fullSpecPath = (taskToDelete.specPath as unknown).startsWith(\"/\")",
      "context": "      if ((taskToDelete as unknown).specPath) {\n        try {\n          const fullSpecPath = (taskToDelete.specPath as unknown).startsWith(\"/\")\n            ? (taskToDelete as unknown).specPath\n            : join(this.workspacePath, (taskToDelete as unknown).specPath);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/markdownTaskBackend.ts",
      "line": 214,
      "content": "? (taskToDelete as unknown).specPath",
      "context": "        try {\n          const fullSpecPath = (taskToDelete.specPath as unknown).startsWith(\"/\")\n            ? (taskToDelete as unknown).specPath\n            : join(this.workspacePath, (taskToDelete as unknown).specPath);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/markdownTaskBackend.ts",
      "line": 215,
      "content": ": join(this.workspacePath, (taskToDelete as unknown).specPath);",
      "context": "          const fullSpecPath = (taskToDelete.specPath as unknown).startsWith(\"/\")\n            ? (taskToDelete as unknown).specPath\n            : join(this.workspacePath, (taskToDelete as unknown).specPath);\n\n          if (await this.fileExists(fullSpecPath)) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/markdownTaskBackend.ts",
      "line": 244,
      "content": "const fullPath = (specPath as unknown).startsWith(\"/\")",
      "context": "\n  async getTaskSpecData(specPath: string): Promise<TaskReadOperationResult> {\n    const fullPath = (specPath as unknown).startsWith(\"/\")\n      ? specPath\n      : join(this.workspacePath, specPath);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/markdownTaskBackend.ts",
      "line": 291,
      "content": "return (matter as unknown).stringify(markdownContent, (spec as unknown).metadata);",
      "context": "    // Then add any metadata as frontmatter\n    if (spec.metadata && Object.keys(spec.metadata).length > 0) {\n      return (matter as unknown).stringify(markdownContent, (spec as unknown).metadata);\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/markdownTaskBackend.ts",
      "line": 304,
      "content": "const fullPath = (specPath as unknown).startsWith(\"/\")",
      "context": "\n  async saveTaskSpecData(specPath: string, content: string): Promise<TaskWriteOperationResult> {\n    const fullPath = (specPath as unknown).startsWith(\"/\")\n      ? specPath\n      : join(this.workspacePath, specPath);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/markdownTaskBackend.ts",
      "line": 334,
      "content": "return files.filter((file) => (file as unknown).startsWith(`${taskId}-`));",
      "context": "    try {\n      const files = await readdir(this.tasksDirectory);\n      return files.filter((file) => (file as unknown).startsWith(`${taskId}-`));\n    } catch (error) {\n      log.error(`Failed to find task spec file for task #${taskId}`, {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 98,
      "content": "const selectedBackend = this.backends.find((b) => (b as unknown).name === backend);",
      "context": "\n    // Set current backend\n    const selectedBackend = this.backends.find((b) => (b as unknown).name === backend);\n    if (!selectedBackend) {\n      throw new Error(",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 101,
      "content": "`Backend '${backend}' not found. Available backends: ${(this.backends.map((b) => b.name) as unknown).join(\", \")}`",
      "context": "    if (!selectedBackend) {\n      throw new Error(\n        `Backend '${backend}' not found. Available backends: ${(this.backends.map((b) => b.name) as unknown).join(\", \")}`\n      );\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 114,
      "content": "const result = await (this.currentBackend as unknown).getTasksData();",
      "context": "  async listTasks(options?: TaskListOptions): Promise<TaskData[]> {\n    // Get raw data\n    const result = await (this.currentBackend as unknown).getTasksData();\n    if (!(result as unknown).success || !(result as unknown).content) {\n      return [];",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 115,
      "content": "if (!(result as unknown).success || !(result as unknown).content) {",
      "context": "    // Get raw data\n    const result = await (this.currentBackend as unknown).getTasksData();\n    if (!(result as unknown).success || !(result as unknown).content) {\n      return [];\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 120,
      "content": "let tasks = (this.currentBackend as unknown).parseTasks((result as unknown).content);",
      "context": "\n    // Parse data using pure function\n    let tasks = (this.currentBackend as unknown).parseTasks((result as unknown).content);\n\n    // Apply filters if provided",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 124,
      "content": "tasks = tasks.filter((task) => (task as unknown).status === options.status);",
      "context": "    // Apply filters if provided\n    if (options?.status) {\n      tasks = tasks.filter((task) => (task as unknown).status === options.status);\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 144,
      "content": "const exactMatch = tasks.find((task) => (task as unknown).id === normalizedId);",
      "context": "\n    // First try exact match\n    const exactMatch = tasks.find((task) => (task as unknown).id === normalizedId);\n    if (exactMatch) {\n      return exactMatch;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 154,
      "content": "const taskNumericId = parseInt((task.id as unknown).replace(/^#/, \"\"), 10);",
      "context": "\n    const numericMatch = tasks.find((task) => {\n      const taskNumericId = parseInt((task.id as unknown).replace(/^#/, \"\"), 10);\n      return !isNaN(taskNumericId) && taskNumericId === numericId;\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 168,
      "content": "return task ? (task as unknown).status : null;",
      "context": "  async getTaskStatus(id: string): Promise<string | undefined> {\n    const task = await this.getTask(id);\n    return task ? (task as unknown).status : null;\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 190,
      "content": "const result = await (this.currentBackend as unknown).getTasksData();",
      "context": "\n    // Get all tasks\n    const result = await (this.currentBackend as unknown).getTasksData();\n    if (!(result as unknown).success || !(result as unknown).content) {\n      throw new Error(`Failed to read tasks data: ${(result.error as unknown).message}`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 191,
      "content": "if (!(result as unknown).success || !(result as unknown).content) {",
      "context": "    // Get all tasks\n    const result = await (this.currentBackend as unknown).getTasksData();\n    if (!(result as unknown).success || !(result as unknown).content) {\n      throw new Error(`Failed to read tasks data: ${(result.error as unknown).message}`);\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 192,
      "content": "throw new Error(`Failed to read tasks data: ${(result.error as unknown).message}`);",
      "context": "    const result = await (this.currentBackend as unknown).getTasksData();\n    if (!(result as unknown).success || !(result as unknown).content) {\n      throw new Error(`Failed to read tasks data: ${(result.error as unknown).message}`);\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 196,
      "content": "const tasks = (this.currentBackend as unknown).parseTasks((result as unknown).content);",
      "context": "\n    // Parse tasks\n    const tasks = (this.currentBackend as unknown).parseTasks((result as unknown).content);\n\n    // Find the task to update using proper ID matching",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 200,
      "content": "const taskNormalizedId = normalizeTaskId((t as unknown).id);",
      "context": "    // Find the task to update using proper ID matching\n    const taskIndex = tasks.findIndex((t) => {\n      const taskNormalizedId = normalizeTaskId((t as unknown).id);\n      return taskNormalizedId === normalizedId;\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 214,
      "content": "const updatedContent = (this.currentBackend as unknown).formatTasks(updatedTasks);",
      "context": "\n    // Format the updated tasks\n    const updatedContent = (this.currentBackend as unknown).formatTasks(updatedTasks);\n\n    // Save the changes",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 217,
      "content": "const saveResult = await (this.currentBackend as unknown).saveTasksData(updatedContent);",
      "context": "\n    // Save the changes\n    const saveResult = await (this.currentBackend as unknown).saveTasksData(updatedContent);\n    if (!(saveResult as unknown).success) {\n      throw new Error(`Failed to save tasks data: ${(saveResult.error as unknown).message}`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 218,
      "content": "if (!(saveResult as unknown).success) {",
      "context": "    // Save the changes\n    const saveResult = await (this.currentBackend as unknown).saveTasksData(updatedContent);\n    if (!(saveResult as unknown).success) {\n      throw new Error(`Failed to save tasks data: ${(saveResult.error as unknown).message}`);\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 219,
      "content": "throw new Error(`Failed to save tasks data: ${(saveResult.error as unknown).message}`);",
      "context": "    const saveResult = await (this.currentBackend as unknown).saveTasksData(updatedContent);\n    if (!(saveResult as unknown).success) {\n      throw new Error(`Failed to save tasks data: ${(saveResult.error as unknown).message}`);\n    }\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 228,
      "content": "return (this.currentBackend as unknown).getWorkspacePath();",
      "context": "   */\n  getWorkspacePath(): string {\n    return (this.currentBackend as unknown).getWorkspacePath();\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 239,
      "content": "const specResult = await (this.currentBackend as unknown).getTaskSpecData(specPath);",
      "context": "  async createTask(specPath: string, options: CreateTaskOptions = {}): Promise<TaskData> {\n    // Read the spec file\n    const specResult = await (this.currentBackend as unknown).getTaskSpecData(specPath);\n    if (!(specResult as unknown).success || !(specResult as unknown).content) {\n      throw new Error(`Failed to read spec file: ${(specResult.error as unknown).message}`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 240,
      "content": "if (!(specResult as unknown).success || !(specResult as unknown).content) {",
      "context": "    // Read the spec file\n    const specResult = await (this.currentBackend as unknown).getTaskSpecData(specPath);\n    if (!(specResult as unknown).success || !(specResult as unknown).content) {\n      throw new Error(`Failed to read spec file: ${(specResult.error as unknown).message}`);\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 241,
      "content": "throw new Error(`Failed to read spec file: ${(specResult.error as unknown).message}`);",
      "context": "    const specResult = await (this.currentBackend as unknown).getTaskSpecData(specPath);\n    if (!(specResult as unknown).success || !(specResult as unknown).content) {\n      throw new Error(`Failed to read spec file: ${(specResult.error as unknown).message}`);\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 245,
      "content": "const spec = (this.currentBackend as unknown).parseTaskSpec((specResult as unknown).content);",
      "context": "\n    // Parse the spec\n    const spec = (this.currentBackend as unknown).parseTaskSpec((specResult as unknown).content);\n\n    // Generate task ID if not provided",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 249,
      "content": "if ((spec as unknown).id) {",
      "context": "    // Generate task ID if not provided\n    let taskId: string;\n    if ((spec as unknown).id) {\n      // Verify the task ID doesn't already exist\n      const existingTask = await this.getTask((spec as unknown).id);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 251,
      "content": "const existingTask = await this.getTask((spec as unknown).id);",
      "context": "    if ((spec as unknown).id) {\n      // Verify the task ID doesn't already exist\n      const existingTask = await this.getTask((spec as unknown).id);\n      if (existingTask && !(options as unknown).force) {\n        throw new Error(`Task ${(spec as unknown).id} already exists. Use --force to overwrite.`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 252,
      "content": "if (existingTask && !(options as unknown).force) {",
      "context": "      // Verify the task ID doesn't already exist\n      const existingTask = await this.getTask((spec as unknown).id);\n      if (existingTask && !(options as unknown).force) {\n        throw new Error(`Task ${(spec as unknown).id} already exists. Use --force to overwrite.`);\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 253,
      "content": "throw new Error(`Task ${(spec as unknown).id} already exists. Use --force to overwrite.`);",
      "context": "      const existingTask = await this.getTask((spec as unknown).id);\n      if (existingTask && !(options as unknown).force) {\n        throw new Error(`Task ${(spec as unknown).id} already exists. Use --force to overwrite.`);\n      }\n      taskId = (spec as unknown).id;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 255,
      "content": "taskId = (spec as unknown).id;",
      "context": "        throw new Error(`Task ${(spec as unknown).id} already exists. Use --force to overwrite.`);\n      }\n      taskId = (spec as unknown).id;\n    } else {\n      // Generate a new task ID",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 260,
      "content": "const id = parseInt((task as unknown).id.slice(1));",
      "context": "      const tasks = await this.listTasks();\n      const maxId = tasks.reduce((max, task) => {\n        const id = parseInt((task as unknown).id.slice(1));\n        return id > max ? id : max;\n      }, 0);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 266,
      "content": "(spec as unknown).id = taskId;",
      "context": "\n      // Update the spec with the new ID\n      (spec as unknown).id = taskId;\n\n      // BUG FIX: Preserve original content, only update the title line with task ID",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 270,
      "content": "const originalContent = (specResult as unknown).content;",
      "context": "      // BUG FIX: Preserve original content, only update the title line with task ID\n      // This prevents content truncation caused by formatTaskSpec generating templates\n      const originalContent = (specResult as unknown).content;\n      const specPath = (this.currentBackend as unknown).getTaskSpecPath(taskId, (spec as unknown).title);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 271,
      "content": "const specPath = (this.currentBackend as unknown).getTaskSpecPath(taskId, (spec as unknown).title);",
      "context": "      // This prevents content truncation caused by formatTaskSpec generating templates\n      const originalContent = (specResult as unknown).content;\n      const specPath = (this.currentBackend as unknown).getTaskSpecPath(taskId, (spec as unknown).title);\n\n      // Find and replace the title line to add the task ID",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 280,
      "content": "const saveSpecResult = await (this.currentBackend as unknown).saveTaskSpecData(",
      "context": "      );\n\n      const saveSpecResult = await (this.currentBackend as unknown).saveTaskSpecData(\n        specPath,\n        updatedSpecContent",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 284,
      "content": "if (!(saveSpecResult as unknown).success) {",
      "context": "        updatedSpecContent\n      );\n      if (!(saveSpecResult as unknown).success) {\n        throw new Error(\n          `Failed to save updated spec file: ${(saveSpecResult.error as unknown).message}`",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 286,
      "content": "`Failed to save updated spec file: ${(saveSpecResult.error as unknown).message}`",
      "context": "      if (!(saveSpecResult as unknown).success) {\n        throw new Error(\n          `Failed to save updated spec file: ${(saveSpecResult.error as unknown).message}`\n        );\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 294,
      "content": "title: (spec as unknown).title,",
      "context": "    const newTask: TaskData = {\n      id: taskId,\n      title: (spec as unknown).title,\n      description: (spec as unknown).description,\n      status: \"TODO\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 295,
      "content": "description: (spec as unknown).description,",
      "context": "      id: taskId,\n      title: (spec as unknown).title,\n      description: (spec as unknown).description,\n      status: \"TODO\",\n      specPath: (this.currentBackend as unknown).getTaskSpecPath(taskId, (spec as unknown).title),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 297,
      "content": "specPath: (this.currentBackend as unknown).getTaskSpecPath(taskId, (spec as unknown).title),",
      "context": "      description: (spec as unknown).description,\n      status: \"TODO\",\n      specPath: (this.currentBackend as unknown).getTaskSpecPath(taskId, (spec as unknown).title),\n    };\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 301,
      "content": "const tasksResult = await (this.currentBackend as unknown).getTasksData();",
      "context": "\n    // Get current tasks and add the new one\n    const tasksResult = await (this.currentBackend as unknown).getTasksData();\n    let tasks: TaskData[] = [];\n    if ((tasksResult as unknown).success && (tasksResult as unknown).content) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 303,
      "content": "if ((tasksResult as unknown).success && (tasksResult as unknown).content) {",
      "context": "    const tasksResult = await (this.currentBackend as unknown).getTasksData();\n    let tasks: TaskData[] = [];\n    if ((tasksResult as unknown).success && (tasksResult as unknown).content) {\n      tasks = (this.currentBackend as unknown).parseTasks((tasksResult as unknown).content);\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 304,
      "content": "tasks = (this.currentBackend as unknown).parseTasks((tasksResult as unknown).content);",
      "context": "    let tasks: TaskData[] = [];\n    if ((tasksResult as unknown).success && (tasksResult as unknown).content) {\n      tasks = (this.currentBackend as unknown).parseTasks((tasksResult as unknown).content);\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 308,
      "content": "const existingIndex = tasks.findIndex((t) => (t as unknown).id === (newTask as unknown).id);",
      "context": "\n    // Add or replace the task\n    const existingIndex = tasks.findIndex((t) => (t as unknown).id === (newTask as unknown).id);\n    if (existingIndex >= 0) {\n      tasks[existingIndex] = newTask;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 316,
      "content": "const updatedContent = (this.currentBackend as unknown).formatTasks(tasks);",
      "context": "\n    // Format and save the updated tasks\n    const updatedContent = (this.currentBackend as unknown).formatTasks(tasks);\n    const saveResult = await (this.currentBackend as unknown).saveTasksData(updatedContent);\n    if (!(saveResult as unknown).success) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 317,
      "content": "const saveResult = await (this.currentBackend as unknown).saveTasksData(updatedContent);",
      "context": "    // Format and save the updated tasks\n    const updatedContent = (this.currentBackend as unknown).formatTasks(tasks);\n    const saveResult = await (this.currentBackend as unknown).saveTasksData(updatedContent);\n    if (!(saveResult as unknown).success) {\n      throw new Error(`Failed to save tasks _data: ${(saveResult.error as unknown).message}`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 318,
      "content": "if (!(saveResult as unknown).success) {",
      "context": "    const updatedContent = (this.currentBackend as unknown).formatTasks(tasks);\n    const saveResult = await (this.currentBackend as unknown).saveTasksData(updatedContent);\n    if (!(saveResult as unknown).success) {\n      throw new Error(`Failed to save tasks _data: ${(saveResult.error as unknown).message}`);\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 319,
      "content": "throw new Error(`Failed to save tasks _data: ${(saveResult.error as unknown).message}`);",
      "context": "    const saveResult = await (this.currentBackend as unknown).saveTasksData(updatedContent);\n    if (!(saveResult as unknown).success) {\n      throw new Error(`Failed to save tasks _data: ${(saveResult.error as unknown).message}`);\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 340,
      "content": "const result = await (backend as unknown).getTasksData();",
      "context": "    for (const backend of this.backends) {\n      // Get raw data\n      const result = await (backend as unknown).getTasksData();\n      if (!(result as unknown).success || !(result as unknown).content) {\n        continue;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 341,
      "content": "if (!(result as unknown).success || !(result as unknown).content) {",
      "context": "      // Get raw data\n      const result = await (backend as unknown).getTasksData();\n      if (!(result as unknown).success || !(result as unknown).content) {\n        continue;\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 346,
      "content": "const tasks = (backend as unknown).parseTasks((result as unknown).content);",
      "context": "\n      // Parse tasks\n      const tasks = (backend as unknown).parseTasks((result as unknown).content);\n\n      // Check if task exists in this backend",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 349,
      "content": "const taskExists = tasks.some((task) => (task as unknown).id === normalizedId);",
      "context": "\n      // Check if task exists in this backend\n      const taskExists = tasks.some((task) => (task as unknown).id === normalizedId);\n      if (taskExists) {\n        return backend;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 378,
      "content": "const specResult = await (this.currentBackend as unknown).getTaskSpecData(task.specPath);",
      "context": "\n    // Read the spec file\n    const specResult = await (this.currentBackend as unknown).getTaskSpecData(task.specPath);\n    if (!(specResult as unknown).success || !(specResult as unknown).content) {\n      throw new Error(`Failed to read spec file: ${(specResult.error as unknown).message}`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 379,
      "content": "if (!(specResult as unknown).success || !(specResult as unknown).content) {",
      "context": "    // Read the spec file\n    const specResult = await (this.currentBackend as unknown).getTaskSpecData(task.specPath);\n    if (!(specResult as unknown).success || !(specResult as unknown).content) {\n      throw new Error(`Failed to read spec file: ${(specResult.error as unknown).message}`);\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 380,
      "content": "throw new Error(`Failed to read spec file: ${(specResult.error as unknown).message}`);",
      "context": "    const specResult = await (this.currentBackend as unknown).getTaskSpecData(task.specPath);\n    if (!(specResult as unknown).success || !(specResult as unknown).content) {\n      throw new Error(`Failed to read spec file: ${(specResult.error as unknown).message}`);\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 384,
      "content": "const spec = (this.currentBackend as unknown).parseTaskSpec((specResult as unknown).content);",
      "context": "\n    // Parse the spec\n    const spec = (this.currentBackend as unknown).parseTaskSpec((specResult as unknown).content);\n\n    // Update the metadata",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 387,
      "content": "(spec as unknown).metadata = {",
      "context": "\n    // Update the metadata\n    (spec as unknown).metadata = {\n      ...(spec as unknown).metadata,\n      ...metadata,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 388,
      "content": "...(spec as unknown).metadata,",
      "context": "    // Update the metadata\n    (spec as unknown).metadata = {\n      ...(spec as unknown).metadata,\n      ...metadata,\n    };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 393,
      "content": "const updatedSpecContent = (this.currentBackend as unknown).formatTaskSpec(spec);",
      "context": "\n    // Format and save the updated spec\n    const updatedSpecContent = (this.currentBackend as unknown).formatTaskSpec(spec);\n    const saveSpecResult = await (this.currentBackend as unknown).saveTaskSpecData(\n      task.specPath,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 394,
      "content": "const saveSpecResult = await (this.currentBackend as unknown).saveTaskSpecData(",
      "context": "    // Format and save the updated spec\n    const updatedSpecContent = (this.currentBackend as unknown).formatTaskSpec(spec);\n    const saveSpecResult = await (this.currentBackend as unknown).saveTaskSpecData(\n      task.specPath,\n      updatedSpecContent",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 398,
      "content": "if (!(saveSpecResult as unknown).success) {",
      "context": "      updatedSpecContent\n    );\n    if (!(saveSpecResult as unknown).success) {\n      throw new Error(`Failed to save updated spec file: ${(saveSpecResult.error as unknown).message}`);\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 399,
      "content": "throw new Error(`Failed to save updated spec file: ${(saveSpecResult.error as unknown).message}`);",
      "context": "    );\n    if (!(saveSpecResult as unknown).success) {\n      throw new Error(`Failed to save updated spec file: ${(saveSpecResult.error as unknown).message}`);\n    }\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 411,
      "content": "return await (this.currentBackend as unknown).deleteTask(id, options as unknown);",
      "context": "  async deleteTask(id: string, options: DeleteTaskOptions = {}): Promise<boolean> {\n    // Delegate to the current backend\n    return await (this.currentBackend as unknown).deleteTask(id, options as unknown);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 434,
      "content": "const specResult = await (this.currentBackend as unknown).getTaskSpecData(task.specPath);",
      "context": "\n    // Read the spec file\n    const specResult = await (this.currentBackend as unknown).getTaskSpecData(task.specPath);\n    if (!(specResult as unknown).success || !(specResult as unknown).content) {\n      throw new Error(`Failed to read spec file: ${(specResult.error as unknown).message}`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 435,
      "content": "if (!(specResult as unknown).success || !(specResult as unknown).content) {",
      "context": "    // Read the spec file\n    const specResult = await (this.currentBackend as unknown).getTaskSpecData(task.specPath);\n    if (!(specResult as unknown).success || !(specResult as unknown).content) {\n      throw new Error(`Failed to read spec file: ${(specResult.error as unknown).message}`);\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 436,
      "content": "throw new Error(`Failed to read spec file: ${(specResult.error as unknown).message}`);",
      "context": "    const specResult = await (this.currentBackend as unknown).getTaskSpecData(task.specPath);\n    if (!(specResult as unknown).success || !(specResult as unknown).content) {\n      throw new Error(`Failed to read spec file: ${(specResult.error as unknown).message}`);\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 440,
      "content": "content: (specResult as unknown).content,",
      "context": "\n    return {\n      content: (specResult as unknown).content,\n      specPath: task.specPath,\n      task,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 464,
      "content": "return (this.currentBackend as unknown).getTaskSpecPath(id, (task as unknown).title);",
      "context": "\n    // Otherwise, generate the path using the backend\n    return (this.currentBackend as unknown).getTaskSpecPath(id, (task as unknown).title);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 476,
      "content": "Promise as unknown",
      "context": "      // Dynamic import to avoid hard dependency on GitHub modules\n      const [{ getGitHubBackendConfig }, { createGitHubIssuesTaskBackend }] = await (\n        Promise as unknown\n      ).all([import(\"./githubBackendConfig\"), import(\"./githubIssuesTaskBackend\")]);\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 516,
      "content": "const normalizedTitle = (title.toLowerCase() as unknown).replace(/[^a-z0-9]+/g, \"-\");",
      "context": "\n    const tempDir = os.tmpdir();\n    const normalizedTitle = (title.toLowerCase() as unknown).replace(/[^a-z0-9]+/g, \"-\");\n    const tempSpecPath = path.join(\n      tempDir,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 519,
      "content": "`temp-task-${normalizedTitle}-${(Date as unknown).now()}.md`",
      "context": "    const tempSpecPath = path.join(\n      tempDir,\n      `temp-task-${normalizedTitle}-${(Date as unknown).now()}.md`\n    );\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 527,
      "content": "const task = await this.createTask(tempSpecPath, options as unknown);",
      "context": "\n      // Use the existing createTask method\n      const task = await this.createTask(tempSpecPath, options as unknown);\n\n      // Clean up the temporary file",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 586,
      "content": "return new TaskService(options as unknown);",
      "context": " */\nexport function createTaskService(options: TaskServiceOptions = {}): TaskService {\n  return new TaskService(options as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 603,
      "content": "return createTaskService(options as unknown);",
      "context": "  // If backend is explicitly provided, use the original function\n  if (backend) {\n    return createTaskService(options as unknown);\n  }\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks/utils.ts",
      "line": 19,
      "content": "if ((normalizedInput.toLowerCase() as unknown).startsWith(\"task#\")) {",
      "context": "\n  // Handle formats like \"task#064\" or \"task#64\"\n  if ((normalizedInput.toLowerCase() as unknown).startsWith(\"task#\")) {\n    normalizedInput = (normalizedInput as unknown).substring(5);\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/utils.ts",
      "line": 20,
      "content": "normalizedInput = (normalizedInput as unknown).substring(5);",
      "context": "  // Handle formats like \"task#064\" or \"task#64\"\n  if ((normalizedInput.toLowerCase() as unknown).startsWith(\"task#\")) {\n    normalizedInput = (normalizedInput as unknown).substring(5);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/utils.ts",
      "line": 24,
      "content": "while ((normalizedInput as unknown).startsWith(\"#\")) {",
      "context": "\n  // Remove all leading '#' characters to avoid multiple hashes\n  while ((normalizedInput as unknown).startsWith(\"#\")) {\n    normalizedInput = (normalizedInput as unknown).substring(1);\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/utils.ts",
      "line": 25,
      "content": "normalizedInput = (normalizedInput as unknown).substring(1);",
      "context": "  // Remove all leading '#' characters to avoid multiple hashes\n  while ((normalizedInput as unknown).startsWith(\"#\")) {\n    normalizedInput = (normalizedInput as unknown).substring(1);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 67,
      "content": "createTaskService: async (options) => await createConfiguredTaskService(options as unknown),",
      "context": "    resolveRepoPath,\n    resolveMainWorkspacePath,\n    createTaskService: async (options) => await createConfiguredTaskService(options as unknown),\n  }\n): Promise<any[]> {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 72,
      "content": "const validParams = (taskListParamsSchema as unknown).parse(params as unknown);",
      "context": "  try {\n    // Validate params with Zod schema\n    const validParams = (taskListParamsSchema as unknown).parse(params as unknown);\n\n    // Get the main workspace path (always resolves to main workspace, not session)",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 75,
      "content": "const workspacePath = await (deps as unknown).resolveMainWorkspacePath();",
      "context": "\n    // Get the main workspace path (always resolves to main workspace, not session)\n    const workspacePath = await (deps as unknown).resolveMainWorkspacePath();\n\n    // Create task service with explicit backend to avoid configuration issues",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 78,
      "content": "const taskService = await (deps as unknown).createTaskService({",
      "context": "\n    // Create task service with explicit backend to avoid configuration issues\n    const taskService = await (deps as unknown).createTaskService({\n      workspacePath,\n      backend: validParams.backend || \"markdown\", // Use markdown as default to avoid config lookup",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 84,
      "content": "let tasks = await (taskService as unknown).listTasks();",
      "context": "\n    // Get tasks\n    let tasks = await (taskService as unknown).listTasks();\n\n    // Filter by status if provided",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 88,
      "content": "tasks = tasks.filter((task: any) => (task as unknown).status === validParams.filter);",
      "context": "    // Filter by status if provided\n    if (validParams.filter) {\n      tasks = tasks.filter((task: any) => (task as unknown).status === validParams.filter);\n    } else {\n      // Unless \"all\" is provided, filter out DONE and CLOSED tasks",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 93,
      "content": "(task as unknown).status !== TASK_STATUS.DONE && (task as unknown).status !== TASK_STATUS.CLOSED",
      "context": "      if (!validParams.all) {\n        tasks = tasks.filter((task: any) =>\n          (task as unknown).status !== TASK_STATUS.DONE && (task as unknown).status !== TASK_STATUS.CLOSED\n        );\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 122,
      "content": "createTaskService: async (options) => await createConfiguredTaskService(options as unknown),",
      "context": "    resolveRepoPath,\n    resolveMainWorkspacePath,\n    createTaskService: async (options) => await createConfiguredTaskService(options as unknown),\n  }\n): Promise<any> {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 127,
      "content": "const normalizedTaskId = normalizeTaskId((params as unknown).taskId);",
      "context": "  try {\n    // Normalize the taskId before validation\n    const normalizedTaskId = normalizeTaskId((params as unknown).taskId);\n    if (!normalizedTaskId) {\n      const errorMessage = createTaskIdParsingErrorMessage(",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 130,
      "content": "(params as unknown).taskId,",
      "context": "    if (!normalizedTaskId) {\n      const errorMessage = createTaskIdParsingErrorMessage(\n        (params as unknown).taskId,\n        [\n          { label: \"Operation\", value: \"get task\" },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 133,
      "content": "{ label: \"Input\", value: (params as unknown).taskId }",
      "context": "        [\n          { label: \"Operation\", value: \"get task\" },\n          { label: \"Input\", value: (params as unknown).taskId }\n        ]\n      );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 141,
      "content": "const validParams = (taskGetParamsSchema as unknown).parse(paramsWithNormalizedId);",
      "context": "\n    // Validate params with Zod schema\n    const validParams = (taskGetParamsSchema as unknown).parse(paramsWithNormalizedId);\n\n    // First get the repo path (needed for workspace resolution)",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 144,
      "content": "const repoPath = await (deps as unknown).resolveRepoPath({",
      "context": "\n    // First get the repo path (needed for workspace resolution)\n    const repoPath = await (deps as unknown).resolveRepoPath({\n      session: (validParams as unknown).session,\n      repo: validParams.repo,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 145,
      "content": "session: (validParams as unknown).session,",
      "context": "    // First get the repo path (needed for workspace resolution)\n    const repoPath = await (deps as unknown).resolveRepoPath({\n      session: (validParams as unknown).session,\n      repo: validParams.repo,\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 150,
      "content": "const workspacePath = await (deps as unknown).resolveMainWorkspacePath();",
      "context": "\n    // Then get the workspace path (main repo or session's main workspace)\n    const workspacePath = await (deps as unknown).resolveMainWorkspacePath();\n\n    // Create task service with explicit backend to avoid configuration issues",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 153,
      "content": "const taskService = await (deps as unknown).createTaskService({",
      "context": "\n    // Create task service with explicit backend to avoid configuration issues\n    const taskService = await (deps as unknown).createTaskService({\n      workspacePath,\n      backend: validParams.backend || \"markdown\", // Use markdown as default to avoid config lookup",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 159,
      "content": "const task = await (taskService as unknown).getTask((validParams as unknown).taskId);",
      "context": "\n    // Get the task\n    const task = await (taskService as unknown).getTask((validParams as unknown).taskId);\n\n    if (!task) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 163,
      "content": "`Task ${(validParams as unknown).taskId} not found`,",
      "context": "    if (!task) {\n      throw new ResourceNotFoundError(\n        `Task ${(validParams as unknown).taskId} not found`,\n        \"task\",\n        (validParams as unknown).taskId",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 165,
      "content": "(validParams as unknown).taskId",
      "context": "        `Task ${(validParams as unknown).taskId} not found`,\n        \"task\",\n        (validParams as unknown).taskId\n      );\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 193,
      "content": "createTaskService: async (options) => await createConfiguredTaskService(options as unknown),",
      "context": "    resolveRepoPath,\n    resolveMainWorkspacePath,\n    createTaskService: async (options) => await createConfiguredTaskService(options as unknown),\n  }\n): Promise<string> {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 198,
      "content": "const normalizedTaskId = normalizeTaskId((params as unknown).taskId);",
      "context": "  try {\n    // Normalize the taskId before validation\n    const normalizedTaskId = normalizeTaskId((params as unknown).taskId);\n    if (!normalizedTaskId) {\n      const errorMessage = createTaskIdParsingErrorMessage(",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 201,
      "content": "(params as unknown).taskId,",
      "context": "    if (!normalizedTaskId) {\n      const errorMessage = createTaskIdParsingErrorMessage(\n        (params as unknown).taskId,\n        [\n          { label: \"Operation\", value: \"get task status\" },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 204,
      "content": "{ label: \"Input\", value: (params as unknown).taskId }",
      "context": "        [\n          { label: \"Operation\", value: \"get task status\" },\n          { label: \"Input\", value: (params as unknown).taskId }\n        ]\n      );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 212,
      "content": "const validParams = (taskStatusGetParamsSchema as unknown).parse(paramsWithNormalizedId);",
      "context": "\n    // Validate params with Zod schema\n    const validParams = (taskStatusGetParamsSchema as unknown).parse(paramsWithNormalizedId);\n\n    // First get the repo path (needed for workspace resolution)",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 215,
      "content": "const repoPath = await (deps as unknown).resolveRepoPath({",
      "context": "\n    // First get the repo path (needed for workspace resolution)\n    const repoPath = await (deps as unknown).resolveRepoPath({\n      session: (validParams as unknown).session,\n      repo: validParams.repo,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 216,
      "content": "session: (validParams as unknown).session,",
      "context": "    // First get the repo path (needed for workspace resolution)\n    const repoPath = await (deps as unknown).resolveRepoPath({\n      session: (validParams as unknown).session,\n      repo: validParams.repo,\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 221,
      "content": "const workspacePath = await (deps as unknown).resolveMainWorkspacePath();",
      "context": "\n    // Then get the workspace path (main repo or session's main workspace)\n    const workspacePath = await (deps as unknown).resolveMainWorkspacePath();\n\n    // Create task service",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 224,
      "content": "const taskService = await (deps as unknown).createTaskService({",
      "context": "\n    // Create task service\n    const taskService = await (deps as unknown).createTaskService({\n      workspacePath,\n      backend: validParams.backend,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 230,
      "content": "const task = await (taskService as unknown).getTask((validParams as unknown).taskId);",
      "context": "\n    // Get the task\n    const task = await (taskService as unknown).getTask((validParams as unknown).taskId);\n\n    if (!task) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 234,
      "content": "`Task ${(validParams as unknown).taskId} not found or has no status`,",
      "context": "    if (!task) {\n      throw new ResourceNotFoundError(\n        `Task ${(validParams as unknown).taskId} not found or has no status`,\n        \"task\",\n        (validParams as unknown).taskId",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 236,
      "content": "(validParams as unknown).taskId",
      "context": "        `Task ${(validParams as unknown).taskId} not found or has no status`,\n        \"task\",\n        (validParams as unknown).taskId\n      );\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 240,
      "content": "return (task as unknown).status;",
      "context": "    }\n\n    return (task as unknown).status;\n  } catch (error) {\n    if (error instanceof z.ZodError) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 267,
      "content": "createTaskService: async (options) => await createConfiguredTaskService(options as unknown),",
      "context": "    resolveRepoPath,\n    resolveMainWorkspacePath,\n    createTaskService: async (options) => await createConfiguredTaskService(options as unknown),\n  }\n): Promise<void> {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 272,
      "content": "const normalizedTaskId = normalizeTaskId((params as unknown).taskId);",
      "context": "  try {\n    // Normalize the taskId before validation\n    const normalizedTaskId = normalizeTaskId((params as unknown).taskId);\n    if (!normalizedTaskId) {\n      const errorMessage = createTaskIdParsingErrorMessage(",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 275,
      "content": "(params as unknown).taskId,",
      "context": "    if (!normalizedTaskId) {\n      const errorMessage = createTaskIdParsingErrorMessage(\n        (params as unknown).taskId,\n        [\n          { label: \"Operation\", value: \"set task status\" },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 278,
      "content": "{ label: \"Input\", value: (params as unknown).taskId }",
      "context": "        [\n          { label: \"Operation\", value: \"set task status\" },\n          { label: \"Input\", value: (params as unknown).taskId }\n        ]\n      );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 286,
      "content": "const validParams = (taskStatusSetParamsSchema as unknown).parse(paramsWithNormalizedId);",
      "context": "\n    // Validate params with Zod schema\n    const validParams = (taskStatusSetParamsSchema as unknown).parse(paramsWithNormalizedId);\n\n    // First get the repo path (needed for workspace resolution)",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 289,
      "content": "const repoPath = await (deps as unknown).resolveRepoPath({",
      "context": "\n    // First get the repo path (needed for workspace resolution)\n    const repoPath = await (deps as unknown).resolveRepoPath({\n      session: (validParams as unknown).session,\n      repo: validParams.repo,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 290,
      "content": "session: (validParams as unknown).session,",
      "context": "    // First get the repo path (needed for workspace resolution)\n    const repoPath = await (deps as unknown).resolveRepoPath({\n      session: (validParams as unknown).session,\n      repo: validParams.repo,\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 295,
      "content": "const workspacePath = await (deps as unknown).resolveMainWorkspacePath();",
      "context": "\n    // Then get the workspace path (main repo or session's main workspace)\n    const workspacePath = await (deps as unknown).resolveMainWorkspacePath();\n\n    // Create task service with explicit backend to avoid configuration issues",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 298,
      "content": "const taskService = await (deps as unknown).createTaskService({",
      "context": "\n    // Create task service with explicit backend to avoid configuration issues\n    const taskService = await (deps as unknown).createTaskService({\n      workspacePath,\n      backend: validParams.backend || \"markdown\", // Use markdown as default to avoid config lookup",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 304,
      "content": "const task = await (taskService as unknown).getTask((validParams as unknown).taskId);",
      "context": "\n    // Verify the task exists before setting status\n    const task = await (taskService as unknown).getTask((validParams as unknown).taskId);\n    if (!task) {\n      throw new ResourceNotFoundError(",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 307,
      "content": "`Task ${(validParams as unknown).taskId} not found`,",
      "context": "    if (!task) {\n      throw new ResourceNotFoundError(\n        `Task ${(validParams as unknown).taskId} not found`,\n        \"task\",\n        (validParams as unknown).taskId",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 309,
      "content": "(validParams as unknown).taskId",
      "context": "        `Task ${(validParams as unknown).taskId} not found`,\n        \"task\",\n        (validParams as unknown).taskId\n      );\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 314,
      "content": "await (taskService as unknown).setTaskStatus((validParams as unknown).taskId, (validParams as unknown).status);",
      "context": "\n    // Set the task status\n    await (taskService as unknown).setTaskStatus((validParams as unknown).taskId, (validParams as unknown).status);\n  } catch (error) {\n    if (error instanceof z.ZodError) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 342,
      "content": "createTaskService: (options) => createTaskServiceImpl(options as unknown),",
      "context": "    resolveRepoPath,\n    resolveMainWorkspacePath,\n    createTaskService: (options) => createTaskServiceImpl(options as unknown),\n  }\n): Promise<any> {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 347,
      "content": "const validParams = (taskCreateParamsSchema as unknown).parse(params as unknown);",
      "context": "  try {\n    // Validate params with Zod schema\n    const validParams = (taskCreateParamsSchema as unknown).parse(params as unknown);\n\n    // First get the repo path (needed for workspace resolution)",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 350,
      "content": "const repoPath = await (deps as unknown).resolveRepoPath({",
      "context": "\n    // First get the repo path (needed for workspace resolution)\n    const repoPath = await (deps as unknown).resolveRepoPath({\n      session: (validParams as unknown).session,\n      repo: validParams.repo,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 351,
      "content": "session: (validParams as unknown).session,",
      "context": "    // First get the repo path (needed for workspace resolution)\n    const repoPath = await (deps as unknown).resolveRepoPath({\n      session: (validParams as unknown).session,\n      repo: validParams.repo,\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 356,
      "content": "const workspacePath = await (deps as unknown).resolveMainWorkspacePath();",
      "context": "\n    // Then get the workspace path (main repo or session's main workspace)\n    const workspacePath = await (deps as unknown).resolveMainWorkspacePath();\n\n    // Create task service",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 359,
      "content": "const taskService = (deps as unknown).createTaskService({",
      "context": "\n    // Create task service\n    const taskService = (deps as unknown).createTaskService({\n      workspacePath,\n      backend: validParams.backend,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 365,
      "content": "const task = await (taskService as unknown).createTask((validParams as unknown).title, {",
      "context": "\n    // Create the task\n    const task = await (taskService as unknown).createTask((validParams as unknown).title, {\n      force: validParams.force,\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 393,
      "content": "createTaskService: (options) => createTaskServiceImpl(options as unknown),",
      "context": "    resolveRepoPath,\n    resolveMainWorkspacePath,\n    createTaskService: (options) => createTaskServiceImpl(options as unknown),\n  }\n): Promise<{ task: any; specPath: string; content: string; section?: string }> {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 398,
      "content": "const validParams = (taskSpecContentParamsSchema as unknown).parse(params as unknown);",
      "context": "  try {\n    // Validate params with Zod schema\n    const validParams = (taskSpecContentParamsSchema as unknown).parse(params as unknown);\n\n    // Normalize task ID",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 401,
      "content": "const taskIdString = Array.isArray((validParams as unknown).taskId) ? (validParams as unknown).taskId[0] : (validParams as unknown).taskId;",
      "context": "\n    // Normalize task ID\n    const taskIdString = Array.isArray((validParams as unknown).taskId) ? (validParams as unknown).taskId[0] : (validParams as unknown).taskId;\n    const taskId = normalizeTaskId(taskIdString);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 405,
      "content": "const repoPath = await (deps as unknown).resolveRepoPath({",
      "context": "\n    // First get the repo path (needed for workspace resolution)\n    const repoPath = await (deps as unknown).resolveRepoPath({\n      session: (validParams as unknown).session,\n      repo: validParams.repo,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 406,
      "content": "session: (validParams as unknown).session,",
      "context": "    // First get the repo path (needed for workspace resolution)\n    const repoPath = await (deps as unknown).resolveRepoPath({\n      session: (validParams as unknown).session,\n      repo: validParams.repo,\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 411,
      "content": "const workspacePath = await (deps as unknown).resolveMainWorkspacePath();",
      "context": "\n    // Then get the workspace path (main repo or session's main workspace)\n    const workspacePath = await (deps as unknown).resolveMainWorkspacePath();\n\n    // Create task service",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 414,
      "content": "const taskService = (deps as unknown).createTaskService({",
      "context": "\n    // Create task service\n    const taskService = (deps as unknown).createTaskService({\n      workspacePath,\n      backend: validParams.backend,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 420,
      "content": "const task = await (taskService as unknown).getTask(taskId);",
      "context": "\n    // Get the task\n    const task = await (taskService as unknown).getTask(taskId);\n    if (!task) {\n      throw new ResourceNotFoundError(`Task ${taskId} not found`, \"task\", taskId);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 426,
      "content": "const specPath = await (taskService as unknown).getTaskSpecPath(taskId);",
      "context": "\n    // Get the task spec path\n    const specPath = await (taskService as unknown).getTaskSpecPath(taskId);\n    if (!specPath) {\n      throw new ResourceNotFoundError(`Task ${taskId} has no specification file`, \"task\", taskId);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 446,
      "content": "const lines = (((content) as unknown).toString() as unknown).split(\"\\n\");",
      "context": "    let sectionContent = content;\n    if (validParams.section) {\n      const lines = (((content) as unknown).toString() as unknown).split(\"\\n\");\n      const sectionStart = lines.findIndex((line) =>\n        (line.toLowerCase() as unknown).startsWith(`## ${(validParams.section! as unknown).toLowerCase()}`)",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 448,
      "content": "(line.toLowerCase() as unknown).startsWith(`## ${(validParams.section! as unknown).toLowerCase()}`)",
      "context": "      const lines = (((content) as unknown).toString() as unknown).split(\"\\n\");\n      const sectionStart = lines.findIndex((line) =>\n        (line.toLowerCase() as unknown).startsWith(`## ${(validParams.section! as unknown).toLowerCase()}`)\n      );\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 460,
      "content": "if ((lines[i] as unknown).startsWith(\"## \")) {",
      "context": "      let sectionEnd = lines.length;\n      for (let i = sectionStart + 1; i < lines.length; i++) {\n        if ((lines[i] as unknown).startsWith(\"## \")) {\n          sectionEnd = i;\n          break;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 466,
      "content": "sectionContent = ((lines as unknown).slice(sectionStart, sectionEnd).join(\"\\n\") as unknown).trim();",
      "context": "      }\n\n      sectionContent = ((lines as unknown).slice(sectionStart, sectionEnd).join(\"\\n\") as unknown).trim();\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 503,
      "content": "createTaskService: (options) => createTaskServiceImpl(options as unknown),",
      "context": "    resolveRepoPath,\n    resolveMainWorkspacePath,\n    createTaskService: (options) => createTaskServiceImpl(options as unknown),\n  }\n): Promise<any> {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 508,
      "content": "const validParams = (taskCreateFromTitleAndDescriptionParamsSchema as unknown).parse(params as unknown);",
      "context": "  try {\n    // Validate params with Zod schema\n    const validParams = (taskCreateFromTitleAndDescriptionParamsSchema as unknown).parse(params as unknown);\n\n    // First get the repo path (needed for workspace resolution)",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 511,
      "content": "const repoPath = await (deps as unknown).resolveRepoPath({",
      "context": "\n    // First get the repo path (needed for workspace resolution)\n    const repoPath = await (deps as unknown).resolveRepoPath({\n      session: (validParams as unknown).session,\n      repo: validParams.repo,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 512,
      "content": "session: (validParams as unknown).session,",
      "context": "    // First get the repo path (needed for workspace resolution)\n    const repoPath = await (deps as unknown).resolveRepoPath({\n      session: (validParams as unknown).session,\n      repo: validParams.repo,\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 517,
      "content": "const workspacePath = await (deps as unknown).resolveMainWorkspacePath();",
      "context": "\n    // Then get the workspace path (main repo or session's main workspace)\n    const workspacePath = await (deps as unknown).resolveMainWorkspacePath();\n\n    // Create task service",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 520,
      "content": "const taskService = (deps as unknown).createTaskService({",
      "context": "\n    // Create task service\n    const taskService = (deps as unknown).createTaskService({\n      workspacePath,\n      backend: validParams.backend,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 526,
      "content": "let description = (validParams as unknown).description;",
      "context": "\n    // Read description from file if descriptionPath is provided\n    let description = (validParams as unknown).description;\n    if (validParams.descriptionPath) {\n      try {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 530,
      "content": "const filePath = (require(\"path\") as unknown).resolve(validParams.descriptionPath);",
      "context": "      try {\n        // Resolve relative paths relative to current working directory\n        const filePath = (require(\"path\") as unknown).resolve(validParams.descriptionPath);\n        description = ((await readFile(filePath, \"utf-8\")) as unknown).toString();\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 531,
      "content": "description = ((await readFile(filePath, \"utf-8\")) as unknown).toString();",
      "context": "        // Resolve relative paths relative to current working directory\n        const filePath = (require(\"path\") as unknown).resolve(validParams.descriptionPath);\n        description = ((await readFile(filePath, \"utf-8\")) as unknown).toString();\n\n        if (!description.trim()) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 542,
      "content": "if ((errorMessage as any).includes(\"ENOENT\") || (errorMessage as unknown).includes(\"no such file\")) {",
      "context": "\n        const errorMessage = getErrorMessage(error as any);\n        if ((errorMessage as any).includes(\"ENOENT\") || (errorMessage as unknown).includes(\"no such file\")) {\n          throw new ValidationError(`Description file not found: ${validParams.descriptionPath}`);\n        } else if ((errorMessage as unknown).includes(\"EACCES\") || (errorMessage as unknown).includes(\"permission denied\")) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 544,
      "content": "} else if ((errorMessage as unknown).includes(\"EACCES\") || (errorMessage as unknown).includes(\"permission denied\")) {",
      "context": "        if ((errorMessage as any).includes(\"ENOENT\") || (errorMessage as unknown).includes(\"no such file\")) {\n          throw new ValidationError(`Description file not found: ${validParams.descriptionPath}`);\n        } else if ((errorMessage as unknown).includes(\"EACCES\") || (errorMessage as unknown).includes(\"permission denied\")) {\n          throw new ValidationError(\n            `Permission denied reading description file: ${validParams.descriptionPath}`",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 557,
      "content": "const task = await (taskService as unknown).createTaskFromTitleAndDescription(",
      "context": "\n    // Create the task from title and description\n    const task = await (taskService as unknown).createTaskFromTitleAndDescription(\n      (validParams as unknown).title,\n      description!,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 558,
      "content": "(validParams as unknown).title,",
      "context": "    // Create the task from title and description\n    const task = await (taskService as unknown).createTaskFromTitleAndDescription(\n      (validParams as unknown).title,\n      description!,\n      {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 593,
      "content": "createTaskService: async (options) => await createConfiguredTaskService(options as unknown),",
      "context": "    resolveRepoPath,\n    resolveMainWorkspacePath,\n    createTaskService: async (options) => await createConfiguredTaskService(options as unknown),\n  }\n): Promise<{ success: boolean; taskId: string; task?: any }> {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 598,
      "content": "const normalizedTaskId = normalizeTaskId((params as unknown).taskId);",
      "context": "  try {\n    // Normalize the taskId before validation\n    const normalizedTaskId = normalizeTaskId((params as unknown).taskId);\n    if (!normalizedTaskId) {\n      throw new ValidationError(",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 601,
      "content": "`Invalid task ID: '${(params as unknown).taskId}'. Please provide a valid numeric task ID (e.g., 077 or #077).`",
      "context": "    if (!normalizedTaskId) {\n      throw new ValidationError(\n        `Invalid task ID: '${(params as unknown).taskId}'. Please provide a valid numeric task ID (e.g., 077 or #077).`\n      );\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 607,
      "content": "const validParams = (taskDeleteParamsSchema as unknown).parse(paramsWithNormalizedId);",
      "context": "\n    // Validate params with Zod schema\n    const validParams = (taskDeleteParamsSchema as unknown).parse(paramsWithNormalizedId);\n\n    // First get the repo path (needed for workspace resolution)",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 610,
      "content": "const repoPath = await (deps as unknown).resolveRepoPath({",
      "context": "\n    // First get the repo path (needed for workspace resolution)\n    const repoPath = await (deps as unknown).resolveRepoPath({\n      session: (validParams as unknown).session,\n      repo: validParams.repo,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 611,
      "content": "session: (validParams as unknown).session,",
      "context": "    // First get the repo path (needed for workspace resolution)\n    const repoPath = await (deps as unknown).resolveRepoPath({\n      session: (validParams as unknown).session,\n      repo: validParams.repo,\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 616,
      "content": "const workspacePath = await (deps as unknown).resolveMainWorkspacePath();",
      "context": "\n    // Then get the workspace path (main repo or session's main workspace)\n    const workspacePath = await (deps as unknown).resolveMainWorkspacePath();\n\n    // Create task service",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 619,
      "content": "const taskService = await (deps as unknown).createTaskService({",
      "context": "\n    // Create task service\n    const taskService = await (deps as unknown).createTaskService({\n      workspacePath,\n      backend: validParams.backend,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 625,
      "content": "const task = await (taskService as unknown).getTask((validParams as unknown).taskId);",
      "context": "\n    // Get the task first to verify it exists and get details\n    const task = await (taskService as unknown).getTask((validParams as unknown).taskId);\n\n    if (!task) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 629,
      "content": "`Task ${(validParams as unknown).taskId} not found`,",
      "context": "    if (!task) {\n      throw new ResourceNotFoundError(\n        `Task ${(validParams as unknown).taskId} not found`,\n        \"task\",\n        (validParams as unknown).taskId",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 631,
      "content": "(validParams as unknown).taskId",
      "context": "        `Task ${(validParams as unknown).taskId} not found`,\n        \"task\",\n        (validParams as unknown).taskId\n      );\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 636,
      "content": "const deleted = await (taskService as unknown).deleteTask((validParams as unknown).taskId, {",
      "context": "\n    // Delete the task\n    const deleted = await (taskService as unknown).deleteTask((validParams as unknown).taskId, {\n      force: validParams.force,\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskCommands.ts",
      "line": 642,
      "content": "taskId: (validParams as unknown).taskId,",
      "context": "    return {\n      success: deleted,\n      taskId: (validParams as unknown).taskId,\n      task: task,\n    };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/special-workspace-integration.test.ts",
      "line": 96,
      "content": "delete (backend as unknown).isInTreeBackend;",
      "context": "\n      // Remove the isInTreeBackend method to test auto-detection\n      delete (backend as unknown).isInTreeBackend;\n      const proto = Object.getPrototypeOf(backend);\n      if (proto && typeof proto.isInTreeBackend === \"function\") {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/special-workspace-integration.test.ts",
      "line": 119,
      "content": "delete (backend as unknown).isInTreeBackend;",
      "context": "\n      // Remove the isInTreeBackend method to test auto-detection  \n      delete (backend as unknown).isInTreeBackend;\n      const proto = Object.getPrototypeOf(backend);\n      if (proto && typeof proto.isInTreeBackend === \"function\") {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/special-workspace-integration.test.ts",
      "line": 182,
      "content": "delete (backend as unknown).isInTreeBackend;",
      "context": "      // Remove isInTreeBackend methods to test auto-detection\n      [localBackend, teamBackend].forEach(backend => {\n        delete (backend as unknown).isInTreeBackend;\n        const proto = Object.getPrototypeOf(backend);\n        if (proto && typeof proto.isInTreeBackend === \"function\") {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/taskIO.ts",
      "line": 232,
      "content": "const taskIdNum = taskId!.startsWith(\"#\") ? (taskId as unknown)!.slice(1) : taskId;",
      "context": "  workspacePath: string\n): string {\n  const taskIdNum = taskId!.startsWith(\"#\") ? (taskId as unknown)!.slice(1) : taskId;\n  const normalizedTitle = (title.toLowerCase() as unknown).replace(/[^a-z0-9]+/g, \"-\");\n  return join(getTaskSpecsDirectoryPath(workspacePath), `${taskIdNum}-${normalizedTitle}.md`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/taskIO.ts",
      "line": 233,
      "content": "const normalizedTitle = (title.toLowerCase() as unknown).replace(/[^a-z0-9]+/g, \"-\");",
      "context": "): string {\n  const taskIdNum = taskId!.startsWith(\"#\") ? (taskId as unknown)!.slice(1) : taskId;\n  const normalizedTitle = (title.toLowerCase() as unknown).replace(/[^a-z0-9]+/g, \"-\");\n  return join(getTaskSpecsDirectoryPath(workspacePath), `${taskIdNum}-${normalizedTitle}.md`);\n}",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/utils.test.ts",
      "line": 43,
      "content": "expect(normalizeTaskId(input as unknown)).toBeNull();",
      "context": "  for (const { input, note } of invalidInputs) {\n    test(`should return null for invalid input \"${String(input)}\" (${note})`, () => {\n      expect(normalizeTaskId(input as unknown)).toBeNull();\n    });\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/repository/index.ts",
      "line": 206,
      "content": "if (!(config as unknown).type) {",
      "context": "): Promise<RepositoryBackend> {\n  // Validate common configuration\n  if (!(config as unknown).type) {\n    throw new Error(\"Repository backend type is required\");\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/index.ts",
      "line": 210,
      "content": "if (!(config as unknown).repoUrl) {",
      "context": "  }\n\n  if (!(config as unknown).repoUrl) {\n    throw new Error(\"Repository URL is required\");\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/index.ts",
      "line": 215,
      "content": "switch ((config as unknown).type) {",
      "context": "\n  // Backend-specific validation\n  switch ((config as unknown).type) {\n  case (RepositoryBackendType as unknown).LOCAL: {\n    // For local repositories, validate the path exists (if it's a local path)",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/index.ts",
      "line": 216,
      "content": "case (RepositoryBackendType as unknown).LOCAL: {",
      "context": "  // Backend-specific validation\n  switch ((config as unknown).type) {\n  case (RepositoryBackendType as unknown).LOCAL: {\n    // For local repositories, validate the path exists (if it's a local path)\n    if (!(config.repoUrl as unknown).includes(\"://\") && !(config.repoUrl as unknown).includes(\"@\")) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/index.ts",
      "line": 218,
      "content": "if (!(config.repoUrl as unknown).includes(\"://\") && !(config.repoUrl as unknown).includes(\"@\")) {",
      "context": "  case (RepositoryBackendType as unknown).LOCAL: {\n    // For local repositories, validate the path exists (if it's a local path)\n    if (!(config.repoUrl as unknown).includes(\"://\") && !(config.repoUrl as unknown).includes(\"@\")) {\n      try {\n        const { exec } = await import(\"child_process\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/index.ts",
      "line": 224,
      "content": "`test -d \"${(config as unknown).repoUrl}\" && echo \"exists\" || echo \"not exists\"`",
      "context": "        const execAsync = promisify(exec);\n        const { stdout } = await execAsync(\n          `test -d \"${(config as unknown).repoUrl}\" && echo \"exists\" || echo \"not exists\"`\n        );\n        if (stdout.trim() === \"not exists\") {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/index.ts",
      "line": 227,
      "content": "throw new Error(`Repository path does not exist: ${(config as unknown).repoUrl}`);",
      "context": "        );\n        if (stdout.trim() === \"not exists\") {\n          throw new Error(`Repository path does not exist: ${(config as unknown).repoUrl}`);\n        }\n      } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/index.ts",
      "line": 235,
      "content": "return new LocalGitBackend(config as unknown);",
      "context": "\n    const { LocalGitBackend } = await import(\"./local\");\n    return new LocalGitBackend(config as unknown);\n  }\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/repository/index.ts",
      "line": 238,
      "content": "case (RepositoryBackendType as unknown).REMOTE: {",
      "context": "  }\n\n  case (RepositoryBackendType as unknown).REMOTE: {\n    // For remote repositories, validate URL format and required options\n    if (",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/index.ts",
      "line": 241,
      "content": "!(config.repoUrl as unknown).startsWith(\"http://\") &&",
      "context": "    // For remote repositories, validate URL format and required options\n    if (\n      !(config.repoUrl as unknown).startsWith(\"http://\") &&\n        !(config.repoUrl as unknown).startsWith(\"https://\") &&\n        !(config.repoUrl as unknown).startsWith(\"git@\") &&",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/index.ts",
      "line": 242,
      "content": "!(config.repoUrl as unknown).startsWith(\"https://\") &&",
      "context": "    if (\n      !(config.repoUrl as unknown).startsWith(\"http://\") &&\n        !(config.repoUrl as unknown).startsWith(\"https://\") &&\n        !(config.repoUrl as unknown).startsWith(\"git@\") &&\n        !(config.repoUrl as unknown).startsWith(\"ssh://\")",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/index.ts",
      "line": 243,
      "content": "!(config.repoUrl as unknown).startsWith(\"git@\") &&",
      "context": "      !(config.repoUrl as unknown).startsWith(\"http://\") &&\n        !(config.repoUrl as unknown).startsWith(\"https://\") &&\n        !(config.repoUrl as unknown).startsWith(\"git@\") &&\n        !(config.repoUrl as unknown).startsWith(\"ssh://\")\n    ) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/index.ts",
      "line": 244,
      "content": "!(config.repoUrl as unknown).startsWith(\"ssh://\")",
      "context": "        !(config.repoUrl as unknown).startsWith(\"https://\") &&\n        !(config.repoUrl as unknown).startsWith(\"git@\") &&\n        !(config.repoUrl as unknown).startsWith(\"ssh://\")\n    ) {\n      throw new Error(`Invalid remote repository URL format: ${(config as unknown).repoUrl}`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/index.ts",
      "line": 246,
      "content": "throw new Error(`Invalid remote repository URL format: ${(config as unknown).repoUrl}`);",
      "context": "        !(config.repoUrl as unknown).startsWith(\"ssh://\")\n    ) {\n      throw new Error(`Invalid remote repository URL format: ${(config as unknown).repoUrl}`);\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/index.ts",
      "line": 250,
      "content": "if ((config as unknown).remote) {",
      "context": "\n    // Validate remote options if provided\n    if ((config as unknown).remote) {\n      if (\n        (config.remote as unknown).authMethod &&",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/index.ts",
      "line": 252,
      "content": "(config.remote as unknown).authMethod &&",
      "context": "    if ((config as unknown).remote) {\n      if (\n        (config.remote as unknown).authMethod &&\n          !([\"ssh\", \"https\", \"token\"] as unknown).includes((config.remote as unknown).authMethod)\n      ) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/index.ts",
      "line": 253,
      "content": "!([\"ssh\", \"https\", \"token\"] as unknown).includes((config.remote as unknown).authMethod)",
      "context": "      if (\n        (config.remote as unknown).authMethod &&\n          !([\"ssh\", \"https\", \"token\"] as unknown).includes((config.remote as unknown).authMethod)\n      ) {\n        throw new Error(",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/index.ts",
      "line": 256,
      "content": "`Invalid auth method: ${(config.remote as unknown).authMethod}. Must be one of: ssh, https, token`",
      "context": "      ) {\n        throw new Error(\n          `Invalid auth method: ${(config.remote as unknown).authMethod}. Must be one of: ssh, https, token`\n        );\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/index.ts",
      "line": 261,
      "content": "(config.remote as unknown).depth &&",
      "context": "\n      if (\n        (config.remote as unknown).depth &&\n          (typeof (config.remote as unknown).depth !== \"number\" || (config.remote as unknown).depth < 1)\n      ) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/index.ts",
      "line": 262,
      "content": "(typeof (config.remote as unknown).depth !== \"number\" || (config.remote as unknown).depth < 1)",
      "context": "      if (\n        (config.remote as unknown).depth &&\n          (typeof (config.remote as unknown).depth !== \"number\" || (config.remote as unknown).depth < 1)\n      ) {\n        throw new Error(\"Clone depth must be a positive number\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/index.ts",
      "line": 269,
      "content": "return new RemoteGitBackend(config as unknown);",
      "context": "\n    const { RemoteGitBackend } = await import(\"./remote\");\n    return new RemoteGitBackend(config as unknown);\n  }\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/repository/index.ts",
      "line": 272,
      "content": "case (RepositoryBackendType as unknown).GITHUB: {",
      "context": "  }\n\n  case (RepositoryBackendType as unknown).GITHUB: {\n    // For GitHub repositories, validate GitHub-specific options\n    if ((config as unknown).github) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/index.ts",
      "line": 274,
      "content": "if ((config as unknown).github) {",
      "context": "  case (RepositoryBackendType as unknown).GITHUB: {\n    // For GitHub repositories, validate GitHub-specific options\n    if ((config as unknown).github) {\n      // If owner and repo are provided, validate them\n      if (",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/index.ts",
      "line": 277,
      "content": "((config.github as unknown).owner && !(config.github as unknown).repo) ||",
      "context": "      // If owner and repo are provided, validate them\n      if (\n        ((config.github as unknown).owner && !(config.github as unknown).repo) ||\n          (!(config.github as unknown).owner && (config.github as unknown).repo)\n      ) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/index.ts",
      "line": 278,
      "content": "(!(config.github as unknown).owner && (config.github as unknown).repo)",
      "context": "      if (\n        ((config.github as unknown).owner && !(config.github as unknown).repo) ||\n          (!(config.github as unknown).owner && (config.github as unknown).repo)\n      ) {\n        throw new Error(\"Both owner and repo must be provided for GitHub repositories\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/index.ts",
      "line": 284,
      "content": "if ((config.github as unknown).enterpriseDomain && !(config.github as unknown).apiUrl) {",
      "context": "\n      // Validate GitHub Enterprise settings if provided\n      if ((config.github as unknown).enterpriseDomain && !(config.github as unknown).apiUrl) {\n        throw new Error(\"API URL must be provided when using GitHub Enterprise\");\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/index.ts",
      "line": 290,
      "content": "return new GitHubBackend(config as unknown);",
      "context": "\n    const { GitHubBackend } = await import(\"./github\");\n    return new GitHubBackend(config as unknown);\n  }\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/repository/index.ts",
      "line": 294,
      "content": "throw new Error(`Unsupported repository backend type: ${(config as unknown).type}`);",
      "context": "\n  default:\n    throw new Error(`Unsupported repository backend type: ${(config as unknown).type}`);\n  }\n}",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/remote.ts",
      "line": 47,
      "content": "this.repoUrl = (config as unknown).repoUrl;",
      "context": "\n    // Extract configuration options\n    this.repoUrl = (config as unknown).repoUrl;\n    this.defaultBranch = (config as unknown).branch;\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/remote.ts",
      "line": 48,
      "content": "this.defaultBranch = (config as unknown).branch;",
      "context": "    // Extract configuration options\n    this.repoUrl = (config as unknown).repoUrl;\n    this.defaultBranch = (config as unknown).branch;\n\n    if (!this.repoUrl) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/remote.ts",
      "line": 114,
      "content": "if ((normalizedError?.message as unknown).includes(\"Authentication failed\")) {",
      "context": "\n      // Provide more informative error messages for common Git issues\n      if ((normalizedError?.message as unknown).includes(\"Authentication failed\")) {\n        throw new Error(`\n🔐 Git Authentication Failed",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/remote.ts",
      "line": 128,
      "content": "(normalizedError?.message as unknown).includes(\"not found\") ||",
      "context": "`);\n      } else if (\n        (normalizedError?.message as unknown).includes(\"not found\") ||\n        (normalizedError?.message as unknown).includes(\"does not exist\")\n      ) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/remote.ts",
      "line": 129,
      "content": "(normalizedError?.message as unknown).includes(\"does not exist\")",
      "context": "      } else if (\n        (normalizedError?.message as unknown).includes(\"not found\") ||\n        (normalizedError?.message as unknown).includes(\"does not exist\")\n      ) {\n        throw new Error(`Git repository not found: ${this.repoUrl}. Check the URL.`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/remote.ts",
      "line": 132,
      "content": "} else if ((normalizedError?.message as unknown).includes(\"timed out\")) {",
      "context": "      ) {\n        throw new Error(`Git repository not found: ${this.repoUrl}. Check the URL.`);\n      } else if ((normalizedError?.message as unknown).includes(\"timed out\")) {\n        throw new Error(\"Git connection timed out. Check your network connection and try again.\");\n      } else {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/remote.ts",
      "line": 135,
      "content": "throw new Error(`Failed to clone Git repository: ${(normalizedError as unknown).message}`);",
      "context": "        throw new Error(\"Git connection timed out. Check your network connection and try again.\");\n      } else {\n        throw new Error(`Failed to clone Git repository: ${(normalizedError as unknown).message}`);\n      }\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/remote.ts",
      "line": 160,
      "content": "throw new Error(`Failed to create branch in Git repository: ${(normalizedError as unknown).message}`);",
      "context": "    } catch (error) {\n      const normalizedError = error instanceof Error ? error : new Error(String(error as any));\n      throw new Error(`Failed to create branch in Git repository: ${(normalizedError as unknown).message}`);\n    }\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/remote.ts",
      "line": 186,
      "content": "const counts = (revListOutput.trim() as unknown).split(/\\s+/);",
      "context": "          `git -C ${workdir} rev-list --left-right --count @{upstream}...HEAD`\n        );\n        const counts = (revListOutput.trim() as unknown).split(/\\s+/);\n        if (counts && counts.length === 2) {\n          behind = parseInt(counts[0] || \"0\", 10);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/remote.ts",
      "line": 201,
      "content": "const remotes = (remoteOutput.trim() as unknown).split(\"\\n\").filter(Boolean);",
      "context": "      // Get remotes\n      const { stdout: remoteOutput } = await execAsync(`git -C ${workdir} remote`);\n      const remotes = (remoteOutput.trim() as unknown).split(\"\\n\").filter(Boolean);\n\n      return {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/remote.ts",
      "line": 215,
      "content": "throw new Error(`Failed to get Git repository status: ${(normalizedError as unknown).message}`);",
      "context": "    } catch (error) {\n      const normalizedError = error instanceof Error ? error : new Error(String(error as any));\n      throw new Error(`Failed to get Git repository status: ${(normalizedError as unknown).message}`);\n    }\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/remote.ts",
      "line": 244,
      "content": "(this.repoUrl as unknown).startsWith(\"git@\") ||",
      "context": "      // Check if the URL has a git protocol, or ends with .git\n      const isGitUrl =\n        (this.repoUrl as unknown).startsWith(\"git@\") ||\n        (this.repoUrl as unknown).startsWith(\"git://\") ||\n        (this.repoUrl as unknown).startsWith(\"http://\") ||",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/remote.ts",
      "line": 245,
      "content": "(this.repoUrl as unknown).startsWith(\"git://\") ||",
      "context": "      const isGitUrl =\n        (this.repoUrl as unknown).startsWith(\"git@\") ||\n        (this.repoUrl as unknown).startsWith(\"git://\") ||\n        (this.repoUrl as unknown).startsWith(\"http://\") ||\n        (this.repoUrl as unknown).startsWith(\"https://\") ||",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/remote.ts",
      "line": 246,
      "content": "(this.repoUrl as unknown).startsWith(\"http://\") ||",
      "context": "        (this.repoUrl as unknown).startsWith(\"git@\") ||\n        (this.repoUrl as unknown).startsWith(\"git://\") ||\n        (this.repoUrl as unknown).startsWith(\"http://\") ||\n        (this.repoUrl as unknown).startsWith(\"https://\") ||\n        (this.repoUrl as unknown).endsWith(\".git\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/remote.ts",
      "line": 247,
      "content": "(this.repoUrl as unknown).startsWith(\"https://\") ||",
      "context": "        (this.repoUrl as unknown).startsWith(\"git://\") ||\n        (this.repoUrl as unknown).startsWith(\"http://\") ||\n        (this.repoUrl as unknown).startsWith(\"https://\") ||\n        (this.repoUrl as unknown).endsWith(\".git\");\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/remote.ts",
      "line": 248,
      "content": "(this.repoUrl as unknown).endsWith(\".git\");",
      "context": "        (this.repoUrl as unknown).startsWith(\"http://\") ||\n        (this.repoUrl as unknown).startsWith(\"https://\") ||\n        (this.repoUrl as unknown).endsWith(\".git\");\n\n      if (!isGitUrl) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/remote.ts",
      "line": 269,
      "content": "message: `Failed to validate Git repository: ${(normalizedError as unknown).message}`,",
      "context": "      return {\n        success: false,\n        message: `Failed to validate Git repository: ${(normalizedError as unknown).message}`,\n        error: normalizedError,\n      };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/remote.ts",
      "line": 293,
      "content": "const sessions = await (this.sessionDb as unknown).listSessions();",
      "context": "\n      // This is a more complete implementation that would work with actual repositories\n      const sessions = await (this.sessionDb as unknown).listSessions();\n      const currentSessions = sessions.filter((s) => (s as unknown).repoUrl === this.repoUrl);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/remote.ts",
      "line": 294,
      "content": "const currentSessions = sessions.filter((s) => (s as unknown).repoUrl === this.repoUrl);",
      "context": "      // This is a more complete implementation that would work with actual repositories\n      const sessions = await (this.sessionDb as unknown).listSessions();\n      const currentSessions = sessions.filter((s) => (s as unknown).repoUrl === this.repoUrl);\n\n      if (currentSessions.length === 0) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/remote.ts",
      "line": 371,
      "content": "const sessions = await (this.sessionDb as unknown).listSessions();",
      "context": "      // 3. Pull from remote repository\n\n      const sessions = await (this.sessionDb as unknown).listSessions();\n      const currentSessions = sessions.filter((s) => (s as unknown).repoUrl === this.repoUrl);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/remote.ts",
      "line": 372,
      "content": "const currentSessions = sessions.filter((s) => (s as unknown).repoUrl === this.repoUrl);",
      "context": "\n      const sessions = await (this.sessionDb as unknown).listSessions();\n      const currentSessions = sessions.filter((s) => (s as unknown).repoUrl === this.repoUrl);\n\n      if (currentSessions.length === 0) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/local.ts",
      "line": 45,
      "content": "this.repoUrl = (config as unknown).repoUrl;",
      "context": "    const xdgStateHome = process.env.XDG_STATE_HOME || join(process.env.HOME || \"\", \".local/state\");\n    this.baseDir = join(xdgStateHome, \"minsky\");\n    this.repoUrl = (config as unknown).repoUrl;\n    this.repoName = normalizeRepositoryURI(this.repoUrl);\n    this.sessionDb = createSessionProvider();",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/local.ts",
      "line": 138,
      "content": "const counts = (revListOutput.trim() as unknown).split(/\\s+/);",
      "context": "        `git -C ${workdir} rev-list --left-right --count @{upstream}...HEAD`\n      );\n      const counts = (revListOutput.trim() as unknown).split(/\\s+/);\n      if (counts && counts.length === 2) {\n        behind = parseInt(counts[0] || \"0\", 10);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/local.ts",
      "line": 152,
      "content": "status: ((line as unknown).substring(0, 2) as unknown).trim(),",
      "context": "      .trim()\n      .split(\"\\n\").filter(Boolean).map((line: string) => ({\n        status: ((line as unknown).substring(0, 2) as unknown).trim(),\n        file: (line as unknown).substring(3),\n      }));",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/local.ts",
      "line": 153,
      "content": "file: (line as unknown).substring(3),",
      "context": "      .split(\"\\n\").filter(Boolean).map((line: string) => ({\n        status: ((line as unknown).substring(0, 2) as unknown).trim(),\n        file: (line as unknown).substring(3),\n      }));\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/local.ts",
      "line": 158,
      "content": "const remotes = (remoteOutput.trim() as unknown).split(\"\\n\").filter(Boolean);",
      "context": "    // Get remote information\n    const { stdout: remoteOutput } = await execAsync(`git -C ${workdir} remote`);\n    const remotes = (remoteOutput.trim() as unknown).split(\"\\n\").filter(Boolean);\n\n    return {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/local.ts",
      "line": 169,
      "content": "changes: modifiedFiles.map((file) => `M ${(file as unknown).file}`),",
      "context": "      modifiedFiles,\n      clean: modifiedFiles.length === 0,\n      changes: modifiedFiles.map((file) => `M ${(file as unknown).file}`),\n    };\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/local.ts",
      "line": 189,
      "content": "if (!(this.repoUrl as unknown).includes(\"://\") && !(this.repoUrl as unknown).includes(\"@\")) {",
      "context": "    try {\n      // If the repo is a local path, check if it has a .git directory\n      if (!(this.repoUrl as unknown).includes(\"://\") && !(this.repoUrl as unknown).includes(\"@\")) {\n        const { stdout } = await execAsync(\n          `test -d \"${this.repoUrl}/.git\" && echo \"true\" || echo \"false\"`",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/local.ts",
      "line": 202,
      "content": "return { success: false, message: `Invalid git repository: ${(normalizedError as unknown).message}` };",
      "context": "    } catch (error) {\n      const normalizedError = error instanceof Error ? error : new Error(String(error as any));\n      return { success: false, message: `Invalid git repository: ${(normalizedError as unknown).message}` };\n    }\n    return { success: true, message: \"Repository is valid\" };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 55,
      "content": "this.owner = (config.github as unknown).owner;",
      "context": "\n    // Extract GitHub-specific options\n    this.owner = (config.github as unknown).owner;\n    this.repo = (config.github as unknown).repo;\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 56,
      "content": "this.repo = (config.github as unknown).repo;",
      "context": "    // Extract GitHub-specific options\n    this.owner = (config.github as unknown).owner;\n    this.repo = (config.github as unknown).repo;\n\n    // Set the repo URL using the provided URL or construct from owner/repo if available",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 61,
      "content": "(config as unknown).repoUrl ||",
      "context": "    // Note: We don't embed tokens in the URL, letting Git use the system's credentials\n    this.repoUrl =\n      (config as unknown).repoUrl ||\n      (this.owner && this.repo ? `https://github.com/${this.owner}/${this.repo}.git` : \"\");\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 115,
      "content": "const result = await (this.gitService as unknown).clone({",
      "context": "    try {\n      // Use GitService's clone method to delegate credential handling to Git\n      const result = await (this.gitService as unknown).clone({\n        repoUrl: this.repoUrl,\n        session,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 128,
      "content": "if ((normalizedError.message as unknown).includes(\"Authentication failed\")) {",
      "context": "\n      // Provide more informative error messages for common GitHub issues\n      if ((normalizedError.message as unknown).includes(\"Authentication failed\")) {\n        throw new Error(`\n🔐 GitHub Authentication Failed",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 141,
      "content": "} else if ((normalizedError.message as unknown).includes(\"not found\")) {",
      "context": "Repository: https://github.com/${this.owner}/${this.repo}\n`);\n      } else if ((normalizedError.message as unknown).includes(\"not found\")) {\n        throw new Error(\n          `GitHub repository not found: ${this.owner}/${this.repo}. Check the owner and repo names.`",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 145,
      "content": "} else if ((normalizedError.message as unknown).includes(\"timed out\")) {",
      "context": "          `GitHub repository not found: ${this.owner}/${this.repo}. Check the owner and repo names.`\n        );\n      } else if ((normalizedError.message as unknown).includes(\"timed out\")) {\n        throw new Error(\n          \"GitHub connection timed out. Check your network connection and try again.\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 150,
      "content": "throw new Error(`Failed to clone GitHub repository: ${(normalizedError as unknown).message}`);",
      "context": "        );\n      } else {\n        throw new Error(`Failed to clone GitHub repository: ${(normalizedError as unknown).message}`);\n      }\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 175,
      "content": "throw new Error(`Failed to create branch in GitHub repository: ${(normalizedError as unknown).message}`);",
      "context": "    } catch (error) {\n      const normalizedError = error instanceof Error ? error : new Error(String(error as any));\n      throw new Error(`Failed to create branch in GitHub repository: ${(normalizedError as unknown).message}`);\n    }\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 188,
      "content": "const sessions = await (this.sessionDb as unknown).listSessions();",
      "context": "    try {\n      // Find a session for this repository\n      const sessions = await (this.sessionDb as unknown).listSessions();\n      const repoSession = sessions.find((session) => session.repoName === this.repoName);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 196,
      "content": "const workdir = this.getSessionWorkdir((repoSession as unknown).session);",
      "context": "\n      // Forward to the version that takes a session parameter\n      const workdir = this.getSessionWorkdir((repoSession as unknown).session);\n\n      // Use GitService to get repository status",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 199,
      "content": "const gitStatus = await (this.gitService as unknown).getStatus(workdir);",
      "context": "\n      // Use GitService to get repository status\n      const gitStatus = await (this.gitService as unknown).getStatus(workdir);\n\n      // Get additional information directly",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 214,
      "content": "const counts = (revListOutput.trim() as unknown).split(/\\s+/);",
      "context": "          `git -C ${workdir} rev-list --left-right --count @{upstream}...HEAD`\n        );\n        const counts = (revListOutput.trim() as unknown).split(/\\s+/);\n        if (counts && counts.length === 2) {\n          behind = parseInt(counts[0] || \"0\", 10);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 228,
      "content": ".filter(Boolean).map((line: string) => line.split(\"\\t\")[0] || \"\").filter((name, index, self) => name && (self as unknown).indexOf(name) === index);",
      "context": "        .trim()\n        .split(\"\\n\")\n        .filter(Boolean).map((line: string) => line.split(\"\\t\")[0] || \"\").filter((name, index, self) => name && (self as unknown).indexOf(name) === index);\n\n      const dirty =",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 243,
      "content": "const changes = modifiedFiles.map((m) => `${(m as unknown).status} ${m.file}`);",
      "context": "\n      // Extract string representation for original interface\n      const changes = modifiedFiles.map((m) => `${(m as unknown).status} ${m.file}`);\n\n      return {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 266,
      "content": "throw new Error(`Failed to get GitHub repository status: ${(normalizedError as unknown).message}`);",
      "context": "    } catch (error) {\n      const normalizedError = error instanceof Error ? error : new Error(String(error as any));\n      throw new Error(`Failed to get GitHub repository status: ${(normalizedError as unknown).message}`);\n    }\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 295,
      "content": "const sessions = await (this.sessionDb as unknown).listSessions();",
      "context": "    // If no session is provided, find one for this repository\n    try {\n      const sessions = await (this.sessionDb as unknown).listSessions();\n      const repoSession = sessions.find((s) => (s as unknown).repoName === this.repoName);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 296,
      "content": "const repoSession = sessions.find((s) => (s as unknown).repoName === this.repoName);",
      "context": "    try {\n      const sessions = await (this.sessionDb as unknown).listSessions();\n      const repoSession = sessions.find((s) => (s as unknown).repoName === this.repoName);\n\n      if (repoSession) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 299,
      "content": "return this.getSessionWorkdir((repoSession as unknown).session);",
      "context": "\n      if (repoSession) {\n        return this.getSessionWorkdir((repoSession as unknown).session);\n      }\n    } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 367,
      "content": "issues: [`Failed to validate GitHub repository: ${(normalizedError as unknown).message}`],",
      "context": "        valid: false,\n        success: false,\n        issues: [`Failed to validate GitHub repository: ${(normalizedError as unknown).message}`],\n        message: `Failed to validate GitHub repository: ${(normalizedError as unknown).message}`,\n        error: normalizedError,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 368,
      "content": "message: `Failed to validate GitHub repository: ${(normalizedError as unknown).message}`,",
      "context": "        success: false,\n        issues: [`Failed to validate GitHub repository: ${(normalizedError as unknown).message}`],\n        message: `Failed to validate GitHub repository: ${(normalizedError as unknown).message}`,\n        error: normalizedError,\n      };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 381,
      "content": "const sessions = await (this.sessionDb as unknown).listSessions();",
      "context": "    try {\n      // Find a session for this repository\n      const sessions = await (this.sessionDb as unknown).listSessions();\n      const repoSession = sessions.find((session) => session.repoName === this.repoName);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 391,
      "content": "const sessionName = (repoSession as unknown).session;",
      "context": "      }\n\n      const sessionName = (repoSession as unknown).session;\n      const workdir = this.getSessionWorkdir(sessionName);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 411,
      "content": "message: `Failed to push to repository: ${(normalizedError as unknown).message}`,",
      "context": "      return {\n        success: false,\n        message: `Failed to push to repository: ${(normalizedError as unknown).message}`,\n        error: normalizedError,\n      };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 424,
      "content": "const sessions = await (this.sessionDb as unknown).listSessions();",
      "context": "    try {\n      // Find a session for this repository\n      const sessions = await (this.sessionDb as unknown).listSessions();\n      const repoSession = sessions.find((session) => session.repoName === this.repoName);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 434,
      "content": "const sessionName = (repoSession as unknown).session;",
      "context": "      }\n\n      const sessionName = (repoSession as unknown).session;\n      const workdir = this.getSessionWorkdir(sessionName);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 438,
      "content": "const pullResult = await (this.gitService as unknown).pullLatest(workdir);",
      "context": "\n      // Use GitService for pulling changes\n      const pullResult = await (this.gitService as unknown).pullLatest(workdir);\n\n      return {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 442,
      "content": "message: (pullResult as unknown).updated",
      "context": "      return {\n        success: true,\n        message: (pullResult as unknown).updated\n          ? \"Successfully pulled changes from repository\"\n          : \"Already up-to-date. No changes pulled.\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 450,
      "content": "message: `Failed to pull from repository: ${(normalizedError as unknown).message}`,",
      "context": "      return {\n        success: false,\n        message: `Failed to pull from repository: ${(normalizedError as unknown).message}`,\n        error: normalizedError,\n      };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 464,
      "content": "const sessions = await (this.sessionDb as unknown).listSessions();",
      "context": "    try {\n      // Find a session for this repository\n      const sessions = await (this.sessionDb as unknown).listSessions();\n      const repoSession = sessions.find((session) => session.repoName === this.repoName);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 471,
      "content": "const sessionName = (repoSession as unknown).session;",
      "context": "      }\n\n      const sessionName = (repoSession as unknown).session;\n      const workdir = this.getSessionWorkdir(sessionName);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository/github.ts",
      "line": 479,
      "content": "throw new Error(`Failed to checkout branch: ${(normalizedError as unknown).message}`);",
      "context": "    } catch (error) {\n      const normalizedError = error instanceof Error ? error : new Error(String(error as any));\n      throw new Error(`Failed to checkout branch: ${(normalizedError as unknown).message}`);\n    }\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 50,
      "content": "enableDevWarnings: process.env.NODE_ENV !== \"production\" as unknown,",
      "context": "  private initialized = false;\n  private config: CliFactoryConfig = {\n    enableDevWarnings: process.env.NODE_ENV !== \"production\" as unknown,\n    strictValidation: true,\n  };",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 70,
      "content": "(cliBridge as unknown).registerCommandCustomization(commandId!, options as unknown);",
      "context": "  customizeCommand(commandId: ValidCommandId, options: CliCommandOptions): void {\n    this.ensureInitialized();\n    (cliBridge as unknown).registerCommandCustomization(commandId!, options as unknown);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 81,
      "content": "(cliBridge as unknown).registerCategoryCustomization(category, options as unknown);",
      "context": "  customizeCategory(category: CommandCategory, options: CategoryCommandOptions): void {\n    this.ensureInitialized();\n    (cliBridge as unknown).registerCategoryCustomization(category, options as unknown);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 92,
      "content": "return (cliBridge as unknown).generateCommand(commandId);",
      "context": "  createCommand(commandId: ValidCommandId): Command | null {\n    this.ensureInitialized();\n    return (cliBridge as unknown).generateCommand(commandId);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 103,
      "content": "return (cliBridge as unknown).generateCategoryCommand(category, { viaFactory: true });",
      "context": "  createCategoryCommand(category: CommandCategory): Command | null {\n    this.ensureInitialized();\n    return (cliBridge as unknown).generateCategoryCommand(category, { viaFactory: true });\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 113,
      "content": "(cliBridge as unknown).generateAllCategoryCommands(program, { viaFactory: true });",
      "context": "  registerAllCommands(program: Command): void {\n    this.ensureInitialized();\n    (cliBridge as unknown).generateAllCategoryCommands(program, { viaFactory: true });\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 142,
      "content": "cliFactory.customizeCommand(commandId!, options as unknown);",
      "context": " */\nexport function customizeCommand(commandId: string, options: CliCommandOptions): void {\n  cliFactory.customizeCommand(commandId!, options as unknown);\n}\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 153,
      "content": "cliFactory.customizeCategory(category, options as unknown);",
      "context": "  options: CategoryCommandOptions\n): void {\n  cliFactory.customizeCategory(category, options as unknown);\n}\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 191,
      "content": "cliFactory.customizeCategory((CommandCategory as unknown).TASKS, {",
      "context": "\n  // Task commands customization\n  cliFactory.customizeCategory((CommandCategory as unknown).TASKS, {\n    aliases: [\"task\"],\n    commandOptions: {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 268,
      "content": "cliFactory.customizeCategory((CommandCategory as unknown).GIT, {",
      "context": "\n  // Git commands customization\n  cliFactory.customizeCategory((CommandCategory as unknown).GIT, {\n    commandOptions: {\n      \"git.commit\": {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 281,
      "content": "cliFactory.customizeCategory((CommandCategory as unknown).SESSION, {",
      "context": "\n  // Session commands customization\n  cliFactory.customizeCategory((CommandCategory as unknown).SESSION, {\n    aliases: [\"sess\"],\n    commandOptions: {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 455,
      "content": "cliFactory.customizeCategory((CommandCategory as unknown).CONFIG, {",
      "context": "\n  // Config commands customization\n  cliFactory.customizeCategory((CommandCategory as unknown).CONFIG, {\n    commandOptions: {\n      \"config.list\": {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 460,
      "content": "if ((result as unknown).json) {",
      "context": "        outputFormatter: (result: any) => {\n          // Check if JSON output was requested\n          if ((result as unknown).json) {\n            // For JSON output, return flattened key-value pairs (matching normal output)\n            const flattened = flattenObjectToKeyValue((result as unknown).resolved);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 462,
      "content": "const flattened = flattenObjectToKeyValue((result as unknown).resolved);",
      "context": "          if ((result as unknown).json) {\n            // For JSON output, return flattened key-value pairs (matching normal output)\n            const flattened = flattenObjectToKeyValue((result as unknown).resolved);\n            log.cli(JSON.stringify(flattened, null, 2));\n            return;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 467,
      "content": "if ((result as unknown).success && (result as unknown).resolved) {",
      "context": "          }\n\n          if ((result as unknown).success && (result as unknown).resolved) {\n            let output = \"\";\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 471,
      "content": "if ((result as unknown).showSources && (result as unknown).sources) {",
      "context": "\n            // Show sources if explicitly requested\n            if ((result as unknown).showSources && (result as unknown).sources) {\n              output += formatConfigurationSources((result as unknown).resolved, (result as unknown).sources);\n            } else {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 472,
      "content": "output += formatConfigurationSources((result as unknown).resolved, (result as unknown).sources);",
      "context": "            // Show sources if explicitly requested\n            if ((result as unknown).showSources && (result as unknown).sources) {\n              output += formatConfigurationSources((result as unknown).resolved, (result as unknown).sources);\n            } else {\n              // For config list, show flattened key=value pairs",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 475,
      "content": "output += formatFlattenedConfiguration((result as unknown).resolved);",
      "context": "            } else {\n              // For config list, show flattened key=value pairs\n              output += formatFlattenedConfiguration((result as unknown).resolved);\n            }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 478,
      "content": "log.cli(output as unknown);",
      "context": "            }\n\n            log.cli(output as unknown);\n          } else if ((result as unknown).error) {\n            log.cli(`Failed to load configuration: ${(result as unknown).error}`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 479,
      "content": "} else if ((result as unknown).error) {",
      "context": "\n            log.cli(output as unknown);\n          } else if ((result as unknown).error) {\n            log.cli(`Failed to load configuration: ${(result as unknown).error}`);\n          } else {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 480,
      "content": "log.cli(`Failed to load configuration: ${(result as unknown).error}`);",
      "context": "            log.cli(output as unknown);\n          } else if ((result as unknown).error) {\n            log.cli(`Failed to load configuration: ${(result as unknown).error}`);\n          } else {\n            log.cli(JSON.stringify(result as unknown, null, 2));",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 482,
      "content": "log.cli(JSON.stringify(result as unknown, null, 2));",
      "context": "            log.cli(`Failed to load configuration: ${(result as unknown).error}`);\n          } else {\n            log.cli(JSON.stringify(result as unknown, null, 2));\n          }\n        },",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 489,
      "content": "if ((result as unknown).json) {",
      "context": "        outputFormatter: (result: any) => {\n          // Check if JSON output was requested\n          if ((result as unknown).json) {\n            log.cli(JSON.stringify(result as unknown, null, 2));\n            return;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 490,
      "content": "log.cli(JSON.stringify(result as unknown, null, 2));",
      "context": "          // Check if JSON output was requested\n          if ((result as unknown).json) {\n            log.cli(JSON.stringify(result as unknown, null, 2));\n            return;\n          }",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 494,
      "content": "if ((result as unknown).success && (result as unknown).configuration) {",
      "context": "          }\n\n          if ((result as unknown).success && (result as unknown).configuration) {\n            let output = \"\";\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 498,
      "content": "if ((result as unknown).showSources && (result as unknown).sources) {",
      "context": "\n            // Show sources if explicitly requested\n            if ((result as unknown).showSources && (result as unknown).sources) {\n              output += formatConfigurationSources((result as unknown).configuration, (result as unknown).sources);\n            } else {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 499,
      "content": "output += formatConfigurationSources((result as unknown).configuration, (result as unknown).sources);",
      "context": "            // Show sources if explicitly requested\n            if ((result as unknown).showSources && (result as unknown).sources) {\n              output += formatConfigurationSources((result as unknown).configuration, (result as unknown).sources);\n            } else {\n              // Default human-friendly structured view",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 502,
      "content": "output += formatResolvedConfiguration((result as unknown).configuration);",
      "context": "            } else {\n              // Default human-friendly structured view\n              output += formatResolvedConfiguration((result as unknown).configuration);\n            }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 505,
      "content": "log.cli(output as unknown);",
      "context": "            }\n\n            log.cli(output as unknown);\n          } else if ((result as unknown).error) {\n            log.cli(`Failed to load configuration: ${(result as unknown).error}`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 506,
      "content": "} else if ((result as unknown).error) {",
      "context": "\n            log.cli(output as unknown);\n          } else if ((result as unknown).error) {\n            log.cli(`Failed to load configuration: ${(result as unknown).error}`);\n          } else {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 507,
      "content": "log.cli(`Failed to load configuration: ${(result as unknown).error}`);",
      "context": "            log.cli(output as unknown);\n          } else if ((result as unknown).error) {\n            log.cli(`Failed to load configuration: ${(result as unknown).error}`);\n          } else {\n            log.cli(JSON.stringify(result as unknown, null, 2));",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 509,
      "content": "log.cli(JSON.stringify(result as unknown, null, 2));",
      "context": "            log.cli(`Failed to load configuration: ${(result as unknown).error}`);\n          } else {\n            log.cli(JSON.stringify(result as unknown, null, 2));\n          }\n        },",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 517,
      "content": "cliFactory.customizeCategory((CommandCategory as unknown).SESSIONDB, {",
      "context": "\n  // SessionDB commands customization\n  cliFactory.customizeCategory((CommandCategory as unknown).SESSIONDB, {\n    commandOptions: {\n      \"sessiondb.migrate\": {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 558,
      "content": "(sources as unknown).forEach((source, index) => {",
      "context": "  // Show source precedence\n  output += \"Source Precedence (highest to lowest):\\n\";\n  (sources as unknown).forEach((source, index) => {\n    output += `  ${index + 1}. ${(source as unknown).name}\\n`;\n  });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 559,
      "content": "output += `  ${index + 1}. ${(source as unknown).name}\\n`;",
      "context": "  output += \"Source Precedence (highest to lowest):\\n\";\n  (sources as unknown).forEach((source, index) => {\n    output += `  ${index + 1}. ${(source as unknown).name}\\n`;\n  });\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 574,
      "content": "output += `📁 Task Storage: ${getBackendDisplayName((resolved as unknown).backend)}`;",
      "context": "\n  // Task Storage\n  output += `📁 Task Storage: ${getBackendDisplayName((resolved as unknown).backend)}`;\n  if ((resolved as unknown).backend === \"github-issues\" && (resolved as unknown).backendConfig?.[\"github-issues\"]) {\n    const github = (resolved as unknown).backendConfig[\"github-issues\"];",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 575,
      "content": "if ((resolved as unknown).backend === \"github-issues\" && (resolved as unknown).backendConfig?.[\"github-issues\"]) {",
      "context": "  // Task Storage\n  output += `📁 Task Storage: ${getBackendDisplayName((resolved as unknown).backend)}`;\n  if ((resolved as unknown).backend === \"github-issues\" && (resolved as unknown).backendConfig?.[\"github-issues\"]) {\n    const github = (resolved as unknown).backendConfig[\"github-issues\"];\n    output += ` (${github.owner}/${github.repo})`;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 576,
      "content": "const github = (resolved as unknown).backendConfig[\"github-issues\"];",
      "context": "  output += `📁 Task Storage: ${getBackendDisplayName((resolved as unknown).backend)}`;\n  if ((resolved as unknown).backend === \"github-issues\" && (resolved as unknown).backendConfig?.[\"github-issues\"]) {\n    const github = (resolved as unknown).backendConfig[\"github-issues\"];\n    output += ` (${github.owner}/${github.repo})`;\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 584,
      "content": "for (const [service, creds] of Object.entries((resolved as unknown).credentials)) {",
      "context": "    output += \"\\n🔐 Authentication: \";\n    const authServices = [];\n    for (const [service, creds] of Object.entries((resolved as unknown).credentials)) {\n      if (creds && typeof creds === \"object\") {\n        const credsObj = creds as unknown;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 586,
      "content": "const credsObj = creds as unknown;",
      "context": "    for (const [service, creds] of Object.entries((resolved as unknown).credentials)) {\n      if (creds && typeof creds === \"object\") {\n        const credsObj = creds as unknown;\n        const serviceName = service === \"github\" ? \"GitHub\" : service;\n        const source = (credsObj as unknown).source === \"environment\" ? \"env\" : (credsObj as unknown).source;",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 588,
      "content": "const source = (credsObj as unknown).source === \"environment\" ? \"env\" : (credsObj as unknown).source;",
      "context": "        const credsObj = creds as unknown;\n        const serviceName = service === \"github\" ? \"GitHub\" : service;\n        const source = (credsObj as unknown).source === \"environment\" ? \"env\" : (credsObj as unknown).source;\n        authServices.push(`${serviceName} (${source})`);\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 592,
      "content": "output += (authServices as unknown).join(\", \");",
      "context": "      }\n    }\n    output += (authServices as unknown).join(\", \");\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 596,
      "content": "if ((resolved as unknown).sessiondb) {",
      "context": "\n  // Session Storage\n  if ((resolved as unknown).sessiondb) {\n    const sessionBackend = (resolved.sessiondb as unknown).backend || \"json\";\n    output += `\\n💾 Session Storage: ${getSessionBackendDisplayName(sessionBackend)}`;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 597,
      "content": "const sessionBackend = (resolved.sessiondb as unknown).backend || \"json\";",
      "context": "  // Session Storage\n  if ((resolved as unknown).sessiondb) {\n    const sessionBackend = (resolved.sessiondb as unknown).backend || \"json\";\n    output += `\\n💾 Session Storage: ${getSessionBackendDisplayName(sessionBackend)}`;\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 600,
      "content": "if (sessionBackend === \"sqlite\" && (resolved.sessiondb as unknown).dbPath) {",
      "context": "    output += `\\n💾 Session Storage: ${getSessionBackendDisplayName(sessionBackend)}`;\n\n    if (sessionBackend === \"sqlite\" && (resolved.sessiondb as unknown).dbPath) {\n      output += ` (${(resolved.sessiondb as unknown).dbPath})`;\n    } else if (sessionBackend === \"postgres\" && (resolved.sessiondb as unknown).connectionString) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 601,
      "content": "output += ` (${(resolved.sessiondb as unknown).dbPath})`;",
      "context": "\n    if (sessionBackend === \"sqlite\" && (resolved.sessiondb as unknown).dbPath) {\n      output += ` (${(resolved.sessiondb as unknown).dbPath})`;\n    } else if (sessionBackend === \"postgres\" && (resolved.sessiondb as unknown).connectionString) {\n      output += \" (configured)\";",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 602,
      "content": "} else if (sessionBackend === \"postgres\" && (resolved.sessiondb as unknown).connectionString) {",
      "context": "    if (sessionBackend === \"sqlite\" && (resolved.sessiondb as unknown).dbPath) {\n      output += ` (${(resolved.sessiondb as unknown).dbPath})`;\n    } else if (sessionBackend === \"postgres\" && (resolved.sessiondb as unknown).connectionString) {\n      output += \" (configured)\";\n    } else if (sessionBackend === \"json\" && (resolved.sessiondb as unknown).baseDir) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 604,
      "content": "} else if (sessionBackend === \"json\" && (resolved.sessiondb as unknown).baseDir) {",
      "context": "    } else if (sessionBackend === \"postgres\" && (resolved.sessiondb as unknown).connectionString) {\n      output += \" (configured)\";\n    } else if (sessionBackend === \"json\" && (resolved.sessiondb as unknown).baseDir) {\n      output += ` (${(resolved.sessiondb as unknown).baseDir})`;\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 605,
      "content": "output += ` (${(resolved.sessiondb as unknown).baseDir})`;",
      "context": "      output += \" (configured)\";\n    } else if (sessionBackend === \"json\" && (resolved.sessiondb as unknown).baseDir) {\n      output += ` (${(resolved.sessiondb as unknown).baseDir})`;\n    }\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 652,
      "content": "if (!config || (Object as unknown).keysconfig.length === 0) {",
      "context": "\nfunction formatConfigSection(config: any): string {\n  if (!config || (Object as unknown).keysconfig.length === 0) {\n    return \"  (empty)\";\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 657,
      "content": "for (const [key, value] of Object.entries(config as unknown)) {",
      "context": "\n  let output = \"\";\n  for (const [key, value] of Object.entries(config as unknown)) {\n    if (Array.isArray(value as unknown)) {\n      output += `  ${key}: (${value.length} items)\\n`;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 658,
      "content": "if (Array.isArray(value as unknown)) {",
      "context": "  let output = \"\";\n  for (const [key, value] of Object.entries(config as unknown)) {\n    if (Array.isArray(value as unknown)) {\n      output += `  ${key}: (${value.length} items)\\n`;\n      (value as unknown).forEach((item, index) => {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 660,
      "content": "(value as unknown).forEach((item, index) => {",
      "context": "    if (Array.isArray(value as unknown)) {\n      output += `  ${key}: (${value.length} items)\\n`;\n      (value as unknown).forEach((item, index) => {\n        if (typeof item === \"object\" && item !== null) {\n          output += `    ${index}: ${JSON.stringify(item as unknown)}\\n`;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 662,
      "content": "output += `    ${index}: ${JSON.stringify(item as unknown)}\\n`;",
      "context": "      (value as unknown).forEach((item, index) => {\n        if (typeof item === \"object\" && item !== null) {\n          output += `    ${index}: ${JSON.stringify(item as unknown)}\\n`;\n        } else {\n          output += `    ${index}: ${item}\\n`;",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 669,
      "content": "for (const [subKey, subValue] of Object.entries(value as unknown)) {",
      "context": "    } else if (typeof value === \"object\" && value !== null) {\n      output += `  ${key}:\\n`;\n      for (const [subKey, subValue] of Object.entries(value as unknown)) {\n        if (typeof subValue === \"object\" && subValue !== null) {\n          // Special handling for credentials",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 696,
      "content": "if ((sanitized as unknown).token) {",
      "context": "\n  const sanitized = { ...creds };\n  if ((sanitized as unknown).token) {\n    (sanitized as unknown).token = `${\"*\".repeat(20)} (hidden)`;\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 697,
      "content": "(sanitized as unknown).token = `${\"*\".repeat(20)} (hidden)`;",
      "context": "  const sanitized = { ...creds };\n  if ((sanitized as unknown).token) {\n    (sanitized as unknown).token = `${\"*\".repeat(20)} (hidden)`;\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 707,
      "content": "for (const [key, value] of Object.entries(obj as unknown)) {",
      "context": "    const result: string[] = [];\n\n    for (const [key, value] of Object.entries(obj as unknown)) {\n      const fullKey = prefix ? `${prefix}.${key}` : key;\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 712,
      "content": "} else if (typeof value === \"object\" && !Array.isArray(value as unknown)) {",
      "context": "      if (value === null || value === undefined) {\n        result.push(`${fullKey}=(null)`);\n      } else if (typeof value === \"object\" && !Array.isArray(value as unknown)) {\n        // Recursively flatten objects\n        result.push(...flatten(value as unknown, fullKey));",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 714,
      "content": "result.push(...flatten(value as unknown, fullKey));",
      "context": "      } else if (typeof value === \"object\" && !Array.isArray(value as unknown)) {\n        // Recursively flatten objects\n        result.push(...flatten(value as unknown, fullKey));\n      } else if (Array.isArray(value as unknown)) {\n        if (value.length === 0) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 715,
      "content": "} else if (Array.isArray(value as unknown)) {",
      "context": "        // Recursively flatten objects\n        result.push(...flatten(value as unknown, fullKey));\n      } else if (Array.isArray(value as unknown)) {\n        if (value.length === 0) {\n          result.push(`${fullKey}=(empty array)`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 719,
      "content": "(value as unknown).forEach((item, index) => {",
      "context": "          result.push(`${fullKey}=(empty array)`);\n        } else {\n          (value as unknown).forEach((item, index) => {\n            if (typeof item === \"object\") {\n              result.push(...flatten(item as unknown, `${fullKey}[${index}]`));",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 721,
      "content": "result.push(...flatten(item as unknown, `${fullKey}[${index}]`));",
      "context": "          (value as unknown).forEach((item, index) => {\n            if (typeof item === \"object\") {\n              result.push(...flatten(item as unknown, `${fullKey}[${index}]`));\n            } else {\n              result.push(`${fullKey}[${index}]=${item}`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 729,
      "content": "((fullKey as unknown).includes(\"token\") || (fullKey as unknown).includes(\"password\"))",
      "context": "      } else if (\n        typeof value === \"string\" &&\n        ((fullKey as unknown).includes(\"token\") || (fullKey as unknown).includes(\"password\"))\n      ) {\n        // Hide sensitive values",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 742,
      "content": "return (flatEntries as unknown).join(\"\\n\");",
      "context": "\n  const flatEntries = flatten(resolved);\n  return (flatEntries as unknown).join(\"\\n\");\n}\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 754,
      "content": "flatten((current as unknown)[key], fullKey);",
      "context": "        const fullKey = prefix ? `${prefix}.${key}` : key;\n        if (typeof current[key] === \"object\" && current[key] !== null) {\n          flatten((current as unknown)[key], fullKey);\n        } else {\n          flattened[fullKey] = current[key];",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 762,
      "content": "flatten(obj as unknown);",
      "context": "  }\n\n  flatten(obj as unknown);\n  return flattened;\n}",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/cli/cli-command-factory.ts",
      "line": 773,
      "content": "cliFactory.initialize(config as unknown);",
      "context": "export function initializeCliCommands(program: Command, config?: Partial<CliFactoryConfig>): void {\n  // Initialize the factory\n  cliFactory.initialize(config as unknown);\n\n  // Setup common customizations",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/integration-example.ts",
      "line": 32,
      "content": ".description(\"Minsky CLI - Task-based workspace management\") as unknown).version(\"1.0.0\");",
      "context": "  const program = (new Command()\n    .name(\"minsky\")\n    .description(\"Minsky CLI - Task-based workspace management\") as unknown).version(\"1.0.0\");\n\n  // Register shared commands in the registry",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/integration-example.ts",
      "line": 42,
      "content": "[(CommandCategory as unknown).GIT, (CommandCategory as unknown).TASKS, (CommandCategory as unknown).SESSION, (CommandCategory as unknown).RULES],",
      "context": "  // Bridge the commands to CLI\n  registerCategorizedCliCommands(program,\n    [(CommandCategory as unknown).GIT, (CommandCategory as unknown).TASKS, (CommandCategory as unknown).SESSION, (CommandCategory as unknown).RULES],\n    true // Create subcommands for categories\n  );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/schema-bridge.ts",
      "line": 46,
      "content": "return (name.replace(/([a-z])([A-Z])/g, \"$1-$2\") as unknown).toLowerCase();",
      "context": "export function paramNameToFlag(name: string): string {\n  // Convert camelCase to kebab-case\n  return (name.replace(/([a-z])([A-Z])/g, \"$1-$2\") as unknown).toLowerCase();\n}\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/schema-bridge.ts",
      "line": 78,
      "content": "(schema instanceof z.ZodOptional && (schema._def as unknown).innerType instanceof z.ZodBoolean);",
      "context": "  const isBooleanType =\n    schema instanceof z.ZodBoolean ||\n    (schema instanceof z.ZodOptional && (schema._def as unknown).innerType instanceof z.ZodBoolean);\n\n  // Boolean options don't need a value placeholder",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/schema-bridge.ts",
      "line": 96,
      "content": "return addValuePlaceholder(flag, (schema._def as unknown).innerType);",
      "context": "  } else if (schema instanceof z.ZodOptional) {\n    // Recurse to check the inner type\n    return addValuePlaceholder(flag, (schema._def as unknown).innerType);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/schema-bridge.ts",
      "line": 119,
      "content": "typeof (schema as unknown).description === \"string\" &&",
      "context": "  if (\n    \"description\" in schema &&\n    typeof (schema as unknown).description === \"string\" &&\n    schema.description.length > 0\n  ) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/schema-bridge.ts",
      "line": 122,
      "content": "description = (schema as unknown).description;",
      "context": "    schema.description.length > 0\n  ) {\n    description = (schema as unknown).description;\n  } else if (schema instanceof z.ZodOptional && \"description\" in (schema._def as unknown).innerType) {\n    const innerDesc = (schema._def.innerType as unknown).description;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/schema-bridge.ts",
      "line": 123,
      "content": "} else if (schema instanceof z.ZodOptional && \"description\" in (schema._def as unknown).innerType) {",
      "context": "  ) {\n    description = (schema as unknown).description;\n  } else if (schema instanceof z.ZodOptional && \"description\" in (schema._def as unknown).innerType) {\n    const innerDesc = (schema._def.innerType as unknown).description;\n    if (typeof innerDesc === \"string\" && innerDesc.length > 0) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/schema-bridge.ts",
      "line": 124,
      "content": "const innerDesc = (schema._def.innerType as unknown).description;",
      "context": "    description = (schema as unknown).description;\n  } else if (schema instanceof z.ZodOptional && \"description\" in (schema._def as unknown).innerType) {\n    const innerDesc = (schema._def.innerType as unknown).description;\n    if (typeof innerDesc === \"string\" && innerDesc.length > 0) {\n      description = innerDesc;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/schema-bridge.ts",
      "line": 163,
      "content": "const description = (param as unknown).description || getSchemaDescription(param.schema);",
      "context": "\n  // Get description\n  const description = (param as unknown).description || getSchemaDescription(param.schema);\n\n  let defaultValue = param.defaultValue;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/schema-bridge.ts",
      "line": 206,
      "content": "(Object.entries(parameters) as unknown).forEach(([name, param]) => {",
      "context": "): Command {\n  // For each parameter, add an option to the command\n  (Object.entries(parameters) as unknown).forEach(([name, param]) => {\n    const { flag, description, defaultValue } = parameterToOptionFlag(\n      name,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/schema-bridge.ts",
      "line": 210,
      "content": "(shortFlags as unknown)[name]",
      "context": "      name,\n      param,\n      (shortFlags as unknown)[name]\n    );\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/schema-bridge.ts",
      "line": 239,
      "content": "(Object.entries(parameters) as unknown).forEach(([name, param]) => {",
      "context": "\n  // For each parameter, validate and convert the option\n  (Object.entries(parameters) as unknown).forEach(([name, param]) => {\n    const optionName = (paramNameToFlag(name) as unknown).replace(/-/g, \"\");\n    const value = (options as unknown)[optionName];",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/schema-bridge.ts",
      "line": 240,
      "content": "const optionName = (paramNameToFlag(name) as unknown).replace(/-/g, \"\");",
      "context": "  // For each parameter, validate and convert the option\n  (Object.entries(parameters) as unknown).forEach(([name, param]) => {\n    const optionName = (paramNameToFlag(name) as unknown).replace(/-/g, \"\");\n    const value = (options as unknown)[optionName];\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/schema-bridge.ts",
      "line": 241,
      "content": "const value = (options as unknown)[optionName];",
      "context": "  (Object.entries(parameters) as unknown).forEach(([name, param]) => {\n    const optionName = (paramNameToFlag(name) as unknown).replace(/-/g, \"\");\n    const value = (options as unknown)[optionName];\n\n    // If value is present, validate and add to result",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/schema-bridge.ts",
      "line": 247,
      "content": "(result as unknown)[name] = (param.schema as unknown).parse(value as unknown);",
      "context": "      // Use the schema to validate and transform\n      try {\n        (result as unknown)[name] = (param.schema as unknown).parse(value as unknown);\n      } catch (error) {\n        // Re-throw with more context",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/schema-bridge.ts",
      "line": 257,
      "content": "(result as unknown)[name] = param.defaultValue;",
      "context": "    } else if (param.defaultValue !== undefined) {\n      // Use default value\n      (result as unknown)[name] = param.defaultValue;\n    }\n  });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/response-formatters.ts",
      "line": 42,
      "content": "return JSON.stringify(data as unknown, undefined, 2);",
      "context": " */\nexport function formatAsJson(data: any): string {\n  return JSON.stringify(data as unknown, undefined, 2);\n}\n",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/adapters/shared/response-formatters.ts",
      "line": 58,
      "content": "const format = (context.format as unknown).toLowerCase() as OutputFormat;",
      "context": "  format(data: T, context: CommandExecutionContext): string | object {\n    // Determine the output format\n    const format = (context.format as unknown).toLowerCase() as OutputFormat;\n\n    // Format the response based on the requested format",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/response-formatters.ts",
      "line": 62,
      "content": "return this.formatJson(data as unknown, context as unknown);",
      "context": "    // Format the response based on the requested format\n    if (format === OutputFormat.JSON) {\n      return this.formatJson(data as unknown, context as unknown);\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/response-formatters.ts",
      "line": 66,
      "content": "return this.formatText(data as unknown, context as unknown);",
      "context": "\n    // Default to text format\n    return this.formatText(data as unknown, context as unknown);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/response-formatters.ts",
      "line": 86,
      "content": "return data as unknown as object;",
      "context": "   */\n  formatJson(data: T, context: CommandExecutionContext): object {\n    return data as unknown as object;\n  }\n}",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/response-formatters.ts",
      "line": 193,
      "content": "(items as unknown).forEach((item, index) => {",
      "context": "    // Format each item\n    if (this.itemFormatter) {\n      (items as unknown).forEach((item, index) => {\n        output += `${index + 1}. ${this.itemFormatter!(item as unknown)}\\n`;\n      });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/response-formatters.ts",
      "line": 194,
      "content": "output += `${index + 1}. ${this.itemFormatter!(item as unknown)}\\n`;",
      "context": "    if (this.itemFormatter) {\n      (items as unknown).forEach((item, index) => {\n        output += `${index + 1}. ${this.itemFormatter!(item as unknown)}\\n`;\n      });\n    } else {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/response-formatters.ts",
      "line": 197,
      "content": "(items as unknown).forEach((item, index) => {",
      "context": "      });\n    } else {\n      (items as unknown).forEach((item, index) => {\n        output += `${index + 1}. ${String(item as unknown)}\\n`;\n      });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/response-formatters.ts",
      "line": 198,
      "content": "output += `${index + 1}. ${String(item as unknown)}\\n`;",
      "context": "    } else {\n      (items as unknown).forEach((item, index) => {\n        output += `${index + 1}. ${String(item as unknown)}\\n`;\n      });\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/response-formatters.ts",
      "line": 261,
      "content": "columnWidths[col] = Math.max((columnWidths as unknown)[col], value.length);",
      "context": "      this.columns.forEach((col) => {\n        const value = String(row[col] || \"\");\n        columnWidths[col] = Math.max((columnWidths as unknown)[col], value.length);\n      });\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/response-formatters.ts",
      "line": 269,
      "content": "return (header as unknown).padEnd((columnWidths as unknown)[col]);",
      "context": "      .map((col) => {\n        const header = String(this.headers[col] || col);\n        return (header as unknown).padEnd((columnWidths as unknown)[col]);\n      })\n      .join(\" | \");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/response-formatters.ts",
      "line": 278,
      "content": "return \"-\".repeat((columnWidths as unknown)[col]);",
      "context": "    const separatorRow = this.columns\n      .map((col) => {\n        return \"-\".repeat((columnWidths as unknown)[col]);\n      })\n      .join(\"-|-\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/response-formatters.ts",
      "line": 289,
      "content": "return (value as unknown).padEnd((columnWidths as unknown)[col]);",
      "context": "        .map((col) => {\n          const value = String(row[col] || \"\");\n          return (value as unknown).padEnd((columnWidths as unknown)[col]);\n        })\n        .join(\" | \") as unknown;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/response-formatters.ts",
      "line": 291,
      "content": ".join(\" | \") as unknown;",
      "context": "          return (value as unknown).padEnd((columnWidths as unknown)[col]);\n        })\n        .join(\" | \") as unknown;\n\n      output += `${dataRow}\\n`;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/legacy-command-registry.ts",
      "line": 167,
      "content": "if (this.commands.has((commandDef as unknown).id) && !(options as unknown)!.allowOverwrite) {",
      "context": "    R = any,\n  >(commandDef: CommandDefinition<T, R>, options: { allowOverwrite?: boolean } = {}): void {\n    if (this.commands.has((commandDef as unknown).id) && !(options as unknown)!.allowOverwrite) {\n      throw new MinskyError(`Command with ID '${(commandDef as unknown).id}' is already registered`);\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/legacy-command-registry.ts",
      "line": 168,
      "content": "throw new MinskyError(`Command with ID '${(commandDef as unknown).id}' is already registered`);",
      "context": "  >(commandDef: CommandDefinition<T, R>, options: { allowOverwrite?: boolean } = {}): void {\n    if (this.commands.has((commandDef as unknown).id) && !(options as unknown)!.allowOverwrite) {\n      throw new MinskyError(`Command with ID '${(commandDef as unknown).id}' is already registered`);\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/legacy-command-registry.ts",
      "line": 171,
      "content": "this.commands.set((commandDef as unknown).id!, commandDef as unknown as SharedCommand);",
      "context": "    }\n\n    this.commands.set((commandDef as unknown).id!, commandDef as unknown as SharedCommand);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/error-handling.ts",
      "line": 58,
      "content": "message: (normalizedError as unknown).message,",
      "context": "    let errorType = \"UNKNOWN_ERROR\";\n    const result: Record<string, any> = {\n      message: (normalizedError as unknown).message,\n    };\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/error-handling.ts",
      "line": 100,
      "content": "(result as unknown).errorType = errorType;",
      "context": "\n    // Add error type to the result\n    (result as unknown).errorType = errorType;\n\n    // Add debug information if requested",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/error-handling.ts",
      "line": 104,
      "content": "if ((normalizedError as unknown).stack) {",
      "context": "    // Add debug information if requested\n    if (debug) {\n      if ((normalizedError as unknown).stack) {\n        (result as unknown).stack = (normalizedError as unknown).stack;\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/error-handling.ts",
      "line": 105,
      "content": "(result as unknown).stack = (normalizedError as unknown).stack;",
      "context": "    if (debug) {\n      if ((normalizedError as unknown).stack) {\n        (result as unknown).stack = (normalizedError as unknown).stack;\n      }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/error-handling.ts",
      "line": 109,
      "content": "if (normalizedError instanceof MinskyError && (normalizedError as unknown).cause) {",
      "context": "\n      // Add cause chain if available\n      if (normalizedError instanceof MinskyError && (normalizedError as unknown).cause) {\n        const cause = (normalizedError as unknown).cause;\n        (result as unknown).cause =",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/error-handling.ts",
      "line": 110,
      "content": "const cause = (normalizedError as unknown).cause;",
      "context": "      // Add cause chain if available\n      if (normalizedError instanceof MinskyError && (normalizedError as unknown).cause) {\n        const cause = (normalizedError as unknown).cause;\n        (result as unknown).cause =\n          cause instanceof Error ? { message: (cause as unknown).message, stack: (cause as unknown).stack } : String(cause);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/error-handling.ts",
      "line": 111,
      "content": "(result as unknown).cause =",
      "context": "      if (normalizedError instanceof MinskyError && (normalizedError as unknown).cause) {\n        const cause = (normalizedError as unknown).cause;\n        (result as unknown).cause =\n          cause instanceof Error ? { message: (cause as unknown).message, stack: (cause as unknown).stack } : String(cause);\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/error-handling.ts",
      "line": 112,
      "content": "cause instanceof Error ? { message: (cause as unknown).message, stack: (cause as unknown).stack } : String(cause);",
      "context": "        const cause = (normalizedError as unknown).cause;\n        (result as unknown).cause =\n          cause instanceof Error ? { message: (cause as unknown).message, stack: (cause as unknown).stack } : String(cause);\n      }\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/error-handling.ts",
      "line": 153,
      "content": "(typeof process.env.NODE_DEBUG === \"string\" && (process.env.NODE_DEBUG as unknown).includes(\"minsky\"))",
      "context": "      process.env.DEBUG === \"true\" ||\n      process.env.DEBUG === \"1\" ||\n      (typeof process.env.NODE_DEBUG === \"string\" && (process.env.NODE_DEBUG as unknown).includes(\"minsky\"))\n    );\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/error-handling.ts",
      "line": 165,
      "content": "const { debug = (SharedErrorHandler as unknown).isDebugMode(), exitCode = 1 } = options;",
      "context": "   */\n  static handleError(error: any, options: ErrorHandlingOptions = {}): never {\n    const { debug = (SharedErrorHandler as unknown).isDebugMode(), exitCode = 1 } = options;\n    const normalizedError = ensureError(error as any);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/error-handling.ts",
      "line": 169,
      "content": "const formattedError = (SharedErrorHandler as unknown).formatError(error as unknown, debug);",
      "context": "\n    // Format error for structured logging\n    const formattedError = (SharedErrorHandler as unknown).formatError(error as unknown, debug);\n\n    // Log to appropriate channels based on mode",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/error-handling.ts",
      "line": 192,
      "content": "const { debug = (SharedErrorHandler as unknown).isDebugMode(), exitCode = 1 } = options;",
      "context": "   */\n  handleError(error: any, options: ErrorHandlingOptions = {}): never {\n    const { debug = (SharedErrorHandler as unknown).isDebugMode(), exitCode = 1 } = options;\n    const normalizedError = ensureError(error as any);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/error-handling.ts",
      "line": 199,
      "content": "log.cliError(`${prefix}: ${(normalizedError as unknown).message}`);",
      "context": "\n    // Output human-readable error message\n    log.cliError(`${prefix}: ${(normalizedError as unknown).message}`);\n\n    // Add type-specific details",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/error-handling.ts",
      "line": 222,
      "content": "if ((normalizedError as unknown).stack) {",
      "context": "    if (debug) {\n      log.cliError(\"\\nDebug information:\");\n      if ((normalizedError as unknown).stack) {\n        log.cliError((normalizedError as unknown).stack);\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/error-handling.ts",
      "line": 223,
      "content": "log.cliError((normalizedError as unknown).stack);",
      "context": "      log.cliError(\"\\nDebug information:\");\n      if ((normalizedError as unknown).stack) {\n        log.cliError((normalizedError as unknown).stack);\n      }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/error-handling.ts",
      "line": 227,
      "content": "if (normalizedError instanceof MinskyError && (normalizedError as unknown).cause) {",
      "context": "\n      // Log cause chain if available\n      if (normalizedError instanceof MinskyError && (normalizedError as unknown).cause) {\n        log.cliError(\"\\nCaused by:\");\n        const cause = (normalizedError as unknown).cause;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/error-handling.ts",
      "line": 229,
      "content": "const cause = (normalizedError as unknown).cause;",
      "context": "      if (normalizedError instanceof MinskyError && (normalizedError as unknown).cause) {\n        log.cliError(\"\\nCaused by:\");\n        const cause = (normalizedError as unknown).cause;\n        if (cause instanceof Error) {\n          log.cliError((cause as unknown).stack || (cause as unknown).message);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/error-handling.ts",
      "line": 231,
      "content": "log.cliError((cause as unknown).stack || (cause as unknown).message);",
      "context": "        const cause = (normalizedError as unknown).cause;\n        if (cause instanceof Error) {\n          log.cliError((cause as unknown).stack || (cause as unknown).message);\n        } else {\n          log.cliError(String(cause));",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/error-handling.ts",
      "line": 241,
      "content": "const formattedError = (SharedErrorHandler as unknown).formatError(error as unknown, debug);",
      "context": "    if (isStructuredMode()) {\n      // Format error for structured logging\n      const formattedError = (SharedErrorHandler as unknown).formatError(error as unknown, debug);\n      log.error(\"CLI operation failed\", formattedError);\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/error-handling.ts",
      "line": 261,
      "content": "const { debug = (SharedErrorHandler as unknown).isDebugMode(), exitCode = 1 } = options;",
      "context": "   */\n  handleError(error: any, options: ErrorHandlingOptions = {}): never {\n    const { debug = (SharedErrorHandler as unknown).isDebugMode(), exitCode = 1 } = options;\n\n    // Format error for MCP response",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/error-handling.ts",
      "line": 264,
      "content": "const formattedError = (SharedErrorHandler as unknown).formatError(error as unknown, debug);",
      "context": "\n    // Format error for MCP response\n    const formattedError = (SharedErrorHandler as unknown).formatError(error as unknown, debug);\n\n    // Log error in structured format",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/error-handling.ts",
      "line": 288,
      "content": "switch ((interfaceName as unknown).toLowerCase()) {",
      "context": " */\nexport function getErrorHandler(interfaceName: string): ErrorHandler {\n  switch ((interfaceName as unknown).toLowerCase()) {\n  case \"cli\":\n    return cliErrorHandler;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/mcp/integration-example.ts",
      "line": 45,
      "content": "log.debug(`Registering MCP commands for categories: ${(categories as unknown).join(\", \")}`);",
      "context": "const mcpBridge = {\n  registerSharedCommands: (categories: any) => {\n    log.debug(`Registering MCP commands for categories: ${(categories as unknown).join(\", \")}`);\n    // Implementation would:\n    // 1. Get commands from shared registry for the specified categories",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/mcp/integration-example.ts",
      "line": 83,
      "content": "log.debug(\"MCP git.commit called with params:\", params as unknown);",
      "context": "  // In real implementation, this would call the shared command registry\n  handler: async (params: any) => {\n    log.debug(\"MCP git.commit called with params:\", params as unknown);\n    return {\n      success: true,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/mcp/integration-example.ts",
      "line": 87,
      "content": "message: (params as unknown)!.message,",
      "context": "      success: true,\n      commitHash: \"example-hash\",\n      message: (params as unknown)!.message,\n    };\n  },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/mcp/integration-example.ts",
      "line": 117,
      "content": "log.debug(\"MCP tasks.status.get called with params:\", params as unknown);",
      "context": "  // In real implementation, this would call the shared command registry\n  handler: async (params: any) => {\n    log.debug(\"MCP tasks.status.get called with params:\", params as unknown);\n    return {\n      success: true,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/mcp/integration-example.ts",
      "line": 120,
      "content": "taskId: (params as unknown)!.taskId,",
      "context": "    return {\n      success: true,\n      taskId: (params as unknown)!.taskId,\n      _status: \"TODO\", // Example _status\n    };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/mcp/integration-example.ts",
      "line": 141,
      "content": "log.debug(\"MCP session.list called with params:\", params as unknown);",
      "context": "  // In real implementation, this would call the shared command registry\n  handler: async (params: any) => {\n    log.debug(\"MCP session.list called with params:\", params as unknown);\n    return {\n      success: true,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/mcp/integration-example.ts",
      "line": 182,
      "content": "log.debug(\"MCP rules.list called with params:\", params as unknown);",
      "context": "  // In real implementation, this would call the shared command registry\n  handler: async (params: any) => {\n    log.debug(\"MCP rules.list called with params:\", params as unknown);\n    return {\n      success: true,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/mcp/integration-example.ts",
      "line": 223,
      "content": "(mcpBridge as unknown).registerSharedCommands([",
      "context": "\n  // Bridge the commands to MCP\n  (mcpBridge as unknown).registerSharedCommands([\n    (CommandCategory as unknown).GIT,\n    (CommandCategory as unknown).TASKS,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/mcp/integration-example.ts",
      "line": 224,
      "content": "(CommandCategory as unknown).GIT,",
      "context": "  // Bridge the commands to MCP\n  (mcpBridge as unknown).registerSharedCommands([\n    (CommandCategory as unknown).GIT,\n    (CommandCategory as unknown).TASKS,\n    (CommandCategory as unknown).SESSION,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/mcp/integration-example.ts",
      "line": 225,
      "content": "(CommandCategory as unknown).TASKS,",
      "context": "  (mcpBridge as unknown).registerSharedCommands([\n    (CommandCategory as unknown).GIT,\n    (CommandCategory as unknown).TASKS,\n    (CommandCategory as unknown).SESSION,\n    (CommandCategory as unknown).RULES,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/mcp/integration-example.ts",
      "line": 226,
      "content": "(CommandCategory as unknown).SESSION,",
      "context": "    (CommandCategory as unknown).GIT,\n    (CommandCategory as unknown).TASKS,\n    (CommandCategory as unknown).SESSION,\n    (CommandCategory as unknown).RULES,\n  ]);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/mcp/integration-example.ts",
      "line": 227,
      "content": "(CommandCategory as unknown).RULES,",
      "context": "    (CommandCategory as unknown).TASKS,\n    (CommandCategory as unknown).SESSION,\n    (CommandCategory as unknown).RULES,\n  ]);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/mcp/session-edit-tools.ts",
      "line": 216,
      "content": "if (!(editContent as unknown).includes(\"// ... existing code ...\")) {",
      "context": "function applyEditPattern(originalContent: string, editContent: string): string {\n  // If no existing code markers, return the edit content as-is\n  if (!(editContent as unknown).includes(\"// ... existing code ...\")) {\n    return editContent;\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/mcp/session-edit-tools.ts",
      "line": 233,
      "content": "const beforeContent = (editParts[i] as unknown).trim() || \"\";",
      "context": "  // Process each pair of before/after content around the markers\n  for (let i = 0; i < editParts.length - 1; i++) {\n    const beforeContent = (editParts[i] as unknown).trim() || \"\";\n    const afterContent = (editParts[i + 1] as unknown).trim() || \"\";\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/mcp/session-edit-tools.ts",
      "line": 234,
      "content": "const afterContent = (editParts[i + 1] as unknown).trim() || \"\";",
      "context": "  for (let i = 0; i < editParts.length - 1; i++) {\n    const beforeContent = (editParts[i] as unknown).trim() || \"\";\n    const afterContent = (editParts[i + 1] as unknown).trim() || \"\";\n\n    // Find where to apply this edit",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/mcp/session-edit-tools.ts",
      "line": 239,
      "content": "const startIndex = (result as unknown).indexOf(beforeContent);",
      "context": "    if (i === 0 && beforeContent) {\n      // First section - match from the beginning\n      const startIndex = (result as unknown).indexOf(beforeContent);\n      if (startIndex === -1) {\n        throw new Error(`Could not find content to match: \"${(beforeContent as unknown).substring(0, 50)}...\"`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/mcp/session-edit-tools.ts",
      "line": 241,
      "content": "throw new Error(`Could not find content to match: \"${(beforeContent as unknown).substring(0, 50)}...\"`);",
      "context": "      const startIndex = (result as unknown).indexOf(beforeContent);\n      if (startIndex === -1) {\n        throw new Error(`Could not find content to match: \"${(beforeContent as unknown).substring(0, 50)}...\"`);\n      }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/mcp/session-edit-tools.ts",
      "line": 248,
      "content": "const nextBefore = (editParts[i + 2] as unknown).trim() || \"\";",
      "context": "      if (i < editParts.length - 2) {\n        // There's another edit section, find where it starts\n        const nextBefore = (editParts[i + 2] as unknown).trim() || \"\";\n        const nextStart = (result as unknown).indexOf(nextBefore, startIndex + beforeContent.length);\n        if (nextStart !== -1) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/mcp/session-edit-tools.ts",
      "line": 249,
      "content": "const nextStart = (result as unknown).indexOf(nextBefore, startIndex + beforeContent.length);",
      "context": "        // There's another edit section, find where it starts\n        const nextBefore = (editParts[i + 2] as unknown).trim() || \"\";\n        const nextStart = (result as unknown).indexOf(nextBefore, startIndex + beforeContent.length);\n        if (nextStart !== -1) {\n          endIndex = nextStart;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/mcp/session-edit-tools.ts",
      "line": 255,
      "content": "const afterIndex = (result as unknown).lastIndexOf(afterContent);",
      "context": "      } else if (afterContent) {\n        // Last section with after content\n        const afterIndex = (result as unknown).lastIndexOf(afterContent);\n        if (afterIndex !== -1) {\n          endIndex = afterIndex + afterContent.length;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/mcp/session-edit-tools.ts",
      "line": 262,
      "content": "result = `${(result as unknown).substring(0, startIndex) + beforeContent}\\n${(result as unknown).substring(endIndex)}`;",
      "context": "\n      // Apply the edit\n      result = `${(result as unknown).substring(0, startIndex) + beforeContent}\\n${(result as unknown).substring(endIndex)}`;\n    } else if (i === editParts.length - 2 && !afterContent) {\n      // Last section with no after content - append",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/mcp/session-edit-tools.ts",
      "line": 274,
      "content": "const startIdx = (result as unknown).indexOf(searchStart);",
      "context": "\n      if (searchStart) {\n        const startIdx = (result as unknown).indexOf(searchStart);\n        if (startIdx === -1) {\n          throw new Error(`Could not find content to match: \"${(searchStart as unknown).substring(0, 50)}...\"`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/mcp/session-edit-tools.ts",
      "line": 276,
      "content": "throw new Error(`Could not find content to match: \"${(searchStart as unknown).substring(0, 50)}...\"`);",
      "context": "        const startIdx = (result as unknown).indexOf(searchStart);\n        if (startIdx === -1) {\n          throw new Error(`Could not find content to match: \"${(searchStart as unknown).substring(0, 50)}...\"`);\n        }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/mcp/session-edit-tools.ts",
      "line": 281,
      "content": "const tempEndIdx = (result as unknown).indexOf(searchEnd, startIdx + searchStart.length);",
      "context": "        let endIdx = result.length;\n        if (searchEnd) {\n          const tempEndIdx = (result as unknown).indexOf(searchEnd, startIdx + searchStart.length);\n          if (tempEndIdx !== -1) {\n            endIdx = tempEndIdx + searchEnd.length;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/mcp/session-edit-tools.ts",
      "line": 287,
      "content": "result = `${(result as unknown).substring(0, startIdx) + searchStart}\\n${",
      "context": "        }\n\n        result = `${(result as unknown).substring(0, startIdx) + searchStart}\\n${\n          searchEnd\n        }${endIdx < result.length ? (result as unknown).substring(endIdx) : \"\"}`;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/mcp/session-edit-tools.ts",
      "line": 289,
      "content": "}${endIdx < result.length ? (result as unknown).substring(endIdx) : \"\"}`;",
      "context": "        result = `${(result as unknown).substring(0, startIdx) + searchStart}\\n${\n          searchEnd\n        }${endIdx < result.length ? (result as unknown).substring(endIdx) : \"\"}`;\n      }\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/mcp/session-edit-tools.ts",
      "line": 304,
      "content": "while ((position = (((content) as unknown).toString() as unknown).indexOf(search, position)) !== -1) {",
      "context": "  let position = 0;\n\n  while ((position = (((content) as unknown).toString() as unknown).indexOf(search, position)) !== -1) {\n    count++;\n    position += search.length;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/mcp/shared-command-integration.ts",
      "line": 67,
      "content": "(commandMapper as unknown).addCommand({",
      "context": "      // This is a simplified version - the actual implementation may need\n      // to handle parameter schema conversion from Zod to MCP format\n      (commandMapper as unknown).addCommand({\n        name: command.id,\n        description,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-utils/index.ts",
      "line": 96,
      "content": "const compatMock = ((...args: any[]) => mockFn(...args)) as unknown;",
      "context": "    \n    // Create a wrapper function that behaves like the mock but has our methods\n    const compatMock = ((...args: any[]) => mockFn(...args)) as unknown;\n    \n    // Copy mock properties and bind methods to original mock",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-utils/mocking.test.ts",
      "line": 13,
      "content": "expect((mockFn as unknown)(\"World\")).toBe(\"Hello, World!\");",
      "context": "\n    // Should work as a function\n    expect((mockFn as unknown)(\"World\")).toBe(\"Hello, World!\");\n\n    // Should track calls",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/utils/test-utils/mocking.test.ts",
      "line": 24,
      "content": "expect((mockFn as unknown)()).toBeUndefined();",
      "context": "    const mockFn = createMock();\n\n    expect((mockFn as unknown)()).toBeUndefined();\n    expect(mockFn.mock.calls.length).toBe(1);\n  });",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/utils/test-utils/compatibility.test.ts",
      "line": 20,
      "content": "const expect = bunExpect as unknown;",
      "context": "// Use a typed expect to make TypeScript happy with the enhanced matchers\n \nconst expect = bunExpect as unknown;\n\ndescribe(\"Mock Function Compatibility\", () => {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/utils/test-utils/assertions.ts",
      "line": 108,
      "content": "expect(part in (current as unknown)).toBeTruthy();",
      "context": "    expect(current).toBeDefined();\n    expect(typeof current === \"object\" || Array.isArray(current)).toBeTruthy();\n    expect(part in (current as unknown)).toBeTruthy();\n    current = (current as unknown)[part];\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-utils/assertions.ts",
      "line": 109,
      "content": "current = (current as unknown)[part];",
      "context": "    expect(typeof current === \"object\" || Array.isArray(current)).toBeTruthy();\n    expect(part in (current as unknown)).toBeTruthy();\n    current = (current as unknown)[part];\n  }\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/test-utils/assertions.ts",
      "line": 162,
      "content": "} as unknown;",
      "context": "    // Could potentially extend expect with custom matchers here in the future\n    return testFn.apply(this, args);\n  } as unknown;\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/test-utils/mocking.ts",
      "line": 52,
      "content": "return createMock(implementation) as unknown as MockFunction<ReturnType<T>, Parameters<T>> & T;",
      "context": "export function mockFunction<T extends (...args: unknown[]) => any>(implementation?: T) {\n  // Cast to unknown first to avoid TypeScript errors\n  return createMock(implementation) as unknown as MockFunction<ReturnType<T>, Parameters<T>> & T;\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/test-utils/mocking.ts",
      "line": 139,
      "content": "(registryModule.sharedCommandRegistry as unknown).commands = new Map();",
      "context": "    const registryModule = require(\"../../adapters/shared/_command-registry\");\n    if (registryModule?.sharedCommandRegistry?.commands) {\n      (registryModule.sharedCommandRegistry as unknown).commands = new Map();\n    }\n  } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-utils/mocking.ts",
      "line": 463,
      "content": "const base = { ...implementations } as unknown;",
      "context": "export function createPartialMock<T extends object>(implementations: Partial<T> = {}): T {\n  // Create a base object with the provided implementations\n  const base = { ...implementations } as unknown;\n\n  // Create a proxy that will handle method calls",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/mcp/tools/tasks.ts",
      "line": 14,
      "content": "(commandMapper as unknown).addTaskCommand(",
      "context": "export function registerTaskTools(commandMapper: CommandMapper): void {\n  // Task list tool\n  (commandMapper as unknown).addTaskCommand(\n    \"list\",\n    \"List all tasks\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/tasks.ts",
      "line": 19,
      "content": "limit: (z.number().optional() as unknown).describe(\"Limit the number of tasks returned\"),",
      "context": "    z.object({\n      filter: z.string().optional().describe(\"Filter tasks by status or other criteria\"),\n      limit: (z.number().optional() as unknown).describe(\"Limit the number of tasks returned\"),\n      format: z.enum([\"detailed\", \"simple\"] as const).optional().describe(\"Format of the task list\"),\n    }),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/tasks.ts",
      "line": 43,
      "content": "const output = (execSync(command) as unknown).toString();",
      "context": "\n        // Execute the command\n        const output = (execSync(command) as unknown).toString();\n\n        // Parse the JSON output",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/tasks.ts",
      "line": 46,
      "content": "return JSON.parse(output as unknown) as unknown;",
      "context": "\n        // Parse the JSON output\n        return JSON.parse(output as unknown) as unknown;\n      } catch (error) {\n        log.error(\"MCP: Error listing tasks via execSync\", {",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/mcp/tools/tasks.ts",
      "line": 60,
      "content": "(commandMapper as unknown).addTaskCommand(",
      "context": "\n  // Task get tool\n  (commandMapper as unknown).addTaskCommand(\n    \"get\",\n    \"Get a specific task by ID\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/tasks.ts",
      "line": 69,
      "content": "const command = `minsky tasks get ${(args as unknown)!.taskId} --json`;",
      "context": "      try {\n        // Execute the command\n        const command = `minsky tasks get ${(args as unknown)!.taskId} --json`;\n        const output = (execSync(command) as unknown).toString();\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/tasks.ts",
      "line": 70,
      "content": "const output = (execSync(command) as unknown).toString();",
      "context": "        // Execute the command\n        const command = `minsky tasks get ${(args as unknown)!.taskId} --json`;\n        const output = (execSync(command) as unknown).toString();\n\n        // Parse the JSON output",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/tasks.ts",
      "line": 73,
      "content": "return JSON.parse(output as unknown) as unknown;",
      "context": "\n        // Parse the JSON output\n        return JSON.parse(output as unknown) as unknown;\n      } catch (error) {\n        log.error(`MCP: Error getting task ${(args as unknown)!.taskId} via execSync`, {",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/mcp/tools/tasks.ts",
      "line": 75,
      "content": "log.error(`MCP: Error getting task ${(args as unknown)!.taskId} via execSync`, {",
      "context": "        return JSON.parse(output as unknown) as unknown;\n      } catch (error) {\n        log.error(`MCP: Error getting task ${(args as unknown)!.taskId} via execSync`, {\n          originalError: getErrorMessage(error as any),\n          stack: error instanceof Error ? (error as any).stack as any : undefined as any,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/tasks.ts",
      "line": 87,
      "content": "(commandMapper as unknown).addTaskCommand(",
      "context": "\n  // Task status get tool\n  (commandMapper as unknown).addTaskCommand(\n    \"status.get\",\n    \"Get the status of a task\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/tasks.ts",
      "line": 96,
      "content": "const command = `minsky tasks status get ${(args as unknown)!.taskId}`;",
      "context": "      try {\n        // Execute the command\n        const command = `minsky tasks status get ${(args as unknown)!.taskId}`;\n        const output = ((execSync(command) as unknown).toString() as unknown).trim();\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/tasks.ts",
      "line": 97,
      "content": "const output = ((execSync(command) as unknown).toString() as unknown).trim();",
      "context": "        // Execute the command\n        const command = `minsky tasks status get ${(args as unknown)!.taskId}`;\n        const output = ((execSync(command) as unknown).toString() as unknown).trim();\n\n        // Format output",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/tasks.ts",
      "line": 101,
      "content": "taskId: (args as unknown)!.taskId,",
      "context": "        // Format output\n        return {\n          taskId: (args as unknown)!.taskId,\n          status: output.split(\": \")[1], // Extract the status value\n        };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/tasks.ts",
      "line": 105,
      "content": "log.error(`MCP: Error getting task status for ${(args as unknown)!.taskId} via execSync`, {",
      "context": "        };\n      } catch (error) {\n        log.error(`MCP: Error getting task status for ${(args as unknown)!.taskId} via execSync`, {\n          originalError: getErrorMessage(error as any),\n          stack: error instanceof Error ? (error as any).stack as any : undefined as any,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/tasks.ts",
      "line": 117,
      "content": "(commandMapper as unknown).addTaskCommand(",
      "context": "\n  // Task status set tool\n  (commandMapper as unknown).addTaskCommand(\n    \"status.set\",\n    \"Set the status of a task\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/tasks.ts",
      "line": 129,
      "content": "const command = `minsky tasks status set ${(args as unknown)!.taskId} ${(args as unknown).status}`;",
      "context": "      try {\n        // Execute the command\n        const command = `minsky tasks status set ${(args as unknown)!.taskId} ${(args as unknown).status}`;\n        execSync(command);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/tasks.ts",
      "line": 135,
      "content": "taskId: (args as unknown)!.taskId,",
      "context": "        return {\n          success: true,\n          taskId: (args as unknown)!.taskId,\n          status: (args as unknown).status,\n        };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/tasks.ts",
      "line": 136,
      "content": "status: (args as unknown).status,",
      "context": "          success: true,\n          taskId: (args as unknown)!.taskId,\n          status: (args as unknown).status,\n        };\n      } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/tasks.ts",
      "line": 139,
      "content": "log.error(`MCP: Error setting task status for ${(args as unknown)!.taskId} via execSync`, {",
      "context": "        };\n      } catch (error) {\n        log.error(`MCP: Error setting task status for ${(args as unknown)!.taskId} via execSync`, {\n          originalError: getErrorMessage(error as any),\n          stack: error instanceof Error ? (error as any).stack as any : undefined as any,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/tasks.ts",
      "line": 151,
      "content": "(commandMapper as unknown).addTaskCommand(",
      "context": "\n  // Task create tool\n  (commandMapper as unknown).addTaskCommand(\n    \"create\",\n    \"Create a new task from a specification document\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/tasks.ts",
      "line": 160,
      "content": "const command = `minsky tasks create ${(args as unknown).specPath} --json`;",
      "context": "      try {\n        // Execute the command\n        const command = `minsky tasks create ${(args as unknown).specPath} --json`;\n        const output = (execSync(command) as unknown).toString();\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/tasks.ts",
      "line": 161,
      "content": "const output = (execSync(command) as unknown).toString();",
      "context": "        // Execute the command\n        const command = `minsky tasks create ${(args as unknown).specPath} --json`;\n        const output = (execSync(command) as unknown).toString();\n\n        // Parse the JSON output",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/tasks.ts",
      "line": 164,
      "content": "return JSON.parse(output as unknown) as unknown;",
      "context": "\n        // Parse the JSON output\n        return JSON.parse(output as unknown) as unknown;\n      } catch (error) {\n        log.error(\"MCP: Error creating task via execSync\", {",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/mcp/tools/session.ts",
      "line": 13,
      "content": "(commandMapper as unknown).addSessionCommand(\"list\", \"List all sessions\", z.object({}), async () => {",
      "context": "export function registerSessionTools(commandMapper: CommandMapper): void {\n  // Session list tool\n  (commandMapper as unknown).addSessionCommand(\"list\", \"List all sessions\", z.object({}), async () => {\n    try {\n      // Execute the command",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/session.ts",
      "line": 17,
      "content": "const output = (execSync(command) as unknown).toString();",
      "context": "      // Execute the command\n      const command = \"minsky session list --json\";\n      const output = (execSync(command) as unknown).toString();\n\n      // Parse the JSON output",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/session.ts",
      "line": 20,
      "content": "return JSON.parse(output as unknown) as unknown;",
      "context": "\n      // Parse the JSON output\n      return JSON.parse(output as unknown) as unknown;\n    } catch (error) {\n      log.error(\"Error listing sessions\", { error });",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/mcp/tools/session.ts",
      "line": 30,
      "content": "(commandMapper as unknown).addSessionCommand(",
      "context": "\n  // Session get tool\n  (commandMapper as unknown).addSessionCommand(\n    \"get\",\n    \"Get details of a specific session\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/session.ts",
      "line": 39,
      "content": "const command = `minsky session get ${(args as unknown)!.session} --json`;",
      "context": "      try {\n        // Execute the command\n        const command = `minsky session get ${(args as unknown)!.session} --json`;\n        const output = (execSync(command) as unknown).toString();\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/session.ts",
      "line": 40,
      "content": "const output = (execSync(command) as unknown).toString();",
      "context": "        // Execute the command\n        const command = `minsky session get ${(args as unknown)!.session} --json`;\n        const output = (execSync(command) as unknown).toString();\n\n        // Parse the JSON output",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/session.ts",
      "line": 43,
      "content": "return JSON.parse(output as unknown) as unknown;",
      "context": "\n        // Parse the JSON output\n        return JSON.parse(output as unknown) as unknown;\n      } catch (error) {\n        log.error(`Error getting session ${(args as unknown)!.session}`, { error, _session: (args as unknown)!.session });",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/mcp/tools/session.ts",
      "line": 45,
      "content": "log.error(`Error getting session ${(args as unknown)!.session}`, { error, _session: (args as unknown)!.session });",
      "context": "        return JSON.parse(output as unknown) as unknown;\n      } catch (error) {\n        log.error(`Error getting session ${(args as unknown)!.session}`, { error, _session: (args as unknown)!.session });\n        throw new Error(\n          `Failed to get session ${(args as any)!.session}: ${getErrorMessage(error as any)}`",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/session.ts",
      "line": 53,
      "content": "(commandMapper as unknown).addSessionCommand(",
      "context": "\n  // Session start tool\n  (commandMapper as unknown).addSessionCommand(\n    \"start\",\n    \"Start a new session\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/session.ts",
      "line": 59,
      "content": "quiet: (z.boolean().optional().describe(\"Whether to suppress output\") as unknown).default(true),",
      "context": "      name: z.string().optional().describe(\"Name for the session\"),\n      task: z.string().optional().describe(\"Task ID to associate with the session\"),\n      quiet: (z.boolean().optional().describe(\"Whether to suppress output\") as unknown).default(true),\n    }),\n    async (",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/session.ts",
      "line": 73,
      "content": "if ((args as unknown)?.name) {",
      "context": "        // Build the command\n        let command = \"minsky session start\";\n        if ((args as unknown)?.name) {\n          command += ` --name ${(args as unknown).name}`;\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/session.ts",
      "line": 74,
      "content": "command += ` --name ${(args as unknown).name}`;",
      "context": "        let command = \"minsky session start\";\n        if ((args as unknown)?.name) {\n          command += ` --name ${(args as unknown).name}`;\n        }\n        if (args!.task) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/session.ts",
      "line": 83,
      "content": "const output = (execSync(command) as unknown).toString();",
      "context": "\n        // Execute the command\n        const output = (execSync(command) as unknown).toString();\n\n        // Return success response",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/session.ts",
      "line": 89,
      "content": "session: (args as unknown)?.name || `task#${args!.task}` || \"unnamed-session\",",
      "context": "          success: true,\n          message: output.trim(),\n          session: (args as unknown)?.name || `task#${args!.task}` || \"unnamed-session\",\n        };\n      } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/session.ts",
      "line": 92,
      "content": "log.error(\"Error starting session\", { error, name: (args as unknown).name, task: args!.task });",
      "context": "        };\n      } catch (error) {\n        log.error(\"Error starting session\", { error, name: (args as unknown).name, task: args!.task });\n        throw new Error(\n          `Failed to start _session: ${getErrorMessage(error as any)}`",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/session.ts",
      "line": 100,
      "content": "(commandMapper as unknown).addSessionCommand(",
      "context": "\n  // Session commit tool\n  (commandMapper as unknown).addSessionCommand(\n    \"commit\",\n    \"Commit changes in a session\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/session.ts",
      "line": 121,
      "content": "if ((args as unknown)?.message) {",
      "context": "        // Build the command\n        let command = \"minsky session commit\";\n        if ((args as unknown)?.message) {\n          command += ` -m \"${(args as unknown).message}\"`;\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/session.ts",
      "line": 122,
      "content": "command += ` -m \"${(args as unknown).message}\"`;",
      "context": "        let command = \"minsky session commit\";\n        if ((args as unknown)?.message) {\n          command += ` -m \"${(args as unknown).message}\"`;\n        }\n        if ((args as unknown)!.session) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/session.ts",
      "line": 124,
      "content": "if ((args as unknown)!.session) {",
      "context": "          command += ` -m \"${(args as unknown).message}\"`;\n        }\n        if ((args as unknown)!.session) {\n          command += ` --session ${(args as unknown)!.session}`;\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/session.ts",
      "line": 125,
      "content": "command += ` --session ${(args as unknown)!.session}`;",
      "context": "        }\n        if ((args as unknown)!.session) {\n          command += ` --session ${(args as unknown)!.session}`;\n        }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/session.ts",
      "line": 129,
      "content": "const output = (execSync(command) as unknown).toString();",
      "context": "\n        // Execute the command\n        const output = (execSync(command) as unknown).toString();\n\n        // Return success response",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/session.ts",
      "line": 137,
      "content": "log.error(\"Error committing changes\", { error, session: (args as unknown)!.session });",
      "context": "        };\n      } catch (error) {\n        log.error(\"Error committing changes\", { error, session: (args as unknown)!.session });\n        throw new Error(\n          `Failed to commit changes: ${getErrorMessage(error as any)}`",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/session.ts",
      "line": 145,
      "content": "(commandMapper as unknown).addSessionCommand(",
      "context": "\n  // Session push tool\n  (commandMapper as unknown).addSessionCommand(\n    \"push\",\n    \"Push changes in a session\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/tools/session.ts",
      "line": 169,
      "content": "const output = (execSync(command) as unknown).toString();",
      "context": "\n        // Execute the command\n        const output = (execSync(command) as unknown).toString();\n\n        // Return success response",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/types/tasks/taskData.ts",
      "line": 103,
      "content": "id: (task as unknown)!.id,",
      "context": "export function toTaskData(task: any): TaskData {\n  return {\n    id: (task as unknown)!.id,\n    title: (task as unknown)!.title,\n    description: (task as unknown)!.description,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/types/tasks/taskData.ts",
      "line": 104,
      "content": "title: (task as unknown)!.title,",
      "context": "  return {\n    id: (task as unknown)!.id,\n    title: (task as unknown)!.title,\n    description: (task as unknown)!.description,\n    status: (task as unknown)!.status,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/types/tasks/taskData.ts",
      "line": 105,
      "content": "description: (task as unknown)!.description,",
      "context": "    id: (task as unknown)!.id,\n    title: (task as unknown)!.title,\n    description: (task as unknown)!.description,\n    status: (task as unknown)!.status,\n    specPath: task!.specPath,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/types/tasks/taskData.ts",
      "line": 106,
      "content": "status: (task as unknown)!.status,",
      "context": "    title: (task as unknown)!.title,\n    description: (task as unknown)!.description,\n    status: (task as unknown)!.status,\n    specPath: task!.specPath,\n    worklog: task!.worklog,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/types/tasks/taskData.ts",
      "line": 120,
      "content": "id: (taskData as unknown)!.id,",
      "context": "export function fromTaskData(taskData: TaskData): any {\n  return {\n    id: (taskData as unknown)!.id,\n    title: (taskData as unknown)!.title,\n    description: (taskData as unknown)!.description,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/types/tasks/taskData.ts",
      "line": 121,
      "content": "title: (taskData as unknown)!.title,",
      "context": "  return {\n    id: (taskData as unknown)!.id,\n    title: (taskData as unknown)!.title,\n    description: (taskData as unknown)!.description,\n    status: (taskData as unknown)!.status,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/types/tasks/taskData.ts",
      "line": 122,
      "content": "description: (taskData as unknown)!.description,",
      "context": "    id: (taskData as unknown)!.id,\n    title: (taskData as unknown)!.title,\n    description: (taskData as unknown)!.description,\n    status: (taskData as unknown)!.status,\n    specPath: taskData!.specPath,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/types/tasks/taskData.ts",
      "line": 123,
      "content": "status: (taskData as unknown)!.status,",
      "context": "    title: (taskData as unknown)!.title,\n    description: (taskData as unknown)!.description,\n    status: (taskData as unknown)!.status,\n    specPath: taskData!.specPath,\n    worklog: taskData!.worklog,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 41,
      "content": "} as unknown;",
      "context": "        registeredTools[name] = { name, description, schema, handler };\n      }),\n    } as unknown;\n\n    // Register the tools",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 71,
      "content": "const mockStat = stat as unknown;",
      "context": "\n      // Mock file doesn't exist\n      const mockStat = stat as unknown;\n      mockStat.mockRejectedValueOnce(new Error(\"ENOENT\"));\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 75,
      "content": "const mockWriteFile = writeFile as unknown;",
      "context": "\n      // Mock successful write\n      const mockWriteFile = writeFile as unknown;\n      mockWriteFile.mockResolvedValueOnce(undefined);\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 79,
      "content": "const mockPathResolver = new SessionPathResolver() as unknown;",
      "context": "\n      // Mock path resolver\n      const mockPathResolver = new SessionPathResolver() as unknown;\n      mockPathResolver.resolvePath.mockResolvedValue(\"/session/path/test.ts\");\n      mockPathResolver.getSessionWorkspacePath.mockResolvedValue(\"/session/path\");",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 100,
      "content": "const mockStat = stat as unknown;",
      "context": "\n      // Mock file exists\n      const mockStat = stat as unknown;\n      mockStat.mockResolvedValueOnce({ isFile: () => true });\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 104,
      "content": "const mockReadFile = readFile as unknown;",
      "context": "\n      // Mock file content\n      const mockReadFile = readFile as unknown;\n      mockReadFile.mockResolvedValueOnce(`function oldFunc() {\n  console.log('old');",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 114,
      "content": "const mockWriteFile = writeFile as unknown;",
      "context": "\n      // Mock successful write\n      const mockWriteFile = writeFile as unknown;\n      mockWriteFile.mockResolvedValueOnce(undefined);\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 118,
      "content": "const mockPathResolver = new SessionPathResolver() as unknown;",
      "context": "\n      // Mock path resolver\n      const mockPathResolver = new SessionPathResolver() as unknown;\n      mockPathResolver.resolvePath.mockResolvedValue(\"/session/path/test.ts\");\n      mockPathResolver.getSessionWorkspacePath.mockResolvedValue(\"/session/path\");",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 145,
      "content": "const mockPathResolver = new SessionPathResolver() as unknown;",
      "context": "\n      // Mock path resolver error\n      const mockPathResolver = new SessionPathResolver() as unknown;\n      mockPathResolver.resolvePath.mockRejectedValue(new Error(\"Invalid path\"));\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 186,
      "content": "const mockReadFile = readFile as unknown;",
      "context": "\n      // Mock file content\n      const mockReadFile = readFile as unknown;\n      mockReadFile.mockResolvedValueOnce(\"This is oldText in the file\");\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 190,
      "content": "const mockWriteFile = writeFile as unknown;",
      "context": "\n      // Mock successful write\n      const mockWriteFile = writeFile as unknown;\n      mockWriteFile.mockResolvedValueOnce(undefined);\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 194,
      "content": "const mockPathResolver = new SessionPathResolver() as unknown;",
      "context": "\n      // Mock path resolver\n      const mockPathResolver = new SessionPathResolver() as unknown;\n      mockPathResolver.resolvePath.mockResolvedValue(\"/session/path/test.ts\");\n      mockPathResolver.validatePathExists.mockResolvedValue(undefined);",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 218,
      "content": "const mockReadFile = readFile as unknown;",
      "context": "\n      // Mock file content\n      const mockReadFile = readFile as unknown;\n      mockReadFile.mockResolvedValueOnce(\"This is some text in the file\");\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 222,
      "content": "const mockPathResolver = new SessionPathResolver() as unknown;",
      "context": "\n      // Mock path resolver\n      const mockPathResolver = new SessionPathResolver() as unknown;\n      mockPathResolver.resolvePath.mockResolvedValue(\"/session/path/test.ts\");\n      mockPathResolver.validatePathExists.mockResolvedValue(undefined);",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 241,
      "content": "const mockReadFile = readFile as unknown;",
      "context": "\n      // Mock file content with multiple occurrences\n      const mockReadFile = readFile as unknown;\n      mockReadFile.mockResolvedValueOnce(\"This is oldText and another oldText in the file\");\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 245,
      "content": "const mockPathResolver = new SessionPathResolver() as unknown;",
      "context": "\n      // Mock path resolver\n      const mockPathResolver = new SessionPathResolver() as unknown;\n      mockPathResolver.resolvePath.mockResolvedValue(\"/session/path/test.ts\");\n      mockPathResolver.validatePathExists.mockResolvedValue(undefined);",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 59,
      "content": "const startTime = (Date as unknown).now();",
      "context": "   */\n  static async performHealthCheck(sessionDbConfig?: SessionDbConfig): Promise<SystemHealth> {\n    const startTime = (Date as unknown).now();\n\n    try {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 64,
      "content": "sessionDbConfig = (config as unknown).get(\"sessiondb\") as SessionDbConfig;",
      "context": "      // Load configuration if not provided\n      if (!sessionDbConfig) {\n        sessionDbConfig = (config as unknown).get(\"sessiondb\") as SessionDbConfig;\n      }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 83,
      "content": "duration: (Date as unknown).now() - startTime,",
      "context": "\n      log.debug(\"Health check completed\", {\n        duration: (Date as unknown).now() - startTime,\n        overall,\n        backend: (backendHealth as unknown).backend,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 85,
      "content": "backend: (backendHealth as unknown).backend,",
      "context": "        duration: (Date as unknown).now() - startTime,\n        overall,\n        backend: (backendHealth as unknown).backend,\n        healthy: (backendHealth as unknown).healthy,\n      });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 86,
      "content": "healthy: (backendHealth as unknown).healthy,",
      "context": "        overall,\n        backend: (backendHealth as unknown).backend,\n        healthy: (backendHealth as unknown).healthy,\n      });\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 106,
      "content": "backend: (sessionDbConfig as unknown).backend || \"unknown\",",
      "context": "        backend: {\n          healthy: false,\n          backend: (sessionDbConfig as unknown).backend || \"unknown\",\n          responseTime: (Date as unknown).now() - startTime,\n          timestamp: (new Date() as unknown).toISOString(),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 107,
      "content": "responseTime: (Date as unknown).now() - startTime,",
      "context": "          healthy: false,\n          backend: (sessionDbConfig as unknown).backend || \"unknown\",\n          responseTime: (Date as unknown).now() - startTime,\n          timestamp: (new Date() as unknown).toISOString(),\n          errors: [`Health check failed: ${getErrorMessage(error as any)}`],",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 108,
      "content": "timestamp: (new Date() as unknown).toISOString(),",
      "context": "          backend: (sessionDbConfig as unknown).backend || \"unknown\",\n          responseTime: (Date as unknown).now() - startTime,\n          timestamp: (new Date() as unknown).toISOString(),\n          errors: [`Health check failed: ${getErrorMessage(error as any)}`],\n        },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 126,
      "content": "const startTime = (Date as unknown).now();",
      "context": "   */\n  private static async checkBackendHealth(config: SessionDbConfig): Promise<HealthStatus> {\n    const startTime = (Date as unknown).now();\n    const status: HealthStatus = {\n      healthy: false,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 129,
      "content": "backend: (config as unknown).backend,",
      "context": "    const status: HealthStatus = {\n      healthy: false,\n      backend: (config as unknown).backend,\n      responseTime: 0,\n      timestamp: (new Date() as unknown).toISOString(),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 131,
      "content": "timestamp: (new Date() as unknown).toISOString(),",
      "context": "      backend: (config as unknown).backend,\n      responseTime: 0,\n      timestamp: (new Date() as unknown).toISOString(),\n      details: {},\n      errors: [],",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 139,
      "content": "const storage = (StorageBackendFactory as unknown).createFromConfig(config as unknown);",
      "context": "    try {\n      // Create storage backend with timeout\n      const storage = (StorageBackendFactory as unknown).createFromConfig(config as unknown);\n\n      // Test basic operations with timeout",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 147,
      "content": "await (Promise as unknown).race([testPromise, timeoutPromise] as any[]);",
      "context": "      );\n\n      await (Promise as unknown).race([testPromise, timeoutPromise] as any[]);\n\n      status.healthy = true;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 150,
      "content": "status.responseTime = (Date as unknown).now() - startTime;",
      "context": "\n      status.healthy = true;\n      status.responseTime = (Date as unknown).now() - startTime;\n\n      // Backend-specific health checks",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 153,
      "content": "await this.performBackendSpecificChecks(config as unknown, status);",
      "context": "\n      // Backend-specific health checks\n      await this.performBackendSpecificChecks(config as unknown, status);\n    } catch (error) {\n      status.healthy = false;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 156,
      "content": "status.responseTime = (Date as unknown).now() - startTime;",
      "context": "    } catch (error) {\n      status.healthy = false;\n      status.responseTime = (Date as unknown).now() - startTime;\n      (status.errors as any).push(getErrorMessage(error as any));\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 160,
      "content": "backend: (config as unknown).backend,",
      "context": "\n      log.warn(\"Backend health check failed\", {\n        backend: (config as unknown).backend,\n        error: getErrorMessage(error as any),\n        responseTime: status.responseTime,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 174,
      "content": "await (storage as unknown).initialize();",
      "context": "  private static async testBasicOperations(storage: any): Promise<void> {\n    // Initialize storage\n    await (storage as unknown).initialize();\n\n    // Test read operation",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 177,
      "content": "const readResult = await (storage as unknown).readState();",
      "context": "\n    // Test read operation\n    const readResult = await (storage as unknown).readState();\n    if (!(readResult as unknown).success) {\n      throw new Error(`Read operation failed: ${(readResult as unknown).error}`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 178,
      "content": "if (!(readResult as unknown).success) {",
      "context": "    // Test read operation\n    const readResult = await (storage as unknown).readState();\n    if (!(readResult as unknown).success) {\n      throw new Error(`Read operation failed: ${(readResult as unknown).error}`);\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 179,
      "content": "throw new Error(`Read operation failed: ${(readResult as unknown).error}`);",
      "context": "    const readResult = await (storage as unknown).readState();\n    if (!(readResult as unknown).success) {\n      throw new Error(`Read operation failed: ${(readResult as unknown).error}`);\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 183,
      "content": "if (typeof (storage as unknown).close === \"function\") {",
      "context": "\n    // Test connection cleanup if available\n    if (typeof (storage as unknown).close === \"function\") {\n      await (storage as unknown).close();\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 184,
      "content": "await (storage as unknown).close();",
      "context": "    // Test connection cleanup if available\n    if (typeof (storage as unknown).close === \"function\") {\n      await (storage as unknown).close();\n    }\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 195,
      "content": "switch ((config as unknown).backend) {",
      "context": "    status: HealthStatus\n  ): Promise<void> {\n    switch ((config as unknown).backend) {\n    case \"json\":\n      await this.checkJsonBackendHealth(config as unknown, status);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 197,
      "content": "await this.checkJsonBackendHealth(config as unknown, status);",
      "context": "    switch ((config as unknown).backend) {\n    case \"json\":\n      await this.checkJsonBackendHealth(config as unknown, status);\n      break;\n    case \"sqlite\":",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 200,
      "content": "await this.checkSqliteBackendHealth(config as unknown, status);",
      "context": "      break;\n    case \"sqlite\":\n      await this.checkSqliteBackendHealth(config as unknown, status);\n      break;\n    case \"postgres\":",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 203,
      "content": "await this.checkPostgresBackendHealth(config as unknown, status);",
      "context": "      break;\n    case \"postgres\":\n      await this.checkPostgresBackendHealth(config as unknown, status);\n      break;\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 219,
      "content": "const dbPath = path.join((config as unknown).baseDir || \"\", \"session-db.json\");",
      "context": "\n    try {\n      const dbPath = path.join((config as unknown).baseDir || \"\", \"session-db.json\");\n\n      if (fs.existsSync(dbPath)) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 223,
      "content": "(status.details! as any).fileSize = (stats as unknown).size;",
      "context": "      if (fs.existsSync(dbPath)) {\n        const stats = fs.statSync(dbPath);\n        (status.details! as any).fileSize = (stats as unknown).size;\n        (status.details! as unknown).lastModified = (stats.mtime as unknown).toISOString();\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 224,
      "content": "(status.details! as unknown).lastModified = (stats.mtime as unknown).toISOString();",
      "context": "        const stats = fs.statSync(dbPath);\n        (status.details! as any).fileSize = (stats as unknown).size;\n        (status.details! as unknown).lastModified = (stats.mtime as unknown).toISOString();\n\n        // Warn about large files",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 227,
      "content": "if ((stats as unknown).size > 10_000_000) {",
      "context": "\n        // Warn about large files\n        if ((stats as unknown).size > 10_000_000) {\n          // 10MB\n          status.warnings.push(\"Large JSON file detected - consider migrating to SQLite\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 234,
      "content": "const baseDir = (config as unknown).baseDir || path.dirname(dbPath);",
      "context": "\n      // Check directory permissions\n      const baseDir = (config as unknown).baseDir || path.dirname(dbPath);\n      try {\n        fs.accessSync(baseDir, fs.constants.R_OK | fs.constants.W_OK);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 237,
      "content": "(status.details! as unknown).directoryWritable = true;",
      "context": "      try {\n        fs.accessSync(baseDir, fs.constants.R_OK | fs.constants.W_OK);\n        (status.details! as unknown).directoryWritable = true;\n      } catch (error) {\n        status.errors.push(\"Directory not writable\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 240,
      "content": "(status.details! as unknown).directoryWritable = false;",
      "context": "      } catch (error) {\n        status.errors.push(\"Directory not writable\");\n        (status.details! as unknown).directoryWritable = false;\n      }\n    } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 258,
      "content": "const db = new Database((config as unknown).dbPath);",
      "context": "    try {\n      const Database = require(\"better-sqlite3\");\n      const db = new Database((config as unknown).dbPath);\n\n      try {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 263,
      "content": "(status.details! as unknown).integrityCheck = (integrityResult[0] as unknown).integrity_check === \"ok\";",
      "context": "        // Check database integrity\n        const integrityResult = db.pragma(\"integrity_check\");\n        (status.details! as unknown).integrityCheck = (integrityResult[0] as unknown).integrity_check === \"ok\";\n\n        // Get database info",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 268,
      "content": "(status.details! as unknown).databaseSize = pageCount * pageSize;",
      "context": "        const pageCount = db.pragma(\"page_count\", { simple: true });\n        const pageSize = db.pragma(\"page_size\", { simple: true });\n        (status.details! as unknown).databaseSize = pageCount * pageSize;\n\n        // Check WAL mode",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 272,
      "content": "(status.details! as unknown).journalMode = journalMode;",
      "context": "        // Check WAL mode\n        const journalMode = db.pragma(\"journal_mode\", { simple: true });\n        (status.details! as unknown).journalMode = journalMode;\n\n        if (journalMode !== \"wal\") {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 280,
      "content": "(status.details! as unknown).busyTimeout = busyTimeout;",
      "context": "        // Check for locks\n        const busyTimeout = db.pragma(\"busy_timeout\", { simple: true });\n        (status.details! as unknown).busyTimeout = busyTimeout;\n      } finally {\n        db.close();",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 300,
      "content": "const pool = new Pool({ connectionString: (config as unknown).connectionString });",
      "context": "    try {\n      const { Pool } = require(\"pg\");\n      const pool = new Pool({ connectionString: (config as unknown).connectionString });\n\n      try {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 307,
      "content": "const versionResult = await (client as unknown).query(\"SELECT version()\");",
      "context": "        try {\n          // Check server version\n          const versionResult = await (client as unknown).query(\"SELECT version()\");\n          (status.details! as unknown).serverVersion = (versionResult.rows[0] as unknown).version;\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 308,
      "content": "(status.details! as unknown).serverVersion = (versionResult.rows[0] as unknown).version;",
      "context": "          // Check server version\n          const versionResult = await (client as unknown).query(\"SELECT version()\");\n          (status.details! as unknown).serverVersion = (versionResult.rows[0] as unknown).version;\n\n          // Check connection count",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 311,
      "content": "const connectionsResult = await (client as unknown).query(",
      "context": "\n          // Check connection count\n          const connectionsResult = await (client as unknown).query(\n            \"SELECT count(*) as active_connections FROM pg_stat_activity WHERE state = 'active'\"\n          );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 314,
      "content": "(status.details! as unknown).activeConnections = parseInt(",
      "context": "            \"SELECT count(*) as active_connections FROM pg_stat_activity WHERE state = 'active'\"\n          );\n          (status.details! as unknown).activeConnections = parseInt(\n            (connectionsResult.rows[0] as unknown).active_connections\n          );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 315,
      "content": "(connectionsResult.rows[0] as unknown).active_connections",
      "context": "          );\n          (status.details! as unknown).activeConnections = parseInt(\n            (connectionsResult.rows[0] as unknown).active_connections\n          );\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 319,
      "content": "const sizeResult = await (client as unknown).query(",
      "context": "\n          // Check database size\n          const sizeResult = await (client as unknown).query(\n            \"SELECT pg_size_pretty(pg_database_size(current_database())) as size\"\n          );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 322,
      "content": "(status.details! as unknown).databaseSize = (sizeResult.rows[0] as unknown).size;",
      "context": "            \"SELECT pg_size_pretty(pg_database_size(current_database())) as size\"\n          );\n          (status.details! as unknown).databaseSize = (sizeResult.rows[0] as unknown).size;\n\n          // Check for locks",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 325,
      "content": "const locksResult = await (client as unknown).query(",
      "context": "\n          // Check for locks\n          const locksResult = await (client as unknown).query(\n            \"SELECT count(*) as locks FROM pg_locks WHERE NOT granted\"\n          );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 328,
      "content": "const lockCount = parseInt((locksResult.rows[0] as unknown).locks);",
      "context": "            \"SELECT count(*) as locks FROM pg_locks WHERE NOT granted\"\n          );\n          const lockCount = parseInt((locksResult.rows[0] as unknown).locks);\n          (status.details! as unknown).blockedQueries = lockCount;\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 329,
      "content": "(status.details! as unknown).blockedQueries = lockCount;",
      "context": "          );\n          const lockCount = parseInt((locksResult.rows[0] as unknown).locks);\n          (status.details! as unknown).blockedQueries = lockCount;\n\n          if (lockCount > 0) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 335,
      "content": "(client as unknown).release();",
      "context": "          }\n        } finally {\n          (client as unknown).release();\n        }\n      } finally {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 353,
      "content": "const recentMetrics = (this.metrics as unknown).slice(-100); // Last 100 operations",
      "context": "    recentErrors: number;\n    } {\n    const recentMetrics = (this.metrics as unknown).slice(-100); // Last 100 operations\n\n    if (recentMetrics.length === 0) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 363,
      "content": "const totalDuration = (recentMetrics as unknown).reduce((sum, metric) => sum + (metric as unknown).duration, 0);",
      "context": "    }\n\n    const totalDuration = (recentMetrics as unknown).reduce((sum, metric) => sum + (metric as unknown).duration, 0);\n    const successCount = recentMetrics.filter((metric) => metric.success).length;\n    const recentErrors = recentMetrics.filter((metric) => !metric.success).length;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 390,
      "content": "if ((config as unknown).backend === \"json\") {",
      "context": "\n      let checkPath: string;\n      if ((config as unknown).backend === \"json\") {\n        checkPath = (config as unknown).baseDir || \"\";\n      } else if ((config as unknown).backend === \"sqlite\") {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 391,
      "content": "checkPath = (config as unknown).baseDir || \"\";",
      "context": "      let checkPath: string;\n      if ((config as unknown).backend === \"json\") {\n        checkPath = (config as unknown).baseDir || \"\";\n      } else if ((config as unknown).backend === \"sqlite\") {\n        checkPath = path.dirname((config as unknown).dbPath || \"\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 392,
      "content": "} else if ((config as unknown).backend === \"sqlite\") {",
      "context": "      if ((config as unknown).backend === \"json\") {\n        checkPath = (config as unknown).baseDir || \"\";\n      } else if ((config as unknown).backend === \"sqlite\") {\n        checkPath = path.dirname((config as unknown).dbPath || \"\");\n      } else {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 393,
      "content": "checkPath = path.dirname((config as unknown).dbPath || \"\");",
      "context": "        checkPath = (config as unknown).baseDir || \"\";\n      } else if ((config as unknown).backend === \"sqlite\") {\n        checkPath = path.dirname((config as unknown).dbPath || \"\");\n      } else {\n        return metrics; // PostgreSQL doesn't have local disk usage",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 401,
      "content": "(metrics as unknown).diskUsage = (stats as unknown).size || 0;",
      "context": "        const stats = fs.statSync(checkPath);\n        // This is a simplified check - real disk usage would require platform-specific tools\n        (metrics as unknown).diskUsage = (stats as unknown).size || 0;\n      }\n    } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 423,
      "content": "if (!(backendHealth as unknown).healthy) {",
      "context": "\n    // Backend health recommendations\n    if (!(backendHealth as unknown).healthy) {\n      recommendations.push(\"Backend health check failed - investigate errors\");\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 427,
      "content": "if ((backendHealth as unknown).warnings && backendHealth.warnings.length > 0) {",
      "context": "    }\n\n    if ((backendHealth as unknown).warnings && backendHealth.warnings.length > 0) {\n      recommendations.push(\"Address backend warnings to improve reliability\");\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 432,
      "content": "if ((performance as unknown).averageResponseTime > 1000) {",
      "context": "\n    // Performance recommendations\n    if ((performance as unknown).averageResponseTime > 1000) {\n      recommendations.push(\"Slow response times detected - consider performance optimization\");\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 436,
      "content": "if ((performance as unknown).successRate < 0.95) {",
      "context": "    }\n\n    if ((performance as unknown).successRate < 0.95) {\n      recommendations.push(\"Low success rate - investigate error patterns\");\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 440,
      "content": "if ((performance as unknown).recentErrors > 5) {",
      "context": "    }\n\n    if ((performance as unknown).recentErrors > 5) {\n      recommendations.push(\"High error rate - check system health and configuration\");\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 445,
      "content": "if ((backendHealth as unknown).backend === \"json\" && (backendHealth.details as unknown).fileSize > 5_000_000) {",
      "context": "\n    // Backend-specific recommendations\n    if ((backendHealth as unknown).backend === \"json\" && (backendHealth.details as unknown).fileSize > 5_000_000) {\n      recommendations.push(\"Large JSON file - consider migrating to SQLite for better performance\");\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 449,
      "content": "if ((backendHealth as unknown).backend === \"sqlite\" && (backendHealth.details as unknown).journalMode !== \"wal\") {",
      "context": "    }\n\n    if ((backendHealth as unknown).backend === \"sqlite\" && (backendHealth.details as unknown).journalMode !== \"wal\") {\n      recommendations.push(\"Enable WAL mode for better SQLite performance\");\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 453,
      "content": "if ((backendHealth as unknown).backend === \"postgres\" && (backendHealth.details as unknown).activeConnections > 80) {",
      "context": "    }\n\n    if ((backendHealth as unknown).backend === \"postgres\" && (backendHealth.details as unknown).activeConnections > 80) {\n      recommendations.push(\"High connection count - consider connection pooling optimization\");\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 467,
      "content": "if (!(backendHealth as unknown).healthy) {",
      "context": "    performance: { averageResponseTime: number; successRate: number; recentErrors: number }\n  ): \"healthy\" | \"degraded\" | \"unhealthy\" {\n    if (!(backendHealth as unknown).healthy) {\n      return \"unhealthy\";\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 471,
      "content": "if ((performance as unknown).successRate < 0.9 || (performance as unknown).recentErrors > 10) {",
      "context": "    }\n\n    if ((performance as unknown).successRate < 0.9 || (performance as unknown).recentErrors > 10) {\n      return \"unhealthy\";\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 476,
      "content": "(performance as unknown).successRate < 0.98 ||",
      "context": "\n    if (\n      (performance as unknown).successRate < 0.98 ||\n      (performance as unknown).averageResponseTime > 2000 ||\n      (performance as unknown).recentErrors > 3",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 477,
      "content": "(performance as unknown).averageResponseTime > 2000 ||",
      "context": "    if (\n      (performance as unknown).successRate < 0.98 ||\n      (performance as unknown).averageResponseTime > 2000 ||\n      (performance as unknown).recentErrors > 3\n    ) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 478,
      "content": "(performance as unknown).recentErrors > 3",
      "context": "      (performance as unknown).successRate < 0.98 ||\n      (performance as unknown).averageResponseTime > 2000 ||\n      (performance as unknown).recentErrors > 3\n    ) {\n      return \"degraded\";",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 494,
      "content": "this.metrics = (this.metrics as unknown).slice(-this.MAX_METRICS);",
      "context": "    // Keep only recent metrics\n    if (this.metrics.length > this.MAX_METRICS) {\n      this.metrics = (this.metrics as unknown).slice(-this.MAX_METRICS);\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 498,
      "content": "if (!(metric as unknown).success) {",
      "context": "\n    // Log performance issues\n    if (!(metric as unknown).success) {\n      log.warn(\"SessionDB operation failed\", {\n        operation: (metric as unknown).operationType,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 500,
      "content": "operation: (metric as unknown).operationType,",
      "context": "    if (!(metric as unknown).success) {\n      log.warn(\"SessionDB operation failed\", {\n        operation: (metric as unknown).operationType,\n        backend: (metric as unknown).backend,\n        duration: (metric as unknown).duration,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 501,
      "content": "backend: (metric as unknown).backend,",
      "context": "      log.warn(\"SessionDB operation failed\", {\n        operation: (metric as unknown).operationType,\n        backend: (metric as unknown).backend,\n        duration: (metric as unknown).duration,\n      });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 502,
      "content": "duration: (metric as unknown).duration,",
      "context": "        operation: (metric as unknown).operationType,\n        backend: (metric as unknown).backend,\n        duration: (metric as unknown).duration,\n      });\n    } else if ((metric as unknown).duration > 2000) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 504,
      "content": "} else if ((metric as unknown).duration > 2000) {",
      "context": "        duration: (metric as unknown).duration,\n      });\n    } else if ((metric as unknown).duration > 2000) {\n      log.warn(\"Slow SessionDB operation\", {\n        operation: (metric as unknown).operationType,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 506,
      "content": "operation: (metric as unknown).operationType,",
      "context": "    } else if ((metric as unknown).duration > 2000) {\n      log.warn(\"Slow SessionDB operation\", {\n        operation: (metric as unknown).operationType,\n        backend: (metric as unknown).backend,\n        duration: (metric as unknown).duration,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 507,
      "content": "backend: (metric as unknown).backend,",
      "context": "      log.warn(\"Slow SessionDB operation\", {\n        operation: (metric as unknown).operationType,\n        backend: (metric as unknown).backend,\n        duration: (metric as unknown).duration,\n      });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 508,
      "content": "duration: (metric as unknown).duration,",
      "context": "        operation: (metric as unknown).operationType,\n        backend: (metric as unknown).backend,\n        duration: (metric as unknown).duration,\n      });\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 517,
      "content": "return (this.metrics as unknown).slice(-count);",
      "context": "   */\n  static getRecentMetrics(count: number = 50): PerformanceMetrics[] {\n    return (this.metrics as unknown).slice(-count);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 539,
      "content": "const avgResponse = totalOps > 0 ? (this.metrics as unknown).reduce((sum, m) => sum + m.duration, 0) / totalOps : 0;",
      "context": "    const totalOps = this.metrics.length;\n    const errors = this.metrics.filter(m => !m.success).length;\n    const avgResponse = totalOps > 0 ? (this.metrics as unknown).reduce((sum, m) => sum + m.duration, 0) / totalOps : 0;\n    const uptime =\n      this.metrics && this.metrics[0]",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 542,
      "content": "? (Date as unknown).now() - new Date(this.metrics[0].timestamp).getTime()",
      "context": "    const uptime =\n      this.metrics && this.metrics[0]\n        ? (Date as unknown).now() - new Date(this.metrics[0].timestamp).getTime()\n        : 0;\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/monitoring/health-monitor.ts",
      "line": 547,
      "content": "{ healthy: true, backend: \"test\", responseTime: 0, timestamp: (new Date() as unknown).toISOString() },",
      "context": "    return {\n      status: this.determineOverallHealth(\n        { healthy: true, backend: \"test\", responseTime: 0, timestamp: (new Date() as unknown).toISOString() },\n        { averageResponseTime: avgResponse, successRate: 1 - errors / totalOps, recentErrors: errors }\n      ),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "tests/adapters/cli/session.test.ts",
      "line": 243,
      "content": "name: undefined as unknown,",
      "context": "      const result = await updateSessionFromParams(\n        {\n          name: undefined as unknown,\n          noStash: false,\n          noPush: false,",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "tests/adapters/cli/session.test.ts",
      "line": 603,
      "content": "(gitService as unknown).sessionDb = {",
      "context": "\n      // Mock sessionDb\n      (gitService as unknown).sessionDb = {\n        getSession: async () => sessionRecord,\n      };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "tests/adapters/cli/session.test.ts",
      "line": 608,
      "content": "(gitService as unknown).getSessionWorkdir = () => testWorkdir;",
      "context": "\n      // Mock getSessionWorkdir to use our test directory\n      (gitService as unknown).getSessionWorkdir = () => testWorkdir;\n\n      // Mock push method",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "tests/adapters/cli/session.test.ts",
      "line": 611,
      "content": "(gitService as unknown).push = async () => ({ workdir: testWorkdir, pushed: true });",
      "context": "\n      // Mock push method\n      (gitService as unknown).push = async () => ({ workdir: testWorkdir, pushed: true });\n\n      // CRITICAL: Mock execInRepository to capture actual commands from preparePr",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "tests/adapters/cli/session.test.ts",
      "line": 614,
      "content": "(gitService as unknown).execInRepository = async (workdir: string, command: string) => {",
      "context": "\n      // CRITICAL: Mock execInRepository to capture actual commands from preparePr\n      (gitService as unknown).execInRepository = async (workdir: string, command: string) => {\n        const fullCommand = `git -C ${workdir} ${command}`;\n        return (await mockExecAsync(fullCommand)).stdout;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/storage/backends/json-file-storage.ts",
      "line": 83,
      "content": "if (!(result as unknown).success || !(result as unknown).data) {",
      "context": "  async getEntity(id: string, options?: DatabaseQueryOptions): Promise<SessionRecord | null> {\n    const result = await this.readState();\n    if (!(result as unknown).success || !(result as unknown).data) {\n      return null;\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/json-file-storage.ts",
      "line": 95,
      "content": "if (!(result as unknown).success || !(result as unknown).data) {",
      "context": "  async getEntities(options?: DatabaseQueryOptions): Promise<SessionRecord[]> {\n    const result = await this.readState();\n    if (!(result as unknown).success || !(result as unknown).data) {\n      return [];\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/json-file-storage.ts",
      "line": 99,
      "content": "let sessions = (result.data as unknown).sessions;",
      "context": "    }\n\n    let sessions = (result.data as unknown).sessions;\n\n    // Apply filters if provided",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/json-file-storage.ts",
      "line": 103,
      "content": "if ((options as unknown).taskId) {",
      "context": "    // Apply filters if provided\n    if (options) {\n      if ((options as unknown).taskId) {\n        const normalizedTaskId = (options.taskId as unknown).replace(/^#/, \"\");\n        sessions = sessions.filter((s) => {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/json-file-storage.ts",
      "line": 104,
      "content": "const normalizedTaskId = (options.taskId as unknown).replace(/^#/, \"\");",
      "context": "    if (options) {\n      if ((options as unknown).taskId) {\n        const normalizedTaskId = (options.taskId as unknown).replace(/^#/, \"\");\n        sessions = sessions.filter((s) => {\n          if (!s.taskId) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/json-file-storage.ts",
      "line": 109,
      "content": "return (s.taskId as unknown).replace(/^#/, \"\") === normalizedTaskId;",
      "context": "            return false;\n          }\n          return (s.taskId as unknown).replace(/^#/, \"\") === normalizedTaskId;\n        });\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/json-file-storage.ts",
      "line": 112,
      "content": "if ((options as unknown).repoName) {",
      "context": "        });\n      }\n      if ((options as unknown).repoName) {\n        sessions = sessions.filter(\n          (s) => (s as unknown).repoName === (options as unknown).repoName",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/json-file-storage.ts",
      "line": 114,
      "content": "(s) => (s as unknown).repoName === (options as unknown).repoName",
      "context": "      if ((options as unknown).repoName) {\n        sessions = sessions.filter(\n          (s) => (s as unknown).repoName === (options as unknown).repoName\n        );\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/json-file-storage.ts",
      "line": 117,
      "content": "if ((options as unknown).branch) {",
      "context": "        );\n      }\n      if ((options as unknown).branch) {\n        sessions = sessions.filter((s) => (s as unknown).branch === (options as unknown).branch);\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/json-file-storage.ts",
      "line": 118,
      "content": "sessions = sessions.filter((s) => (s as unknown).branch === (options as unknown).branch);",
      "context": "      }\n      if ((options as unknown).branch) {\n        sessions = sessions.filter((s) => (s as unknown).branch === (options as unknown).branch);\n      }\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/json-file-storage.ts",
      "line": 127,
      "content": "if (!(result as unknown).success || !(result as unknown).data) {",
      "context": "  async createEntity(entity: SessionRecord): Promise<SessionRecord> {\n    const result = await this.readState();\n    if (!(result as unknown).success || !(result as unknown).data) {\n      throw new Error(\"Failed to read current state\");\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/json-file-storage.ts",
      "line": 132,
      "content": "...(result as unknown).data,",
      "context": "\n    const newState: SessionDbState = {\n      ...(result as unknown).data,\n      sessions: [...(result.data as unknown).sessions, entity],\n    };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/json-file-storage.ts",
      "line": 133,
      "content": "sessions: [...(result.data as unknown).sessions, entity],",
      "context": "    const newState: SessionDbState = {\n      ...(result as unknown).data,\n      sessions: [...(result.data as unknown).sessions, entity],\n    };\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/json-file-storage.ts",
      "line": 137,
      "content": "if (!(writeResult as unknown).success) {",
      "context": "\n    const writeResult = await this.writeState(newState);\n    if (!(writeResult as unknown).success) {\n      throw new Error(`Failed to create entity: ${(writeResult.error as unknown).message}`);\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/json-file-storage.ts",
      "line": 138,
      "content": "throw new Error(`Failed to create entity: ${(writeResult.error as unknown).message}`);",
      "context": "    const writeResult = await this.writeState(newState);\n    if (!(writeResult as unknown).success) {\n      throw new Error(`Failed to create entity: ${(writeResult.error as unknown).message}`);\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/json-file-storage.ts",
      "line": 146,
      "content": "if (!(result as unknown).success || !(result as unknown).data) {",
      "context": "  async updateEntity(id: string, updates: Partial<SessionRecord>): Promise<SessionRecord | null> {\n    const result = await this.readState();\n    if (!(result as unknown).success || !(result as unknown).data) {\n      return null;\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/json-file-storage.ts",
      "line": 157,
      "content": "(Object.entries(updates) as unknown).forEach(([key, value]) => {",
      "context": "    // Create safe updates by explicitly building the update object without session\n    const safeUpdates: Partial<Omit<SessionRecord, \"session\">> = {};\n    (Object.entries(updates) as unknown).forEach(([key, value]) => {\n      if (key !== \"session\") {\n        (safeUpdates as unknown)[key] = value;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/json-file-storage.ts",
      "line": 159,
      "content": "(safeUpdates as unknown)[key] = value;",
      "context": "    (Object.entries(updates) as unknown).forEach(([key, value]) => {\n      if (key !== \"session\") {\n        (safeUpdates as unknown)[key] = value;\n      }\n    });",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/storage/backends/json-file-storage.ts",
      "line": 164,
      "content": "...(result.data as unknown).sessions[sessionIndex],",
      "context": "\n    const updatedSession: SessionRecord = {\n      ...(result.data as unknown).sessions[sessionIndex],\n      ...safeUpdates,\n    };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/json-file-storage.ts",
      "line": 168,
      "content": "const newSessions = [...(result.data as unknown).sessions];",
      "context": "    };\n\n    const newSessions = [...(result.data as unknown).sessions];\n    newSessions[sessionIndex] = updatedSession;\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/json-file-storage.ts",
      "line": 172,
      "content": "...(result as unknown).data,",
      "context": "\n    const newState: SessionDbState = {\n      ...(result as unknown).data,\n      sessions: newSessions,\n    };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/json-file-storage.ts",
      "line": 177,
      "content": "if (!(writeResult as unknown).success) {",
      "context": "\n    const writeResult = await this.writeState(newState);\n    if (!(writeResult as unknown).success) {\n      throw new Error(`Failed to update entity: ${(writeResult.error as unknown).message}`);\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/json-file-storage.ts",
      "line": 178,
      "content": "throw new Error(`Failed to update entity: ${(writeResult.error as unknown).message}`);",
      "context": "    const writeResult = await this.writeState(newState);\n    if (!(writeResult as unknown).success) {\n      throw new Error(`Failed to update entity: ${(writeResult.error as unknown).message}`);\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/json-file-storage.ts",
      "line": 186,
      "content": "if (!(result as unknown).success || !(result as unknown).data) {",
      "context": "  async deleteEntity(id: string): Promise<boolean> {\n    const result = await this.readState();\n    if (!(result as unknown).success || !(result as unknown).data) {\n      return false;\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/json-file-storage.ts",
      "line": 195,
      "content": "const newSessions = [...(result.data as unknown).sessions];",
      "context": "    }\n\n    const newSessions = [...(result.data as unknown).sessions];\n    newSessions.splice(sessionIndex, 1);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/json-file-storage.ts",
      "line": 199,
      "content": "...(result as unknown).data,",
      "context": "\n    const newState: SessionDbState = {\n      ...(result as unknown).data,\n      sessions: newSessions,\n    };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/json-file-storage.ts",
      "line": 204,
      "content": "return (writeResult as unknown).success;",
      "context": "\n    const writeResult = await this.writeState(newState);\n    return (writeResult as unknown).success;\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/json-file-storage.ts",
      "line": 228,
      "content": "return (writeResult as unknown).success;",
      "context": "        const initialState = initializeSessionDbState({ baseDir: this.baseDir });\n        const writeResult = await this.writeState(initialState);\n        return (writeResult as unknown).success;\n      }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 76,
      "content": "(StorageErrorType as unknown).CONNECTION,",
      "context": "  private determineRetryability(): boolean {\n    const retryableTypes = [\n      (StorageErrorType as unknown).CONNECTION,\n      (StorageErrorType as unknown).TIMEOUT,\n      (StorageErrorType as unknown).RESOURCE,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 77,
      "content": "(StorageErrorType as unknown).TIMEOUT,",
      "context": "    const retryableTypes = [\n      (StorageErrorType as unknown).CONNECTION,\n      (StorageErrorType as unknown).TIMEOUT,\n      (StorageErrorType as unknown).RESOURCE,\n    ];",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 78,
      "content": "(StorageErrorType as unknown).RESOURCE,",
      "context": "      (StorageErrorType as unknown).CONNECTION,\n      (StorageErrorType as unknown).TIMEOUT,\n      (StorageErrorType as unknown).RESOURCE,\n    ];\n    return (retryableTypes as unknown).includes(this.type);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 80,
      "content": "return (retryableTypes as unknown).includes(this.type);",
      "context": "      (StorageErrorType as unknown).RESOURCE,\n    ];\n    return (retryableTypes as unknown).includes(this.type);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 92,
      "content": "originalError: (this.originalError as unknown).message,",
      "context": "      retryable: this.retryable,\n      stack: this.stack,\n      originalError: (this.originalError as unknown).message,\n    };\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 105,
      "content": "const classification = this.analyzeError(error as unknown, context as unknown);",
      "context": "    context: StorageErrorContext\n  ): StorageError {\n    const classification = this.analyzeError(error as unknown, context as unknown);\n    \n    return new StorageError(",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 108,
      "content": "(classification as unknown).message,",
      "context": "    \n    return new StorageError(\n      (classification as unknown).message,\n      (classification as unknown).type,\n      classification.severity,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 109,
      "content": "(classification as unknown).type,",
      "context": "    return new StorageError(\n      (classification as unknown).message,\n      (classification as unknown).type,\n      classification.severity,\n      context,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 113,
      "content": "error as unknown",
      "context": "      context,\n      classification.recoveryActions,\n      error as unknown\n    );\n  }",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 126,
      "content": "const errorMessage = (error.message as unknown).toLowerCase();",
      "context": "    recoveryActions: RecoveryAction[];\n  } {\n    const errorMessage = (error.message as unknown).toLowerCase();\n    const backend = (context as unknown).backend;\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 127,
      "content": "const backend = (context as unknown).backend;",
      "context": "  } {\n    const errorMessage = (error.message as unknown).toLowerCase();\n    const backend = (context as unknown).backend;\n\n    // JSON File Backend Errors",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 131,
      "content": "return this.classifyJsonError(error as unknown, errorMessage);",
      "context": "    // JSON File Backend Errors\n    if (backend === \"json\") {\n      return this.classifyJsonError(error as unknown, errorMessage);\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 136,
      "content": "return this.classifySqliteError(error as unknown, errorMessage);",
      "context": "    // SQLite Backend Errors\n    if (backend === \"sqlite\") {\n      return this.classifySqliteError(error as unknown, errorMessage);\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 141,
      "content": "return this.classifyPostgresError(error as unknown, errorMessage);",
      "context": "    // PostgreSQL Backend Errors\n    if (backend === \"postgres\") {\n      return this.classifyPostgresError(error as unknown, errorMessage);\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 166,
      "content": "if ((errorMessage as unknown).includes(\"enoent\") || (errorMessage as unknown).includes(\"no such file\")) {",
      "context": "  private static classifyJsonError(error: Error, errorMessage: string) {\n    // File not found\n    if ((errorMessage as unknown).includes(\"enoent\") || (errorMessage as unknown).includes(\"no such file\")) {\n      return {\n        message: \"Session database file not found - database may need initialization\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 184,
      "content": "if ((errorMessage as unknown).includes(\"eacces\") || (errorMessage as unknown).includes(\"permission denied\")) {",
      "context": "\n    // Permission denied\n    if ((errorMessage as unknown).includes(\"eacces\") || (errorMessage as unknown).includes(\"permission denied\")) {\n      return {\n        message: \"Insufficient permissions to access session database file\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 201,
      "content": "if ((errorMessage as unknown).includes(\"syntaxerror\") || (errorMessage as unknown).includes(\"unexpected token\")) {",
      "context": "\n    // JSON syntax error (corruption)\n    if ((errorMessage as unknown).includes(\"syntaxerror\") || (errorMessage as unknown).includes(\"unexpected token\")) {\n      return {\n        message: \"Session database file is corrupted or contains invalid JSON\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 226,
      "content": "if ((errorMessage as unknown).includes(\"enospc\") || (errorMessage as unknown).includes(\"no space left\")) {",
      "context": "\n    // Disk space\n    if ((errorMessage as unknown).includes(\"enospc\") || (errorMessage as unknown).includes(\"no space left\")) {\n      return {\n        message: \"Insufficient disk space for session database operations\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 252,
      "content": "if ((errorMessage as unknown).includes(\"sqlite_busy\") || (errorMessage as unknown).includes(\"database is locked\")) {",
      "context": "  private static classifySqliteError(error: Error, errorMessage: string) {\n    // Database locked\n    if ((errorMessage as unknown).includes(\"sqlite_busy\") || (errorMessage as unknown).includes(\"database is locked\")) {\n      return {\n        message: \"SQLite database is locked by another process\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 275,
      "content": "if ((errorMessage as unknown).includes(\"sqlite_corrupt\") || (errorMessage as unknown).includes(\"malformed\")) {",
      "context": "\n    // Database corruption\n    if ((errorMessage as unknown).includes(\"sqlite_corrupt\") || (errorMessage as unknown).includes(\"malformed\")) {\n      return {\n        message: \"SQLite database is corrupted\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 299,
      "content": "if ((errorMessage as unknown).includes(\"sqlite_readonly\") || (errorMessage as unknown).includes(\"readonly\")) {",
      "context": "\n    // Read-only database\n    if ((errorMessage as unknown).includes(\"sqlite_readonly\") || (errorMessage as unknown).includes(\"readonly\")) {\n      return {\n        message: \"SQLite database is in read-only mode\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 316,
      "content": "if ((errorMessage as unknown).includes(\"sqlite_cantopen\") || (errorMessage as unknown).includes(\"unable to open\")) {",
      "context": "\n    // Cannot open database\n    if ((errorMessage as unknown).includes(\"sqlite_cantopen\") || (errorMessage as unknown).includes(\"unable to open\")) {\n      return {\n        message: \"Cannot open SQLite database file\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 341,
      "content": "const pgError = error as unknown; // PostgreSQL errors have specific properties",
      "context": "\n  private static classifyPostgresError(error: Error, errorMessage: string) {\n    const pgError = error as unknown; // PostgreSQL errors have specific properties\n\n    // Connection refused",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 344,
      "content": "if ((errorMessage as unknown).includes(\"econnrefused\") || (errorMessage as unknown).includes(\"connection refused\")) {",
      "context": "\n    // Connection refused\n    if ((errorMessage as unknown).includes(\"econnrefused\") || (errorMessage as unknown).includes(\"connection refused\")) {\n      return {\n        message: \"Cannot connect to PostgreSQL server\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 367,
      "content": "if ((pgError as unknown).code === \"28P01\" || (errorMessage as unknown).includes(\"authentication failed\")) {",
      "context": "\n    // Authentication failed\n    if ((pgError as unknown).code === \"28P01\" || (errorMessage as unknown).includes(\"authentication failed\")) {\n      return {\n        message: \"PostgreSQL authentication failed\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 384,
      "content": "if ((pgError as unknown).code === \"3D000\" || (errorMessage as unknown).includes(\"database\") && (errorMessage as unknown).includes(\"does not exist\")) {",
      "context": "\n    // Database does not exist\n    if ((pgError as unknown).code === \"3D000\" || (errorMessage as unknown).includes(\"database\") && (errorMessage as unknown).includes(\"does not exist\")) {\n      return {\n        message: \"PostgreSQL database does not exist\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 401,
      "content": "if ((pgError as unknown).code === \"42P01\" || (errorMessage as unknown).includes(\"relation\") && (errorMessage as unknown).includes(\"does not exist\")) {",
      "context": "\n    // Table does not exist\n    if ((pgError as unknown).code === \"42P01\" || (errorMessage as unknown).includes(\"relation\") && (errorMessage as unknown).includes(\"does not exist\")) {\n      return {\n        message: \"PostgreSQL schema not initialized\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 418,
      "content": "if ((pgError as unknown).code === \"53300\" || (errorMessage as unknown).includes(\"too many connections\")) {",
      "context": "\n    // Too many connections\n    if ((pgError as unknown).code === \"53300\" || (errorMessage as unknown).includes(\"too many connections\")) {\n      return {\n        message: \"PostgreSQL connection limit exceeded\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 440,
      "content": "if ((errorMessage as unknown).includes(\"timeout\") || (errorMessage as unknown).includes(\"etimedout\")) {",
      "context": "\n    // Timeout\n    if ((errorMessage as unknown).includes(\"timeout\") || (errorMessage as unknown).includes(\"etimedout\")) {\n      return {\n        message: \"PostgreSQL operation timed out\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 472,
      "content": "if (!(storageError as unknown).retryable) {",
      "context": "    operation: () => Promise<any>\n  ): Promise<{ success: boolean; result?: any; error?: StorageError }> {\n    if (!(storageError as unknown).retryable) {\n      return { success: false, error: storageError };\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 476,
      "content": "const maxRetries = this.getMaxRetries((storageError as unknown).type);",
      "context": "    }\n\n    const maxRetries = this.getMaxRetries((storageError as unknown).type);\n    const retryDelay = this.getRetryDelay((storageError as unknown).type);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 477,
      "content": "const retryDelay = this.getRetryDelay((storageError as unknown).type);",
      "context": "\n    const maxRetries = this.getMaxRetries((storageError as unknown).type);\n    const retryDelay = this.getRetryDelay((storageError as unknown).type);\n\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 484,
      "content": "errorType: (storageError as unknown).type,",
      "context": "          attempt,\n          maxRetries,\n          errorType: (storageError as unknown).type,\n          delay: retryDelay,\n        });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 496,
      "content": "errorType: (storageError as unknown).type,",
      "context": "        log.debug(\"Storage operation recovery successful\", {\n          attempt,\n          errorType: (storageError as unknown).type,\n        });\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 503,
      "content": "const finalError = (StorageErrorClassifier as unknown).classifyError(",
      "context": "      } catch (error) {\n        if (attempt === maxRetries) {\n          const finalError = (StorageErrorClassifier as unknown).classifyError(\n            error as Error,\n            (storageError as unknown).context",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 505,
      "content": "(storageError as unknown).context",
      "context": "          const finalError = (StorageErrorClassifier as unknown).classifyError(\n            error as Error,\n            (storageError as unknown).context\n          );\n          ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 510,
      "content": "finalError: (finalError as unknown).message,",
      "context": "          log.error(\"Storage operation recovery failed after all attempts\", {\n            attempts: maxRetries,\n            finalError: (finalError as unknown).message,\n          });\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 528,
      "content": "case (StorageErrorType as unknown).CONNECTION:",
      "context": "  private static getMaxRetries(errorType: StorageErrorType): number {\n    switch (errorType) {\n    case (StorageErrorType as unknown).CONNECTION:\n      return 3;\n    case (StorageErrorType as unknown).TIMEOUT:",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 530,
      "content": "case (StorageErrorType as unknown).TIMEOUT:",
      "context": "    case (StorageErrorType as unknown).CONNECTION:\n      return 3;\n    case (StorageErrorType as unknown).TIMEOUT:\n      return 2;\n    case (StorageErrorType as unknown).RESOURCE:",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 532,
      "content": "case (StorageErrorType as unknown).RESOURCE:",
      "context": "    case (StorageErrorType as unknown).TIMEOUT:\n      return 2;\n    case (StorageErrorType as unknown).RESOURCE:\n      return 2;\n    default:",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 541,
      "content": "case (StorageErrorType as unknown).CONNECTION:",
      "context": "  private static getRetryDelay(errorType: StorageErrorType): number {\n    switch (errorType) {\n    case (StorageErrorType as unknown).CONNECTION:\n      return 1000; // 1 second\n    case (StorageErrorType as unknown).TIMEOUT:",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 543,
      "content": "case (StorageErrorType as unknown).TIMEOUT:",
      "context": "    case (StorageErrorType as unknown).CONNECTION:\n      return 1000; // 1 second\n    case (StorageErrorType as unknown).TIMEOUT:\n      return 2000; // 2 seconds\n    case (StorageErrorType as unknown).RESOURCE:",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 545,
      "content": "case (StorageErrorType as unknown).RESOURCE:",
      "context": "    case (StorageErrorType as unknown).TIMEOUT:\n      return 2000; // 2 seconds\n    case (StorageErrorType as unknown).RESOURCE:\n      return 500;  // 0.5 seconds\n    default:",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 568,
      "content": "(this.errorCounts as unknown).set(key, currentCount + 1);",
      "context": "    const currentCount = (this.errorCounts as any).get(key) || 0;\n    \n    (this.errorCounts as unknown).set(key, currentCount + 1);\n    this.lastErrors.set(key, error as unknown);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 569,
      "content": "this.lastErrors.set(key, error as unknown);",
      "context": "    \n    (this.errorCounts as unknown).set(key, currentCount + 1);\n    this.lastErrors.set(key, error as unknown);\n\n    // Log error with context",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 573,
      "content": "backend: (error.context as unknown).backend as unknown,",
      "context": "    // Log error with context\n    log.error(\"Storage error recorded\", {\n      backend: (error.context as unknown).backend as unknown,\n      type: (error).type as unknown,\n      severity: (error).severity as unknown,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 574,
      "content": "type: (error).type as unknown,",
      "context": "    log.error(\"Storage error recorded\", {\n      backend: (error.context as unknown).backend as unknown,\n      type: (error).type as unknown,\n      severity: (error).severity as unknown,\n      operation: (error.context as unknown).operation as unknown,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 575,
      "content": "severity: (error).severity as unknown,",
      "context": "      backend: (error.context as unknown).backend as unknown,\n      type: (error).type as unknown,\n      severity: (error).severity as unknown,\n      operation: (error.context as unknown).operation as unknown,\n      count: currentCount + 1,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 576,
      "content": "operation: (error.context as unknown).operation as unknown,",
      "context": "      type: (error).type as unknown,\n      severity: (error).severity as unknown,\n      operation: (error.context as unknown).operation as unknown,\n      count: currentCount + 1,\n      message: (error as any).message as any,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 605,
      "content": "(this.errorCounts as unknown).clear();",
      "context": "   */\n  static resetCounters(): void {\n    (this.errorCounts as unknown).clear();\n    this.lastErrors.clear();\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 621,
      "content": "if (lastError?.severity === (StorageErrorSeverity as unknown).CRITICAL) {",
      "context": "    // Alert on critical errors\n    const lastError = this.lastErrors.get(key);\n    if (lastError?.severity === (StorageErrorSeverity as unknown).CRITICAL) {\n      log.error(\"Critical storage error detected\", {\n        errorKey: key,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 624,
      "content": "message: (lastError as unknown).message,",
      "context": "      log.error(\"Critical storage error detected\", {\n        errorKey: key,\n        message: (lastError as unknown).message,\n        recoveryActions: lastError?.recoveryActions,\n      });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 60,
      "content": "this.connectionUrl = (config as unknown).connectionUrl;",
      "context": "\n  constructor(config: PostgresStorageConfig) {\n    this.connectionUrl = (config as unknown).connectionUrl;\n    \n    // Initialize PostgreSQL connection",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 64,
      "content": "max: (config as unknown).maxConnections || 10,",
      "context": "    // Initialize PostgreSQL connection\n    this.sql = postgres(this.connectionUrl, {\n      max: (config as unknown).maxConnections || 10,\n      connect_timeout: (config as unknown).connectTimeout || 30,\n      idle_timeout: (config as unknown).idleTimeout || 600,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 65,
      "content": "connect_timeout: (config as unknown).connectTimeout || 30,",
      "context": "    this.sql = postgres(this.connectionUrl, {\n      max: (config as unknown).maxConnections || 10,\n      connect_timeout: (config as unknown).connectTimeout || 30,\n      idle_timeout: (config as unknown).idleTimeout || 600,\n      // Enable connection pooling",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 66,
      "content": "idle_timeout: (config as unknown).idleTimeout || 600,",
      "context": "      max: (config as unknown).maxConnections || 10,\n      connect_timeout: (config as unknown).connectTimeout || 30,\n      idle_timeout: (config as unknown).idleTimeout || 600,\n      // Enable connection pooling\n      prepare: false,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 76,
      "content": "log.warn(\"Migration error (may be expected for new database):\", error as unknown);",
      "context": "    // Run migrations\n    this.runMigrations().catch((error) => {\n      log.warn(\"Migration error (may be expected for new database):\", error as unknown);\n    });\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 88,
      "content": "log.debug(\"Migration attempt failed:\", error as unknown);",
      "context": "    } catch (error) {\n      // Log but don't throw - migrations may not exist yet\n      log.debug(\"Migration attempt failed:\", error as unknown);\n    }\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 112,
      "content": "log.error(\"Failed to initialize PostgreSQL storage:\", error as unknown);",
      "context": "      return true;\n    } catch (error) {\n      log.error(\"Failed to initialize PostgreSQL storage:\", error as unknown);\n      return false;\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 151,
      "content": "VALUES (${(insertData as unknown).session}, ${(insertData as unknown).repoName}, ${(insertData as unknown).repoUrl},",
      "context": "          await sql`\n            INSERT INTO sessions (session, repo_name, repo_url, created_at, task_id, branch, repo_path)\n            VALUES (${(insertData as unknown).session}, ${(insertData as unknown).repoName}, ${(insertData as unknown).repoUrl}, \n                   ${(insertData as unknown).createdAt}, ${(insertData as unknown).taskId}, ${(insertData as unknown).branch}, ${(insertData as unknown).repoPath})\n          `;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 152,
      "content": "${(insertData as unknown).createdAt}, ${(insertData as unknown).taskId}, ${(insertData as unknown).branch}, ${(insertData as unknown).repoPath})",
      "context": "            INSERT INTO sessions (session, repo_name, repo_url, created_at, task_id, branch, repo_path)\n            VALUES (${(insertData as unknown).session}, ${(insertData as unknown).repoName}, ${(insertData as unknown).repoUrl}, \n                   ${(insertData as unknown).createdAt}, ${(insertData as unknown).taskId}, ${(insertData as unknown).branch}, ${(insertData as unknown).repoPath})\n          `;\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 173,
      "content": ".where(eq(postgresSessions.session, id)) as unknown).limit(1);",
      "context": "        .select()\n        .from(postgresSessions)\n        .where(eq(postgresSessions.session, id)) as unknown).limit(1);\n\n      return result.length > 0 ? fromPostgresSelect((result as unknown)[0]) : null;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 175,
      "content": "return result.length > 0 ? fromPostgresSelect((result as unknown)[0]) : null;",
      "context": "        .where(eq(postgresSessions.session, id)) as unknown).limit(1);\n\n      return result.length > 0 ? fromPostgresSelect((result as unknown)[0]) : null;\n    } catch (error) {\n      log.error(\"Failed to get session from PostgreSQL:\", error as Error);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 187,
      "content": "const results = await (this.drizzle.select() as unknown).from(postgresSessions);",
      "context": "  async getEntities(options?: DatabaseQueryOptions): Promise<SessionRecord[]> {\n    try {\n      const results = await (this.drizzle.select() as unknown).from(postgresSessions);\n      return results.map(fromPostgresSelect);\n    } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 227,
      "content": ".set(updateData as unknown) as unknown).where(eq((postgresSessions as unknown).session, id));",
      "context": "      await (this.drizzle\n        .update(postgresSessions)\n        .set(updateData as unknown) as unknown).where(eq((postgresSessions as unknown).session, id));\n\n      return updated;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 231,
      "content": "log.error(\"Failed to update session in PostgreSQL:\", error as unknown);",
      "context": "      return updated;\n    } catch (error) {\n      log.error(\"Failed to update session in PostgreSQL:\", error as unknown);\n      throw error;\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 242,
      "content": ".delete(postgresSessions) as unknown).where(eq((postgresSessions as unknown).session, id));",
      "context": "    try {\n      const result = await (this.drizzle\n        .delete(postgresSessions) as unknown).where(eq((postgresSessions as unknown).session, id));\n\n      return (result as unknown).rowCount !== null && (result as unknown).rowCount > 0 as unknown;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 244,
      "content": "return (result as unknown).rowCount !== null && (result as unknown).rowCount > 0 as unknown;",
      "context": "        .delete(postgresSessions) as unknown).where(eq((postgresSessions as unknown).session, id));\n\n      return (result as unknown).rowCount !== null && (result as unknown).rowCount > 0 as unknown;\n    } catch (error) {\n      log.error(\"Failed to delete session from PostgreSQL:\", error as unknown);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 246,
      "content": "log.error(\"Failed to delete session from PostgreSQL:\", error as unknown);",
      "context": "      return (result as unknown).rowCount !== null && (result as unknown).rowCount > 0 as unknown;\n    } catch (error) {\n      log.error(\"Failed to delete session from PostgreSQL:\", error as unknown);\n      return false;\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 259,
      "content": ".where(eq(postgresSessions.session, id)) as unknown).limit(1);",
      "context": "        .select({ session: postgresSessions.session })\n        .from(postgresSessions)\n        .where(eq(postgresSessions.session, id)) as unknown).limit(1);\n\n      return result.length > 0 as unknown;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 261,
      "content": "return result.length > 0 as unknown;",
      "context": "        .where(eq(postgresSessions.session, id)) as unknown).limit(1);\n\n      return result.length > 0 as unknown;\n    } catch (error) {\n      log.error(\"Failed to check session existence in PostgreSQL:\", error as unknown);",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 263,
      "content": "log.error(\"Failed to check session existence in PostgreSQL:\", error as unknown);",
      "context": "      return result.length > 0 as unknown;\n    } catch (error) {\n      log.error(\"Failed to check session existence in PostgreSQL:\", error as unknown);\n      return false;\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 284,
      "content": "log.error(\"Error closing PostgreSQL connection:\", error as unknown);",
      "context": "      await this.sql.end();\n    } catch (error) {\n      log.error(\"Error closing PostgreSQL connection:\", error as unknown);\n    }\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 293,
      "content": "return new PostgresStorage(config as unknown);",
      "context": " */\nexport function createPostgresStorage(config: PostgresStorageConfig): DatabaseStorage<SessionRecord, SessionDbState> {\n  return new PostgresStorage(config as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 31,
      "content": "session: (text(\"session\") as unknown).primaryKey(),",
      "context": "// Drizzle schema definition\nconst sessionsTable = sqliteTable(\"sessions\", {\n  session: (text(\"session\") as unknown).primaryKey(),\n  repoName: (text(\"repoName\") as unknown).notNull(),\n  repoUrl: text(\"repoUrl\"),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 32,
      "content": "repoName: (text(\"repoName\") as unknown).notNull(),",
      "context": "const sessionsTable = sqliteTable(\"sessions\", {\n  session: (text(\"session\") as unknown).primaryKey(),\n  repoName: (text(\"repoName\") as unknown).notNull(),\n  repoUrl: text(\"repoUrl\"),\n  createdAt: (text(\"createdAt\") as unknown).notNull(),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 34,
      "content": "createdAt: (text(\"createdAt\") as unknown).notNull(),",
      "context": "  repoName: (text(\"repoName\") as unknown).notNull(),\n  repoUrl: text(\"repoUrl\"),\n  createdAt: (text(\"createdAt\") as unknown).notNull(),\n  taskId: text(\"taskId\"),\n  branch: text(\"branch\"),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 57,
      "content": "this.dbPath = (config as unknown).dbPath;",
      "context": "  constructor(config: SqliteStorageConfig) {\n    this.config = config;\n    this.dbPath = (config as unknown).dbPath;\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 119,
      "content": "const sessions = await (this.drizzleDb.select() as unknown).from(sessionsTable);",
      "context": "\n    try {\n      const sessions = await (this.drizzleDb.select() as unknown).from(sessionsTable);\n\n      // Construct state object - this assumes TState has a sessions array",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 125,
      "content": "baseDir: process.env.XDG_STATE_HOME ? `${process.env.XDG_STATE_HOME}/minsky` : `${process.env.HOME}/.local/state/minsky` as unknown,",
      "context": "      const state = {\n        sessions,\n        baseDir: process.env.XDG_STATE_HOME ? `${process.env.XDG_STATE_HOME}/minsky` : `${process.env.HOME}/.local/state/minsky` as unknown,\n      } as TState;\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 146,
      "content": "await (this.drizzleDb as unknown).transaction(async (tx) => {",
      "context": "\n      // Use Drizzle transaction\n      await (this.drizzleDb as unknown).transaction(async (tx) => {\n        // Clear existing sessions\n        await tx.delete(sessionsTable);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 184,
      "content": ".where(eq(sessionsTable.session, id)) as unknown).limit(1);",
      "context": "        .select()\n        .from(sessionsTable)\n        .where(eq(sessionsTable.session, id)) as unknown).limit(1);\n\n      return ((result as unknown)[0] as TEntity) || null;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 186,
      "content": "return ((result as unknown)[0] as TEntity) || null;",
      "context": "        .where(eq(sessionsTable.session, id)) as unknown).limit(1);\n\n      return ((result as unknown)[0] as TEntity) || null;\n    } catch (error) {\n      const errorMessage = getErrorMessage(error as any);",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 200,
      "content": "let query = (this.drizzleDb.select() as unknown).from(sessionsTable);",
      "context": "\n    try {\n      let query = (this.drizzleDb.select() as unknown).from(sessionsTable);\n\n      // Apply filters if provided",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 206,
      "content": "if ((options as unknown).taskId) {",
      "context": "        const conditions: any[] = [];\n\n        if ((options as unknown).taskId) {\n          // Normalize taskId by removing # prefix if present\n          const normalizedTaskId = (options.taskId as unknown).replace(/^#/, \"\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 208,
      "content": "const normalizedTaskId = (options.taskId as unknown).replace(/^#/, \"\");",
      "context": "        if ((options as unknown).taskId) {\n          // Normalize taskId by removing # prefix if present\n          const normalizedTaskId = (options.taskId as unknown).replace(/^#/, \"\");\n          // BUGFIX: Use SQL to handle null values properly\n          // This finds sessions where taskId (without #) equals normalizedTaskId",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 213,
      "content": "sql`TRIM(${(sessionsTable as unknown).taskId}, '#') = ${normalizedTaskId} AND ${(sessionsTable as unknown).taskId} IS NOT NULL`",
      "context": "          // and excludes sessions with null taskId\n          conditions.push(\n            sql`TRIM(${(sessionsTable as unknown).taskId}, '#') = ${normalizedTaskId} AND ${(sessionsTable as unknown).taskId} IS NOT NULL`\n          );\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 217,
      "content": "if ((options as unknown).repoName) {",
      "context": "        }\n\n        if ((options as unknown).repoName) {\n          conditions.push(eq((sessionsTable as unknown).repoName, (options as unknown).repoName));\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 218,
      "content": "conditions.push(eq((sessionsTable as unknown).repoName, (options as unknown).repoName));",
      "context": "\n        if ((options as unknown).repoName) {\n          conditions.push(eq((sessionsTable as unknown).repoName, (options as unknown).repoName));\n        }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 221,
      "content": "if ((options as unknown).branch) {",
      "context": "        }\n\n        if ((options as unknown).branch) {\n          conditions.push(eq((sessionsTable as unknown).branch, (options as unknown).branch));\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 222,
      "content": "conditions.push(eq((sessionsTable as unknown).branch, (options as unknown).branch));",
      "context": "\n        if ((options as unknown).branch) {\n          conditions.push(eq((sessionsTable as unknown).branch, (options as unknown).branch));\n        }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 227,
      "content": "query = (query as unknown).where(and(...conditions)) as unknown;",
      "context": "        // Apply WHERE conditions if any exist\n        if (conditions.length > 0) {\n          query = (query as unknown).where(and(...conditions)) as unknown;\n        }\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 247,
      "content": "session: (entity as unknown).session,",
      "context": "    try {\n      const sessionRecord: NewSessionRecord = {\n        session: (entity as unknown).session,\n        repoName: (entity as unknown).repoName,\n        repoUrl: (entity as unknown).repoUrl || null,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 248,
      "content": "repoName: (entity as unknown).repoName,",
      "context": "      const sessionRecord: NewSessionRecord = {\n        session: (entity as unknown).session,\n        repoName: (entity as unknown).repoName,\n        repoUrl: (entity as unknown).repoUrl || null,\n        createdAt: (entity as unknown).createdAt,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 249,
      "content": "repoUrl: (entity as unknown).repoUrl || null,",
      "context": "        session: (entity as unknown).session,\n        repoName: (entity as unknown).repoName,\n        repoUrl: (entity as unknown).repoUrl || null,\n        createdAt: (entity as unknown).createdAt,\n        taskId: (entity as unknown).taskId || null,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 250,
      "content": "createdAt: (entity as unknown).createdAt,",
      "context": "        repoName: (entity as unknown).repoName,\n        repoUrl: (entity as unknown).repoUrl || null,\n        createdAt: (entity as unknown).createdAt,\n        taskId: (entity as unknown).taskId || null,\n        branch: (entity as unknown).branch || null,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 251,
      "content": "taskId: (entity as unknown).taskId || null,",
      "context": "        repoUrl: (entity as unknown).repoUrl || null,\n        createdAt: (entity as unknown).createdAt,\n        taskId: (entity as unknown).taskId || null,\n        branch: (entity as unknown).branch || null,\n        repoPath: (entity as unknown).repoPath || null,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 252,
      "content": "branch: (entity as unknown).branch || null,",
      "context": "        createdAt: (entity as unknown).createdAt,\n        taskId: (entity as unknown).taskId || null,\n        branch: (entity as unknown).branch || null,\n        repoPath: (entity as unknown).repoPath || null,\n      };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 253,
      "content": "repoPath: (entity as unknown).repoPath || null,",
      "context": "        taskId: (entity as unknown).taskId || null,\n        branch: (entity as unknown).branch || null,\n        repoPath: (entity as unknown).repoPath || null,\n      };\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 260,
      "content": "log.debug(`Failed to create session '${(entity as unknown).session}': ${errorMessage}`);",
      "context": "    } catch (error) {\n      const errorMessage = getErrorMessage(error as any);\n      log.debug(`Failed to create session '${(entity as unknown).session}': ${errorMessage}`);\n      throw error;\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 279,
      "content": "if ((updates as unknown).repoName !== undefined) (updateData as unknown).repoName = (updates as unknown).repoName;",
      "context": "      // Prepare update data\n      const updateData: Partial<NewSessionRecord> = {};\n      if ((updates as unknown).repoName !== undefined) (updateData as unknown).repoName = (updates as unknown).repoName;\n      if ((updates as unknown).repoUrl !== undefined) (updateData as unknown).repoUrl = (updates as unknown).repoUrl;\n      if ((updates as unknown).createdAt !== undefined) (updateData as unknown).createdAt = (updates as unknown).createdAt;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 280,
      "content": "if ((updates as unknown).repoUrl !== undefined) (updateData as unknown).repoUrl = (updates as unknown).repoUrl;",
      "context": "      const updateData: Partial<NewSessionRecord> = {};\n      if ((updates as unknown).repoName !== undefined) (updateData as unknown).repoName = (updates as unknown).repoName;\n      if ((updates as unknown).repoUrl !== undefined) (updateData as unknown).repoUrl = (updates as unknown).repoUrl;\n      if ((updates as unknown).createdAt !== undefined) (updateData as unknown).createdAt = (updates as unknown).createdAt;\n      if ((updates as unknown).taskId !== undefined) (updateData as unknown).taskId = (updates as unknown).taskId;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 281,
      "content": "if ((updates as unknown).createdAt !== undefined) (updateData as unknown).createdAt = (updates as unknown).createdAt;",
      "context": "      if ((updates as unknown).repoName !== undefined) (updateData as unknown).repoName = (updates as unknown).repoName;\n      if ((updates as unknown).repoUrl !== undefined) (updateData as unknown).repoUrl = (updates as unknown).repoUrl;\n      if ((updates as unknown).createdAt !== undefined) (updateData as unknown).createdAt = (updates as unknown).createdAt;\n      if ((updates as unknown).taskId !== undefined) (updateData as unknown).taskId = (updates as unknown).taskId;\n      if ((updates as unknown).branch !== undefined) (updateData as unknown).branch = (updates as unknown).branch;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 282,
      "content": "if ((updates as unknown).taskId !== undefined) (updateData as unknown).taskId = (updates as unknown).taskId;",
      "context": "      if ((updates as unknown).repoUrl !== undefined) (updateData as unknown).repoUrl = (updates as unknown).repoUrl;\n      if ((updates as unknown).createdAt !== undefined) (updateData as unknown).createdAt = (updates as unknown).createdAt;\n      if ((updates as unknown).taskId !== undefined) (updateData as unknown).taskId = (updates as unknown).taskId;\n      if ((updates as unknown).branch !== undefined) (updateData as unknown).branch = (updates as unknown).branch;\n      if ((updates as unknown).repoPath !== undefined) (updateData as unknown).repoPath = (updates as unknown).repoPath;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 283,
      "content": "if ((updates as unknown).branch !== undefined) (updateData as unknown).branch = (updates as unknown).branch;",
      "context": "      if ((updates as unknown).createdAt !== undefined) (updateData as unknown).createdAt = (updates as unknown).createdAt;\n      if ((updates as unknown).taskId !== undefined) (updateData as unknown).taskId = (updates as unknown).taskId;\n      if ((updates as unknown).branch !== undefined) (updateData as unknown).branch = (updates as unknown).branch;\n      if ((updates as unknown).repoPath !== undefined) (updateData as unknown).repoPath = (updates as unknown).repoPath;\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 284,
      "content": "if ((updates as unknown).repoPath !== undefined) (updateData as unknown).repoPath = (updates as unknown).repoPath;",
      "context": "      if ((updates as unknown).taskId !== undefined) (updateData as unknown).taskId = (updates as unknown).taskId;\n      if ((updates as unknown).branch !== undefined) (updateData as unknown).branch = (updates as unknown).branch;\n      if ((updates as unknown).repoPath !== undefined) (updateData as unknown).repoPath = (updates as unknown).repoPath;\n\n      if (Object.keys(updateData).length === 0) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 292,
      "content": ".set(updateData as unknown) as unknown).where(eq((sessionsTable as unknown).session, id));",
      "context": "      await (this.drizzleDb\n        .update(sessionsTable)\n        .set(updateData as unknown) as unknown).where(eq((sessionsTable as unknown).session, id));\n\n      // Return updated entity",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 308,
      "content": "await (this.drizzleDb.delete(sessionsTable) as unknown).where(eq((sessionsTable as unknown).session, id));",
      "context": "\n    try {\n      await (this.drizzleDb.delete(sessionsTable) as unknown).where(eq((sessionsTable as unknown).session, id));\n\n      // Since Drizzle doesn't return changes count, we'll check if the entity existed",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 328,
      "content": ".where(eq(sessionsTable.session, id)) as unknown).limit(1);",
      "context": "        .select({ count: sessionsTable.session })\n        .from(sessionsTable)\n        .where(eq(sessionsTable.session, id)) as unknown).limit(1);\n\n      return result.length > 0 as unknown;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 330,
      "content": "return result.length > 0 as unknown;",
      "context": "        .where(eq(sessionsTable.session, id)) as unknown).limit(1);\n\n      return result.length > 0 as unknown;\n    } catch (error) {\n      log.error(\"Failed to check entity existence in SQLite\", { error, id });",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 358,
      "content": "return new SqliteStorage<TEntity, TState>(config as unknown);",
      "context": "  config: SqliteStorageConfig\n): DatabaseStorage<TEntity, TState> {\n  return new SqliteStorage<TEntity, TState>(config as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/cli/utils/index.ts",
      "line": 50,
      "content": "if ((options as unknown)!.json) {",
      "context": "\n  try {\n    if ((options as unknown)!.json) {\n      // JSON output\n      log.cli(JSON.stringify(result as unknown, undefined, 2));",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/index.ts",
      "line": 52,
      "content": "log.cli(JSON.stringify(result as unknown, undefined, 2));",
      "context": "    if ((options as unknown)!.json) {\n      // JSON output\n      log.cli(JSON.stringify(result as unknown, undefined, 2));\n    } else if ((options as unknown)!.formatter) {\n      // Custom formatter",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/adapters/cli/utils/index.ts",
      "line": 53,
      "content": "} else if ((options as unknown)!.formatter) {",
      "context": "      // JSON output\n      log.cli(JSON.stringify(result as unknown, undefined, 2));\n    } else if ((options as unknown)!.formatter) {\n      // Custom formatter\n      (options as unknown)!.formatter(result as unknown);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/index.ts",
      "line": 55,
      "content": "(options as unknown)!.formatter(result as unknown);",
      "context": "    } else if ((options as unknown)!.formatter) {\n      // Custom formatter\n      (options as unknown)!.formatter(result as unknown);\n    } else {\n      // Default output based on result type",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/index.ts",
      "line": 59,
      "content": "log.cli(result as unknown);",
      "context": "      // Default output based on result type\n      if (typeof result === \"string\") {\n        log.cli(result as unknown);\n      } else if (typeof result === \"object\" && result !== null) {\n        if (Array.isArray(result as unknown)) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/index.ts",
      "line": 61,
      "content": "if (Array.isArray(result as unknown)) {",
      "context": "        log.cli(result as unknown);\n      } else if (typeof result === \"object\" && result !== null) {\n        if (Array.isArray(result as unknown)) {\n          (result as unknown)!.forEach((item) => {\n            if (typeof item === \"string\") {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/index.ts",
      "line": 62,
      "content": "(result as unknown)!.forEach((item) => {",
      "context": "      } else if (typeof result === \"object\" && result !== null) {\n        if (Array.isArray(result as unknown)) {\n          (result as unknown)!.forEach((item) => {\n            if (typeof item === \"string\") {\n              log.cli(item as unknown);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/index.ts",
      "line": 64,
      "content": "log.cli(item as unknown);",
      "context": "          (result as unknown)!.forEach((item) => {\n            if (typeof item === \"string\") {\n              log.cli(item as unknown);\n            } else {\n              log.cli(JSON.stringify(item as unknown, undefined, 2));",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/index.ts",
      "line": 66,
      "content": "log.cli(JSON.stringify(item as unknown, undefined, 2));",
      "context": "              log.cli(item as unknown);\n            } else {\n              log.cli(JSON.stringify(item as unknown, undefined, 2));\n            }\n          });",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/adapters/cli/utils/index.ts",
      "line": 70,
      "content": "log.cli(JSON.stringify(result as unknown, undefined, 2));",
      "context": "          });\n        } else {\n          log.cli(JSON.stringify(result as unknown, undefined, 2));\n        }\n      } else {",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/adapters/cli/utils/index.ts",
      "line": 73,
      "content": "log.cli(String(result as unknown));",
      "context": "        }\n      } else {\n        log.cli(String(result as unknown));\n      }\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/shared-options.ts",
      "line": 93,
      "content": ".option(\"--repo <repositoryUri>\", REPO_DESCRIPTION) as unknown).option(\"--upstream-repo <upstreamRepoUri>\", UPSTREAM_REPO_DESCRIPTION);",
      "context": "  return (command\n    .option(\"--session <session>\", SESSION_DESCRIPTION)\n    .option(\"--repo <repositoryUri>\", REPO_DESCRIPTION) as unknown).option(\"--upstream-repo <upstreamRepoUri>\", UPSTREAM_REPO_DESCRIPTION);\n}\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/shared-options.ts",
      "line": 148,
      "content": "session: (options as unknown).session,",
      "context": "} {\n  return {\n    session: (options as unknown).session,\n    repo: (options as unknown).repo,\n    workspace: (options as unknown)[\"upstream-repo\"],",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/shared-options.ts",
      "line": 149,
      "content": "repo: (options as unknown).repo,",
      "context": "  return {\n    session: (options as unknown).session,\n    repo: (options as unknown).repo,\n    workspace: (options as unknown)[\"upstream-repo\"],\n  };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/shared-options.ts",
      "line": 150,
      "content": "workspace: (options as unknown)[\"upstream-repo\"],",
      "context": "    session: (options as unknown).session,\n    repo: (options as unknown).repo,\n    workspace: (options as unknown)[\"upstream-repo\"],\n  };\n}",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/cli/utils/shared-options.ts",
      "line": 165,
      "content": "json: (options as unknown).json,",
      "context": "} {\n  return {\n    json: (options as unknown).json,\n    debug: (options as unknown).debug,\n  };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/shared-options.ts",
      "line": 166,
      "content": "debug: (options as unknown).debug,",
      "context": "  return {\n    json: (options as unknown).json,\n    debug: (options as unknown).debug,\n  };\n}",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/shared-options.ts",
      "line": 181,
      "content": "const taskId = (options as unknown).task ? normalizeTaskId((options as unknown).task) : undefined;",
      "context": "  // If task ID is provided, normalize it\n  // normalizeTaskId can return null, so handle that case\n  const taskId = (options as unknown).task ? normalizeTaskId((options as unknown).task) : undefined;\n\n  return {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/shared-options.ts",
      "line": 204,
      "content": "...normalizeRepoOptions(options as unknown),",
      "context": "} {\n  return {\n    ...normalizeRepoOptions(options as unknown),\n    ...normalizeOutputOptions(options as unknown),\n    backend: (options as unknown).backend,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/shared-options.ts",
      "line": 205,
      "content": "...normalizeOutputOptions(options as unknown),",
      "context": "  return {\n    ...normalizeRepoOptions(options as unknown),\n    ...normalizeOutputOptions(options as unknown),\n    backend: (options as unknown).backend,\n  };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/shared-options.ts",
      "line": 206,
      "content": "backend: (options as unknown).backend,",
      "context": "    ...normalizeRepoOptions(options as unknown),\n    ...normalizeOutputOptions(options as unknown),\n    backend: (options as unknown).backend,\n  };\n}",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/shared-options.ts",
      "line": 226,
      "content": "...normalizeRepoOptions(options as unknown),",
      "context": "} {\n  return {\n    ...normalizeRepoOptions(options as unknown),\n    ...normalizeOutputOptions(options as unknown),\n    ...normalizeTaskOptions(options as unknown),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/shared-options.ts",
      "line": 227,
      "content": "...normalizeOutputOptions(options as unknown),",
      "context": "  return {\n    ...normalizeRepoOptions(options as unknown),\n    ...normalizeOutputOptions(options as unknown),\n    ...normalizeTaskOptions(options as unknown),\n  };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/shared-options.ts",
      "line": 228,
      "content": "...normalizeTaskOptions(options as unknown),",
      "context": "    ...normalizeRepoOptions(options as unknown),\n    ...normalizeOutputOptions(options as unknown),\n    ...normalizeTaskOptions(options as unknown),\n  };\n}",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/error-handler.ts",
      "line": 26,
      "content": "(typeof process.env.NODE_DEBUG === \"string\" && (process.env.NODE_DEBUG as unknown).includes(\"minsky\"));",
      "context": "  process.env.DEBUG === \"true\" ||\n  process.env.DEBUG === \"1\" ||\n  (typeof process.env.NODE_DEBUG === \"string\" && (process.env.NODE_DEBUG as unknown).includes(\"minsky\"));\n\n/**",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/error-handler.ts",
      "line": 46,
      "content": "log.cliError(`Validation error: ${(normalizedError as unknown).message}`);",
      "context": "  if (error instanceof ValidationError) {\n    // Use cliError for human-readable output (stderr)\n    log.cliError(`Validation error: ${(normalizedError as unknown).message}`);\n\n    // Show validation details in debug mode",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/error-handler.ts",
      "line": 79,
      "content": "log.cliError(`Error: ${(normalizedError as unknown).message}`);",
      "context": "    }\n  } else if (error instanceof MinskyError) {\n    log.cliError(`Error: ${(normalizedError as unknown).message}`);\n  } else {\n    log.cliError(`Unexpected error: ${(normalizedError as unknown).message}`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/error-handler.ts",
      "line": 81,
      "content": "log.cliError(`Unexpected error: ${(normalizedError as unknown).message}`);",
      "context": "    log.cliError(`Error: ${(normalizedError as unknown).message}`);\n  } else {\n    log.cliError(`Unexpected error: ${(normalizedError as unknown).message}`);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/error-handler.ts",
      "line": 87,
      "content": "if ((normalizedError as unknown).stack) {",
      "context": "  if (isDebugMode()) {\n    log.cliError(\"\\nDebug information:\");\n    if ((normalizedError as unknown).stack) {\n      log.cliError((normalizedError as unknown).stack);\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/error-handler.ts",
      "line": 88,
      "content": "log.cliError((normalizedError as unknown).stack);",
      "context": "    log.cliError(\"\\nDebug information:\");\n    if ((normalizedError as unknown).stack) {\n      log.cliError((normalizedError as unknown).stack);\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/error-handler.ts",
      "line": 92,
      "content": "if (normalizedError instanceof MinskyError && (normalizedError as unknown).cause) {",
      "context": "\n    // Log cause chain if available\n    if (normalizedError instanceof MinskyError && (normalizedError as unknown).cause) {\n      log.cliError(\"\\nCaused by:\");\n      const cause = (normalizedError as unknown).cause;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/error-handler.ts",
      "line": 94,
      "content": "const cause = (normalizedError as unknown).cause;",
      "context": "    if (normalizedError instanceof MinskyError && (normalizedError as unknown).cause) {\n      log.cliError(\"\\nCaused by:\");\n      const cause = (normalizedError as unknown).cause;\n      if (cause instanceof Error) {\n        log.cliError((cause as unknown).stack || (cause as unknown).message);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/error-handler.ts",
      "line": 96,
      "content": "log.cliError((cause as unknown).stack || (cause as unknown).message);",
      "context": "      const cause = (normalizedError as unknown).cause;\n      if (cause instanceof Error) {\n        log.cliError((cause as unknown).stack || (cause as unknown).message);\n      } else {\n        log.cliError(String(cause));",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/error-handler.ts",
      "line": 108,
      "content": "log.error(\"CLI operation failed\", error as unknown);",
      "context": "    if (error instanceof MinskyError) {\n      // For Minsky errors, we can log with additional context\n      log.error(\"CLI operation failed\", error as unknown);\n    } else {\n      // For other errors, log with basic information",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/error-handler.ts",
      "line": 112,
      "content": "message: (normalizedError as unknown).message,",
      "context": "      // For other errors, log with basic information\n      log.error(\"CLI operation failed\", {\n        message: (normalizedError as unknown).message,\n        stack: (normalizedError as unknown).stack,\n      });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/error-handler.ts",
      "line": 113,
      "content": "stack: (normalizedError as unknown).stack,",
      "context": "      log.error(\"CLI operation failed\", {\n        message: (normalizedError as unknown).message,\n        stack: (normalizedError as unknown).stack,\n      });\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/error-handler.ts",
      "line": 131,
      "content": "if ((options as unknown).json) {",
      "context": "  options: { json?: boolean; formatter?: (result: any) => void }\n): void {\n  if ((options as unknown).json) {\n    // For JSON output, use agent logger to ensure it goes to stdout\n    // This ensures machine-readable output is separated from human-readable messages",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/error-handler.ts",
      "line": 136,
      "content": "log.agent({ message: \"Command result\", result } as unknown);",
      "context": "    if (isStructuredMode()) {\n      // In structured mode, log to agent logger\n      log.agent({ message: \"Command result\", result } as unknown);\n    } else {\n      // In human mode or when json is explicitly requested, write directly to stdout",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/error-handler.ts",
      "line": 139,
      "content": "log.cli(JSON.stringify(result as unknown, undefined, 2));",
      "context": "    } else {\n      // In human mode or when json is explicitly requested, write directly to stdout\n      log.cli(JSON.stringify(result as unknown, undefined, 2));\n    }\n  } else if ((options as unknown).formatter) {",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/adapters/cli/utils/error-handler.ts",
      "line": 141,
      "content": "} else if ((options as unknown).formatter) {",
      "context": "      log.cli(JSON.stringify(result as unknown, undefined, 2));\n    }\n  } else if ((options as unknown).formatter) {\n    (options as unknown).formatter(result as unknown);\n  } else {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/error-handler.ts",
      "line": 142,
      "content": "(options as unknown).formatter(result as unknown);",
      "context": "    }\n  } else if ((options as unknown).formatter) {\n    (options as unknown).formatter(result as unknown);\n  } else {\n    log.cli(String(result as unknown));",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/utils/error-handler.ts",
      "line": 144,
      "content": "log.cli(String(result as unknown));",
      "context": "    (options as unknown).formatter(result as unknown);\n  } else {\n    log.cli(String(result as unknown));\n  }\n}",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 28,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "      // Arrange\n      const repoPath = \"/Users/test/.local/state/minsky/sessions/session-name\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      // Override environment variables for testing",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 49,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "      // Arrange\n      const repoPath = \"/Users/test/projects/non-session-repo\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      // Act",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 66,
      "content": "const result = await isSessionWorkspace(repoPath, execAsyncMock as unknown);",
      "context": "\n      // Act\n      const result = await isSessionWorkspace(repoPath, execAsyncMock as unknown);\n\n      // Assert",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 75,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "      // Arrange\n      const repoPath = \"/Users/test/.local/state/minsky/sessions/session-name\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      // Override environment variables for testing",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 99,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "      // Arrange\n      const repoPath = \"/Users/test/.local/state/minsky/sessions/session-name\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      // Set up environment for testing",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 115,
      "content": "} as unknown;",
      "context": "          createdAt: new Date().toISOString(),\n        }),\n      } as unknown;\n\n      try {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 136,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "      // Arrange\n      const repoPath = \"/Users/test/projects/non-session-repo\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      // Act",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 148,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "      // Arrange\n      const repoPath = \"/Users/test/.local/state/minsky/sessions/unknown-session\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      // Set up environment for testing",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 174,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "      // Arrange\n      const repoPath = \"/Users/test/.local/state/minsky/sessions/session-name\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      // Set up environment for testing",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 189,
      "content": "} as unknown;",
      "context": "          createdAt: new Date().toISOString(),\n        }),\n      } as unknown;\n\n      try {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 209,
      "content": "const execAsyncMock = mockGitRootExecAsync(sessionPath) as unknown;",
      "context": "      // Arrange\n      const sessionPath = \"/Users/test/.local/state/minsky/sessions/session-name\";\n      const execAsyncMock = mockGitRootExecAsync(sessionPath) as unknown;\n\n      // Set up environment for testing",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 225,
      "content": "} as unknown;",
      "context": "          createdAt: new Date().toISOString(),\n        }),\n      } as unknown;\n\n      try {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 242,
      "content": "const execAsyncMock = mockGitRootExecAsync(notSessionPath) as unknown;",
      "context": "      // Arrange\n      const notSessionPath = \"/Users/test/projects/non-session\";\n      const execAsyncMock = mockGitRootExecAsync(notSessionPath) as unknown;\n\n      // Act",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 253,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "    test(\"getCurrentSession returns null when repo path does not exist\", async () => {\n      const repoPath = \"/Users/test/.local/state/minsky/sessions/session-name\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      const result = await getCurrentSession(repoPath, execAsyncMock);",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 261,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "    test(\"getCurrentSession returns null when repoUrl is not found\", async () => {\n      const repoPath = \"/Users/test/.local/state/minsky/sessions/session-name\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      const result = await getCurrentSession(repoPath, execAsyncMock);",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 269,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "    test(\"getCurrentSession returns null when session data doesn't match file structure\", async () => {\n      const repoPath = \"/Users/test/.local/state/minsky/sessions/session-name\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      const result = await getCurrentSession(repoPath, execAsyncMock);",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 277,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "    test(\"getCurrentSession returns null when session doesn't exist\", async () => {\n      const repoPath = \"/Users/test/.local/state/minsky/sessions/unknown-session\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      const result = await getCurrentSession(repoPath, execAsyncMock);",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 285,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "    test(\"getCurrentSession returns session info when valid\", async () => {\n      const repoPath = \"/Users/test/.local/state/minsky/sessions/session-name\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      const result = await getCurrentSession(repoPath, execAsyncMock);",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 370,
      "content": "const execAsyncMock = mockGitRootExecAsync(sessionPath) as unknown;",
      "context": "      const testPath = `${sessionPath}/some/nested/path`;\n\n      const execAsyncMock = mockGitRootExecAsync(sessionPath) as unknown;\n\n      const result = await getSessionFromWorkspace(testPath, execAsyncMock);",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/adapters/cli/tasks/specCommand.ts",
      "line": 24,
      "content": ".argument(\"<task-id>\", \"ID of the task to retrieve specification _content for\") as unknown).option(",
      "context": "  const command = (new Command(\"spec\")\n    .description(\"Get task specification _content\")\n    .argument(\"<task-id>\", \"ID of the task to retrieve specification _content for\") as unknown).option(\n    \"--section <section>\",\n    \"Specific section of the specification to retrieve (e.g., 'requirements')\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/tasks/specCommand.ts",
      "line": 56,
      "content": "const normalizedParams = normalizeTaskParams(options as unknown);",
      "context": "\n        // Convert CLI options to domain parameters using normalization helper\n        const normalizedParams = normalizeTaskParams(options as unknown);\n\n        // Convert CLI options to domain parameters",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/cli/tasks/specCommand.ts",
      "line": 62,
      "content": "section: (options as unknown).section,",
      "context": "          ...normalizedParams,\n          taskId: normalizedTaskId,\n          section: (options as unknown).section,\n        } as unknown;\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/tasks/specCommand.ts",
      "line": 63,
      "content": "} as unknown;",
      "context": "          taskId: normalizedTaskId,\n          section: (options as unknown).section,\n        } as unknown;\n\n        // Call the domain function",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/cli/tasks/specCommand.ts",
      "line": 66,
      "content": "const result = await getTaskSpecContentFromParams(params as unknown);",
      "context": "\n        // Call the domain function\n        const result = await getTaskSpecContentFromParams(params as unknown);\n\n        // Format and display the result",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/cli/tasks/specCommand.ts",
      "line": 69,
      "content": "outputResult(result as unknown, {",
      "context": "\n        // Format and display the result\n        outputResult(result as unknown, {\n          json: (options as unknown).json,\n          formatter: (data: any) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/cli/tasks/specCommand.ts",
      "line": 70,
      "content": "json: (options as unknown).json,",
      "context": "        // Format and display the result\n        outputResult(result as unknown, {\n          json: (options as unknown).json,\n          formatter: (data: any) => {\n            log.cli(`Task ${(data.task as unknown).id}: ${(data.task as unknown).title}`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/tasks/specCommand.ts",
      "line": 72,
      "content": "log.cli(`Task ${(data.task as unknown).id}: ${(data.task as unknown).title}`);",
      "context": "          json: (options as unknown).json,\n          formatter: (data: any) => {\n            log.cli(`Task ${(data.task as unknown).id}: ${(data.task as unknown).title}`);\n            log.cli(`Specification file: ${(data as unknown).specPath}`);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/tasks/specCommand.ts",
      "line": 73,
      "content": "log.cli(`Specification file: ${(data as unknown).specPath}`);",
      "context": "          formatter: (data: any) => {\n            log.cli(`Task ${(data.task as unknown).id}: ${(data.task as unknown).title}`);\n            log.cli(`Specification file: ${(data as unknown).specPath}`);\n\n            // If a specific section was requested, try to extract it",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/tasks/specCommand.ts",
      "line": 76,
      "content": "if ((data as unknown).section) {",
      "context": "\n            // If a specific section was requested, try to extract it\n            if ((data as unknown).section) {\n              // Simple extraction logic for common section patterns\n              const sectionRegex = new RegExp(`## ${(data as unknown).section}`, \"i\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/tasks/specCommand.ts",
      "line": 78,
      "content": "const sectionRegex = new RegExp(`## ${(data as unknown).section}`, \"i\");",
      "context": "            if ((data as unknown).section) {\n              // Simple extraction logic for common section patterns\n              const sectionRegex = new RegExp(`## ${(data as unknown).section}`, \"i\");\n              const match = (data.content as unknown).match(sectionRegex);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/tasks/specCommand.ts",
      "line": 79,
      "content": "const match = (data.content as unknown).match(sectionRegex);",
      "context": "              // Simple extraction logic for common section patterns\n              const sectionRegex = new RegExp(`## ${(data as unknown).section}`, \"i\");\n              const match = (data.content as unknown).match(sectionRegex);\n\n              if (match && match.index !== undefined) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/tasks/specCommand.ts",
      "line": 84,
      "content": "const nextSectionMatch = ((data.content as unknown).slice(startIndex + match[0].length) as unknown).match(/^## /m);",
      "context": "                const startIndex = match.index;\n                // Find the next section or the end of the file\n                const nextSectionMatch = ((data.content as unknown).slice(startIndex + match[0].length) as unknown).match(/^## /m);\n                const endIndex = nextSectionMatch\n                  ? startIndex + match[0].length + (nextSectionMatch as unknown).index",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/tasks/specCommand.ts",
      "line": 86,
      "content": "? startIndex + match[0].length + (nextSectionMatch as unknown).index",
      "context": "                const nextSectionMatch = ((data.content as unknown).slice(startIndex + match[0].length) as unknown).match(/^## /m);\n                const endIndex = nextSectionMatch\n                  ? startIndex + match[0].length + (nextSectionMatch as unknown).index\n                  : data.content.length;\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/tasks/specCommand.ts",
      "line": 89,
      "content": "const sectionContent = (((data.content.slice(startIndex, endIndex)) as unknown).toString() as unknown).trim();",
      "context": "                  : data.content.length;\n\n                const sectionContent = (((data.content.slice(startIndex, endIndex)) as unknown).toString() as unknown).trim();\n                log.cli(`\\n${sectionContent}`);\n              } else {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/tasks/specCommand.ts",
      "line": 92,
      "content": "log.cli(`\\nSection \"${(data as unknown).section}\" not found in specification.`);",
      "context": "                log.cli(`\\n${sectionContent}`);\n              } else {\n                log.cli(`\\nSection \"${(data as unknown).section}\" not found in specification.`);\n                log.cli(\"\\nFull specification content:\");\n                log.cli((data as unknown).content);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/tasks/specCommand.ts",
      "line": 94,
      "content": "log.cli((data as unknown).content);",
      "context": "                log.cli(`\\nSection \"${(data as unknown).section}\" not found in specification.`);\n                log.cli(\"\\nFull specification content:\");\n                log.cli((data as unknown).content);\n              }\n            } else {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/cli/tasks/specCommand.ts",
      "line": 99,
      "content": "log.cli((data as unknown).content);",
      "context": "              // Display the full content\n              log.cli(\"\\nSpecification content:\");\n              log.cli((data as unknown).content);\n            }\n          },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/git.ts",
      "line": 366,
      "content": "}) as unknown;",
      "context": "        repo: params!.repo,\n        session: params!.session,\n      }) as unknown;\n\n      return {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/commands/git.ts",
      "line": 372,
      "content": "} as unknown;",
      "context": "        commitHash: result!.commitHash,\n        message: result!.message,\n      } as unknown;\n    },\n  });",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/commands/git.ts",
      "line": 392,
      "content": "}) as unknown;",
      "context": "        force: params!.force,\n        debug: params!.debug,\n      }) as unknown;\n\n      return {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/commands/git.ts",
      "line": 397,
      "content": "} as unknown;",
      "context": "        success: result!.pushed,\n        workdir: result!.workdir,\n      } as unknown;\n    },\n  });",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/commands/git.ts",
      "line": 416,
      "content": "}) as unknown;",
      "context": "        session: params!.session,\n        branch: params!.branch,\n      }) as unknown;\n\n      return {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/commands/git.ts",
      "line": 422,
      "content": "} as unknown;",
      "context": "        workdir: result!.workdir,\n        session: result!.session,\n      } as unknown;\n    },\n  });",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/commands/git.ts",
      "line": 439,
      "content": "}) as unknown;",
      "context": "        session: params!.session,\n        name: params!.name,\n      }) as unknown;\n\n      return {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/commands/git.ts",
      "line": 445,
      "content": "} as unknown;",
      "context": "        workdir: result!.workdir,\n        branch: result!.branch,\n      } as unknown;\n    },\n  });",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/commands/git.ts",
      "line": 466,
      "content": "}) as unknown;",
      "context": "        debug: params!.debug,\n        noStatusUpdate: params!.noStatusUpdate,\n      }) as unknown;\n\n      return {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/commands/git.ts",
      "line": 472,
      "content": "} as unknown;",
      "context": "        markdown: result!.markdown,\n        statusUpdateResult: result!.statusUpdateResult,\n      } as unknown;\n    },\n  });",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 66,
      "content": "schema: (z.boolean() as unknown).default(false),",
      "context": "  },\n  json: {\n    schema: (z.boolean() as unknown).default(false),\n    description: \"Output in JSON format\",\n    required: false,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 114,
      "content": "schema: (z.boolean() as unknown).default(false),",
      "context": "  },\n  json: {\n    schema: (z.boolean() as unknown).default(false),\n    description: \"Output in JSON format\",\n    required: false,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 155,
      "content": "schema: (z.boolean() as unknown).default(false),",
      "context": "  },\n  json: {\n    schema: (z.boolean() as unknown).default(false),\n    description: \"Output in JSON format\",\n    required: false,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 166,
      "content": "category: (CommandCategory as unknown).TASKS,",
      "context": "const tasksStatusGetRegistration = {\n  id: \"tasks.status.get\",\n  category: (CommandCategory as unknown).TASKS,\n  name: \"status get\",\n  description: \"Get the status of a task\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 171,
      "content": "const normalizedTaskId = normalizeTaskId((params as unknown)!.taskId);",
      "context": "  parameters: tasksStatusGetParams,\n  execute: async (params, ctx: CommandExecutionContext) => {\n    const normalizedTaskId = normalizeTaskId((params as unknown)!.taskId);\n    if (!normalizedTaskId) {\n      throw new ValidationError(",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 174,
      "content": "`Invalid task ID: '${(params as unknown)!.taskId}'. Please provide a valid numeric task ID (e.g., 077 or #077).`",
      "context": "    if (!normalizedTaskId) {\n      throw new ValidationError(\n        `Invalid task ID: '${(params as unknown)!.taskId}'. Please provide a valid numeric task ID (e.g., 077 or #077).`\n      );\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 194,
      "content": "category: (CommandCategory as unknown).TASKS,",
      "context": "const tasksStatusSetRegistration = {\n  id: \"tasks.status.set\",\n  category: (CommandCategory as unknown).TASKS,\n  name: \"status set\",\n  description: \"Set the status of a task\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 200,
      "content": "if (!(params as unknown)!.taskId) throw new ValidationError(\"Missing required parameter: taskId\");",
      "context": "  execute: async (params, _ctx: CommandExecutionContext) => {\n    log.debug(\"Starting tasks.status.set execution\");\n    if (!(params as unknown)!.taskId) throw new ValidationError(\"Missing required parameter: taskId\");\n\n    // Normalize and validate task ID first",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 204,
      "content": "const normalizedTaskId = normalizeTaskId((params as unknown)!.taskId);",
      "context": "    // Normalize and validate task ID first\n    log.debug(\"About to normalize task ID\");\n    const normalizedTaskId = normalizeTaskId((params as unknown)!.taskId);\n    if (!normalizedTaskId) {\n      throw new ValidationError(",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 207,
      "content": "`Invalid task ID: '${(params as unknown)!.taskId}'. Please provide a valid numeric task ID (e.g., 077 or #077).`",
      "context": "    if (!normalizedTaskId) {\n      throw new ValidationError(\n        `Invalid task ID: '${(params as unknown)!.taskId}'. Please provide a valid numeric task ID (e.g., 077 or #077).`\n      );\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 216,
      "content": "repo: (params as unknown)!.repo,",
      "context": "    const previousStatus = await getTaskStatusFromParams({\n      taskId: normalizedTaskId,\n      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 217,
      "content": "workspace: (params as unknown)!.workspace,",
      "context": "      taskId: normalizedTaskId,\n      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,\n      backend: (params as unknown)!.backend,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 218,
      "content": "session: (params as unknown)!.session,",
      "context": "      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,\n      backend: (params as unknown)!.backend,\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 219,
      "content": "backend: (params as unknown)!.backend,",
      "context": "      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,\n      backend: (params as unknown)!.backend,\n    });\n    log.debug(\"Previous status retrieved successfully\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 223,
      "content": "let status = (params as unknown)!.status;",
      "context": "    log.debug(\"Previous status retrieved successfully\");\n\n    let status = (params as unknown)!.status;\n\n    // If status is not provided, prompt for it interactively",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 228,
      "content": "if (!(process.stdout as unknown).isTTY) {",
      "context": "    if (!status) {\n      // Check if we're in an interactive environment\n      if (!(process.stdout as unknown).isTTY) {\n        throw new ValidationError(\"Status parameter is required in non-interactive mode\");\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 244,
      "content": "(option) => (option as unknown)?.value === previousStatus",
      "context": "      // Find the index of the current status to pre-select it\n      const currentStatusIndex = statusOptions.findIndex(\n        (option) => (option as unknown)?.value === previousStatus\n      );\n      const initialIndex = currentStatusIndex >= 0 ? currentStatusIndex : 0; // Default to TODO if current status not found",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 270,
      "content": "repo: (params as unknown)!.repo,",
      "context": "      taskId: normalizedTaskId,\n      status: status,\n      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 271,
      "content": "workspace: (params as unknown)!.workspace,",
      "context": "      status: status,\n      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,\n      backend: (params as unknown)!.backend,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 272,
      "content": "session: (params as unknown)!.session,",
      "context": "      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,\n      backend: (params as unknown)!.backend,\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 273,
      "content": "backend: (params as unknown)!.backend,",
      "context": "      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,\n      backend: (params as unknown)!.backend,\n    });\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 290,
      "content": "category: (CommandCategory as unknown).TASKS,",
      "context": "const tasksSpecRegistration = {\n  id: \"tasks.spec\",\n  category: (CommandCategory as unknown).TASKS,\n  name: \"spec\",\n  description: \"Get task specification content\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 296,
      "content": "const normalizedTaskId = normalizeTaskId((params as unknown)!.taskId);",
      "context": "  execute: async (params, ctx: CommandExecutionContext) => {\n    try {\n      const normalizedTaskId = normalizeTaskId((params as unknown)!.taskId);\n      if (!normalizedTaskId) {\n        throw new ValidationError(",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 299,
      "content": "`Invalid task ID: '${(params as unknown)!.taskId}'. Please provide a valid numeric task ID (e.g., 077 or #077).`",
      "context": "      if (!normalizedTaskId) {\n        throw new ValidationError(\n          `Invalid task ID: '${(params as unknown)!.taskId}'. Please provide a valid numeric task ID (e.g., 077 or #077).`\n        );\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 341,
      "content": "schema: (z.boolean() as unknown).default(false),",
      "context": "  },\n  all: {\n    schema: (z.boolean() as unknown).default(false),\n    description: \"Include completed tasks\",\n    required: false,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 366,
      "content": "schema: (z.boolean() as unknown).default(false),",
      "context": "  },\n  json: {\n    schema: (z.boolean() as unknown).default(false),\n    description: \"Output in JSON format\",\n    required: false,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 402,
      "content": "schema: (z.boolean() as unknown).default(false),",
      "context": "  },\n  json: {\n    schema: (z.boolean() as unknown).default(false),\n    description: \"Output in JSON format\",\n    required: false,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 428,
      "content": "schema: (z.boolean() as unknown).default(false),",
      "context": "  },\n  force: {\n    schema: (z.boolean() as unknown).default(false),\n    description: \"Force creation even if task already exists\",\n    required: false,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 454,
      "content": "schema: (z.boolean() as unknown).default(false),",
      "context": "  },\n  json: {\n    schema: (z.boolean() as unknown).default(false),\n    description: \"Output in JSON format\",\n    required: false,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 465,
      "content": "category: (CommandCategory as unknown).TASKS,",
      "context": "const tasksListRegistration = {\n  id: \"tasks.list\",\n  category: (CommandCategory as unknown).TASKS,\n  name: \"list\",\n  description: \"List tasks with optional filtering\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 488,
      "content": "category: (CommandCategory as unknown).TASKS,",
      "context": "const tasksGetRegistration = {\n  id: \"tasks.get\",\n  category: (CommandCategory as unknown).TASKS,\n  name: \"get\",\n  description: \"Get a task by ID\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 493,
      "content": "if (!(params as unknown)!.taskId) throw new ValidationError(\"Missing required parameter: taskId\");",
      "context": "  parameters: tasksGetParams,\n  execute: async (params, ctx) => {\n    if (!(params as unknown)!.taskId) throw new ValidationError(\"Missing required parameter: taskId\");\n    return await getTaskFromParams({\n      taskId: (params as unknown)!.taskId,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 495,
      "content": "taskId: (params as unknown)!.taskId,",
      "context": "    if (!(params as unknown)!.taskId) throw new ValidationError(\"Missing required parameter: taskId\");\n    return await getTaskFromParams({\n      taskId: (params as unknown)!.taskId,\n      backend: (params as unknown)!.backend,\n      repo: (params as unknown)!.repo,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 496,
      "content": "backend: (params as unknown)!.backend,",
      "context": "    return await getTaskFromParams({\n      taskId: (params as unknown)!.taskId,\n      backend: (params as unknown)!.backend,\n      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 497,
      "content": "repo: (params as unknown)!.repo,",
      "context": "      taskId: (params as unknown)!.taskId,\n      backend: (params as unknown)!.backend,\n      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 498,
      "content": "workspace: (params as unknown)!.workspace,",
      "context": "      backend: (params as unknown)!.backend,\n      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 499,
      "content": "session: (params as unknown)!.session,",
      "context": "      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,\n    });\n  },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 509,
      "content": "category: (CommandCategory as unknown).TASKS,",
      "context": "const tasksCreateRegistration = {\n  id: \"tasks.create\",\n  category: (CommandCategory as unknown).TASKS,\n  name: \"create\",\n  description: \"Create a new task with --title and --description\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 515,
      "content": "if (!(params as unknown)!.title) {",
      "context": "  execute: async (params, ctx) => {\n    // Title is required by schema, but validate it's provided\n    if (!(params as unknown)!.title) {\n      throw new ValidationError(\"Title is required\");\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 520,
      "content": "if (!(params as unknown)!.description && !(params as unknown)!.descriptionPath) {",
      "context": "\n    // Validate that either description or descriptionPath is provided\n    if (!(params as unknown)!.description && !(params as unknown)!.descriptionPath) {\n      throw new ValidationError(\"Either --description or --description-path must be provided\");\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 525,
      "content": "if ((params as unknown)!.description && (params as unknown)!.descriptionPath) {",
      "context": "\n    // Both description and descriptionPath provided is an error\n    if ((params as unknown)!.description && (params as unknown)!.descriptionPath) {\n      throw new ValidationError(\n        \"Cannot provide both --description and --description-path - use one or the other\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 532,
      "content": "title: (params as unknown)!.title,",
      "context": "\n    return await createTaskFromTitleAndDescription({\n      title: (params as unknown)!.title,\n      description: (params as unknown)!.description,\n      descriptionPath: (params as unknown)!.descriptionPath,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 533,
      "content": "description: (params as unknown)!.description,",
      "context": "    return await createTaskFromTitleAndDescription({\n      title: (params as unknown)!.title,\n      description: (params as unknown)!.description,\n      descriptionPath: (params as unknown)!.descriptionPath,\n      force: (params as unknown)!.force ?? false,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 534,
      "content": "descriptionPath: (params as unknown)!.descriptionPath,",
      "context": "      title: (params as unknown)!.title,\n      description: (params as unknown)!.description,\n      descriptionPath: (params as unknown)!.descriptionPath,\n      force: (params as unknown)!.force ?? false,\n      backend: (params as unknown)!.backend,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 535,
      "content": "force: (params as unknown)!.force ?? false,",
      "context": "      description: (params as unknown)!.description,\n      descriptionPath: (params as unknown)!.descriptionPath,\n      force: (params as unknown)!.force ?? false,\n      backend: (params as unknown)!.backend,\n      repo: (params as unknown)!.repo,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 536,
      "content": "backend: (params as unknown)!.backend,",
      "context": "      descriptionPath: (params as unknown)!.descriptionPath,\n      force: (params as unknown)!.force ?? false,\n      backend: (params as unknown)!.backend,\n      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 537,
      "content": "repo: (params as unknown)!.repo,",
      "context": "      force: (params as unknown)!.force ?? false,\n      backend: (params as unknown)!.backend,\n      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 538,
      "content": "workspace: (params as unknown)!.workspace,",
      "context": "      backend: (params as unknown)!.backend,\n      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 539,
      "content": "session: (params as unknown)!.session,",
      "context": "      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,\n    });\n  },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 554,
      "content": "schema: (z.boolean() as unknown).default(false),",
      "context": "  },\n  force: {\n    schema: (z.boolean() as unknown).default(false),\n    description: \"Force deletion without confirmation\",\n    required: false,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 580,
      "content": "schema: (z.boolean() as unknown).default(false),",
      "context": "  },\n  json: {\n    schema: (z.boolean() as unknown).default(false),\n    description: \"Output in JSON format\",\n    required: false,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 591,
      "content": "category: (CommandCategory as unknown).TASKS,",
      "context": "const tasksDeleteRegistration = {\n  id: \"tasks.delete\",\n  category: (CommandCategory as unknown).TASKS,\n  name: \"delete\",\n  description: \"Delete a task\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 596,
      "content": "if (!(params as unknown)!.taskId) throw new ValidationError(\"Missing required parameter: taskId\");",
      "context": "  parameters: tasksDeleteParams,\n  execute: async (params, ctx) => {\n    if (!(params as unknown)!.taskId) throw new ValidationError(\"Missing required parameter: taskId\");\n\n    // Handle confirmation if force is not set and we're in interactive mode",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 599,
      "content": "if (!(params as unknown)!.force && !(params as unknown)!.json) {",
      "context": "\n    // Handle confirmation if force is not set and we're in interactive mode\n    if (!(params as unknown)!.force && !(params as unknown)!.json) {\n      // Get task details for confirmation\n      const task = await getTaskFromParams({",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 602,
      "content": "taskId: (params as unknown)!.taskId,",
      "context": "      // Get task details for confirmation\n      const task = await getTaskFromParams({\n        taskId: (params as unknown)!.taskId,\n        backend: (params as unknown)!.backend,\n        repo: (params as unknown)!.repo,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 603,
      "content": "backend: (params as unknown)!.backend,",
      "context": "      const task = await getTaskFromParams({\n        taskId: (params as unknown)!.taskId,\n        backend: (params as unknown)!.backend,\n        repo: (params as unknown)!.repo,\n        workspace: (params as unknown)!.workspace,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 604,
      "content": "repo: (params as unknown)!.repo,",
      "context": "        taskId: (params as unknown)!.taskId,\n        backend: (params as unknown)!.backend,\n        repo: (params as unknown)!.repo,\n        workspace: (params as unknown)!.workspace,\n        session: (params as unknown)!.session,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 605,
      "content": "workspace: (params as unknown)!.workspace,",
      "context": "        backend: (params as unknown)!.backend,\n        repo: (params as unknown)!.repo,\n        workspace: (params as unknown)!.workspace,\n        session: (params as unknown)!.session,\n      });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 606,
      "content": "session: (params as unknown)!.session,",
      "context": "        repo: (params as unknown)!.repo,\n        workspace: (params as unknown)!.workspace,\n        session: (params as unknown)!.session,\n      });\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 613,
      "content": "message: `Are you sure you want to delete task ${(task as unknown)!.id}: \"${(task as unknown)!.title}\"?`,",
      "context": "\n      const shouldDelete = await confirm({\n        message: `Are you sure you want to delete task ${(task as unknown)!.id}: \"${(task as unknown)!.title}\"?`,\n      });\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 620,
      "content": "taskId: (params as unknown)!.taskId,",
      "context": "          success: false,\n          message: \"Task deletion cancelled\",\n          taskId: (params as unknown)!.taskId,\n        };\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 626,
      "content": "taskId: (params as unknown)!.taskId,",
      "context": "\n    const result = await deleteTaskFromParams({\n      taskId: (params as unknown)!.taskId,\n      force: (params as unknown)!.force ?? false,\n      backend: (params as unknown)!.backend,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 627,
      "content": "force: (params as unknown)!.force ?? false,",
      "context": "    const result = await deleteTaskFromParams({\n      taskId: (params as unknown)!.taskId,\n      force: (params as unknown)!.force ?? false,\n      backend: (params as unknown)!.backend,\n      repo: (params as unknown)!.repo,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 628,
      "content": "backend: (params as unknown)!.backend,",
      "context": "      taskId: (params as unknown)!.taskId,\n      force: (params as unknown)!.force ?? false,\n      backend: (params as unknown)!.backend,\n      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 629,
      "content": "repo: (params as unknown)!.repo,",
      "context": "      force: (params as unknown)!.force ?? false,\n      backend: (params as unknown)!.backend,\n      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 630,
      "content": "workspace: (params as unknown)!.workspace,",
      "context": "      backend: (params as unknown)!.backend,\n      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,\n    }) as unknown;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 631,
      "content": "session: (params as unknown)!.session,",
      "context": "      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,\n    }) as unknown;\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 632,
      "content": "}) as unknown;",
      "context": "      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,\n    }) as unknown;\n\n    const message = (result as unknown)!.success",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 634,
      "content": "const message = (result as unknown)!.success",
      "context": "    }) as unknown;\n\n    const message = (result as unknown)!.success\n      ? `Task ${(result as unknown)!.taskId} deleted successfully`\n      : `Failed to delete task ${(result as unknown)!.taskId}`;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 635,
      "content": "? `Task ${(result as unknown)!.taskId} deleted successfully`",
      "context": "\n    const message = (result as unknown)!.success\n      ? `Task ${(result as unknown)!.taskId} deleted successfully`\n      : `Failed to delete task ${(result as unknown)!.taskId}`;\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 636,
      "content": ": `Failed to delete task ${(result as unknown)!.taskId}`;",
      "context": "    const message = (result as unknown)!.success\n      ? `Task ${(result as unknown)!.taskId} deleted successfully`\n      : `Failed to delete task ${(result as unknown)!.taskId}`;\n\n    // Return different formats based on --json flag",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 639,
      "content": "if ((params as unknown)!.json) {",
      "context": "\n    // Return different formats based on --json flag\n    if ((params as unknown)!.json) {\n      // Structured output for programmatic use\n      return {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 642,
      "content": "success: (result as unknown)!.success,",
      "context": "      // Structured output for programmatic use\n      return {\n        success: (result as unknown)!.success,\n        taskId: (result as unknown)!.taskId,\n        task: (result as unknown)!.task,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 643,
      "content": "taskId: (result as unknown)!.taskId,",
      "context": "      return {\n        success: (result as unknown)!.success,\n        taskId: (result as unknown)!.taskId,\n        task: (result as unknown)!.task,\n        message: message,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 644,
      "content": "task: (result as unknown)!.task,",
      "context": "        success: (result as unknown)!.success,\n        taskId: (result as unknown)!.taskId,\n        task: (result as unknown)!.task,\n        message: message,\n      } as unknown;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 646,
      "content": "} as unknown;",
      "context": "        task: (result as unknown)!.task,\n        message: message,\n      } as unknown;\n    } else {\n      // Simple message for user-friendly output",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 656,
      "content": "(sharedCommandRegistry as unknown).registerCommand(tasksListRegistration);",
      "context": "export function registerTasksCommands() {\n  // Register tasks.list command\n  (sharedCommandRegistry as unknown).registerCommand(tasksListRegistration);\n\n  // Register tasks.get command",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 659,
      "content": "(sharedCommandRegistry as unknown).registerCommand(tasksGetRegistration);",
      "context": "\n  // Register tasks.get command\n  (sharedCommandRegistry as unknown).registerCommand(tasksGetRegistration);\n\n  // Register tasks.create command",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 662,
      "content": "(sharedCommandRegistry as unknown).registerCommand(tasksCreateRegistration);",
      "context": "\n  // Register tasks.create command\n  (sharedCommandRegistry as unknown).registerCommand(tasksCreateRegistration);\n\n  // Register tasks.delete command",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 665,
      "content": "(sharedCommandRegistry as unknown).registerCommand(tasksDeleteRegistration);",
      "context": "\n  // Register tasks.delete command\n  (sharedCommandRegistry as unknown).registerCommand(tasksDeleteRegistration);\n\n  // Register tasks.status.get command",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 668,
      "content": "(sharedCommandRegistry as unknown).registerCommand(tasksStatusGetRegistration);",
      "context": "\n  // Register tasks.status.get command\n  (sharedCommandRegistry as unknown).registerCommand(tasksStatusGetRegistration);\n\n  // Register tasks.status.set command",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 671,
      "content": "(sharedCommandRegistry as unknown).registerCommand(tasksStatusSetRegistration);",
      "context": "\n  // Register tasks.status.set command\n  (sharedCommandRegistry as unknown).registerCommand(tasksStatusSetRegistration);\n\n  // Register tasks.spec command",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/tasks.ts",
      "line": 674,
      "content": "(sharedCommandRegistry as unknown).registerCommand(tasksSpecRegistration);",
      "context": "\n  // Register tasks.spec command\n  (sharedCommandRegistry as unknown).registerCommand(tasksSpecRegistration);\n}\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/config.ts",
      "line": 35,
      "content": "schema: (z.boolean() as unknown).default(false),",
      "context": "  },\n  json: {\n    schema: (z.boolean() as unknown).default(false),\n    description: \"Output in JSON format\",\n    required: false,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/config.ts",
      "line": 40,
      "content": "schema: (z.boolean() as unknown).default(false),",
      "context": "  },\n  sources: {\n    schema: (z.boolean() as unknown).default(false),\n    description: \"Show configuration sources and precedence\",\n    required: false,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/config.ts",
      "line": 61,
      "content": "schema: (z.boolean() as unknown).default(false),",
      "context": "  },\n  json: {\n    schema: (z.boolean() as unknown).default(false),\n    description: \"Output in JSON format\",\n    required: false,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/config.ts",
      "line": 66,
      "content": "schema: (z.boolean() as unknown).default(false),",
      "context": "  },\n  sources: {\n    schema: (z.boolean() as unknown).default(false),\n    description: \"Show configuration sources and precedence\",\n    required: false,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/config.ts",
      "line": 77,
      "content": "category: (CommandCategory as unknown).CONFIG,",
      "context": "const configListRegistration = {\n  id: \"config.list\",\n  category: (CommandCategory as unknown).CONFIG,\n  name: \"list\",\n  description: \"Show all configuration from all sources\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/config.ts",
      "line": 84,
      "content": "const sources = (config.util as unknown).getConfigSources();",
      "context": "    try {\n      // Use node-config directly to get configuration\n      const sources = (config.util as unknown).getConfigSources();\n      const resolved = {\n        backend: config.get(\"backend\"),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/config.ts",
      "line": 95,
      "content": "json: (params as unknown).json || false,",
      "context": "      return {\n        success: true,\n        json: (params as unknown).json || false,\n        sources: sources.map((source) => ({\n          name: (source as unknown).name,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/config.ts",
      "line": 97,
      "content": "name: (source as unknown).name,",
      "context": "        json: (params as unknown).json || false,\n        sources: sources.map((source) => ({\n          name: (source as unknown).name,\n          original: (source as unknown).original,\n          parsed: (source as unknown).parsed,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/config.ts",
      "line": 98,
      "content": "original: (source as unknown).original,",
      "context": "        sources: sources.map((source) => ({\n          name: (source as unknown).name,\n          original: (source as unknown).original,\n          parsed: (source as unknown).parsed,\n        })),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/config.ts",
      "line": 99,
      "content": "parsed: (source as unknown).parsed,",
      "context": "          name: (source as unknown).name,\n          original: (source as unknown).original,\n          parsed: (source as unknown).parsed,\n        })),\n        resolved,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/config.ts",
      "line": 102,
      "content": "showSources: (params as unknown).sources || false,",
      "context": "        })),\n        resolved,\n        showSources: (params as unknown).sources || false,\n      };\n    } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/config.ts",
      "line": 110,
      "content": "json: (params as unknown).json || false,",
      "context": "      return {\n        success: false,\n        json: (params as unknown).json || false,\n        error: getErrorMessage(error as any),\n        showSources: (params as any).sources || false,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/config.ts",
      "line": 123,
      "content": "category: (CommandCategory as unknown).CONFIG,",
      "context": "const configShowRegistration = {\n  id: \"config.show\",\n  category: (CommandCategory as unknown).CONFIG,\n  name: \"show\",\n  description: \"Show the final resolved configuration\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/config.ts",
      "line": 140,
      "content": "json: (params as unknown).json || false,",
      "context": "      return {\n        success: true,\n        json: (params as unknown).json || false,\n        configuration: resolved,\n        showSources: (params as unknown).sources || false,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/config.ts",
      "line": 142,
      "content": "showSources: (params as unknown).sources || false,",
      "context": "        json: (params as unknown).json || false,\n        configuration: resolved,\n        showSources: (params as unknown).sources || false,\n        ...((params as unknown).sources && {\n          sources: config.util.getConfigSources().map((source) => ({",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/config.ts",
      "line": 143,
      "content": "...((params as unknown).sources && {",
      "context": "        configuration: resolved,\n        showSources: (params as unknown).sources || false,\n        ...((params as unknown).sources && {\n          sources: config.util.getConfigSources().map((source) => ({\n            name: (source as unknown).name,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/config.ts",
      "line": 145,
      "content": "name: (source as unknown).name,",
      "context": "        ...((params as unknown).sources && {\n          sources: config.util.getConfigSources().map((source) => ({\n            name: (source as unknown).name,\n            original: (source as unknown).original,\n            parsed: (source as unknown).parsed,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/config.ts",
      "line": 146,
      "content": "original: (source as unknown).original,",
      "context": "          sources: config.util.getConfigSources().map((source) => ({\n            name: (source as unknown).name,\n            original: (source as unknown).original,\n            parsed: (source as unknown).parsed,\n          })),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/config.ts",
      "line": 147,
      "content": "parsed: (source as unknown).parsed,",
      "context": "            name: (source as unknown).name,\n            original: (source as unknown).original,\n            parsed: (source as unknown).parsed,\n          })),\n        }),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/config.ts",
      "line": 157,
      "content": "json: (params as unknown).json || false,",
      "context": "      return {\n        success: false,\n        json: (params as unknown).json || false,\n        error: getErrorMessage(error as any),\n        showSources: (params as any).sources || false,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/config.ts",
      "line": 169,
      "content": "(sharedCommandRegistry as unknown).registerCommand(configListRegistration);",
      "context": " */\nexport function registerConfigCommands() {\n  (sharedCommandRegistry as unknown).registerCommand(configListRegistration);\n  (sharedCommandRegistry as unknown).registerCommand(configShowRegistration);\n}",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/config.ts",
      "line": 170,
      "content": "(sharedCommandRegistry as unknown).registerCommand(configShowRegistration);",
      "context": "export function registerConfigCommands() {\n  (sharedCommandRegistry as unknown).registerCommand(configListRegistration);\n  (sharedCommandRegistry as unknown).registerCommand(configShowRegistration);\n}\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/session.ts",
      "line": 618,
      "content": "})) as unknown;",
      "context": "          repo: params!.repo,\n          json: params!.json,\n        })) as unknown;\n\n        return {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/commands/session.ts",
      "line": 722,
      "content": "})) as unknown;",
      "context": "          autoResolveDeleteConflicts: params!.autoResolveDeleteConflicts,\n          skipConflictCheck: params!.skipConflictCheck,\n        })) as unknown;\n\n        return {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/commands/rules.ts",
      "line": 492,
      "content": "const format = (params as unknown).format as RuleFormat | undefined;",
      "context": "\n        // Convert parameters\n        const format = (params as unknown).format as RuleFormat | undefined;\n\n        // Call domain function",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/rules.ts",
      "line": 497,
      "content": "tag: (params as unknown).tag,",
      "context": "        const rules = await ruleService.searchRules({\n          format,\n          tag: (params as unknown).tag,\n          query: (params as unknown).query,\n        });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/rules.ts",
      "line": 498,
      "content": "query: (params as unknown).query,",
      "context": "          format,\n          tag: (params as unknown).tag,\n          query: (params as unknown).query,\n        });\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/sessiondb.ts",
      "line": 129,
      "content": "sourceCount = (readResult.data as unknown).sessions?.length || 0;",
      "context": "          if (readResult.success && readResult.data) {\n            sourceData = readResult.data;\n            sourceCount = (readResult.data as unknown).sessions?.length || 0;\n            log.info(`Reading from SQLite backend: ${currentSqlitePath} (${sourceCount} sessions)`);\n          }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/sessiondb.ts",
      "line": 183,
      "content": "if (Array.isArray((sourceData as unknown).sessions)) {",
      "context": "      // Migrate sessions\n      const sessionRecords: SessionRecord[] = [];\n      if (Array.isArray((sourceData as unknown).sessions)) {\n        sessionRecords.push(...(sourceData as unknown).sessions);\n      } else if (typeof sourceData === \"object\" && sourceData !== null) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/sessiondb.ts",
      "line": 184,
      "content": "sessionRecords.push(...(sourceData as unknown).sessions);",
      "context": "      const sessionRecords: SessionRecord[] = [];\n      if (Array.isArray((sourceData as unknown).sessions)) {\n        sessionRecords.push(...(sourceData as unknown).sessions);\n      } else if (typeof sourceData === \"object\" && sourceData !== null) {\n        // Handle sessions stored as key-value pairs",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/commands/sessiondb.ts",
      "line": 191,
      "content": "...(sessionData as unknown),",
      "context": "            sessionRecords.push({\n              session: sessionId,\n              ...(sessionData as unknown),\n            });\n          }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/bridges/parameter-mapper.ts",
      "line": 52,
      "content": "return mappings.filter((mapping) => !(mapping.options as unknown).asArgument).map(createOptionFromMapping);",
      "context": " */\nexport function createOptionsFromMappings(mappings: ParameterMapping[]): Option[] {\n  return mappings.filter((mapping) => !(mapping.options as unknown).asArgument).map(createOptionFromMapping);\n}\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/bridges/parameter-mapper.ts",
      "line": 59,
      "content": "const argumentMappings = mappings.filter((mapping) => (mapping.options as unknown).asArgument);",
      "context": " */\nexport function addArgumentsFromMappings(command: Command, mappings: ParameterMapping[]): Command {\n  const argumentMappings = mappings.filter((mapping) => (mapping.options as unknown).asArgument);\n\n  argumentMappings.forEach((mapping) => {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/bridges/parameter-mapper.ts",
      "line": 65,
      "content": "const argName = formatArgumentName(name, (paramDef as unknown).required, (options as unknown).variadic);",
      "context": "\n    // Format argument name\n    const argName = formatArgumentName(name, (paramDef as unknown).required, (options as unknown).variadic);\n\n    // Add argument to command",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/bridges/parameter-mapper.ts",
      "line": 68,
      "content": "if ((options as unknown).variadic) {",
      "context": "\n    // Add argument to command\n    if ((options as unknown).variadic) {\n      command.argument(argName, (options as unknown).description || (paramDef as unknown).description || \"\");\n    } else {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/bridges/parameter-mapper.ts",
      "line": 69,
      "content": "command.argument(argName, (options as unknown).description || (paramDef as unknown).description || \"\");",
      "context": "    // Add argument to command\n    if ((options as unknown).variadic) {\n      command.argument(argName, (options as unknown).description || (paramDef as unknown).description || \"\");\n    } else {\n      command.argument(argName, (options as unknown).description || (paramDef as unknown).description || \"\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/bridges/parameter-mapper.ts",
      "line": 71,
      "content": "command.argument(argName, (options as unknown).description || (paramDef as unknown).description || \"\");",
      "context": "      command.argument(argName, (options as unknown).description || (paramDef as unknown).description || \"\");\n    } else {\n      command.argument(argName, (options as unknown).description || (paramDef as unknown).description || \"\");\n    }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/bridges/parameter-mapper.ts",
      "line": 75,
      "content": "if ((options as unknown).parser) {",
      "context": "\n    // Add custom parser if provided\n    if ((options as unknown).parser) {\n      // Note: Commander.js doesn't have a direct way to add parsers to arguments\n      // This would need to be handled in the action function",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/bridges/parameter-mapper.ts",
      "line": 91,
      "content": "const schemaType = getZodSchemaType((paramDef as unknown).schema);",
      "context": "\n  // Get schema type for proper option definition\n  const schemaType = getZodSchemaType((paramDef as unknown).schema);\n\n  // Format option flag",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/bridges/parameter-mapper.ts",
      "line": 94,
      "content": "const flag = formatOptionFlag(name, (options as unknown).alias, schemaType);",
      "context": "\n  // Format option flag\n  const flag = formatOptionFlag(name, (options as unknown).alias, schemaType);\n\n  // Create the option",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/bridges/parameter-mapper.ts",
      "line": 97,
      "content": "const option = new Option(flag, (options as unknown).description || (paramDef as unknown).description || \"\");",
      "context": "\n  // Create the option\n  const option = new Option(flag, (options as unknown).description || (paramDef as unknown).description || \"\");\n\n  // Apply additional configuration",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/bridges/parameter-mapper.ts",
      "line": 100,
      "content": "if ((options as unknown).hidden) {",
      "context": "\n  // Apply additional configuration\n  if ((options as unknown).hidden) {\n    option.hideHelp();\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/bridges/parameter-mapper.ts",
      "line": 104,
      "content": "if ((paramDef as unknown).defaultValue !== undefined || (options as unknown).defaultValue !== undefined) {",
      "context": "  }\n\n  if ((paramDef as unknown).defaultValue !== undefined || (options as unknown).defaultValue !== undefined) {\n    option.default((options as unknown).defaultValue ?? (paramDef as unknown).defaultValue);\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/bridges/parameter-mapper.ts",
      "line": 105,
      "content": "option.default((options as unknown).defaultValue ?? (paramDef as unknown).defaultValue);",
      "context": "\n  if ((paramDef as unknown).defaultValue !== undefined || (options as unknown).defaultValue !== undefined) {\n    option.default((options as unknown).defaultValue ?? (paramDef as unknown).defaultValue);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/bridges/parameter-mapper.ts",
      "line": 109,
      "content": "addTypeHandlingToOption(option, schemaType, (options as unknown).parser);",
      "context": "\n  // Add proper type handling based on schema\n  addTypeHandlingToOption(option, schemaType, (options as unknown).parser);\n\n  return option;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/bridges/parameter-mapper.ts",
      "line": 174,
      "content": "const num = Number(value as unknown);",
      "context": "  case \"number\":\n    return option.argParser((value) => {\n      const num = Number(value as unknown);\n      if (isNaN(num)) {\n        throw new Error(\"Option requires a number value\");",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/bridges/parameter-mapper.ts",
      "line": 206,
      "content": "return getZodSchemaType((schema as unknown).unwrap());",
      "context": "  // Handle optional types and nullable types (unwrap and check inner type)\n  if (schema instanceof z.ZodOptional || schema instanceof z.ZodNullable) {\n    return getZodSchemaType((schema as unknown).unwrap());\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/bridges/parameter-mapper.ts",
      "line": 211,
      "content": "return getZodSchemaType((schema._def as unknown).innerType);",
      "context": "  // Handle default types (access inner type differently)\n  if (schema instanceof z.ZodDefault) {\n    return getZodSchemaType((schema._def as unknown).innerType);\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/bridges/parameter-mapper.ts",
      "line": 233,
      "content": "hidden: (paramDef as unknown).cliHidden,",
      "context": "    options: {\n      // Apply default options\n      hidden: (paramDef as unknown).cliHidden,\n\n      // Override with custom options if available",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/bridges/parameter-mapper.ts",
      "line": 238,
      "content": "})) as unknown;",
      "context": "      ...customOptions[name],\n    },\n  })) as unknown;\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/shared/bridges/parameter-mapper.ts",
      "line": 257,
      "content": "if ((paramDef as unknown).defaultValue !== undefined) {",
      "context": "    if (rawValue === undefined) {\n      // Use default value if available\n      if ((paramDef as unknown).defaultValue !== undefined) {\n        (result as unknown)[paramName] = (paramDef as unknown).defaultValue;\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/bridges/parameter-mapper.ts",
      "line": 258,
      "content": "(result as unknown)[paramName] = (paramDef as unknown).defaultValue;",
      "context": "      // Use default value if available\n      if ((paramDef as unknown).defaultValue !== undefined) {\n        (result as unknown)[paramName] = (paramDef as unknown).defaultValue;\n      }\n      // Skip optional parameters",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/bridges/parameter-mapper.ts",
      "line": 261,
      "content": "if (!(paramDef as unknown).required) {",
      "context": "      }\n      // Skip optional parameters\n      if (!(paramDef as unknown).required) {\n        continue;\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/bridges/parameter-mapper.ts",
      "line": 269,
      "content": "const parsedValue = (paramDef.schema as unknown).parse(rawValue);",
      "context": "      // Parse and validate the value\n      try {\n        const parsedValue = (paramDef.schema as unknown).parse(rawValue);\n        (result as unknown)[paramName] = parsedValue;\n      } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/adapters/shared/bridges/parameter-mapper.ts",
      "line": 270,
      "content": "(result as unknown)[paramName] = parsedValue;",
      "context": "      try {\n        const parsedValue = (paramDef.schema as unknown).parse(rawValue);\n        (result as unknown)[paramName] = parsedValue;\n      } catch (error) {\n        // Use user-friendly error formatting for Zod validation errors",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/test-utils/compatibility/mock-function.ts",
      "line": 214,
      "content": "result = undefined as unknown;",
      "context": "      } else {\n        // Default implementation returns undefined\n        result = undefined as unknown;\n      }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "src/utils/test-utils/compatibility/mock-function.ts",
      "line": 319,
      "content": "() => Promise.resolve(value) as unknown as ReturnType<T>",
      "context": "    // Use a cast to suppress TypeScript errors since the return types don\"t match\n    return mockFn.mockImplementation(\n      () => Promise.resolve(value) as unknown as ReturnType<T>\n    ) as unknown;\n  };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-utils/compatibility/mock-function.ts",
      "line": 320,
      "content": ") as unknown;",
      "context": "    return mockFn.mockImplementation(\n      () => Promise.resolve(value) as unknown as ReturnType<T>\n    ) as unknown;\n  };\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/test-utils/compatibility/mock-function.ts",
      "line": 327,
      "content": "() => Promise.resolve(value) as unknown as ReturnType<T>",
      "context": "    // Use a cast to suppress TypeScript errors since the return types don\"t match\n    return mockFn.mockImplementationOnce(\n      () => Promise.resolve(value) as unknown as ReturnType<T>\n    ) as unknown;\n  };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-utils/compatibility/mock-function.ts",
      "line": 328,
      "content": ") as unknown;",
      "context": "    return mockFn.mockImplementationOnce(\n      () => Promise.resolve(value) as unknown as ReturnType<T>\n    ) as unknown;\n  };\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/test-utils/compatibility/mock-function.ts",
      "line": 335,
      "content": "() => Promise.reject(value) as unknown as ReturnType<T>",
      "context": "    // Use a cast to suppress TypeScript errors since the return types don\"t match\n    return mockFn.mockImplementation(\n      () => Promise.reject(value) as unknown as ReturnType<T>\n    ) as unknown;\n  };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-utils/compatibility/mock-function.ts",
      "line": 336,
      "content": ") as unknown;",
      "context": "    return mockFn.mockImplementation(\n      () => Promise.reject(value) as unknown as ReturnType<T>\n    ) as unknown;\n  };\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/test-utils/compatibility/mock-function.ts",
      "line": 343,
      "content": "() => Promise.reject(value) as unknown as ReturnType<T>",
      "context": "    // Use a cast to suppress TypeScript errors since the return types don\"t match\n    return mockFn.mockImplementationOnce(\n      () => Promise.reject(value) as unknown as ReturnType<T>\n    ) as unknown;\n  };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-utils/compatibility/mock-function.ts",
      "line": 344,
      "content": ") as unknown;",
      "context": "    return mockFn.mockImplementationOnce(\n      () => Promise.reject(value) as unknown as ReturnType<T>\n    ) as unknown;\n  };\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/test-utils/compatibility/mock-function.ts",
      "line": 392,
      "content": "(mockFn as unknown).mock.originalImplementation = original;",
      "context": "\n  // Store the original implementation for restoration\n  (mockFn as unknown).mock.originalImplementation = original;\n\n  // Replace the method with our mock",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-utils/compatibility/mock-function.ts",
      "line": 395,
      "content": "(object as unknown)[method] = mockFn;",
      "context": "\n  // Replace the method with our mock\n  (object as unknown)[method] = mockFn;\n\n  return mockFn;",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/test-utils/compatibility/mock-function.ts",
      "line": 421,
      "content": "const mockedModule = { ...module } as unknown;",
      "context": " */\nexport function autoMockModule<T extends object>(module: T): T {\n  const mockedModule = { ...module } as unknown;\n\n  // Recursively replace all functions with mocks",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/test-utils/compatibility/matchers.ts",
      "line": 118,
      "content": "return `Any<${(this.expectedType as unknown)?.name || this.expectedType}>`;",
      "context": "\n  toString(): string {\n    return `Any<${(this.expectedType as unknown)?.name || this.expectedType}>`;\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-utils/compatibility/matchers.ts",
      "line": 122,
      "content": "return `Any<${(this.expectedType as unknown)?.name || this.expectedType}>`;",
      "context": "\n  toJSON(): string {\n    return `Any<${(this.expectedType as unknown)?.name || this.expectedType}>`;\n  }\n}",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-utils/compatibility/matchers.ts",
      "line": 398,
      "content": "if (!(key in (expectObj as unknown))) {",
      "context": "  // Add each matcher to the expect object\n  for (const [key, value] of Object.entries(asymmetricMatchers)) {\n    if (!(key in (expectObj as unknown))) {\n      (expectObj as unknown)[key] = value;\n    }",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/test-utils/compatibility/matchers.ts",
      "line": 399,
      "content": "(expectObj as unknown)[key] = value;",
      "context": "  for (const [key, value] of Object.entries(asymmetricMatchers)) {\n    if (!(key in (expectObj as unknown))) {\n      (expectObj as unknown)[key] = value;\n    }\n  }",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/test-utils/compatibility/matchers.ts",
      "line": 408,
      "content": "return obj !== null && typeof obj === \"object\" && typeof (obj as unknown).asymmetricMatch === \"function\";",
      "context": " */\nexport function isAsymmetricMatcher(obj: unknown): obj is AsymmetricMatcher {\n  return obj !== null && typeof obj === \"object\" && typeof (obj as unknown).asymmetricMatch === \"function\";\n}\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-utils/compatibility/matchers.ts",
      "line": 420,
      "content": "const originalEquals = (bun.expect as unknown).equals;",
      "context": "\n    // Override the equality comparison for assertions\n    const originalEquals = (bun.expect as unknown).equals;\n    if (originalEquals) {\n      // Save original",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/test-utils/compatibility/matchers.ts",
      "line": 426,
      "content": "(bun.expect as unknown).equals = (a: unknown, b: any): boolean => {",
      "context": "\n      // Override with matcher-aware version\n      (bun.expect as unknown).equals = (a: unknown, b: any): boolean => {\n        // Check if either value is an asymmetric matcher\n        if (isAsymmetricMatcher(a)) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    }
  ],
  "recommendations": [
    "🚨 HIGH PRIORITY: 2052 assertions are masking type errors and should be fixed immediately",
    "⚠️  2052 assertions are masking type errors - these reduce TypeScript effectiveness",
    "🧪 140 assertions in tests - review for proper type alternatives",
    "🌉 23 assertions for type bridging - consider proper type guards",
    "📋 Start with high priority items, then medium, then low",
    "🔍 Focus on production code before test code",
    "📚 Document any legitimate uses that must remain"
  ]
}