{
  "totalCount": 570,
  "byCategory": {
    "suspicious": 133,
    "error-masking": 344,
    "test-mocking": 92,
    "type-bridging": 1
  },
  "byPriority": {
    "medium": 159,
    "high": 344,
    "low": 67
  },
  "matches": [
    {
      "file": "targeted-as-unknown-fixer.ts",
      "line": 6,
      "content": "* A conservative approach to fixing 'as unknown' assertions in batches",
      "context": " * Targeted AS-UNKNOWN Batch Fixer for Task #280\n *\n * A conservative approach to fixing 'as unknown' assertions in batches\n * by focusing on the safest and most common patterns.\n */",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "targeted-as-unknown-fixer.ts",
      "line": 36,
      "content": "name: \"Return null as unknown\",",
      "context": "      // CRITICAL: Return statements with null/undefined\n      {\n        name: \"Return null as unknown\",\n        description: \"Remove 'as unknown' from return null statements\",\n        pattern: /return null as unknown;/g,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "targeted-as-unknown-fixer.ts",
      "line": 37,
      "content": "description: \"Remove 'as unknown' from return null statements\",",
      "context": "      {\n        name: \"Return null as unknown\",\n        description: \"Remove 'as unknown' from return null statements\",\n        pattern: /return null as unknown;/g,\n        replacement: \"return null;\",",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "targeted-as-unknown-fixer.ts",
      "line": 38,
      "content": "pattern: /return null as unknown;/g,",
      "context": "        name: \"Return null as unknown\",\n        description: \"Remove 'as unknown' from return null statements\",\n        pattern: /return null as unknown;/g,\n        replacement: \"return null;\",\n        riskLevel: \"low\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "targeted-as-unknown-fixer.ts",
      "line": 43,
      "content": "name: \"Return undefined as unknown\",",
      "context": "      },\n      {\n        name: \"Return undefined as unknown\",\n        description: \"Remove 'as unknown' from return undefined statements\",\n        pattern: /return undefined as unknown;/g,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "targeted-as-unknown-fixer.ts",
      "line": 44,
      "content": "description: \"Remove 'as unknown' from return undefined statements\",",
      "context": "      {\n        name: \"Return undefined as unknown\",\n        description: \"Remove 'as unknown' from return undefined statements\",\n        pattern: /return undefined as unknown;/g,\n        replacement: \"return undefined;\",",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "targeted-as-unknown-fixer.ts",
      "line": 45,
      "content": "pattern: /return undefined as unknown;/g,",
      "context": "        name: \"Return undefined as unknown\",\n        description: \"Remove 'as unknown' from return undefined statements\",\n        pattern: /return undefined as unknown;/g,\n        replacement: \"return undefined;\",\n        riskLevel: \"low\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "targeted-as-unknown-fixer.ts",
      "line": 53,
      "content": "description: \"Remove 'as unknown' from null variable assignments\",",
      "context": "      {\n        name: \"Null assignment\",\n        description: \"Remove 'as unknown' from null variable assignments\",\n        pattern: /= null as unknown;/g,\n        replacement: \"= null;\",",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "targeted-as-unknown-fixer.ts",
      "line": 54,
      "content": "pattern: /= null as unknown;/g,",
      "context": "        name: \"Null assignment\",\n        description: \"Remove 'as unknown' from null variable assignments\",\n        pattern: /= null as unknown;/g,\n        replacement: \"= null;\",\n        riskLevel: \"low\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "targeted-as-unknown-fixer.ts",
      "line": 60,
      "content": "description: \"Remove 'as unknown' from undefined variable assignments\",",
      "context": "      {\n        name: \"Undefined assignment\",\n        description: \"Remove 'as unknown' from undefined variable assignments\",\n        pattern: /= undefined as unknown;/g,\n        replacement: \"= undefined;\",",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "targeted-as-unknown-fixer.ts",
      "line": 61,
      "content": "pattern: /= undefined as unknown;/g,",
      "context": "        name: \"Undefined assignment\",\n        description: \"Remove 'as unknown' from undefined variable assignments\",\n        pattern: /= undefined as unknown;/g,\n        replacement: \"= undefined;\",\n        riskLevel: \"low\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "targeted-as-unknown-fixer.ts",
      "line": 69,
      "content": "description: \"Remove 'as unknown' from Object.keys calls\",",
      "context": "      {\n        name: \"Object.keys\",\n        description: \"Remove 'as unknown' from Object.keys calls\",\n        pattern: /Object\\.keys\\(([^)]+) as unknown\\)/g,\n        replacement: \"Object.keys($1)\",",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "targeted-as-unknown-fixer.ts",
      "line": 70,
      "content": "pattern: /Object\\.keys\\(([^)]+) as unknown\\)/g,",
      "context": "        name: \"Object.keys\",\n        description: \"Remove 'as unknown' from Object.keys calls\",\n        pattern: /Object\\.keys\\(([^)]+) as unknown\\)/g,\n        replacement: \"Object.keys($1)\",\n        riskLevel: \"low\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "targeted-as-unknown-fixer.ts",
      "line": 76,
      "content": "description: \"Remove 'as unknown' from Object.values calls\",",
      "context": "      {\n        name: \"Object.values\",\n        description: \"Remove 'as unknown' from Object.values calls\",\n        pattern: /Object\\.values\\(([^)]+) as unknown\\)/g,\n        replacement: \"Object.values($1)\",",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "targeted-as-unknown-fixer.ts",
      "line": 77,
      "content": "pattern: /Object\\.values\\(([^)]+) as unknown\\)/g,",
      "context": "        name: \"Object.values\",\n        description: \"Remove 'as unknown' from Object.values calls\",\n        pattern: /Object\\.values\\(([^)]+) as unknown\\)/g,\n        replacement: \"Object.values($1)\",\n        riskLevel: \"low\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "targeted-as-unknown-fixer.ts",
      "line": 83,
      "content": "description: \"Remove 'as unknown' from Object.entries calls\",",
      "context": "      {\n        name: \"Object.entries\",\n        description: \"Remove 'as unknown' from Object.entries calls\",\n        pattern: /Object\\.entries\\(([^)]+) as unknown\\)/g,\n        replacement: \"Object.entries($1)\",",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "targeted-as-unknown-fixer.ts",
      "line": 84,
      "content": "pattern: /Object\\.entries\\(([^)]+) as unknown\\)/g,",
      "context": "        name: \"Object.entries\",\n        description: \"Remove 'as unknown' from Object.entries calls\",\n        pattern: /Object\\.entries\\(([^)]+) as unknown\\)/g,\n        replacement: \"Object.entries($1)\",\n        riskLevel: \"low\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "targeted-as-unknown-fixer.ts",
      "line": 92,
      "content": "console.log(\"🚀 Starting targeted 'as unknown' batch fixer...\");",
      "context": "\n  async execute(): Promise<void> {\n    console.log(\"🚀 Starting targeted 'as unknown' batch fixer...\");\n\n    // Get all TypeScript files",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "fix-syntax-errors.ts",
      "line": 16,
      "content": "// Fix (this as unknown)?.name = \"ErrorName\"; -> (this as unknown).name = \"ErrorName\";",
      "context": "    const originalContent = content;\n    \n    // Fix (this as unknown)?.name = \"ErrorName\"; -> (this as unknown).name = \"ErrorName\";\n    let fixedContent = content.replace(/\\(this as unknown\\)\\?\\.name = /g, \"(this as unknown).name = \");\n    ",
      "category": "error-masking",
      "priority": "high",
      "reason": "This context masking - likely type error"
    },
    {
      "file": "fix-syntax-errors.ts",
      "line": 17,
      "content": "let fixedContent = content.replace(/\\(this as unknown\\)\\?\\.name = /g, \"(this as unknown).name = \");",
      "context": "    \n    // Fix (this as unknown)?.name = \"ErrorName\"; -> (this as unknown).name = \"ErrorName\";\n    let fixedContent = content.replace(/\\(this as unknown\\)\\?\\.name = /g, \"(this as unknown).name = \");\n    \n    // Fix other potential ?. assignment issues",
      "category": "error-masking",
      "priority": "high",
      "reason": "This context masking - likely type error"
    },
    {
      "file": "fix-syntax-errors.ts",
      "line": 20,
      "content": "fixedContent = fixedContent.replace(/\\(this as unknown\\)\\?\\.([a-zA-Z_][a-zA-Z0-9_]*) = /g, \"(this as unknown).$1 = \");",
      "context": "    \n    // Fix other potential ?. assignment issues\n    fixedContent = fixedContent.replace(/\\(this as unknown\\)\\?\\.([a-zA-Z_][a-zA-Z0-9_]*) = /g, \"(this as unknown).$1 = \");\n    \n    if (fixedContent !== originalContent) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "This context masking - likely type error"
    },
    {
      "file": "fix-syntax-errors.ts",
      "line": 24,
      "content": "const fixes = (originalContent.match(/\\(this as unknown\\)\\?\\./g) || []).length;",
      "context": "    if (fixedContent !== originalContent) {\n      writeFileSync(file, fixedContent);\n      const fixes = (originalContent.match(/\\(this as unknown\\)\\?\\./g) || []).length;\n      console.log(`✅ Fixed ${fixes} syntax errors in ${file}`);\n      totalFixes += fixes;",
      "category": "error-masking",
      "priority": "high",
      "reason": "This context masking - likely type error"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 64,
      "content": "return null as unknown;",
      "context": "      createTestFile(\"return-statements.ts\", `\n        function test1(): string | null {\n          return null as unknown;\n        }\n",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 68,
      "content": "return undefined as unknown;",
      "context": "\n        function test2(): string | undefined {\n          return undefined as unknown;\n        }\n",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 73,
      "content": "return null as unknown;",
      "context": "        function test3(): any {\n          if (condition) {\n            return null as unknown;\n          }\n          return undefined as unknown;",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 75,
      "content": "return undefined as unknown;",
      "context": "            return null as unknown;\n          }\n          return undefined as unknown;\n        }\n      `);",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 84,
      "content": "expect(result).not.toContain(\"as unknown\");",
      "context": "      expect(result).toContain(\"return null;\");\n      expect(result).toContain(\"return undefined;\");\n      expect(result).not.toContain(\"as unknown\");\n      expect((fixer as any).metrics.issuesFixed).toBeGreaterThan(0);\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 90,
      "content": "const value1 = null as unknown;",
      "context": "    test(\"should fix null/undefined assignment patterns\", async () => {\n      createTestFile(\"null-undefined.ts\", `\n        const value1 = null as unknown;\n        const value2 = undefined as unknown;\n        let value3: any = null as unknown;",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 91,
      "content": "const value2 = undefined as unknown;",
      "context": "      createTestFile(\"null-undefined.ts\", `\n        const value1 = null as unknown;\n        const value2 = undefined as unknown;\n        let value3: any = null as unknown;\n        let value4: any = undefined as unknown;",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 92,
      "content": "let value3: any = null as unknown;",
      "context": "        const value1 = null as unknown;\n        const value2 = undefined as unknown;\n        let value3: any = null as unknown;\n        let value4: any = undefined as unknown;\n        ",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 93,
      "content": "let value4: any = undefined as unknown;",
      "context": "        const value2 = undefined as unknown;\n        let value3: any = null as unknown;\n        let value4: any = undefined as unknown;\n        \n        const obj = {",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 96,
      "content": "prop1: null as unknown,",
      "context": "        \n        const obj = {\n          prop1: null as unknown,\n          prop2: undefined as unknown\n        };",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 97,
      "content": "prop2: undefined as unknown",
      "context": "        const obj = {\n          prop1: null as unknown,\n          prop2: undefined as unknown\n        };\n      `);",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 110,
      "content": "expect(result).not.toContain(\"as unknown\");",
      "context": "      expect(result).toContain(\"prop1: null,\");\n      expect(result).toContain(\"prop2: undefined\");\n      expect(result).not.toContain(\"as unknown\");\n    });\n  });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 118,
      "content": "return [...(state as unknown).sessions];",
      "context": "      createTestFile(\"state-access.ts\", `\n        function listSessions(state: any): any[] {\n          return [...(state as unknown).sessions];\n        }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 122,
      "content": "return (state.sessions as unknown).find(s => s.name === sessionName);",
      "context": "\n        function getSession(state: any, sessionName: string): any {\n          return (state.sessions as unknown).find(s => s.name === sessionName);\n        }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 126,
      "content": "return (sessions as unknown).find(s => s.id === id);",
      "context": "\n        function getSessionById(sessions: any[], id: string): any {\n          return (sessions as unknown).find(s => s.id === id);\n        }\n      `);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 136,
      "content": "expect(result).not.toContain(\"as unknown\");",
      "context": "      expect(result).toContain(\"return state.sessions.find(s => s.name === sessionName);\");\n      expect(result).toContain(\"return sessions.find(s => s.id === id);\");\n      expect(result).not.toContain(\"as unknown\");\n    });\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 148,
      "content": "return await (this.sessionProvider as unknown).getSession(name);",
      "context": "\n          async getSession(name: string) {\n            return await (this.sessionProvider as unknown).getSession(name);\n          }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 152,
      "content": "return (this.pathResolver as unknown).getRelativePathFromSession(dir, path);",
      "context": "\n          getPath(dir: string, path: string) {\n            return (this.pathResolver as unknown).getRelativePathFromSession(dir, path);\n          }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 156,
      "content": "return (this.workspaceBackend as unknown).readFile(dir, path);",
      "context": "\n          readFile(dir: string, path: string) {\n            return (this.workspaceBackend as unknown).readFile(dir, path);\n          }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 160,
      "content": "return (this.config as unknown).path;",
      "context": "\n          getConfigPath() {\n            return (this.config as unknown).path;\n          }\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 172,
      "content": "expect(result).not.toContain(\"as unknown\");",
      "context": "      expect(result).toContain(\"return this.workspaceBackend.readFile(dir, path);\");\n      expect(result).toContain(\"return this.config.path;\");\n      expect(result).not.toContain(\"as unknown\");\n    });\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 178,
      "content": "const found = (items as unknown).find(item => item.id === 1);",
      "context": "      createTestFile(\"array-methods.ts\", `\n        function processItems(items: any[]): any {\n          const found = (items as unknown).find(item => item.id === 1);\n          const length = (items as unknown).length;\n          (items as unknown).push({ id: 2 });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 179,
      "content": "const length = (items as unknown).length;",
      "context": "        function processItems(items: any[]): any {\n          const found = (items as unknown).find(item => item.id === 1);\n          const length = (items as unknown).length;\n          (items as unknown).push({ id: 2 });\n          const filtered = (items as unknown).filter(item => item.active);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 180,
      "content": "(items as unknown).push({ id: 2 });",
      "context": "          const found = (items as unknown).find(item => item.id === 1);\n          const length = (items as unknown).length;\n          (items as unknown).push({ id: 2 });\n          const filtered = (items as unknown).filter(item => item.active);\n          const mapped = (items as unknown).map(item => item.name);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 181,
      "content": "const filtered = (items as unknown).filter(item => item.active);",
      "context": "          const length = (items as unknown).length;\n          (items as unknown).push({ id: 2 });\n          const filtered = (items as unknown).filter(item => item.active);\n          const mapped = (items as unknown).map(item => item.name);\n          const index = (items as unknown).findIndex(item => item.id === 3);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 182,
      "content": "const mapped = (items as unknown).map(item => item.name);",
      "context": "          (items as unknown).push({ id: 2 });\n          const filtered = (items as unknown).filter(item => item.active);\n          const mapped = (items as unknown).map(item => item.name);\n          const index = (items as unknown).findIndex(item => item.id === 3);\n          (items as unknown).splice(0, 1);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 183,
      "content": "const index = (items as unknown).findIndex(item => item.id === 3);",
      "context": "          const filtered = (items as unknown).filter(item => item.active);\n          const mapped = (items as unknown).map(item => item.name);\n          const index = (items as unknown).findIndex(item => item.id === 3);\n          (items as unknown).splice(0, 1);\n          ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 184,
      "content": "(items as unknown).splice(0, 1);",
      "context": "          const mapped = (items as unknown).map(item => item.name);\n          const index = (items as unknown).findIndex(item => item.id === 3);\n          (items as unknown).splice(0, 1);\n          \n          return { found, length, filtered, mapped, index };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 190,
      "content": "const keys = (Object as unknown).keys(obj);",
      "context": "\n        function processObject(obj: any): any {\n          const keys = (Object as unknown).keys(obj);\n          const values = (Object as unknown).values(obj);\n          const entries = (Object as unknown).entries(obj);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 191,
      "content": "const values = (Object as unknown).values(obj);",
      "context": "        function processObject(obj: any): any {\n          const keys = (Object as unknown).keys(obj);\n          const values = (Object as unknown).values(obj);\n          const entries = (Object as unknown).entries(obj);\n          ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 192,
      "content": "const entries = (Object as unknown).entries(obj);",
      "context": "          const keys = (Object as unknown).keys(obj);\n          const values = (Object as unknown).values(obj);\n          const entries = (Object as unknown).entries(obj);\n          \n          return { keys, values, entries };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 208,
      "content": "expect(result).not.toContain(\"as unknown\");",
      "context": "      expect(result).toContain(\"const index = items.findIndex(item => item.id === 3);\");\n      expect(result).toContain(\"items.splice(0, 1);\");\n      expect(result).not.toContain(\"as unknown\");\n    });\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 216,
      "content": "(this as unknown).name = \"CustomError\";",
      "context": "          constructor(message: string) {\n            super(message);\n            (this as unknown).name = \"CustomError\";\n          }\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 223,
      "content": "(this as unknown).name = \"SessionError\";",
      "context": "          constructor(sessionId: string) {\n            super(\\`Session error: \\${sessionId}\\`);\n            (this as unknown).name = \"SessionError\";\n          }\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 233,
      "content": "expect(result).not.toContain(\"as unknown\");",
      "context": "      expect(result).toContain(\"this.name = \\\"CustomError\\\";\");\n      expect(result).toContain(\"this.name = \\\"SessionError\\\";\");\n      expect(result).not.toContain(\"as unknown\");\n    });\n  });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 240,
      "content": "const homeDir = (process.env as unknown).HOME;",
      "context": "    test(\"should fix environment variable access\", async () => {\n      createTestFile(\"env-vars.ts\", `\n        const homeDir = (process.env as unknown).HOME;\n        const nodeEnv = (process.env as unknown).NODE_ENV;\n        const customVar = (process.env as unknown).CUSTOM_VAR;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 241,
      "content": "const nodeEnv = (process.env as unknown).NODE_ENV;",
      "context": "      createTestFile(\"env-vars.ts\", `\n        const homeDir = (process.env as unknown).HOME;\n        const nodeEnv = (process.env as unknown).NODE_ENV;\n        const customVar = (process.env as unknown).CUSTOM_VAR;\n      `);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 242,
      "content": "const customVar = (process.env as unknown).CUSTOM_VAR;",
      "context": "        const homeDir = (process.env as unknown).HOME;\n        const nodeEnv = (process.env as unknown).NODE_ENV;\n        const customVar = (process.env as unknown).CUSTOM_VAR;\n      `);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 251,
      "content": "expect(result).not.toContain(\"as unknown\");",
      "context": "      expect(result).toContain(\"const nodeEnv = process.env.NODE_ENV;\");\n      expect(result).toContain(\"const customVar = process.env.CUSTOM_VAR;\");\n      expect(result).not.toContain(\"as unknown\");\n    });\n  });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 260,
      "content": "return null as unknown;",
      "context": "        // Critical patterns\n        function criticalTest() {\n          return null as unknown;\n          const val = undefined as unknown;\n        }",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 261,
      "content": "const val = undefined as unknown;",
      "context": "        function criticalTest() {\n          return null as unknown;\n          const val = undefined as unknown;\n        }\n",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 266,
      "content": "const sessions = (state as unknown).sessions;",
      "context": "        // High priority patterns\n        function highPriorityTest(state: any, service: any) {\n          const sessions = (state as unknown).sessions;\n          const result = (service.provider as unknown).getSession(\"test\");\n          const length = (sessions as unknown).length;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 267,
      "content": "const result = (service.provider as unknown).getSession(\"test\");",
      "context": "        function highPriorityTest(state: any, service: any) {\n          const sessions = (state as unknown).sessions;\n          const result = (service.provider as unknown).getSession(\"test\");\n          const length = (sessions as unknown).length;\n          (this as unknown).name = \"TestError\";",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 268,
      "content": "const length = (sessions as unknown).length;",
      "context": "          const sessions = (state as unknown).sessions;\n          const result = (service.provider as unknown).getSession(\"test\");\n          const length = (sessions as unknown).length;\n          (this as unknown).name = \"TestError\";\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 269,
      "content": "(this as unknown).name = \"TestError\";",
      "context": "          const result = (service.provider as unknown).getSession(\"test\");\n          const length = (sessions as unknown).length;\n          (this as unknown).name = \"TestError\";\n        }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 274,
      "content": "const home = (process.env as unknown).HOME;",
      "context": "        // Medium priority patterns\n        function mediumPriorityTest() {\n          const home = (process.env as unknown).HOME;\n        }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 279,
      "content": "const complex = (someComplexExpression() as unknown).someProperty;",
      "context": "        // Unmatched patterns (should be flagged for manual review)\n        function unmatchedTest() {\n          const complex = (someComplexExpression() as unknown).someProperty;\n        }\n      `);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 307,
      "content": "sessions: (state as unknown).sessions,",
      "context": "        function complexTest() {\n          const result = {\n            sessions: (state as unknown).sessions,\n            count: (state as unknown).sessions.length,\n            first: (state as unknown).sessions.find(s => s.active)",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 308,
      "content": "count: (state as unknown).sessions.length,",
      "context": "          const result = {\n            sessions: (state as unknown).sessions,\n            count: (state as unknown).sessions.length,\n            first: (state as unknown).sessions.find(s => s.active)\n          };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 309,
      "content": "first: (state as unknown).sessions.find(s => s.active)",
      "context": "            sessions: (state as unknown).sessions,\n            count: (state as unknown).sessions.length,\n            first: (state as unknown).sessions.find(s => s.active)\n          };\n          ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 312,
      "content": "const chained = (obj as unknown).prop1.prop2.prop3;",
      "context": "          };\n          \n          const chained = (obj as unknown).prop1.prop2.prop3;\n          const multiLine = (veryLongVariableName as unknown)\n            .someMethod()",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 313,
      "content": "const multiLine = (veryLongVariableName as unknown)",
      "context": "          \n          const chained = (obj as unknown).prop1.prop2.prop3;\n          const multiLine = (veryLongVariableName as unknown)\n            .someMethod()\n            .anotherMethod();",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 332,
      "content": "return null as unknown;",
      "context": "      createTestFile(\"syntax-error.ts\", `\n        function broken() {\n          return null as unknown;\n          // Missing closing brace\n      `);",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 352,
      "content": "test(\"should handle files with no as unknown patterns\", async () => {",
      "context": "    });\n\n    test(\"should handle files with no as unknown patterns\", async () => {\n      createTestFile(\"no-patterns.ts\", `\n        function clean() {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 380,
      "content": "const value = null as unknown; // inline comment",
      "context": "        function test() {\n          // This is another comment\n          const value = null as unknown; // inline comment\n          \n          return value;",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 401,
      "content": "return null as unknown;",
      "context": "      const originalContent = `\n        function test() {\n          return null as unknown;\n        }\n      `;",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 420,
      "content": "const a = null as unknown;",
      "context": "      createTestFile(\"metrics-test.ts\", `\n        function test() {\n          const a = null as unknown;\n          const b = undefined as unknown;\n          const c = (state as unknown).sessions;",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 421,
      "content": "const b = undefined as unknown;",
      "context": "        function test() {\n          const a = null as unknown;\n          const b = undefined as unknown;\n          const c = (state as unknown).sessions;\n          const d = (items as unknown).length;",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 422,
      "content": "const c = (state as unknown).sessions;",
      "context": "          const a = null as unknown;\n          const b = undefined as unknown;\n          const c = (state as unknown).sessions;\n          const d = (items as unknown).length;\n          return null as unknown;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 423,
      "content": "const d = (items as unknown).length;",
      "context": "          const b = undefined as unknown;\n          const c = (state as unknown).sessions;\n          const d = (items as unknown).length;\n          return null as unknown;\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 424,
      "content": "return null as unknown;",
      "context": "          const c = (state as unknown).sessions;\n          const d = (items as unknown).length;\n          return null as unknown;\n        }\n      `);",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 440,
      "content": "const a = null as unknown;",
      "context": "      createTestFile(\"success-rate.ts\", `\n        function fixablePatterns() {\n          const a = null as unknown;\n          const b = (state as unknown).sessions;\n          return undefined as unknown;",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 441,
      "content": "const b = (state as unknown).sessions;",
      "context": "        function fixablePatterns() {\n          const a = null as unknown;\n          const b = (state as unknown).sessions;\n          return undefined as unknown;\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 442,
      "content": "return undefined as unknown;",
      "context": "          const a = null as unknown;\n          const b = (state as unknown).sessions;\n          return undefined as unknown;\n        }\n      `);",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 469,
      "content": "return (this.config as unknown).path;",
      "context": "\n          getPath(): string {\n            return (this.config as unknown).path;\n          }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 473,
      "content": "return (this.config as unknown).timeout;",
      "context": "\n          getTimeout(): number {\n            return (this.config as unknown).timeout;\n          }\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "as-unknown-ast-fixer.test.ts",
      "line": 483,
      "content": "expect(result).not.toContain(\"as unknown\");",
      "context": "      expect(result).toContain(\"return this.config.path;\");\n      expect(result).toContain(\"return this.config.timeout;\");\n      expect(result).not.toContain(\"as unknown\");\n      \n      // Should maintain interface and class structure",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "enhanced-as-unknown-fixer.ts",
      "line": 7,
      "content": "* and safely fixable 'as unknown' assertions in the codebase.",
      "context": " * \n * Based on analysis of current patterns, this codemod focuses on the most common\n * and safely fixable 'as unknown' assertions in the codebase.\n * \n * CURRENT STATE: 822 total assertions, 504 high-priority",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "enhanced-as-unknown-fixer.ts",
      "line": 12,
      "content": "* 1. Property access patterns: (obj as unknown).prop → obj.prop",
      "context": " * \n * PRIORITY PATTERNS (from ESLint analysis):\n * 1. Property access patterns: (obj as unknown).prop → obj.prop\n * 2. Return value patterns: return value as unknown → return value\n * 3. Null/undefined patterns: null as unknown → null",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "enhanced-as-unknown-fixer.ts",
      "line": 13,
      "content": "* 2. Return value patterns: return value as unknown → return value",
      "context": " * PRIORITY PATTERNS (from ESLint analysis):\n * 1. Property access patterns: (obj as unknown).prop → obj.prop\n * 2. Return value patterns: return value as unknown → return value\n * 3. Null/undefined patterns: null as unknown → null\n * 4. Object method patterns: (obj as unknown).method() → obj.method()",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "enhanced-as-unknown-fixer.ts",
      "line": 14,
      "content": "* 3. Null/undefined patterns: null as unknown → null",
      "context": " * 1. Property access patterns: (obj as unknown).prop → obj.prop\n * 2. Return value patterns: return value as unknown → return value\n * 3. Null/undefined patterns: null as unknown → null\n * 4. Object method patterns: (obj as unknown).method() → obj.method()\n * 5. Array access patterns: (arr as unknown)[index] → arr[index]",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "enhanced-as-unknown-fixer.ts",
      "line": 15,
      "content": "* 4. Object method patterns: (obj as unknown).method() → obj.method()",
      "context": " * 2. Return value patterns: return value as unknown → return value\n * 3. Null/undefined patterns: null as unknown → null\n * 4. Object method patterns: (obj as unknown).method() → obj.method()\n * 5. Array access patterns: (arr as unknown)[index] → arr[index]\n * 6. Object.keys/values/entries patterns: Object.keys(obj as unknown) → Object.keys(obj)",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "enhanced-as-unknown-fixer.ts",
      "line": 16,
      "content": "* 5. Array access patterns: (arr as unknown)[index] → arr[index]",
      "context": " * 3. Null/undefined patterns: null as unknown → null\n * 4. Object method patterns: (obj as unknown).method() → obj.method()\n * 5. Array access patterns: (arr as unknown)[index] → arr[index]\n * 6. Object.keys/values/entries patterns: Object.keys(obj as unknown) → Object.keys(obj)\n * ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "enhanced-as-unknown-fixer.ts",
      "line": 17,
      "content": "* 6. Object.keys/values/entries patterns: Object.keys(obj as unknown) → Object.keys(obj)",
      "context": " * 4. Object method patterns: (obj as unknown).method() → obj.method()\n * 5. Array access patterns: (arr as unknown)[index] → arr[index]\n * 6. Object.keys/values/entries patterns: Object.keys(obj as unknown) → Object.keys(obj)\n * \n * IMPLEMENTATION STRATEGY:",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "enhanced-as-unknown-fixer.ts",
      "line": 65,
      "content": "console.log(\"🚀 Starting enhanced 'as unknown' fixer...\");",
      "context": "    const startTime = Date.now();\n    \n    console.log(\"🚀 Starting enhanced 'as unknown' fixer...\");\n    console.log(\"Target: Safe, high-confidence transformations\");\n    ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "enhanced-as-unknown-fixer.ts",
      "line": 103,
      "content": "// Check if this is an 'as unknown' assertion",
      "context": "    \n    for (const asExpression of asExpressions) {\n      // Check if this is an 'as unknown' assertion\n      const typeText = asExpression.getType().getText();\n      if (typeText !== \"unknown\") continue;",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "enhanced-as-unknown-fixer.ts",
      "line": 122,
      "content": "// Pattern 1: Property access - (obj as unknown).prop",
      "context": "  \n  private tryTransformAsExpression(asExpression: AsExpression): boolean {\n    // Pattern 1: Property access - (obj as unknown).prop\n    if (this.transformPropertyAccess(asExpression)) {\n      this.recordTransformation(\"Property Access\", true);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "enhanced-as-unknown-fixer.ts",
      "line": 128,
      "content": "// Pattern 2: Return statements - return value as unknown",
      "context": "    }\n    \n    // Pattern 2: Return statements - return value as unknown\n    if (this.transformReturnStatement(asExpression)) {\n      this.recordTransformation(\"Return Statement\", true);",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "enhanced-as-unknown-fixer.ts",
      "line": 134,
      "content": "// Pattern 3: Null/undefined literals - null as unknown",
      "context": "    }\n    \n    // Pattern 3: Null/undefined literals - null as unknown\n    if (this.transformNullUndefined(asExpression)) {\n      this.recordTransformation(\"Null/Undefined\", true);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "enhanced-as-unknown-fixer.ts",
      "line": 140,
      "content": "// Pattern 4: Object method calls - (obj as unknown).method()",
      "context": "    }\n    \n    // Pattern 4: Object method calls - (obj as unknown).method()\n    if (this.transformMethodCall(asExpression)) {\n      this.recordTransformation(\"Method Call\", true);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "enhanced-as-unknown-fixer.ts",
      "line": 146,
      "content": "// Pattern 5: Array access - (arr as unknown)[index]",
      "context": "    }\n    \n    // Pattern 5: Array access - (arr as unknown)[index]\n    if (this.transformArrayAccess(asExpression)) {\n      this.recordTransformation(\"Array Access\", true);",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "enhanced-as-unknown-fixer.ts",
      "line": 152,
      "content": "// Pattern 6: Object.keys/values/entries - Object.keys(obj as unknown)",
      "context": "    }\n    \n    // Pattern 6: Object.keys/values/entries - Object.keys(obj as unknown)\n    if (this.transformObjectMethods(asExpression)) {\n      this.recordTransformation(\"Object Methods\", true);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "enhanced-as-unknown-fixer.ts",
      "line": 158,
      "content": "// Pattern 7: Variable assignments - const x = value as unknown",
      "context": "    }\n    \n    // Pattern 7: Variable assignments - const x = value as unknown\n    if (this.transformVariableAssignment(asExpression)) {\n      this.recordTransformation(\"Variable Assignment\", true);",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "enhanced-as-unknown-fixer.ts",
      "line": 171,
      "content": "// Check for (expr as unknown).property",
      "context": "    const parent = asExpression.getParent();\n    \n    // Check for (expr as unknown).property\n    if (parent?.getKind() === SyntaxKind.ParenthesizedExpression) {\n      const grandParent = parent.getParent();",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "enhanced-as-unknown-fixer.ts",
      "line": 211,
      "content": "// Transform null as unknown → null, undefined as unknown → undefined",
      "context": "    const exprText = expression.getText();\n    \n    // Transform null as unknown → null, undefined as unknown → undefined\n    if (exprText === \"null\" || exprText === \"undefined\") {\n      asExpression.replaceWithText(exprText);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "enhanced-as-unknown-fixer.ts",
      "line": 223,
      "content": "// Check for (expr as unknown).method()",
      "context": "    const parent = asExpression.getParent();\n    \n    // Check for (expr as unknown).method()\n    if (parent?.getKind() === SyntaxKind.ParenthesizedExpression) {\n      const grandParent = parent.getParent();",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "enhanced-as-unknown-fixer.ts",
      "line": 249,
      "content": "// Check for (expr as unknown)[index]",
      "context": "    const parent = asExpression.getParent();\n    \n    // Check for (expr as unknown)[index]\n    if (parent?.getKind() === SyntaxKind.ParenthesizedExpression) {\n      const grandParent = parent.getParent();",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "enhanced-as-unknown-fixer.ts",
      "line": 270,
      "content": "// Check for Object.keys(expr as unknown), Object.values(expr as unknown), etc.",
      "context": "    const parent = asExpression.getParent();\n    \n    // Check for Object.keys(expr as unknown), Object.values(expr as unknown), etc.\n    if (parent?.getKind() === SyntaxKind.CallExpression) {\n      const callExpression = parent as CallExpression;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "enhanced-as-unknown-fixer.ts",
      "line": 299,
      "content": "// Check for const x = value as unknown, let x = value as unknown",
      "context": "    const parent = asExpression.getParent();\n    \n    // Check for const x = value as unknown, let x = value as unknown\n    if (parent?.getKind() === SyntaxKind.VariableDeclaration) {\n      const expression = asExpression.getExpression();",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "enhanced-as-unknown-fixer.ts",
      "line": 387,
      "content": "console.log(`Total 'as unknown' assertions: ${this.metrics.totalAssertions}`);",
      "context": "    console.log(\"========================\");\n    console.log(`Files processed: ${this.metrics.filesProcessed}`);\n    console.log(`Total 'as unknown' assertions: ${this.metrics.totalAssertions}`);\n    console.log(`Processing time: ${this.metrics.processingTime}ms`);\n    ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "analyze-as-unknown.ts",
      "line": 29,
      "content": "console.log(\"🔍 Scanning for \\\"as unknown\\\" assertions...\");",
      "context": "\n  async analyzeCodebase(): Promise<AnalysisReport> {\n    console.log(\"🔍 Scanning for \\\"as unknown\\\" assertions...\");\n    \n    // Find all TypeScript files",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "analyze-as-unknown.ts",
      "line": 52,
      "content": "if (line.includes(\"as unknown\")) {",
      "context": "      \n      lines.forEach((line, index) => {\n        if (line.includes(\"as unknown\")) {\n          const match = this.categorizeAssertion(filepath, index + 1, line, lines);\n          if (match) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "analyze-as-unknown.ts",
      "line": 89,
      "content": "} else if (trimmed.includes(\"undefined as unknown\") ||",
      "context": "        priority = \"low\";\n        reason = \"Test mocking - may be legitimate for test setup\";\n      } else if (trimmed.includes(\"undefined as unknown\") || \n                 trimmed.includes(\"null as unknown\")) {\n        category = \"test-mocking\";",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "analyze-as-unknown.ts",
      "line": 90,
      "content": "trimmed.includes(\"null as unknown\")) {",
      "context": "        reason = \"Test mocking - may be legitimate for test setup\";\n      } else if (trimmed.includes(\"undefined as unknown\") || \n                 trimmed.includes(\"null as unknown\")) {\n        category = \"test-mocking\";\n        priority = \"medium\";",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "analyze-as-unknown.ts",
      "line": 101,
      "content": "if (trimmed.includes(\"undefined as unknown\") ||",
      "context": "    } else {\n      // Production code patterns\n      if (trimmed.includes(\"undefined as unknown\") || \n          trimmed.includes(\"null as unknown\")) {\n        category = \"error-masking\";",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "analyze-as-unknown.ts",
      "line": 102,
      "content": "trimmed.includes(\"null as unknown\")) {",
      "context": "      // Production code patterns\n      if (trimmed.includes(\"undefined as unknown\") || \n          trimmed.includes(\"null as unknown\")) {\n        category = \"error-masking\";\n        priority = \"high\";",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "analyze-as-unknown.ts",
      "line": 111,
      "content": "} else if (trimmed.includes(\"this as unknown\")) {",
      "context": "        priority = \"medium\";\n        reason = \"JSON parsing - may need proper type guards\";\n      } else if (trimmed.includes(\"this as unknown\")) {\n        category = \"error-masking\";\n        priority = \"high\";",
      "category": "error-masking",
      "priority": "high",
      "reason": "This context masking - likely type error"
    },
    {
      "file": "analyze-as-unknown.ts",
      "line": 116,
      "content": "trimmed.includes(\"as unknown\") && trimmed.includes(\".\")) {",
      "context": "        reason = \"This context masking - likely type error\";\n      } else if (trimmed.includes(\"(\") && trimmed.includes(\")\") && \n                 trimmed.includes(\"as unknown\") && trimmed.includes(\".\")) {\n        category = \"error-masking\";\n        priority = \"high\";",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "analyze-as-unknown.ts",
      "line": 194,
      "content": "console.log(`Total \"as unknown\" assertions found: ${report.totalCount}`);",
      "context": "  console.log(\"\\n📊 ANALYSIS REPORT\");\n  console.log(\"==================\");\n  console.log(`Total \"as unknown\" assertions found: ${report.totalCount}`);\n  \n  console.log(\"\\n📂 By Category:\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "analyze-as-unknown.ts",
      "line": 222,
      "content": "return `# \"as unknown\" Analysis Report",
      "context": "\nfunction generateMarkdownSummary(report: AnalysisReport): string {\n  return `# \"as unknown\" Analysis Report\n\n## Summary",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 19,
      "content": "console.log(\"🔧 Starting automated as unknown fixes...\");",
      "context": "\n  async fixCodebase(): Promise<void> {\n    console.log(\"🔧 Starting automated as unknown fixes...\");\n    \n    // Find all TypeScript files",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 80,
      "content": "return (content.match(/as unknown/g) || []).length;",
      "context": "\n  private countAsUnknown(content: string): number {\n    return (content.match(/as unknown/g) || []).length;\n  }\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 87,
      "content": "pattern: /\\(state as unknown\\)\\.sessions/g,",
      "context": "      // State and session object access\n      {\n        pattern: /\\(state as unknown\\)\\.sessions/g,\n        replacement: \"state.sessions\",\n        description: \"Fixed state.sessions access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 92,
      "content": "pattern: /\\(state\\.sessions as unknown\\)/g,",
      "context": "      },\n      {\n        pattern: /\\(state\\.sessions as unknown\\)/g,\n        replacement: \"state.sessions\",\n        description: \"Fixed state.sessions wrapper\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 97,
      "content": "pattern: /\\(s as unknown\\)\\.session/g,",
      "context": "      },\n      {\n        pattern: /\\(s as unknown\\)\\.session/g,\n        replacement: \"s.session\",\n        description: \"Fixed session record access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 102,
      "content": "pattern: /\\(s as unknown\\)\\.taskId/g,",
      "context": "      },\n      {\n        pattern: /\\(s as unknown\\)\\.taskId/g,\n        replacement: \"s.taskId\",\n        description: \"Fixed taskId access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 107,
      "content": "pattern: /\\(session as unknown\\)\\.session/g,",
      "context": "      },\n      {\n        pattern: /\\(session as unknown\\)\\.session/g,\n        replacement: \"session.session\",\n        description: \"Fixed session property access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 112,
      "content": "pattern: /\\(session as unknown\\)\\.taskId/g,",
      "context": "      },\n      {\n        pattern: /\\(session as unknown\\)\\.taskId/g,\n        replacement: \"session.taskId\",\n        description: \"Fixed session taskId access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 117,
      "content": "pattern: /\\(workspace as unknown\\)\\.workspaceDir/g,",
      "context": "      },\n      {\n        pattern: /\\(workspace as unknown\\)\\.workspaceDir/g,\n        replacement: \"workspace.workspaceDir\",\n        description: \"Fixed workspace directory access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 122,
      "content": "pattern: /\\(workspace as unknown\\)\\.sessionName/g,",
      "context": "      },\n      {\n        pattern: /\\(workspace as unknown\\)\\.sessionName/g,\n        replacement: \"workspace.sessionName\",\n        description: \"Fixed workspace session name access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 128,
      "content": "pattern: /\\(this\\.config as unknown\\)\\.path/g,",
      "context": "      // Config and environment access\n      {\n        pattern: /\\(this\\.config as unknown\\)\\.path/g,\n        replacement: \"this.config.path\",\n        description: \"Fixed config path access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 133,
      "content": "pattern: /\\(process\\.env as unknown\\)\\.([A-Z_]+)/g,",
      "context": "      },\n      {\n        pattern: /\\(process\\.env as unknown\\)\\.([A-Z_]+)/g,\n        replacement: \"process.env.$1\",\n        description: \"Fixed environment variable access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 139,
      "content": "pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.length/g,",
      "context": "      // Array and object method access\n      {\n        pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.length/g,\n        replacement: \"$1.length\",\n        description: \"Fixed array length access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 144,
      "content": "pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.push/g,",
      "context": "      },\n      {\n        pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.push/g,\n        replacement: \"$1.push\",\n        description: \"Fixed array push access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 149,
      "content": "pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.find/g,",
      "context": "      },\n      {\n        pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.find/g,\n        replacement: \"$1.find\",\n        description: \"Fixed array find access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 154,
      "content": "pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.findIndex/g,",
      "context": "      },\n      {\n        pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.findIndex/g,\n        replacement: \"$1.findIndex\",\n        description: \"Fixed array findIndex access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 159,
      "content": "pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.splice/g,",
      "context": "      },\n      {\n        pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.splice/g,\n        replacement: \"$1.splice\",\n        description: \"Fixed array splice access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 164,
      "content": "pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.filter/g,",
      "context": "      },\n      {\n        pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.filter/g,\n        replacement: \"$1.filter\",\n        description: \"Fixed array filter access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 169,
      "content": "pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.map/g,",
      "context": "      },\n      {\n        pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.map/g,\n        replacement: \"$1.map\",\n        description: \"Fixed array map access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 174,
      "content": "pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.split/g,",
      "context": "      },\n      {\n        pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.split/g,\n        replacement: \"$1.split\",\n        description: \"Fixed string split access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 179,
      "content": "pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.trim/g,",
      "context": "      },\n      {\n        pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.trim/g,\n        replacement: \"$1.trim\",\n        description: \"Fixed string trim access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 184,
      "content": "pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.replace/g,",
      "context": "      },\n      {\n        pattern: /\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.replace/g,\n        replacement: \"$1.replace\",\n        description: \"Fixed string replace access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 205,
      "content": "pattern: /\\[\\.\\.\\.\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.([a-zA-Z_][a-zA-Z0-9_]*)\\]/g,",
      "context": "    const patterns = [\n      {\n        pattern: /\\[\\.\\.\\.\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\.([a-zA-Z_][a-zA-Z0-9_]*)\\]/g,\n        replacement: \"[...$1.$2]\",\n        description: \"Fixed array spread with property access\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 210,
      "content": "pattern: /\\[\\.\\.\\.\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\]/g,",
      "context": "      },\n      {\n        pattern: /\\[\\.\\.\\.\\(([a-zA-Z_][a-zA-Z0-9_]*) as unknown\\)\\]/g,\n        replacement: \"[...$1]\",\n        description: \"Fixed array spread\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 231,
      "content": "pattern: /\\(this\\.sessionProvider as unknown\\)\\.getSession/g,",
      "context": "    const patterns = [\n      {\n        pattern: /\\(this\\.sessionProvider as unknown\\)\\.getSession/g,\n        replacement: \"this.sessionProvider.getSession\",\n        description: \"Fixed sessionProvider.getSession call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 236,
      "content": "pattern: /\\(this\\.sessionProvider as unknown\\)\\.getSessionByTaskId/g,",
      "context": "      },\n      {\n        pattern: /\\(this\\.sessionProvider as unknown\\)\\.getSessionByTaskId/g,\n        replacement: \"this.sessionProvider.getSessionByTaskId\",\n        description: \"Fixed sessionProvider.getSessionByTaskId call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 241,
      "content": "pattern: /\\(this\\.sessionProvider as unknown\\)\\.listSessions/g,",
      "context": "      },\n      {\n        pattern: /\\(this\\.sessionProvider as unknown\\)\\.listSessions/g,\n        replacement: \"this.sessionProvider.listSessions\",\n        description: \"Fixed sessionProvider.listSessions call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 246,
      "content": "pattern: /\\(this\\.sessionProvider as unknown\\)\\.getSessionWorkdir/g,",
      "context": "      },\n      {\n        pattern: /\\(this\\.sessionProvider as unknown\\)\\.getSessionWorkdir/g,\n        replacement: \"this.sessionProvider.getSessionWorkdir\",\n        description: \"Fixed sessionProvider.getSessionWorkdir call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 251,
      "content": "pattern: /\\(this\\.pathResolver as unknown\\)\\.getRelativePathFromSession/g,",
      "context": "      },\n      {\n        pattern: /\\(this\\.pathResolver as unknown\\)\\.getRelativePathFromSession/g,\n        replacement: \"this.pathResolver.getRelativePathFromSession\",\n        description: \"Fixed pathResolver.getRelativePathFromSession call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 256,
      "content": "pattern: /\\(this\\.pathResolver as unknown\\)\\.validateAndResolvePath/g,",
      "context": "      },\n      {\n        pattern: /\\(this\\.pathResolver as unknown\\)\\.validateAndResolvePath/g,\n        replacement: \"this.pathResolver.validateAndResolvePath\",\n        description: \"Fixed pathResolver.validateAndResolvePath call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 261,
      "content": "pattern: /\\(this\\.workspaceBackend as unknown\\)\\.readFile/g,",
      "context": "      },\n      {\n        pattern: /\\(this\\.workspaceBackend as unknown\\)\\.readFile/g,\n        replacement: \"this.workspaceBackend.readFile\",\n        description: \"Fixed workspaceBackend.readFile call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 266,
      "content": "pattern: /\\(this\\.workspaceBackend as unknown\\)\\.writeFile/g,",
      "context": "      },\n      {\n        pattern: /\\(this\\.workspaceBackend as unknown\\)\\.writeFile/g,\n        replacement: \"this.workspaceBackend.writeFile\",\n        description: \"Fixed workspaceBackend.writeFile call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 271,
      "content": "pattern: /\\(this\\.workspaceBackend as unknown\\)\\.deleteFile/g,",
      "context": "      },\n      {\n        pattern: /\\(this\\.workspaceBackend as unknown\\)\\.deleteFile/g,\n        replacement: \"this.workspaceBackend.deleteFile\",\n        description: \"Fixed workspaceBackend.deleteFile call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 276,
      "content": "pattern: /\\(this\\.workspaceBackend as unknown\\)\\.listDirectory/g,",
      "context": "      },\n      {\n        pattern: /\\(this\\.workspaceBackend as unknown\\)\\.listDirectory/g,\n        replacement: \"this.workspaceBackend.listDirectory\",\n        description: \"Fixed workspaceBackend.listDirectory call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 281,
      "content": "pattern: /\\(this\\.workspaceBackend as unknown\\)\\.exists/g,",
      "context": "      },\n      {\n        pattern: /\\(this\\.workspaceBackend as unknown\\)\\.exists/g,\n        replacement: \"this.workspaceBackend.exists\",\n        description: \"Fixed workspaceBackend.exists call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 286,
      "content": "pattern: /\\(this\\.workspaceBackend as unknown\\)\\.createDirectory/g,",
      "context": "      },\n      {\n        pattern: /\\(this\\.workspaceBackend as unknown\\)\\.createDirectory/g,\n        replacement: \"this.workspaceBackend.createDirectory\",\n        description: \"Fixed workspaceBackend.createDirectory call\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 307,
      "content": "pattern: /return null as unknown;/g,",
      "context": "    const patterns = [\n      {\n        pattern: /return null as unknown;/g,\n        replacement: \"return null;\",\n        description: \"Fixed return null statement\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 312,
      "content": "pattern: /return undefined as unknown;/g,",
      "context": "      },\n      {\n        pattern: /return undefined as unknown;/g,\n        replacement: \"return undefined;\",\n        description: \"Fixed return undefined statement\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 333,
      "content": "pattern: /\\(this as unknown\\)\\.name = \"([^\"]+)\";/g,",
      "context": "    const patterns = [\n      {\n        pattern: /\\(this as unknown\\)\\.name = \"([^\"]+)\";/g,\n        replacement: \"this.name = \\\"$1\\\";\",\n        description: \"Fixed this.name assignment\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "This context masking - likely type error"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 354,
      "content": "pattern: /: undefined as unknown/g,",
      "context": "    const patterns = [\n      {\n        pattern: /: undefined as unknown/g,\n        replacement: \": undefined\",\n        description: \"Fixed undefined type annotation\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 359,
      "content": "pattern: /\\? undefined as unknown/g,",
      "context": "      },\n      {\n        pattern: /\\? undefined as unknown/g,\n        replacement: \"? undefined\",\n        description: \"Fixed ternary undefined\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 364,
      "content": "pattern: /undefined as unknown,/g,",
      "context": "      },\n      {\n        pattern: /undefined as unknown,/g,\n        replacement: \"undefined,\",\n        description: \"Fixed undefined in parameter list\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 380,
      "content": "/null as unknown/g,",
      "context": "    // Track remaining dangerous patterns\n    const dangerousPatterns = [\n      /null as unknown/g,\n      /undefined as unknown/g\n    ];",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "create-automated-fixes.ts",
      "line": 381,
      "content": "/undefined as unknown/g",
      "context": "    const dangerousPatterns = [\n      /null as unknown/g,\n      /undefined as unknown/g\n    ];\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "enhanced-as-unknown-fixer-v2.ts",
      "line": 13,
      "content": "* 1. Function parameter patterns: func(param as unknown)",
      "context": " * \n * NEW PATTERNS ADDED:\n * 1. Function parameter patterns: func(param as unknown)\n * 2. Object destructuring: const { prop } = obj as unknown\n * 3. Simple comparison operations: value === (result as unknown)",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "enhanced-as-unknown-fixer-v2.ts",
      "line": 14,
      "content": "* 2. Object destructuring: const { prop } = obj as unknown",
      "context": " * NEW PATTERNS ADDED:\n * 1. Function parameter patterns: func(param as unknown)\n * 2. Object destructuring: const { prop } = obj as unknown\n * 3. Simple comparison operations: value === (result as unknown)\n * 4. Type guard patterns: if (value as unknown)",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "enhanced-as-unknown-fixer-v2.ts",
      "line": 15,
      "content": "* 3. Simple comparison operations: value === (result as unknown)",
      "context": " * 1. Function parameter patterns: func(param as unknown)\n * 2. Object destructuring: const { prop } = obj as unknown\n * 3. Simple comparison operations: value === (result as unknown)\n * 4. Type guard patterns: if (value as unknown)\n * 5. Error object patterns: (error as unknown).message",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "enhanced-as-unknown-fixer-v2.ts",
      "line": 16,
      "content": "* 4. Type guard patterns: if (value as unknown)",
      "context": " * 2. Object destructuring: const { prop } = obj as unknown\n * 3. Simple comparison operations: value === (result as unknown)\n * 4. Type guard patterns: if (value as unknown)\n * 5. Error object patterns: (error as unknown).message\n * 6. Configuration patterns: (config as unknown).key",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "enhanced-as-unknown-fixer-v2.ts",
      "line": 17,
      "content": "* 5. Error object patterns: (error as unknown).message",
      "context": " * 3. Simple comparison operations: value === (result as unknown)\n * 4. Type guard patterns: if (value as unknown)\n * 5. Error object patterns: (error as unknown).message\n * 6. Configuration patterns: (config as unknown).key\n * 7. Ternary expressions: condition ? (value as unknown) : other",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "enhanced-as-unknown-fixer-v2.ts",
      "line": 18,
      "content": "* 6. Configuration patterns: (config as unknown).key",
      "context": " * 4. Type guard patterns: if (value as unknown)\n * 5. Error object patterns: (error as unknown).message\n * 6. Configuration patterns: (config as unknown).key\n * 7. Ternary expressions: condition ? (value as unknown) : other\n */",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "enhanced-as-unknown-fixer-v2.ts",
      "line": 19,
      "content": "* 7. Ternary expressions: condition ? (value as unknown) : other",
      "context": " * 5. Error object patterns: (error as unknown).message\n * 6. Configuration patterns: (config as unknown).key\n * 7. Ternary expressions: condition ? (value as unknown) : other\n */\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "enhanced-as-unknown-fixer-v2.ts",
      "line": 61,
      "content": "console.log(\"🚀 Starting enhanced 'as unknown' fixer v2...\");",
      "context": "    const startTime = Date.now();\n    \n    console.log(\"🚀 Starting enhanced 'as unknown' fixer v2...\");\n    console.log(\"Target: Additional safe patterns + improved detection\");\n    ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "enhanced-as-unknown-fixer-v2.ts",
      "line": 99,
      "content": "// Check if this is an 'as unknown' assertion",
      "context": "    \n    for (const asExpression of asExpressions) {\n      // Check if this is an 'as unknown' assertion\n      const typeText = asExpression.getTypeNode()?.getText();\n      if (typeText !== \"unknown\") continue;",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "enhanced-as-unknown-fixer-v2.ts",
      "line": 333,
      "content": "// Check if this is a function parameter: func(param as unknown)",
      "context": "    const parent = asExpression.getParent();\n    \n    // Check if this is a function parameter: func(param as unknown)\n    if (parent?.getKind() === SyntaxKind.CallExpression) {\n      const expression = asExpression.getExpression();",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "enhanced-as-unknown-fixer-v2.ts",
      "line": 351,
      "content": "// Check if this is in a binary expression: value === (result as unknown)",
      "context": "    const parent = asExpression.getParent();\n    \n    // Check if this is in a binary expression: value === (result as unknown)\n    if (parent?.getKind() === SyntaxKind.BinaryExpression) {\n      const expression = asExpression.getExpression();",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "enhanced-as-unknown-fixer-v2.ts",
      "line": 368,
      "content": "// Check if this is in a conditional: condition ? (value as unknown) : other",
      "context": "    const parent = asExpression.getParent();\n    \n    // Check if this is in a conditional: condition ? (value as unknown) : other\n    if (parent?.getKind() === SyntaxKind.ConditionalExpression) {\n      const expression = asExpression.getExpression();",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "enhanced-as-unknown-fixer-v2.ts",
      "line": 385,
      "content": "// Check for error patterns: (error as unknown).message",
      "context": "    const parent = asExpression.getParent();\n    \n    // Check for error patterns: (error as unknown).message\n    if (parent?.getKind() === SyntaxKind.ParenthesizedExpression) {\n      const grandParent = parent.getParent();",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "enhanced-as-unknown-fixer-v2.ts",
      "line": 411,
      "content": "// Check for config patterns: (config as unknown).key",
      "context": "    const parent = asExpression.getParent();\n    \n    // Check for config patterns: (config as unknown).key\n    if (parent?.getKind() === SyntaxKind.ParenthesizedExpression) {\n      const grandParent = parent.getParent();",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "enhanced-as-unknown-fixer-v2.ts",
      "line": 431,
      "content": "// Check for type guards: if (value as unknown)",
      "context": "    const parent = asExpression.getParent();\n    \n    // Check for type guards: if (value as unknown)\n    if (parent?.getKind() === SyntaxKind.IfStatement ||\n        parent?.getKind() === SyntaxKind.WhileStatement ||",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "enhanced-as-unknown-fixer-v2.ts",
      "line": 450,
      "content": "// Check for destructuring: const { prop } = obj as unknown",
      "context": "    const parent = asExpression.getParent();\n    \n    // Check for destructuring: const { prop } = obj as unknown\n    if (parent?.getKind() === SyntaxKind.VariableDeclaration) {\n      const varDecl = parent as VariableDeclaration;",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "enhanced-as-unknown-fixer-v2.ts",
      "line": 584,
      "content": "console.log(`Total 'as unknown' assertions: ${this.metrics.totalAssertions}`);",
      "context": "    console.log(\"============================\");\n    console.log(`Files processed: ${this.metrics.filesProcessed}`);\n    console.log(`Total 'as unknown' assertions: ${this.metrics.totalAssertions}`);\n    console.log(`Processing time: ${this.metrics.processingTime}ms`);\n    ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 6,
      "content": "* Systematically removes excessive 'as unknown' type assertions throughout the codebase",
      "context": " * AS-UNKNOWN AST Codemod for Task #280\n * \n * Systematically removes excessive 'as unknown' type assertions throughout the codebase\n * to improve TypeScript effectiveness and reduce technical debt.\n * ",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 10,
      "content": "* The codebase contains 2,728 'as unknown' assertions, with 2,461 classified as high priority.",
      "context": " * \n * PROBLEM STATEMENT:\n * The codebase contains 2,728 'as unknown' assertions, with 2,461 classified as high priority.\n * These assertions mask real type errors, reduce TypeScript effectiveness, and create technical debt.\n * ",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 22,
      "content": "*    BEFORE: (state as unknown).sessions",
      "context": " * \n * 1. Property Access Patterns (HIGH PRIORITY)\n *    BEFORE: (state as unknown).sessions\n *    AFTER:  state.sessions\n *    ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 25,
      "content": "*    BEFORE: (this.sessionProvider as unknown).getSession(name)",
      "context": " *    AFTER:  state.sessions\n *    \n *    BEFORE: (this.sessionProvider as unknown).getSession(name)\n *    AFTER:  this.sessionProvider.getSession(name)\n * ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 29,
      "content": "*    BEFORE: (sessions as unknown).find(s => s.id === id)",
      "context": " * \n * 2. Array/Object Method Access (HIGH PRIORITY)\n *    BEFORE: (sessions as unknown).find(s => s.id === id)\n *    AFTER:  sessions.find(s => s.id === id)\n * ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 33,
      "content": "*    BEFORE: return null as unknown;",
      "context": " * \n * 3. Return Statement Patterns (CRITICAL PRIORITY)\n *    BEFORE: return null as unknown;\n *    AFTER:  return null;\n * ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 37,
      "content": "*    BEFORE: const result = undefined as unknown;",
      "context": " * \n * 4. Null/Undefined Patterns (CRITICAL PRIORITY)\n *    BEFORE: const result = undefined as unknown;\n *    AFTER:  const result = undefined;\n * ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 41,
      "content": "*    BEFORE: (this as unknown).name = \"ErrorName\";",
      "context": " * \n * 5. This Context Patterns (HIGH PRIORITY)\n *    BEFORE: (this as unknown).name = \"ErrorName\";\n *    AFTER:  this.name = \"ErrorName\";\n * ",
      "category": "error-masking",
      "priority": "high",
      "reason": "This context masking - likely type error"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 70,
      "content": "* - Task #280: Cleanup excessive 'as unknown' assertions",
      "context": " * \n * RELATED TASKS:\n * - Task #280: Cleanup excessive 'as unknown' assertions\n * - Task #276: Test suite optimization (identified the problem)\n * - Task #271: Risk-aware type cast fixing (similar patterns)",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 291,
      "content": "description: \"Remove 'as unknown' from return statements with null/undefined\",",
      "context": "      {\n        name: \"Return Statement Null/Undefined\",\n        description: \"Remove 'as unknown' from return statements with null/undefined\",\n        riskLevel: \"critical\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 296,
      "content": "(text.includes(\"null as unknown\") || text.includes(\"undefined as unknown\"));",
      "context": "          const text = node.getText();\n          return context.includes(\"return\") && \n                 (text.includes(\"null as unknown\") || text.includes(\"undefined as unknown\"));\n        },\n        canAutoFix: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 304,
      "content": "description: \"Remove 'as unknown' from null/undefined assignments\",",
      "context": "      {\n        name: \"Null/Undefined Assignment\",\n        description: \"Remove 'as unknown' from null/undefined assignments\",\n        riskLevel: \"critical\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 308,
      "content": "return text === \"null as unknown\" || text === \"undefined as unknown\";",
      "context": "        detector: (node: AsExpression, context: string) => {\n          const text = node.getText();\n          return text === \"null as unknown\" || text === \"undefined as unknown\";\n        },\n        canAutoFix: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 316,
      "content": "description: \"Remove 'as unknown' from state/session property access\",",
      "context": "      {\n        name: \"State/Session Property Access\",\n        description: \"Remove 'as unknown' from state/session property access\",\n        riskLevel: \"high\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 320,
      "content": "return text.includes(\"state as unknown\") ||",
      "context": "        detector: (node: AsExpression, context: string) => {\n          const text = node.getText();\n          return text.includes(\"state as unknown\") || \n                 text.includes(\"session as unknown\") ||\n                 text.includes(\"sessions as unknown\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 321,
      "content": "text.includes(\"session as unknown\") ||",
      "context": "          const text = node.getText();\n          return text.includes(\"state as unknown\") || \n                 text.includes(\"session as unknown\") ||\n                 text.includes(\"sessions as unknown\");\n        },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 322,
      "content": "text.includes(\"sessions as unknown\");",
      "context": "          return text.includes(\"state as unknown\") || \n                 text.includes(\"session as unknown\") ||\n                 text.includes(\"sessions as unknown\");\n        },\n        canAutoFix: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 330,
      "content": "description: \"Remove 'as unknown' from service method calls\",",
      "context": "      {\n        name: \"Service Method Calls\",\n        description: \"Remove 'as unknown' from service method calls\",\n        riskLevel: \"high\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 334,
      "content": "return text.includes(\"this.sessionProvider as unknown\") ||",
      "context": "        detector: (node: AsExpression, context: string) => {\n          const text = node.getText();\n          return text.includes(\"this.sessionProvider as unknown\") ||\n                 text.includes(\"this.pathResolver as unknown\") ||\n                 text.includes(\"this.workspaceBackend as unknown\") ||",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 335,
      "content": "text.includes(\"this.pathResolver as unknown\") ||",
      "context": "          const text = node.getText();\n          return text.includes(\"this.sessionProvider as unknown\") ||\n                 text.includes(\"this.pathResolver as unknown\") ||\n                 text.includes(\"this.workspaceBackend as unknown\") ||\n                 text.includes(\"this.config as unknown\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 336,
      "content": "text.includes(\"this.workspaceBackend as unknown\") ||",
      "context": "          return text.includes(\"this.sessionProvider as unknown\") ||\n                 text.includes(\"this.pathResolver as unknown\") ||\n                 text.includes(\"this.workspaceBackend as unknown\") ||\n                 text.includes(\"this.config as unknown\");\n        },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 337,
      "content": "text.includes(\"this.config as unknown\");",
      "context": "                 text.includes(\"this.pathResolver as unknown\") ||\n                 text.includes(\"this.workspaceBackend as unknown\") ||\n                 text.includes(\"this.config as unknown\");\n        },\n        canAutoFix: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 345,
      "content": "description: \"Remove 'as unknown' from array/object method calls\",",
      "context": "      {\n        name: \"Array/Object Method Access\",\n        description: \"Remove 'as unknown' from array/object method calls\",\n        riskLevel: \"high\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 382,
      "content": "description: \"Remove 'as unknown' from this context property access\",",
      "context": "      {\n        name: \"This Context Access\",\n        description: \"Remove 'as unknown' from this context property access\",\n        riskLevel: \"high\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 386,
      "content": "return text.includes(\"this as unknown\");",
      "context": "        detector: (node: AsExpression, context: string) => {\n          const text = node.getText();\n          return text.includes(\"this as unknown\");\n        },\n        canAutoFix: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "This context masking - likely type error"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 394,
      "content": "description: \"Remove 'as unknown' from process.env access\",",
      "context": "      {\n        name: \"Environment Variable Access\",\n        description: \"Remove 'as unknown' from process.env access\",\n        riskLevel: \"medium\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 398,
      "content": "return text.includes(\"process.env as unknown\");",
      "context": "        detector: (node: AsExpression, context: string) => {\n          const text = node.getText();\n          return text.includes(\"process.env as unknown\");\n        },\n        canAutoFix: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 406,
      "content": "description: \"Remove 'as unknown' from method calls on external objects\",",
      "context": "      {\n        name: \"External Object Method Calls\",\n        description: \"Remove 'as unknown' from method calls on external objects\",\n        riskLevel: \"high\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 420,
      "content": "// Match patterns like (format as unknown).timestamp(), (z.string() as unknown).optional()",
      "context": "          if (parent && parent.getKind() === SyntaxKind.PropertyAccessExpression) {\n            const text = node.getText();\n            // Match patterns like (format as unknown).timestamp(), (z.string() as unknown).optional()\n            return text.includes(\"format\") || text.includes(\"z.\") || text.includes(\"Date\") || \n                   text.includes(\"Math\") || text.includes(\"JSON\") || text.includes(\"Object\") ||",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 433,
      "content": "description: \"Remove 'as unknown' from property access on constants\",",
      "context": "      {\n        name: \"Constant Property Access\",\n        description: \"Remove 'as unknown' from property access on constants\",\n        riskLevel: \"high\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 447,
      "content": "// Match patterns like (descriptions as unknown).SESSION_DESCRIPTION",
      "context": "          if (parent && parent.getKind() === SyntaxKind.PropertyAccessExpression) {\n            const text = node.getText();\n            // Match patterns like (descriptions as unknown).SESSION_DESCRIPTION\n            return text.includes(\"descriptions\") || text.includes(\"constants\") || \n                   text.includes(\"config\") || text.includes(\"options\") || text.includes(\"params\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 459,
      "content": "description: \"Remove 'as unknown' from object property access\",",
      "context": "      {\n        name: \"Object Property Access\",\n        description: \"Remove 'as unknown' from object property access\",\n        riskLevel: \"high\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 473,
      "content": "// Match patterns like (logInfo as unknown).message, (result as unknown).status",
      "context": "          if (parent && parent.getKind() === SyntaxKind.PropertyAccessExpression) {\n            const text = node.getText();\n            // Match patterns like (logInfo as unknown).message, (result as unknown).status\n            return !text.includes(\"process.env\") && // Already handled above\n                   !text.includes(\"format\") && // Already handled above",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 488,
      "content": "this.log(\"🔍 Analyzing 'as unknown' assertions...\");",
      "context": "\n  protected findIssues(): void {\n    this.log(\"🔍 Analyzing 'as unknown' assertions...\");\n    \n    const sourceFiles = this.project.getSourceFiles();",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 502,
      "content": "// Check if it's 'as unknown'",
      "context": "          const typeNode = asExpression.getType();\n          \n          // Check if it's 'as unknown'\n          if (asExpression.getText().includes(\"as unknown\")) {\n            this.analyzeAsUnknownExpression(asExpression, filePath);",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 503,
      "content": "if (asExpression.getText().includes(\"as unknown\")) {",
      "context": "          \n          // Check if it's 'as unknown'\n          if (asExpression.getText().includes(\"as unknown\")) {\n            this.analyzeAsUnknownExpression(asExpression, filePath);\n          }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 510,
      "content": "this.log(`📊 Found ${this.asUnknownIssues.length} 'as unknown' assertions`);",
      "context": "    }\n\n    this.log(`📊 Found ${this.asUnknownIssues.length} 'as unknown' assertions`);\n    this.metrics.issuesFound = this.asUnknownIssues.length;\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 528,
      "content": "description: \"Unmatched 'as unknown' pattern - needs manual review\",",
      "context": "        line,\n        column,\n        description: \"Unmatched 'as unknown' pattern - needs manual review\",\n        context,\n        type: \"as_unknown_unmatched\",",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 552,
      "content": "suggestedFix: \"Extract expression from 'as unknown' assertion\"",
      "context": "      transformationType: this.getTransformationType(pattern.name),\n      canAutoFix: pattern.canAutoFix,\n      suggestedFix: \"Extract expression from 'as unknown' assertion\"\n    });\n  }",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 575,
      "content": "this.log(\"🔧 Applying 'as unknown' transformations...\");",
      "context": "\n  protected fixIssues(): void {\n    this.log(\"🔧 Applying 'as unknown' transformations...\");\n    \n    const autoFixableIssues = this.asUnknownIssues.filter(issue => issue.canAutoFix);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 641,
      "content": "// For 'as unknown' expressions, we want to extract the expression part",
      "context": "  private transformAsExpression(node: AsExpression, pattern: TransformationPattern): boolean {\n    try {\n      // For 'as unknown' expressions, we want to extract the expression part\n      // and replace the entire AsExpression with just the expression\n      let expression = node.getExpression();",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "as-unknown-ast-fixer.ts",
      "line": 646,
      "content": "// This handles cases like (state as unknown) -> state instead of (state)",
      "context": "      \n      // If the expression is parenthesized, extract the inner expression\n      // This handles cases like (state as unknown) -> state instead of (state)\n      if (expression.getKind() === SyntaxKind.ParenthesizedExpression) {\n        const parenthesizedExpr = expression as ParenthesizedExpression;",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/safe-ast-fixer.ts",
      "line": 36,
      "content": "console.log(\"🚀 Starting safe 'as unknown' fixes...\");",
      "context": "\n  async execute(): Promise<void> {\n    console.log(\"🚀 Starting safe 'as unknown' fixes...\");\n    \n    // Add source files",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/safe-ast-fixer.ts",
      "line": 75,
      "content": "// Only handle 'as unknown' patterns",
      "context": "    const fullText = asExpression.getText();\n    \n    // Only handle 'as unknown' patterns\n    if (!fullText.includes(\"as unknown\")) {\n      return;",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/safe-ast-fixer.ts",
      "line": 76,
      "content": "if (!fullText.includes(\"as unknown\")) {",
      "context": "    \n    // Only handle 'as unknown' patterns\n    if (!fullText.includes(\"as unknown\")) {\n      return;\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/safe-ast-fixer.ts",
      "line": 85,
      "content": "// Pattern 1: Simple config property access like (config as unknown)!.title",
      "context": "\n    try {\n      // Pattern 1: Simple config property access like (config as unknown)!.title\n      if (this.isSimpleConfigPropertyAccess(asExpression, fullText)) {\n        this.applySimplePropertyAccessFix(asExpression, filePath, expressionText);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/safe-ast-fixer.ts",
      "line": 91,
      "content": "// Pattern 2: Return null/undefined as unknown",
      "context": "      }\n\n      // Pattern 2: Return null/undefined as unknown\n      if (fullText === \"null as unknown\" || fullText === \"undefined as unknown\") {\n        this.applyReturnValueFix(asExpression, filePath, expressionText);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "codemods/safe-ast-fixer.ts",
      "line": 92,
      "content": "if (fullText === \"null as unknown\" || fullText === \"undefined as unknown\") {",
      "context": "\n      // Pattern 2: Return null/undefined as unknown\n      if (fullText === \"null as unknown\" || fullText === \"undefined as unknown\") {\n        this.applyReturnValueFix(asExpression, filePath, expressionText);\n        return;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "codemods/safe-ast-fixer.ts",
      "line": 109,
      "content": "// Look for patterns like (config as unknown)!.property or (data as unknown).property",
      "context": "\n  private isSimpleConfigPropertyAccess(asExpression: AsExpression, fullText: string): boolean {\n    // Look for patterns like (config as unknown)!.property or (data as unknown).property\n    const parent = asExpression.getParent();\n    ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/safe-ast-fixer.ts",
      "line": 117,
      "content": "return fullText.includes(\"config as unknown\") ||",
      "context": "      if (grandParent && grandParent.getKind() === SyntaxKind.PropertyAccessExpression) {\n        // Safe config patterns\n        return fullText.includes(\"config as unknown\") ||\n               fullText.includes(\"options as unknown\") ||\n               fullText.includes(\"data as unknown\") ||",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/safe-ast-fixer.ts",
      "line": 118,
      "content": "fullText.includes(\"options as unknown\") ||",
      "context": "        // Safe config patterns\n        return fullText.includes(\"config as unknown\") ||\n               fullText.includes(\"options as unknown\") ||\n               fullText.includes(\"data as unknown\") ||\n               fullText.includes(\"result as unknown\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/safe-ast-fixer.ts",
      "line": 119,
      "content": "fullText.includes(\"data as unknown\") ||",
      "context": "        return fullText.includes(\"config as unknown\") ||\n               fullText.includes(\"options as unknown\") ||\n               fullText.includes(\"data as unknown\") ||\n               fullText.includes(\"result as unknown\");\n      }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/safe-ast-fixer.ts",
      "line": 120,
      "content": "fullText.includes(\"result as unknown\");",
      "context": "               fullText.includes(\"options as unknown\") ||\n               fullText.includes(\"data as unknown\") ||\n               fullText.includes(\"result as unknown\");\n      }\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/safe-ast-fixer.ts",
      "line": 142,
      "content": "// This transforms (config as unknown)!.title to config.title",
      "context": "    \n    // For simple property access, we can safely remove the cast\n    // This transforms (config as unknown)!.title to config.title\n    asExpression.replaceWithText(expressionText);\n    ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 24,
      "content": "const sessionRecord = await (sessionProvider as unknown)!.getSession(sessionName);",
      "context": "    test(\"should remove sessionProvider cast with non-null assertion\", () => {\n      const sourceFile = project.createSourceFile(\"test.ts\", `\n        const sessionRecord = await (sessionProvider as unknown)!.getSession(sessionName);\n        if ((sessionProvider as unknown)!.isActive()) {\n          return (sessionProvider as unknown)!.config;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 25,
      "content": "if ((sessionProvider as unknown)!.isActive()) {",
      "context": "      const sourceFile = project.createSourceFile(\"test.ts\", `\n        const sessionRecord = await (sessionProvider as unknown)!.getSession(sessionName);\n        if ((sessionProvider as unknown)!.isActive()) {\n          return (sessionProvider as unknown)!.config;\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 26,
      "content": "return (sessionProvider as unknown)!.config;",
      "context": "        const sessionRecord = await (sessionProvider as unknown)!.getSession(sessionName);\n        if ((sessionProvider as unknown)!.isActive()) {\n          return (sessionProvider as unknown)!.config;\n        }\n      `);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 40,
      "content": "if (sessionRecord && (sessionRecord as unknown)!.repoUrl) {",
      "context": "    test(\"should remove sessionRecord cast with non-null assertion\", () => {\n      const sourceFile = project.createSourceFile(\"test.ts\", `\n        if (sessionRecord && (sessionRecord as unknown)!.repoUrl) {\n          return (sessionRecord as unknown)!.repoUrl;\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 41,
      "content": "return (sessionRecord as unknown)!.repoUrl;",
      "context": "      const sourceFile = project.createSourceFile(\"test.ts\", `\n        if (sessionRecord && (sessionRecord as unknown)!.repoUrl) {\n          return (sessionRecord as unknown)!.repoUrl;\n        }\n        const taskId = (sessionRecord as unknown)!.taskId;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 43,
      "content": "const taskId = (sessionRecord as unknown)!.taskId;",
      "context": "          return (sessionRecord as unknown)!.repoUrl;\n        }\n        const taskId = (sessionRecord as unknown)!.taskId;\n      `);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 55,
      "content": "return sessionInfo ? (sessionInfo as unknown)!.session : null;",
      "context": "    test(\"should remove sessionInfo cast with non-null assertion\", () => {\n      const sourceFile = project.createSourceFile(\"test.ts\", `\n        return sessionInfo ? (sessionInfo as unknown)!.session : null;\n        const name = (sessionInfo as unknown)!.session;\n        const upstream = (sessionInfo as unknown)!.upstreamRepository;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 56,
      "content": "const name = (sessionInfo as unknown)!.session;",
      "context": "      const sourceFile = project.createSourceFile(\"test.ts\", `\n        return sessionInfo ? (sessionInfo as unknown)!.session : null;\n        const name = (sessionInfo as unknown)!.session;\n        const upstream = (sessionInfo as unknown)!.upstreamRepository;\n      `);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 57,
      "content": "const upstream = (sessionInfo as unknown)!.upstreamRepository;",
      "context": "        return sessionInfo ? (sessionInfo as unknown)!.session : null;\n        const name = (sessionInfo as unknown)!.session;\n        const upstream = (sessionInfo as unknown)!.upstreamRepository;\n      `);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 71,
      "content": "const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();",
      "context": "    test(\"should fix relative import patterns\", () => {\n      const sourceFile = project.createSourceFile(\"test.ts\", `\n        const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();\n        const util = new ((await import(\"../utils/helper.js\")) as unknown).Helper();\n      `);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 72,
      "content": "const util = new ((await import(\"../utils/helper.js\")) as unknown).Helper();",
      "context": "      const sourceFile = project.createSourceFile(\"test.ts\", `\n        const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();\n        const util = new ((await import(\"../utils/helper.js\")) as unknown).Helper();\n      `);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 84,
      "content": "const proc = ((await import(\"child_process\")) as unknown).exec;",
      "context": "    test(\"should NOT fix absolute import patterns (keep them safe)\", () => {\n      const sourceFile = project.createSourceFile(\"test.ts\", `\n        const proc = ((await import(\"child_process\")) as unknown).exec;\n        const util = ((await import(\"util\")) as unknown).promisify;\n      `);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 85,
      "content": "const util = ((await import(\"util\")) as unknown).promisify;",
      "context": "      const sourceFile = project.createSourceFile(\"test.ts\", `\n        const proc = ((await import(\"child_process\")) as unknown).exec;\n        const util = ((await import(\"util\")) as unknown).promisify;\n      `);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 91,
      "content": "expect(sourceFile.getFullText()).toContain('((await import(\"child_process\")) as unknown).exec');",
      "context": "\n      // Should remain unchanged for absolute imports\n      expect(sourceFile.getFullText()).toContain('((await import(\"child_process\")) as unknown).exec');\n      expect(sourceFile.getFullText()).toContain('((await import(\"util\")) as unknown).promisify');\n      expect(transformations.length).toBe(0);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 92,
      "content": "expect(sourceFile.getFullText()).toContain('((await import(\"util\")) as unknown).promisify');",
      "context": "      // Should remain unchanged for absolute imports\n      expect(sourceFile.getFullText()).toContain('((await import(\"child_process\")) as unknown).exec');\n      expect(sourceFile.getFullText()).toContain('((await import(\"util\")) as unknown).promisify');\n      expect(transformations.length).toBe(0);\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 100,
      "content": "const value = (config as unknown).apiKey;",
      "context": "    test(\"should remove config object casts\", () => {\n      const sourceFile = project.createSourceFile(\"test.ts\", `\n        const value = (config as unknown).apiKey;\n        const timeout = (config as unknown).timeout;\n        const options = (config as unknown).database;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 101,
      "content": "const timeout = (config as unknown).timeout;",
      "context": "      const sourceFile = project.createSourceFile(\"test.ts\", `\n        const value = (config as unknown).apiKey;\n        const timeout = (config as unknown).timeout;\n        const options = (config as unknown).database;\n      `);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 102,
      "content": "const options = (config as unknown).database;",
      "context": "        const value = (config as unknown).apiKey;\n        const timeout = (config as unknown).timeout;\n        const options = (config as unknown).database;\n      `);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 115,
      "content": "const debug = (options as unknown).debug;",
      "context": "    test(\"should remove options object casts\", () => {\n      const sourceFile = project.createSourceFile(\"test.ts\", `\n        const debug = (options as unknown).debug;\n        const verbose = (options as unknown).verbose;\n      `);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 116,
      "content": "const verbose = (options as unknown).verbose;",
      "context": "      const sourceFile = project.createSourceFile(\"test.ts\", `\n        const debug = (options as unknown).debug;\n        const verbose = (options as unknown).verbose;\n      `);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 130,
      "content": "const message = (error as unknown).message;",
      "context": "    test(\"should remove error object casts\", () => {\n      const sourceFile = project.createSourceFile(\"test.ts\", `\n        const message = (error as unknown).message;\n        const code = (err as unknown).code;\n        const stack = (e as unknown).stack;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 131,
      "content": "const code = (err as unknown).code;",
      "context": "      const sourceFile = project.createSourceFile(\"test.ts\", `\n        const message = (error as unknown).message;\n        const code = (err as unknown).code;\n        const stack = (e as unknown).stack;\n      `);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 132,
      "content": "const stack = (e as unknown).stack;",
      "context": "        const message = (error as unknown).message;\n        const code = (err as unknown).code;\n        const stack = (e as unknown).stack;\n      `);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 147,
      "content": "const data = (taskProvider as unknown).getTasks();",
      "context": "    test(\"should remove provider/service/backend casts\", () => {\n      const sourceFile = project.createSourceFile(\"test.ts\", `\n        const data = (taskProvider as unknown).getTasks();\n        const result = (userService as unknown).getUser();\n        const config = (storageBackend as unknown).getConfig();",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 148,
      "content": "const result = (userService as unknown).getUser();",
      "context": "      const sourceFile = project.createSourceFile(\"test.ts\", `\n        const data = (taskProvider as unknown).getTasks();\n        const result = (userService as unknown).getUser();\n        const config = (storageBackend as unknown).getConfig();\n      `);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 149,
      "content": "const config = (storageBackend as unknown).getConfig();",
      "context": "        const data = (taskProvider as unknown).getTasks();\n        const result = (userService as unknown).getUser();\n        const config = (storageBackend as unknown).getConfig();\n      `);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 164,
      "content": "const result1 = (output as unknown) as string;",
      "context": "    test(\"should remove redundant double casts\", () => {\n      const sourceFile = project.createSourceFile(\"test.ts\", `\n        const result1 = (output as unknown) as string;\n        const result2 = (result as unknown) as number;\n        const result3 = (data as unknown) as boolean;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 165,
      "content": "const result2 = (result as unknown) as number;",
      "context": "      const sourceFile = project.createSourceFile(\"test.ts\", `\n        const result1 = (output as unknown) as string;\n        const result2 = (result as unknown) as number;\n        const result3 = (data as unknown) as boolean;\n      `);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 166,
      "content": "const result3 = (data as unknown) as boolean;",
      "context": "        const result1 = (output as unknown) as string;\n        const result2 = (result as unknown) as number;\n        const result3 = (data as unknown) as boolean;\n      `);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 181,
      "content": "return Promise.resolve(value) as unknown;",
      "context": "    test(\"should remove unnecessary Promise casts\", () => {\n      const sourceFile = project.createSourceFile(\"test.ts\", `\n        return Promise.resolve(value) as unknown;\n        return Promise.reject(error) as unknown;\n        const p = Promise.resolve(data) as unknown;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 182,
      "content": "return Promise.reject(error) as unknown;",
      "context": "      const sourceFile = project.createSourceFile(\"test.ts\", `\n        return Promise.resolve(value) as unknown;\n        return Promise.reject(error) as unknown;\n        const p = Promise.resolve(data) as unknown;\n      `);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 183,
      "content": "const p = Promise.resolve(data) as unknown;",
      "context": "        return Promise.resolve(value) as unknown;\n        return Promise.reject(error) as unknown;\n        const p = Promise.resolve(data) as unknown;\n      `);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 198,
      "content": "const p = (params as unknown);",
      "context": "    test(\"should remove simple variable casts\", () => {\n      const sourceFile = project.createSourceFile(\"test.ts\", `\n        const p = (params as unknown);\n        const r = (result as unknown);\n        const c = (current as unknown);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 199,
      "content": "const r = (result as unknown);",
      "context": "      const sourceFile = project.createSourceFile(\"test.ts\", `\n        const p = (params as unknown);\n        const r = (result as unknown);\n        const c = (current as unknown);\n        const t = (task as unknown);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 200,
      "content": "const c = (current as unknown);",
      "context": "        const p = (params as unknown);\n        const r = (result as unknown);\n        const c = (current as unknown);\n        const t = (task as unknown);\n      `);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 201,
      "content": "const t = (task as unknown);",
      "context": "        const r = (result as unknown);\n        const c = (current as unknown);\n        const t = (task as unknown);\n      `);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 217,
      "content": "const complex = (someObject.deepProperty.methodCall() as unknown).value;",
      "context": "    test(\"should NOT transform complex expressions\", () => {\n      const sourceFile = project.createSourceFile(\"test.ts\", `\n        const complex = (someObject.deepProperty.methodCall() as unknown).value;\n        const chained = (obj.method().then() as unknown).property;\n      `);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 218,
      "content": "const chained = (obj.method().then() as unknown).property;",
      "context": "      const sourceFile = project.createSourceFile(\"test.ts\", `\n        const complex = (someObject.deepProperty.methodCall() as unknown).value;\n        const chained = (obj.method().then() as unknown).property;\n      `);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 224,
      "content": "expect(sourceFile.getFullText()).toContain(\"(someObject.deepProperty.methodCall() as unknown).value\");",
      "context": "\n      // Should remain unchanged due to complexity\n      expect(sourceFile.getFullText()).toContain(\"(someObject.deepProperty.methodCall() as unknown).value\");\n      expect(sourceFile.getFullText()).toContain(\"(obj.method().then() as unknown).property\");\n      expect(transformations.length).toBe(0);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 225,
      "content": "expect(sourceFile.getFullText()).toContain(\"(obj.method().then() as unknown).property\");",
      "context": "      // Should remain unchanged due to complexity\n      expect(sourceFile.getFullText()).toContain(\"(someObject.deepProperty.methodCall() as unknown).value\");\n      expect(sourceFile.getFullText()).toContain(\"(obj.method().then() as unknown).property\");\n      expect(transformations.length).toBe(0);\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 232,
      "content": "const session = (sessionInfo as unknown)!.session;",
      "context": "      const sourceFile = project.createSourceFile(\"test.ts\", `\n        // Session pattern\n        const session = (sessionInfo as unknown)!.session;\n        \n        // Config pattern  ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 235,
      "content": "const debug = (config as unknown).debug;",
      "context": "        \n        // Config pattern  \n        const debug = (config as unknown).debug;\n        \n        // Error pattern",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 238,
      "content": "const message = (error as unknown).message;",
      "context": "        \n        // Error pattern\n        const message = (error as unknown).message;\n        \n        // Redundant cast",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 241,
      "content": "const result = (output as unknown) as string;",
      "context": "        \n        // Redundant cast\n        const result = (output as unknown) as string;\n      `);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 257,
      "content": "const sessionRecord = await (sessionProvider as unknown)!.getSession(sessionName);",
      "context": "    test(\"should handle actual workspace.ts patterns\", () => {\n      const sourceFile = project.createSourceFile(\"workspace.ts\", `\n        const sessionRecord = await (sessionProvider as unknown)!.getSession(sessionName);\n        if (sessionRecord && (sessionRecord as unknown)!.repoUrl) {\n          return (sessionRecord as unknown)!.repoUrl;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 258,
      "content": "if (sessionRecord && (sessionRecord as unknown)!.repoUrl) {",
      "context": "      const sourceFile = project.createSourceFile(\"workspace.ts\", `\n        const sessionRecord = await (sessionProvider as unknown)!.getSession(sessionName);\n        if (sessionRecord && (sessionRecord as unknown)!.repoUrl) {\n          return (sessionRecord as unknown)!.repoUrl;\n        }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 259,
      "content": "return (sessionRecord as unknown)!.repoUrl;",
      "context": "        const sessionRecord = await (sessionProvider as unknown)!.getSession(sessionName);\n        if (sessionRecord && (sessionRecord as unknown)!.repoUrl) {\n          return (sessionRecord as unknown)!.repoUrl;\n        }\n        return sessionInfo ? (sessionInfo as unknown)!.session : null;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 261,
      "content": "return sessionInfo ? (sessionInfo as unknown)!.session : null;",
      "context": "          return (sessionRecord as unknown)!.repoUrl;\n        }\n        return sessionInfo ? (sessionInfo as unknown)!.session : null;\n      `);\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 274,
      "content": "const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();",
      "context": "    test(\"should handle actual repository.ts dynamic import patterns\", () => {\n      const sourceFile = project.createSourceFile(\"repository.ts\", `\n        const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();\n        await (await import(\"util\")).promisify(((await import(\"child_process\")) as unknown).exec)(\n          \\`git clone \\${repoUrl}\\`",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 275,
      "content": "await (await import(\"util\")).promisify(((await import(\"child_process\")) as unknown).exec)(",
      "context": "      const sourceFile = project.createSourceFile(\"repository.ts\", `\n        const sessionDb = new ((await import(\"./session.js\")) as unknown).SessionDB();\n        await (await import(\"util\")).promisify(((await import(\"child_process\")) as unknown).exec)(\n          \\`git clone \\${repoUrl}\\`\n        );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.test.ts",
      "line": 284,
      "content": "expect(sourceFile.getFullText()).toContain('((await import(\"child_process\")) as unknown).exec');",
      "context": "      expect(sourceFile.getFullText()).toContain('(await import(\"./session.js\")).SessionDB()');\n      // Child_process should remain unchanged (absolute import)\n      expect(sourceFile.getFullText()).toContain('((await import(\"child_process\")) as unknown).exec');\n      expect(transformations.length).toBe(1);\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "codemods/comprehensive-fixer.ts",
      "line": 8,
      "content": "* - Config object patterns: (config as unknown)",
      "context": " * Enhanced with patterns discovered from linting errors:\n * - Indentation fixes from previous AST transforms\n * - Config object patterns: (config as unknown)\n * - Session/service object patterns\n * - Error handling patterns",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/comprehensive-fixer.ts",
      "line": 37,
      "content": "console.log(\"🔧 Starting comprehensive 'as unknown' pattern fixes...\");",
      "context": "\n  public async fixAllPatterns(): Promise<void> {\n    console.log(\"🔧 Starting comprehensive 'as unknown' pattern fixes...\");\n    \n    // Load all source files",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/comprehensive-fixer.ts",
      "line": 73,
      "content": "// Pattern: (config as unknown) - very common in our codebase",
      "context": "\n  private fixConfigObjectPatterns(sourceFile: SourceFile): void {\n    // Pattern: (config as unknown) - very common in our codebase\n    sourceFile.forEachDescendant((node) => {\n      if (Node.isAsExpression(node)) {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/comprehensive-fixer.ts",
      "line": 79,
      "content": "// Look for patterns like: (config as unknown) or (options as unknown)",
      "context": "        const typeNode = node.getTypeNode();\n        \n        // Look for patterns like: (config as unknown) or (options as unknown)\n        if (Node.isIdentifier(expression) && \n            typeNode && typeNode.getKind() === SyntaxKind.UnknownKeyword) {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/comprehensive-fixer.ts",
      "line": 104,
      "content": "// Pattern: (sessionProvider as unknown), (sessionRecord as unknown)",
      "context": "\n  private fixSessionServicePatterns(sourceFile: SourceFile): void {\n    // Pattern: (sessionProvider as unknown), (sessionRecord as unknown)\n    sourceFile.forEachDescendant((node) => {\n      if (Node.isAsExpression(node)) {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/comprehensive-fixer.ts",
      "line": 136,
      "content": "// Pattern: Promise.resolve(value) as unknown, return (result as unknown)",
      "context": "\n  private fixPromiseReturnPatterns(sourceFile: SourceFile): void {\n    // Pattern: Promise.resolve(value) as unknown, return (result as unknown)\n    sourceFile.forEachDescendant((node) => {\n      if (Node.isAsExpression(node)) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/comprehensive-fixer.ts",
      "line": 167,
      "content": "// Pattern: (error as unknown), (e as unknown)",
      "context": "\n  private fixErrorHandlingPatterns(sourceFile: SourceFile): void {\n    // Pattern: (error as unknown), (e as unknown)\n    sourceFile.forEachDescendant((node) => {\n      if (Node.isAsExpression(node)) {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/comprehensive-fixer.ts",
      "line": 197,
      "content": "// Pattern: jest.fn() as unknown, mock objects as unknown",
      "context": "\n  private fixMockFunctionPatterns(sourceFile: SourceFile): void {\n    // Pattern: jest.fn() as unknown, mock objects as unknown\n    sourceFile.forEachDescendant((node) => {\n      if (Node.isAsExpression(node)) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/comprehensive-fixer.ts",
      "line": 231,
      "content": "// Pattern: (obj.prop as unknown) for simple property access",
      "context": "\n  private fixSimplePropertyAccess(sourceFile: SourceFile): void {\n    // Pattern: (obj.prop as unknown) for simple property access\n    sourceFile.forEachDescendant((node) => {\n      if (Node.isAsExpression(node)) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/comprehensive-fixer.ts",
      "line": 264,
      "content": "// Pattern: (params as unknown), (result as unknown) for simple variables",
      "context": "\n  private fixParameterPatterns(sourceFile: SourceFile): void {\n    // Pattern: (params as unknown), (result as unknown) for simple variables\n    sourceFile.forEachDescendant((node) => {\n      if (Node.isAsExpression(node)) {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.ts",
      "line": 4,
      "content": "* Comprehensive 'as unknown' Assertion Fixer for Task #280",
      "context": "\n/**\n * Comprehensive 'as unknown' Assertion Fixer for Task #280\n * \n * A single, extensible codemod following codemod-development-standards:",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.ts",
      "line": 13,
      "content": "* 1. Session Object Property Access: (sessionProvider as unknown)!.method",
      "context": " * \n * Patterns Handled:\n * 1. Session Object Property Access: (sessionProvider as unknown)!.method\n * 2. Dynamic Import Patterns: ((await import(\"module\")) as unknown).Class\n * 3. Config Object Patterns: (config as unknown).property",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.ts",
      "line": 14,
      "content": "* 2. Dynamic Import Patterns: ((await import(\"module\")) as unknown).Class",
      "context": " * Patterns Handled:\n * 1. Session Object Property Access: (sessionProvider as unknown)!.method\n * 2. Dynamic Import Patterns: ((await import(\"module\")) as unknown).Class\n * 3. Config Object Patterns: (config as unknown).property\n * 4. Error Handling Patterns: (error as unknown).property",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.ts",
      "line": 15,
      "content": "* 3. Config Object Patterns: (config as unknown).property",
      "context": " * 1. Session Object Property Access: (sessionProvider as unknown)!.method\n * 2. Dynamic Import Patterns: ((await import(\"module\")) as unknown).Class\n * 3. Config Object Patterns: (config as unknown).property\n * 4. Error Handling Patterns: (error as unknown).property\n * 5. Provider/Service Patterns: (serviceProvider as unknown).method",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.ts",
      "line": 16,
      "content": "* 4. Error Handling Patterns: (error as unknown).property",
      "context": " * 2. Dynamic Import Patterns: ((await import(\"module\")) as unknown).Class\n * 3. Config Object Patterns: (config as unknown).property\n * 4. Error Handling Patterns: (error as unknown).property\n * 5. Provider/Service Patterns: (serviceProvider as unknown).method\n * 6. Redundant Cast Patterns: (value as unknown) as Type",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.ts",
      "line": 17,
      "content": "* 5. Provider/Service Patterns: (serviceProvider as unknown).method",
      "context": " * 3. Config Object Patterns: (config as unknown).property\n * 4. Error Handling Patterns: (error as unknown).property\n * 5. Provider/Service Patterns: (serviceProvider as unknown).method\n * 6. Redundant Cast Patterns: (value as unknown) as Type\n * 7. Promise Return Patterns: Promise.resolve(value) as unknown",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.ts",
      "line": 18,
      "content": "* 6. Redundant Cast Patterns: (value as unknown) as Type",
      "context": " * 4. Error Handling Patterns: (error as unknown).property\n * 5. Provider/Service Patterns: (serviceProvider as unknown).method\n * 6. Redundant Cast Patterns: (value as unknown) as Type\n * 7. Promise Return Patterns: Promise.resolve(value) as unknown\n * 8. Simple Variable Patterns: (variable as unknown)",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.ts",
      "line": 19,
      "content": "* 7. Promise Return Patterns: Promise.resolve(value) as unknown",
      "context": " * 5. Provider/Service Patterns: (serviceProvider as unknown).method\n * 6. Redundant Cast Patterns: (value as unknown) as Type\n * 7. Promise Return Patterns: Promise.resolve(value) as unknown\n * 8. Simple Variable Patterns: (variable as unknown)\n */",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.ts",
      "line": 20,
      "content": "* 8. Simple Variable Patterns: (variable as unknown)",
      "context": " * 6. Redundant Cast Patterns: (value as unknown) as Type\n * 7. Promise Return Patterns: Promise.resolve(value) as unknown\n * 8. Simple Variable Patterns: (variable as unknown)\n */\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.ts",
      "line": 66,
      "content": "console.log(\"🔧 Starting comprehensive 'as unknown' fixes...\");",
      "context": "   */\n  public async fixAllFiles(): Promise<ComprehensiveReport> {\n    console.log(\"🔧 Starting comprehensive 'as unknown' fixes...\");\n    \n    const files = await glob(\"src/**/*.ts\", { ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.ts",
      "line": 113,
      "content": "* Fixes: (sessionProvider as unknown)!.method → sessionProvider.method",
      "context": "  /**\n   * Pattern 1: Session Object Property Access with Non-Null Assertion\n   * Fixes: (sessionProvider as unknown)!.method → sessionProvider.method\n   */\n  public fixSessionObjectPatterns(sourceFile: SourceFile): TransformationResult[] {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.ts",
      "line": 136,
      "content": "// Look for: (sessionXxx as unknown)! (with any nesting)",
      "context": "        const expression = node.getExpression();\n        \n        // Look for: (sessionXxx as unknown)! (with any nesting)\n        if (Node.isNonNullExpression(expression)) {\n          const innerExpr = expression.getExpression();",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.ts",
      "line": 174,
      "content": "// Replace the entire property access: (sessionXxx as unknown)!.prop → sessionXxx.prop",
      "context": "      });\n      \n      // Replace the entire property access: (sessionXxx as unknown)!.prop → sessionXxx.prop\n      node.replaceWithText(after);\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.ts",
      "line": 183,
      "content": "* Fixes: ((await import(\"./module\")) as unknown).Class → (await import(\"./module\")).Class",
      "context": "  /**\n   * Pattern 2: Dynamic Import Patterns\n   * Fixes: ((await import(\"./module\")) as unknown).Class → (await import(\"./module\")).Class\n   * Only for relative imports (safe)\n   */",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.ts",
      "line": 274,
      "content": "* Fixes: (config as unknown).property → config.property",
      "context": "  /**\n   * Pattern 3: Config Object Patterns\n   * Fixes: (config as unknown).property → config.property\n   */\n  public fixConfigObjectPatterns(sourceFile: SourceFile): TransformationResult[] {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.ts",
      "line": 339,
      "content": "* Fixes: (error as unknown).property → error.property",
      "context": "  /**\n   * Pattern 4: Error Handling Patterns\n   * Fixes: (error as unknown).property → error.property\n   */\n  public fixErrorHandlingPatterns(sourceFile: SourceFile): TransformationResult[] {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.ts",
      "line": 404,
      "content": "* Fixes: (serviceProvider as unknown).method → serviceProvider.method",
      "context": "  /**\n   * Pattern 5: Provider/Service Patterns\n   * Fixes: (serviceProvider as unknown).method → serviceProvider.method\n   */\n  public fixProviderServicePatterns(sourceFile: SourceFile): TransformationResult[] {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.ts",
      "line": 469,
      "content": "* Fixes: (value as unknown) as Type → value as Type",
      "context": "  /**\n   * Pattern 6: Redundant Cast Patterns\n   * Fixes: (value as unknown) as Type → value as Type\n   */\n  public fixRedundantCastPatterns(sourceFile: SourceFile): TransformationResult[] {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.ts",
      "line": 481,
      "content": "// Look for: (variable as unknown) as Type",
      "context": "        const finalTypeNode = node.getTypeNode();\n        \n        // Look for: (variable as unknown) as Type\n        if (Node.isAsExpression(expression) && finalTypeNode) {\n          const variable = expression.getExpression();",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.ts",
      "line": 517,
      "content": "* Fixes: Promise.resolve(value) as unknown → Promise.resolve(value)",
      "context": "  /**\n   * Pattern 7: Promise Return Patterns\n   * Fixes: Promise.resolve(value) as unknown → Promise.resolve(value)\n   */\n  public fixPromiseReturnPatterns(sourceFile: SourceFile): TransformationResult[] {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.ts",
      "line": 561,
      "content": "* Fixes: (variable as unknown) → variable",
      "context": "  /**\n   * Pattern 8: Simple Variable Patterns\n   * Fixes: (variable as unknown) → variable\n   */\n  public fixSimpleVariablePatterns(sourceFile: SourceFile): TransformationResult[] {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/comprehensive-as-unknown-fixer.ts",
      "line": 680,
      "content": "console.log(`\\n✅ Comprehensive 'as unknown' fixes completed!`);",
      "context": "    writeFileSync(reportPath, JSON.stringify(report, null, 2));\n\n    console.log(`\\n✅ Comprehensive 'as unknown' fixes completed!`);\n    console.log(`📊 Total transformations: ${this.transformations.length}`);\n    console.log(`📁 Files modified: ${filesModified}/${totalFiles}`);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/fix-explicit-any-types-proven.ts",
      "line": 96,
      "content": "return match.replace(\"as any\", \"as unknown\");",
      "context": "    console.log(`  Fixed JSON.parse cast: any → unknown`);\n    changes++;\n    return match.replace(\"as any\", \"as unknown\");\n  });\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/fix-explicit-any-types-proven.ts",
      "line": 135,
      "content": "to: \"as unknown[]\",",
      "context": "    {\n      from: /\\bas\\s*any\\s*\\[\\]/g,\n      to: \"as unknown[]\",\n      description: \"as any[] → as unknown[]\",\n    },",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/fix-explicit-any-types-proven.ts",
      "line": 136,
      "content": "description: \"as any[] → as unknown[]\",",
      "context": "      from: /\\bas\\s*any\\s*\\[\\]/g,\n      to: \"as unknown[]\",\n      description: \"as any[] → as unknown[]\",\n    },\n    {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/pattern-based-fixer.ts",
      "line": 32,
      "content": "pattern: /\\(params as unknown\\)/g,",
      "context": "    // Simple variable casts\n    {\n      pattern: /\\(params as unknown\\)/g,\n      replacement: \"params\",\n      description: \"Remove unnecessary params cast\"",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/pattern-based-fixer.ts",
      "line": 37,
      "content": "pattern: /\\(result as unknown\\)/g,",
      "context": "    },\n    {\n      pattern: /\\(result as unknown\\)/g,\n      replacement: \"result\",\n      description: \"Remove unnecessary result cast\"",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/pattern-based-fixer.ts",
      "line": 42,
      "content": "pattern: /\\(provider as unknown\\)/g,",
      "context": "    },\n    {\n      pattern: /\\(provider as unknown\\)/g,\n      replacement: \"provider\",\n      description: \"Remove unnecessary provider cast\"",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/pattern-based-fixer.ts",
      "line": 47,
      "content": "pattern: /\\(current as unknown\\)/g,",
      "context": "    },\n    {\n      pattern: /\\(current as unknown\\)/g,\n      replacement: \"current\",\n      description: \"Remove unnecessary current cast\"",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/pattern-based-fixer.ts",
      "line": 52,
      "content": "pattern: /\\(task as unknown\\)/g,",
      "context": "    },\n    {\n      pattern: /\\(task as unknown\\)/g,\n      replacement: \"task\",\n      description: \"Remove unnecessary task cast\"",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/pattern-based-fixer.ts",
      "line": 58,
      "content": "pattern: /Promise\\.resolve\\(([^)]+)\\) as unknown/g,",
      "context": "    // Promise patterns\n    {\n      pattern: /Promise\\.resolve\\(([^)]+)\\) as unknown/g,\n      replacement: \"Promise.resolve($1)\",\n      description: \"Remove unnecessary Promise.resolve cast\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/pattern-based-fixer.ts",
      "line": 63,
      "content": "pattern: /Promise\\.reject\\(([^)]+)\\) as unknown/g,",
      "context": "    },\n    {\n      pattern: /Promise\\.reject\\(([^)]+)\\) as unknown/g,\n      replacement: \"Promise.reject($1)\",\n      description: \"Remove unnecessary Promise.reject cast\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/pattern-based-fixer.ts",
      "line": 69,
      "content": "pattern: /\\(([a-zA-Z_$][a-zA-Z0-9_$]*\\.[a-zA-Z_$][a-zA-Z0-9_$]*) as unknown\\)/g,",
      "context": "    // Simple property access\n    {\n      pattern: /\\(([a-zA-Z_$][a-zA-Z0-9_$]*\\.[a-zA-Z_$][a-zA-Z0-9_$]*) as unknown\\)/g,\n      replacement: \"$1\",\n      description: \"Remove unnecessary property access cast\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 82,
      "content": "return match.replace('as any', 'as unknown');",
      "context": "          if (match.includes('Bun.argv')) return 'process.argv';\n          if (match.includes('process.env')) return 'process.env';\n          return match.replace('as any', 'as unknown');\n        },\n        requiresManualReview: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 99,
      "content": "return match.replace('as any', 'as unknown');",
      "context": "            return match.replace('as any', '').replace('(', '').replace(')', '');\n          }\n          return match.replace('as any', 'as unknown');\n        },\n        requiresManualReview: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 160,
      "content": "return match.replace('as any', 'as unknown');",
      "context": "            return match.replace(' as any', '');\n          }\n          return match.replace('as any', 'as unknown');\n        },\n        requiresManualReview: false",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 173,
      "content": "replacement: 'as unknown',",
      "context": "          /\\([^)]+Config as any\\)/g\n        ],\n        replacement: 'as unknown',\n        requiresManualReview: false\n      },",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 200,
      "content": "replacement: 'as unknown',",
      "context": "          /\\(bun\\.expect as any\\)/g\n        ],\n        replacement: 'as unknown',\n        requiresManualReview: false\n      },",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 212,
      "content": "replacement: 'as unknown',",
      "context": "          /as any\\b/g\n        ],\n        replacement: 'as unknown',\n        requiresManualReview: false\n      }",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 251,
      "content": "// Find all 'as unknown' patterns that might be inappropriate",
      "context": "      }\n      \n      // Find all 'as unknown' patterns that might be inappropriate\n      const asUnknownMatches = content.matchAll(/\\bas unknown\\b/g);\n      for (const match of asUnknownMatches) {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 252,
      "content": "const asUnknownMatches = content.matchAll(/\\bas unknown\\b/g);",
      "context": "      \n      // Find all 'as unknown' patterns that might be inappropriate\n      const asUnknownMatches = content.matchAll(/\\bas unknown\\b/g);\n      for (const match of asUnknownMatches) {\n        const position = sourceFile.getLineAndColumnAtPos(match.index!);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 257,
      "content": "// Only flag as unknown casts that might benefit from more specific types",
      "context": "        const context = this.getContextAroundMatch(content, match.index!, 50);\n        \n        // Only flag as unknown casts that might benefit from more specific types\n        if (this.shouldReviewUnknownCast(context)) {\n          this.castIssues.push({",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 323,
      "content": "suggestedFix: 'as unknown',",
      "context": "        riskLevel: 'low',\n        pattern: 'test_infrastructure',\n        suggestedFix: 'as unknown',\n        requiresManualReview: false\n      };",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 332,
      "content": "suggestedFix: 'as unknown',",
      "context": "        riskLevel: 'high',\n        pattern: 'domain_logic',\n        suggestedFix: 'as unknown',\n        requiresManualReview: true\n      };",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 340,
      "content": "suggestedFix: 'as unknown',",
      "context": "      riskLevel: 'medium',\n      pattern: 'general_infrastructure',\n      suggestedFix: 'as unknown',\n      requiresManualReview: false\n    };",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 346,
      "content": "// Flag 'as unknown' casts that might benefit from more specific types",
      "context": "\n  private shouldReviewUnknownCast(context: string): boolean {\n    // Flag 'as unknown' casts that might benefit from more specific types\n    const reviewPatterns = [\n      /Promise\\.resolve\\([^)]+\\) as unknown/,",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 348,
      "content": "/Promise\\.resolve\\([^)]+\\) as unknown/,",
      "context": "    // Flag 'as unknown' casts that might benefit from more specific types\n    const reviewPatterns = [\n      /Promise\\.resolve\\([^)]+\\) as unknown/,\n      /JSON\\.parse\\([^)]+\\) as unknown/,\n      /Object\\.keys\\([^)]+\\) as unknown/",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 349,
      "content": "/JSON\\.parse\\([^)]+\\) as unknown/,",
      "context": "    const reviewPatterns = [\n      /Promise\\.resolve\\([^)]+\\) as unknown/,\n      /JSON\\.parse\\([^)]+\\) as unknown/,\n      /Object\\.keys\\([^)]+\\) as unknown/\n    ];",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/risk-aware-type-cast-fixer.ts",
      "line": 350,
      "content": "/Object\\.keys\\([^)]+\\) as unknown/",
      "context": "      /Promise\\.resolve\\([^)]+\\) as unknown/,\n      /JSON\\.parse\\([^)]+\\) as unknown/,\n      /Object\\.keys\\([^)]+\\) as unknown/\n    ];\n    ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/enhanced-pattern-fixer.ts",
      "line": 7,
      "content": "* - Session object property access patterns: (sessionProvider as unknown)!.method",
      "context": " * \n * Based on analysis of remaining 518 assertions, targets:\n * - Session object property access patterns: (sessionProvider as unknown)!.method\n * - Dynamic import patterns: ((await import(\"module\")) as unknown).Class\n * - SessionInfo property patterns: (sessionInfo as unknown)!.property",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/enhanced-pattern-fixer.ts",
      "line": 8,
      "content": "* - Dynamic import patterns: ((await import(\"module\")) as unknown).Class",
      "context": " * Based on analysis of remaining 518 assertions, targets:\n * - Session object property access patterns: (sessionProvider as unknown)!.method\n * - Dynamic import patterns: ((await import(\"module\")) as unknown).Class\n * - SessionInfo property patterns: (sessionInfo as unknown)!.property\n * - Config object patterns: (config as unknown).property",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/enhanced-pattern-fixer.ts",
      "line": 9,
      "content": "* - SessionInfo property patterns: (sessionInfo as unknown)!.property",
      "context": " * - Session object property access patterns: (sessionProvider as unknown)!.method\n * - Dynamic import patterns: ((await import(\"module\")) as unknown).Class\n * - SessionInfo property patterns: (sessionInfo as unknown)!.property\n * - Config object patterns: (config as unknown).property\n */",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/enhanced-pattern-fixer.ts",
      "line": 10,
      "content": "* - Config object patterns: (config as unknown).property",
      "context": " * - Dynamic import patterns: ((await import(\"module\")) as unknown).Class\n * - SessionInfo property patterns: (sessionInfo as unknown)!.property\n * - Config object patterns: (config as unknown).property\n */\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/enhanced-pattern-fixer.ts",
      "line": 35,
      "content": "pattern: /\\(sessionProvider as unknown\\)!/g,",
      "context": "    // Session object property access patterns\n    {\n      pattern: /\\(sessionProvider as unknown\\)!/g,\n      replacement: \"sessionProvider\",\n      description: \"Remove sessionProvider cast with non-null assertion\"",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/enhanced-pattern-fixer.ts",
      "line": 40,
      "content": "pattern: /\\(sessionRecord as unknown\\)!/g,",
      "context": "    },\n    {\n      pattern: /\\(sessionRecord as unknown\\)!/g,\n      replacement: \"sessionRecord\",\n      description: \"Remove sessionRecord cast with non-null assertion\"",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/enhanced-pattern-fixer.ts",
      "line": 45,
      "content": "pattern: /\\(sessionInfo as unknown\\)!/g,",
      "context": "    },\n    {\n      pattern: /\\(sessionInfo as unknown\\)!/g,\n      replacement: \"sessionInfo\",\n      description: \"Remove sessionInfo cast with non-null assertion\"",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/enhanced-pattern-fixer.ts",
      "line": 50,
      "content": "pattern: /\\(sessionDb as unknown\\)!/g,",
      "context": "    },\n    {\n      pattern: /\\(sessionDb as unknown\\)!/g,\n      replacement: \"sessionDb\",\n      description: \"Remove sessionDb cast with non-null assertion\"",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/enhanced-pattern-fixer.ts",
      "line": 57,
      "content": "pattern: /\\(config as unknown\\)\\.([a-zA-Z_$][a-zA-Z0-9_$]*)/g,",
      "context": "    // Config object patterns\n    {\n      pattern: /\\(config as unknown\\)\\.([a-zA-Z_$][a-zA-Z0-9_$]*)/g,\n      replacement: \"config.$1\",\n      description: \"Remove config object cast\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/enhanced-pattern-fixer.ts",
      "line": 62,
      "content": "pattern: /\\(options as unknown\\)\\.([a-zA-Z_$][a-zA-Z0-9_$]*)/g,",
      "context": "    },\n    {\n      pattern: /\\(options as unknown\\)\\.([a-zA-Z_$][a-zA-Z0-9_$]*)/g,\n      replacement: \"options.$1\",\n      description: \"Remove options object cast\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/enhanced-pattern-fixer.ts",
      "line": 69,
      "content": "pattern: /\\(\\(await import\\(\"([^\"]+)\"\\)\\) as unknown\\)\\.([A-Z][a-zA-Z0-9_$]*)/g,",
      "context": "    // Dynamic import patterns - more conservative approach\n    {\n      pattern: /\\(\\(await import\\(\"([^\"]+)\"\\)\\) as unknown\\)\\.([A-Z][a-zA-Z0-9_$]*)/g,\n      replacement: (match, modulePath, className) => {\n        // Only fix for relative imports and common patterns",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/enhanced-pattern-fixer.ts",
      "line": 82,
      "content": "pattern: /\\(error as unknown\\)\\.([a-zA-Z_$][a-zA-Z0-9_$]*)/g,",
      "context": "    // Error object patterns\n    {\n      pattern: /\\(error as unknown\\)\\.([a-zA-Z_$][a-zA-Z0-9_$]*)/g,\n      replacement: \"error.$1\",\n      description: \"Remove error object cast\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/enhanced-pattern-fixer.ts",
      "line": 87,
      "content": "pattern: /\\(err as unknown\\)\\.([a-zA-Z_$][a-zA-Z0-9_$]*)/g,",
      "context": "    },\n    {\n      pattern: /\\(err as unknown\\)\\.([a-zA-Z_$][a-zA-Z0-9_$]*)/g,\n      replacement: \"err.$1\",\n      description: \"Remove err object cast\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/enhanced-pattern-fixer.ts",
      "line": 92,
      "content": "pattern: /\\(e as unknown\\)\\.([a-zA-Z_$][a-zA-Z0-9_$]*)/g,",
      "context": "    },\n    {\n      pattern: /\\(e as unknown\\)\\.([a-zA-Z_$][a-zA-Z0-9_$]*)/g,\n      replacement: \"e.$1\",\n      description: \"Remove e object cast\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/enhanced-pattern-fixer.ts",
      "line": 99,
      "content": "pattern: /\\(([a-zA-Z_$][a-zA-Z0-9_$]*Provider) as unknown\\)/g,",
      "context": "    // Provider/service patterns\n    {\n      pattern: /\\(([a-zA-Z_$][a-zA-Z0-9_$]*Provider) as unknown\\)/g,\n      replacement: \"$1\",\n      description: \"Remove provider object cast\"",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/enhanced-pattern-fixer.ts",
      "line": 104,
      "content": "pattern: /\\(([a-zA-Z_$][a-zA-Z0-9_$]*Service) as unknown\\)/g,",
      "context": "    },\n    {\n      pattern: /\\(([a-zA-Z_$][a-zA-Z0-9_$]*Service) as unknown\\)/g,\n      replacement: \"$1\",\n      description: \"Remove service object cast\"",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/enhanced-pattern-fixer.ts",
      "line": 109,
      "content": "pattern: /\\(([a-zA-Z_$][a-zA-Z0-9_$]*Backend) as unknown\\)/g,",
      "context": "    },\n    {\n      pattern: /\\(([a-zA-Z_$][a-zA-Z0-9_$]*Backend) as unknown\\)/g,\n      replacement: \"$1\",\n      description: \"Remove backend object cast\"",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/enhanced-pattern-fixer.ts",
      "line": 116,
      "content": "pattern: /\\(context as unknown\\)\\.([a-zA-Z_$][a-zA-Z0-9_$]*)/g,",
      "context": "    // Simple context/data patterns\n    {\n      pattern: /\\(context as unknown\\)\\.([a-zA-Z_$][a-zA-Z0-9_$]*)/g,\n      replacement: \"context.$1\",\n      description: \"Remove context object cast\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/enhanced-pattern-fixer.ts",
      "line": 121,
      "content": "pattern: /\\(data as unknown\\)\\.([a-zA-Z_$][a-zA-Z0-9_$]*)/g,",
      "context": "    },\n    {\n      pattern: /\\(data as unknown\\)\\.([a-zA-Z_$][a-zA-Z0-9_$]*)/g,\n      replacement: \"data.$1\",\n      description: \"Remove data object cast\"",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/enhanced-pattern-fixer.ts",
      "line": 128,
      "content": "pattern: /\\(output as unknown\\) as/g,",
      "context": "    // Output/result patterns from CLI\n    {\n      pattern: /\\(output as unknown\\) as/g,\n      replacement: \"output as\",\n      description: \"Remove redundant output cast\"",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/enhanced-pattern-fixer.ts",
      "line": 133,
      "content": "pattern: /\\(result as unknown\\) as/g,",
      "context": "    },\n    {\n      pattern: /\\(result as unknown\\) as/g,\n      replacement: \"result as\",\n      description: \"Remove redundant result cast\"",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/enhanced-pattern-fixer.ts",
      "line": 140,
      "content": "pattern: /\\(([a-zA-Z_$][a-zA-Z0-9_$]*) as unknown\\)\\.([a-zA-Z_$][a-zA-Z0-9_$]*)/g,",
      "context": "    // Simple object property patterns without non-null assertion\n    {\n      pattern: /\\(([a-zA-Z_$][a-zA-Z0-9_$]*) as unknown\\)\\.([a-zA-Z_$][a-zA-Z0-9_$]*)/g,\n      replacement: \"$1.$2\",\n      description: \"Remove simple object property cast\",",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/explicit-any-types-fixer-consolidated.ts",
      "line": 282,
      "content": "replacement: (match) => match.replace(\"as any\", \"as unknown\"),",
      "context": "        description: \"JSON.parse() cast as any\",\n        pattern: /JSON\\.parse\\([^)]+\\)\\s*as\\s*any/g,\n        replacement: (match) => match.replace(\"as any\", \"as unknown\"),\n        category: \"api-patterns\"\n      },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/explicit-any-types-fixer-consolidated.ts",
      "line": 298,
      "content": "replacement: \"as unknown[]\",",
      "context": "        description: \"Type assertion as any[]\",\n        pattern: /\\bas\\s*any\\s*\\[\\]/g,\n        replacement: \"as unknown[]\",\n        category: \"type-assertions\"\n      },",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 6,
      "content": "* Systematically removes excessive 'as unknown' type assertions throughout the codebase",
      "context": " * AS-UNKNOWN AST Codemod for Task #280\n * \n * Systematically removes excessive 'as unknown' type assertions throughout the codebase\n * to improve TypeScript effectiveness and reduce technical debt.\n * ",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 10,
      "content": "* The codebase contains 2,728 'as unknown' assertions, with 2,461 classified as high priority.",
      "context": " * \n * PROBLEM STATEMENT:\n * The codebase contains 2,728 'as unknown' assertions, with 2,461 classified as high priority.\n * These assertions mask real type errors, reduce TypeScript effectiveness, and create technical debt.\n * ",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 22,
      "content": "*    BEFORE: (state as unknown).sessions",
      "context": " * \n * 1. Property Access Patterns (HIGH PRIORITY)\n *    BEFORE: (state as unknown).sessions\n *    AFTER:  state.sessions\n *    ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 25,
      "content": "*    BEFORE: (this.sessionProvider as unknown).getSession(name)",
      "context": " *    AFTER:  state.sessions\n *    \n *    BEFORE: (this.sessionProvider as unknown).getSession(name)\n *    AFTER:  this.sessionProvider.getSession(name)\n * ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 29,
      "content": "*    BEFORE: (sessions as unknown).find(s => s.id === id)",
      "context": " * \n * 2. Array/Object Method Access (HIGH PRIORITY)\n *    BEFORE: (sessions as unknown).find(s => s.id === id)\n *    AFTER:  sessions.find(s => s.id === id)\n * ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 33,
      "content": "*    BEFORE: return null as unknown;",
      "context": " * \n * 3. Return Statement Patterns (CRITICAL PRIORITY)\n *    BEFORE: return null as unknown;\n *    AFTER:  return null;\n * ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 37,
      "content": "*    BEFORE: const result = undefined as unknown;",
      "context": " * \n * 4. Null/Undefined Patterns (CRITICAL PRIORITY)\n *    BEFORE: const result = undefined as unknown;\n *    AFTER:  const result = undefined;\n * ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 41,
      "content": "*    BEFORE: (this as unknown).name = \"ErrorName\";",
      "context": " * \n * 5. This Context Patterns (HIGH PRIORITY)\n *    BEFORE: (this as unknown).name = \"ErrorName\";\n *    AFTER:  this.name = \"ErrorName\";\n * ",
      "category": "error-masking",
      "priority": "high",
      "reason": "This context masking - likely type error"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 70,
      "content": "* - Task #280: Cleanup excessive 'as unknown' assertions",
      "context": " * \n * RELATED TASKS:\n * - Task #280: Cleanup excessive 'as unknown' assertions\n * - Task #276: Test suite optimization (identified the problem)\n * - Task #271: Risk-aware type cast fixing (similar patterns)",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 291,
      "content": "description: \"Remove 'as unknown' from return statements with null/undefined\",",
      "context": "      {\n        name: \"Return Statement Null/Undefined\",\n        description: \"Remove 'as unknown' from return statements with null/undefined\",\n        riskLevel: \"critical\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 296,
      "content": "(text.includes(\"null as unknown\") || text.includes(\"undefined as unknown\"));",
      "context": "          const text = node.getText();\n          return context.includes(\"return\") && \n                 (text.includes(\"null as unknown\") || text.includes(\"undefined as unknown\"));\n        },\n        canAutoFix: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 304,
      "content": "description: \"Remove 'as unknown' from null/undefined assignments\",",
      "context": "      {\n        name: \"Null/Undefined Assignment\",\n        description: \"Remove 'as unknown' from null/undefined assignments\",\n        riskLevel: \"critical\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 308,
      "content": "return text === \"null as unknown\" || text === \"undefined as unknown\";",
      "context": "        detector: (node: AsExpression, context: string) => {\n          const text = node.getText();\n          return text === \"null as unknown\" || text === \"undefined as unknown\";\n        },\n        canAutoFix: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "Masking null/undefined type errors - dangerous"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 316,
      "content": "description: \"Remove 'as unknown' from state/session property access\",",
      "context": "      {\n        name: \"State/Session Property Access\",\n        description: \"Remove 'as unknown' from state/session property access\",\n        riskLevel: \"high\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 320,
      "content": "return text.includes(\"state as unknown\") ||",
      "context": "        detector: (node: AsExpression, context: string) => {\n          const text = node.getText();\n          return text.includes(\"state as unknown\") || \n                 text.includes(\"session as unknown\") ||\n                 text.includes(\"sessions as unknown\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 321,
      "content": "text.includes(\"session as unknown\") ||",
      "context": "          const text = node.getText();\n          return text.includes(\"state as unknown\") || \n                 text.includes(\"session as unknown\") ||\n                 text.includes(\"sessions as unknown\");\n        },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 322,
      "content": "text.includes(\"sessions as unknown\");",
      "context": "          return text.includes(\"state as unknown\") || \n                 text.includes(\"session as unknown\") ||\n                 text.includes(\"sessions as unknown\");\n        },\n        canAutoFix: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 330,
      "content": "description: \"Remove 'as unknown' from service method calls\",",
      "context": "      {\n        name: \"Service Method Calls\",\n        description: \"Remove 'as unknown' from service method calls\",\n        riskLevel: \"high\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 338,
      "content": "return text.includes(\"this.sessionProvider as unknown\") ||",
      "context": "            return false;\n          }\n          return text.includes(\"this.sessionProvider as unknown\") ||\n                 text.includes(\"this.pathResolver as unknown\") ||\n                 text.includes(\"this.workspaceBackend as unknown\") ||",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 339,
      "content": "text.includes(\"this.pathResolver as unknown\") ||",
      "context": "          }\n          return text.includes(\"this.sessionProvider as unknown\") ||\n                 text.includes(\"this.pathResolver as unknown\") ||\n                 text.includes(\"this.workspaceBackend as unknown\") ||\n                 text.includes(\"this.config as unknown\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 340,
      "content": "text.includes(\"this.workspaceBackend as unknown\") ||",
      "context": "          return text.includes(\"this.sessionProvider as unknown\") ||\n                 text.includes(\"this.pathResolver as unknown\") ||\n                 text.includes(\"this.workspaceBackend as unknown\") ||\n                 text.includes(\"this.config as unknown\");\n        },",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 341,
      "content": "text.includes(\"this.config as unknown\");",
      "context": "                 text.includes(\"this.pathResolver as unknown\") ||\n                 text.includes(\"this.workspaceBackend as unknown\") ||\n                 text.includes(\"this.config as unknown\");\n        },\n        canAutoFix: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 349,
      "content": "description: \"Remove 'as unknown' from array/object method calls\",",
      "context": "      {\n        name: \"Array/Object Method Access\",\n        description: \"Remove 'as unknown' from array/object method calls\",\n        riskLevel: \"high\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 364,
      "content": "// Match patterns like (sessions as unknown).find(), (results as unknown).map()",
      "context": "              }\n              \n              // Match patterns like (sessions as unknown).find(), (results as unknown).map()\n              return text.includes(\"sessions\") || text.includes(\"results\") || \n                     text.includes(\"items\") || text.includes(\"data\") ||",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 378,
      "content": "description: \"Remove 'as unknown' from this context property access\",",
      "context": "      {\n        name: \"This Context Access\",\n        description: \"Remove 'as unknown' from this context property access\",\n        riskLevel: \"high\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 382,
      "content": "return text.includes(\"this as unknown\");",
      "context": "        detector: (node: AsExpression, context: string) => {\n          const text = node.getText();\n          return text.includes(\"this as unknown\");\n        },\n        canAutoFix: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "This context masking - likely type error"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 390,
      "content": "description: \"Remove 'as unknown' from process.env access\",",
      "context": "      {\n        name: \"Environment Variable Access\",\n        description: \"Remove 'as unknown' from process.env access\",\n        riskLevel: \"medium\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 394,
      "content": "return text.includes(\"process.env as unknown\");",
      "context": "        detector: (node: AsExpression, context: string) => {\n          const text = node.getText();\n          return text.includes(\"process.env as unknown\");\n        },\n        canAutoFix: true",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 402,
      "content": "description: \"Remove 'as unknown' from method calls on external objects\",",
      "context": "      {\n        name: \"External Object Method Calls\",\n        description: \"Remove 'as unknown' from method calls on external objects\",\n        riskLevel: \"high\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 416,
      "content": "// Match patterns like (format as unknown).timestamp(), (z.string() as unknown).optional()",
      "context": "          if (parent && parent.getKind() === SyntaxKind.PropertyAccessExpression) {\n            const text = node.getText();\n            // Match patterns like (format as unknown).timestamp(), (z.string() as unknown).optional()\n            return text.includes(\"format\") || text.includes(\"z.\") || text.includes(\"Date\") || \n                   text.includes(\"Math\") || text.includes(\"JSON\") || text.includes(\"Object\") ||",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 429,
      "content": "description: \"Remove 'as unknown' from property access on constants\",",
      "context": "      {\n        name: \"Constant Property Access\",\n        description: \"Remove 'as unknown' from property access on constants\",\n        riskLevel: \"high\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 443,
      "content": "// Match patterns like (descriptions as unknown).SESSION_DESCRIPTION",
      "context": "          if (parent && parent.getKind() === SyntaxKind.PropertyAccessExpression) {\n            const text = node.getText();\n            // Match patterns like (descriptions as unknown).SESSION_DESCRIPTION\n            return text.includes(\"descriptions\") || text.includes(\"constants\") || \n                   text.includes(\"config\") || text.includes(\"options\") || text.includes(\"params\");",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 455,
      "content": "description: \"Remove 'as unknown' from object property access\",",
      "context": "      {\n        name: \"Object Property Access\",\n        description: \"Remove 'as unknown' from object property access\",\n        riskLevel: \"high\",\n        detector: (node: AsExpression, context: string) => {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 469,
      "content": "// Match patterns like (logInfo as unknown).message, (result as unknown).status",
      "context": "          if (parent && parent.getKind() === SyntaxKind.PropertyAccessExpression) {\n            const text = node.getText();\n            // Match patterns like (logInfo as unknown).message, (result as unknown).status\n            return !text.includes(\"process.env\") && // Already handled above\n                   !text.includes(\"format\") && // Already handled above",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 484,
      "content": "this.log(\"🔍 Analyzing 'as unknown' assertions...\");",
      "context": "\n  protected findIssues(): void {\n    this.log(\"🔍 Analyzing 'as unknown' assertions...\");\n    \n    const sourceFiles = this.project.getSourceFiles();",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 498,
      "content": "// Check if it's 'as unknown'",
      "context": "          const typeNode = asExpression.getType();\n          \n          // Check if it's 'as unknown'\n          if (asExpression.getText().includes(\"as unknown\")) {\n            this.analyzeAsUnknownExpression(asExpression, filePath);",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 499,
      "content": "if (asExpression.getText().includes(\"as unknown\")) {",
      "context": "          \n          // Check if it's 'as unknown'\n          if (asExpression.getText().includes(\"as unknown\")) {\n            this.analyzeAsUnknownExpression(asExpression, filePath);\n          }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 506,
      "content": "this.log(`📊 Found ${this.asUnknownIssues.length} 'as unknown' assertions`);",
      "context": "    }\n\n    this.log(`📊 Found ${this.asUnknownIssues.length} 'as unknown' assertions`);\n    this.metrics.issuesFound = this.asUnknownIssues.length;\n  }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 524,
      "content": "description: \"Unmatched 'as unknown' pattern - needs manual review\",",
      "context": "        line,\n        column,\n        description: \"Unmatched 'as unknown' pattern - needs manual review\",\n        context,\n        type: \"as_unknown_unmatched\",",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 548,
      "content": "suggestedFix: \"Extract expression from 'as unknown' assertion\"",
      "context": "      transformationType: this.getTransformationType(pattern.name),\n      canAutoFix: pattern.canAutoFix,\n      suggestedFix: \"Extract expression from 'as unknown' assertion\"\n    });\n  }",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 571,
      "content": "this.log(\"🔧 Applying 'as unknown' transformations...\");",
      "context": "\n  protected fixIssues(): void {\n    this.log(\"🔧 Applying 'as unknown' transformations...\");\n    \n    const autoFixableIssues = this.asUnknownIssues.filter(issue => issue.canAutoFix);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 637,
      "content": "// For 'as unknown' expressions, we want to extract the expression part",
      "context": "  private transformAsExpression(node: AsExpression, pattern: TransformationPattern): boolean {\n    try {\n      // For 'as unknown' expressions, we want to extract the expression part\n      // and replace the entire AsExpression with just the expression\n      let expression = node.getExpression();",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 655,
      "content": "// e.g., (port + 3 as unknown).toString() would become port + 3.toString() which is invalid",
      "context": "      \n      // Skip numeric expressions with method calls that would create syntax errors\n      // e.g., (port + 3 as unknown).toString() would become port + 3.toString() which is invalid\n      if (expressionText.includes(\" + \") && parent && parent.getKind() === SyntaxKind.ParenthesizedExpression) {\n        const grandParent = parent.getParent();",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/ast-type-cast-fixer.ts",
      "line": 664,
      "content": "// This handles cases like (state as unknown) -> state instead of (state)",
      "context": "      \n      // If the expression is parenthesized, extract the inner expression\n      // This handles cases like (state as unknown) -> state instead of (state)\n      if (expression.getKind() === SyntaxKind.ParenthesizedExpression) {\n        const parenthesizedExpr = expression as ParenthesizedExpression;",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/enhanced-safe-fixer.ts",
      "line": 36,
      "content": "console.log(\"🚀 Starting enhanced safe 'as unknown' fixes...\");",
      "context": "\n  async execute(): Promise<void> {\n    console.log(\"🚀 Starting enhanced safe 'as unknown' fixes...\");\n    \n    // Add source files (excluding tests and generated files)",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/enhanced-safe-fixer.ts",
      "line": 76,
      "content": "// Only handle 'as unknown' patterns",
      "context": "    const fullText = asExpression.getText();\n    \n    // Only handle 'as unknown' patterns\n    if (!fullText.includes(\"as unknown\")) {\n      return;",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "codemods/enhanced-safe-fixer.ts",
      "line": 77,
      "content": "if (!fullText.includes(\"as unknown\")) {",
      "context": "    \n    // Only handle 'as unknown' patterns\n    if (!fullText.includes(\"as unknown\")) {\n      return;\n    }",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "codemods/enhanced-safe-fixer.ts",
      "line": 175,
      "content": "// Simple replacement - remove the 'as unknown' cast",
      "context": "    const before = asExpression.getText();\n    \n    // Simple replacement - remove the 'as unknown' cast\n    asExpression.replaceWithText(expressionText);\n    ",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/git.ts",
      "line": 969,
      "content": "options as unknown",
      "context": "      sourceBranch,\n      targetBranch,\n      options as unknown\n    );\n  }",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/git.ts",
      "line": 989,
      "content": "options as unknown",
      "context": "      sessionBranch,\n      baseBranch,\n      options as unknown\n    );\n  }",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/repository-uri.ts",
      "line": 183,
      "content": "const targetFormat = targetType as unknown;",
      "context": "  try {\n    // Map our RepositoryURIType to UriFormat\n    const targetFormat = targetType as unknown;\n    return convertRepositoryUri(uri, targetFormat);\n  } catch (error) {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/prepared-merge-commit-workflow.test.ts",
      "line": 213,
      "content": "(require(\"./git\") as unknown).preparePrFromParams = mockPreparePrFromParams;",
      "context": "      // Replace the preparePrFromParams function\n      const originalPreparePr = require(\"./git\").preparePrFromParams;\n      (require(\"./git\") as unknown).preparePrFromParams = mockPreparePrFromParams;\n\n      try {",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/prepared-merge-commit-workflow.test.ts",
      "line": 240,
      "content": "(require(\"./git\") as unknown).preparePrFromParams = originalPreparePr;",
      "context": "      } finally {\n        // Restore original function\n        (require(\"./git\") as unknown).preparePrFromParams = originalPreparePr;\n      }\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/session-lookup-bug-simple.test.ts",
      "line": 47,
      "content": "} as unknown;",
      "context": "      deleteSession: async () => true,\n      getNewSessionRepoPath: () => join(tempDir, \"local-minsky\", \"sessions\", \"test-session\"),\n    } as unknown;\n\n    const mockTaskService = {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/session-lookup-bug-simple.test.ts",
      "line": 53,
      "content": "} as unknown;",
      "context": "      getTaskStatus: async () => \"TODO\",\n      setTaskStatus: async () => undefined,\n    } as unknown;\n\n    const mockWorkspaceUtils = {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/session-lookup-bug-simple.test.ts",
      "line": 58,
      "content": "} as unknown;",
      "context": "      isSessionWorkspace: () => false,\n      getWorkspaceRepoName: () => \"local-minsky\",\n    } as unknown;\n\n    // This mock simulates the ACTUAL GitService bug behavior",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/session-lookup-bug-simple.test.ts",
      "line": 76,
      "content": "} as unknown;",
      "context": "      },\n      branchWithoutSession: async () => ({ branch: \"test\" }),\n    } as unknown;\n\n    // Act: Try to start a session (should fail cleanly)",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/session-update.test.ts",
      "line": 58,
      "content": "} as unknown);",
      "context": "        noPush: false,\n        force: false,\n      } as unknown);\n      throw new Error(\"Should have thrown an error\");\n    } catch (error: unknown) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/git-default-branch.test.ts",
      "line": 26,
      "content": "const execMock = GitService.prototype.execInRepository as unknown;",
      "context": "\n  test(\"should detect default branch from origin HEAD ref\", async () => {\n    const execMock = GitService.prototype.execInRepository as unknown;\n\n    // Mock to return a specific branch name",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-default-branch.test.ts",
      "line": 44,
      "content": "const execMock = GitService.prototype.execInRepository as unknown;",
      "context": "\n  test(\"should properly remove origin prefix from branch name\", async () => {\n    const execMock = GitService.prototype.execInRepository as unknown;\n\n    // Mock to return a branch with extra whitespace",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-default-branch.test.ts",
      "line": 57,
      "content": "const execMock = GitService.prototype.execInRepository as unknown;",
      "context": "\n  test(\"should fall back to 'main' when command fails\", async () => {\n    const execMock = GitService.prototype.execInRepository as unknown;\n\n    // Mock to throw an error",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 246,
      "content": "return new LocalGitBackend(config as unknown);",
      "context": "  case RepositoryBackendType.LOCAL: {\n    const { LocalGitBackend } = await import(\"./localGitBackend.js\");\n    return new LocalGitBackend(config as unknown);\n  }\n  case RepositoryBackendType.REMOTE: {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 250,
      "content": "return new RemoteGitBackend(config as unknown);",
      "context": "  case RepositoryBackendType.REMOTE: {\n    const { RemoteGitBackend } = await import(\"./remoteGitBackend.js\");\n    return new RemoteGitBackend(config as unknown);\n  }\n  case RepositoryBackendType.GITHUB: {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 288,
      "content": ").promisify(((await import(\"child_process\")) as unknown).exec)(",
      "context": "        const { stdout: branchOutput } = await (\n          await import(\"util\")\n        ).promisify(((await import(\"child_process\")) as unknown).exec)(\n          `git -C ${workdir} rev-parse --abbrev-ref HEAD`\n        );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 386,
      "content": "await (await import(\"util\")).promisify(((await import(\"child_process\")) as unknown).exec)(",
      "context": "\n        // Execute branch creation via Git command\n        await (await import(\"util\")).promisify(((await import(\"child_process\")) as unknown).exec)(\n          `git -C ${workdir} checkout -b ${name}`\n        );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/repository.ts",
      "line": 410,
      "content": "await (await import(\"util\")).promisify(((await import(\"child_process\")) as unknown).exec)(",
      "context": "\n        // Execute checkout via Git command\n        await (await import(\"util\")).promisify(((await import(\"child_process\")) as unknown).exec)(\n          `git -C ${workdir} checkout ${branch}`\n        );",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 69,
      "content": "gitService: mockGitService as unknown,",
      "context": "      { _session: \"test-session\" },\n      {\n        gitService: mockGitService as unknown,\n        taskService: mockTaskService as unknown,\n        sessionDB: mockSessionDB as unknown,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 70,
      "content": "taskService: mockTaskService as unknown,",
      "context": "      {\n        gitService: mockGitService as unknown,\n        taskService: mockTaskService as unknown,\n        sessionDB: mockSessionDB as unknown,\n        workspaceUtils: WorkspaceUtils,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 71,
      "content": "sessionDB: mockSessionDB as unknown,",
      "context": "        gitService: mockGitService as unknown,\n        taskService: mockTaskService as unknown,\n        sessionDB: mockSessionDB as unknown,\n        workspaceUtils: WorkspaceUtils,\n      }",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 97,
      "content": "gitService: mockGitService as unknown,",
      "context": "        {},\n        {\n          gitService: mockGitService as unknown,\n          taskService: mockTaskService as unknown,\n          sessionDB: mockSessionDB as unknown,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 98,
      "content": "taskService: mockTaskService as unknown,",
      "context": "        {\n          gitService: mockGitService as unknown,\n          taskService: mockTaskService as unknown,\n          sessionDB: mockSessionDB as unknown,\n          workspaceUtils: WorkspaceUtils,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 99,
      "content": "sessionDB: mockSessionDB as unknown,",
      "context": "          gitService: mockGitService as unknown,\n          taskService: mockTaskService as unknown,\n          sessionDB: mockSessionDB as unknown,\n          workspaceUtils: WorkspaceUtils,\n        }",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 120,
      "content": "gitService: mockGitService as unknown,",
      "context": "        { _session: \"non-existent-session\" },\n        {\n          gitService: mockGitService as unknown,\n          taskService: mockTaskService as unknown,\n          sessionDB: mockSessionDBWithNull as unknown,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 121,
      "content": "taskService: mockTaskService as unknown,",
      "context": "        {\n          gitService: mockGitService as unknown,\n          taskService: mockTaskService as unknown,\n          sessionDB: mockSessionDBWithNull as unknown,\n          workspaceUtils: WorkspaceUtils,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 122,
      "content": "sessionDB: mockSessionDBWithNull as unknown,",
      "context": "          gitService: mockGitService as unknown,\n          taskService: mockTaskService as unknown,\n          sessionDB: mockSessionDBWithNull as unknown,\n          workspaceUtils: WorkspaceUtils,\n        }",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 143,
      "content": "gitService: mockGitServiceWithError as unknown,",
      "context": "        { _session: \"test-session\" },\n        {\n          gitService: mockGitServiceWithError as unknown,\n          taskService: mockTaskService as unknown,\n          sessionDB: mockSessionDB as unknown,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 144,
      "content": "taskService: mockTaskService as unknown,",
      "context": "        {\n          gitService: mockGitServiceWithError as unknown,\n          taskService: mockTaskService as unknown,\n          sessionDB: mockSessionDB as unknown,\n          workspaceUtils: WorkspaceUtils,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/git-pr-workflow.test.ts",
      "line": 145,
      "content": "sessionDB: mockSessionDB as unknown,",
      "context": "          gitService: mockGitServiceWithError as unknown,\n          taskService: mockTaskService as unknown,\n          sessionDB: mockSessionDB as unknown,\n          workspaceUtils: WorkspaceUtils,\n        }",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/schemas/session-db-config.ts",
      "line": 5,
      "content": "* replacing unsafe `(config as unknown)` patterns with proper validation.",
      "context": " * \n * This module provides Zod schemas for validating session database configuration,\n * replacing unsafe `(config as unknown)` patterns with proper validation.\n */\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/mcp/server.ts",
      "line": 262,
      "content": "error: getErrorMessage(e as unknown),",
      "context": "      } catch (e) {\n        log.debug(\"Could not log MCP server methods\", {\n          error: getErrorMessage(e as unknown),\n        });\n      }",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/mcp/command-mapper.test.ts",
      "line": 31,
      "content": "commandMapper = new CommandMapper(mockServer as unknown, mockProjectContext);",
      "context": "    } as ProjectContext;\n\n    commandMapper = new CommandMapper(mockServer as unknown, mockProjectContext);\n  });\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/utils/type-guards.ts",
      "line": 4,
      "content": "* This module provides type guards and utility functions to help avoid 'as unknown' assertions",
      "context": " * Type Guards and Utilities\n *\n * This module provides type guards and utility functions to help avoid 'as unknown' assertions\n * by providing safer alternatives for common typing scenarios identified in task #280.\n *",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/type-guards.ts",
      "line": 7,
      "content": "* These utilities are designed to replace dangerous 'as unknown' patterns with proper type safety.",
      "context": " * by providing safer alternatives for common typing scenarios identified in task #280.\n *\n * These utilities are designed to replace dangerous 'as unknown' patterns with proper type safety.\n */\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/type-guards.ts",
      "line": 57,
      "content": "* Instead of: (someValue as unknown)()",
      "context": " * Type guard to check if a value is a function\n *\n * Instead of: (someValue as unknown)()\n * Use: isFunction(someValue) && someValue()\n */",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/type-guards.ts",
      "line": 105,
      "content": "* Instead of: someValue as unknown as TargetType",
      "context": " * Safely cast a value to a specific type with validation\n *\n * Instead of: someValue as unknown as TargetType\n * Use: safeCast(someValue, isTargetType)\n */",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/type-guards.ts",
      "line": 115,
      "content": "* Instead of: (someValue as unknown)!",
      "context": " * Assert that a value is not null or undefined\n *\n * Instead of: (someValue as unknown)!\n * Use: assertDefined(someValue)\n */",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/type-guards.ts",
      "line": 125,
      "content": "* Environment variable utilities to avoid 'as unknown' with process.env",
      "context": "\n/**\n * Environment variable utilities to avoid 'as unknown' with process.env\n */\nexport const EnvUtils = {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/type-guards.ts",
      "line": 131,
      "content": "* Instead of: process.env.VARIABLE as unknown as string",
      "context": "   * Get environment variable as string\n   *\n   * Instead of: process.env.VARIABLE as unknown as string\n   * Use: EnvUtils.getString('VARIABLE')\n   */",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/type-guards.ts",
      "line": 142,
      "content": "* Instead of: Number(process.env.VARIABLE as unknown)",
      "context": "   * Get environment variable as number\n   *\n   * Instead of: Number(process.env.VARIABLE as unknown)\n   * Use: EnvUtils.getNumber('VARIABLE')\n   */",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/type-guards.ts",
      "line": 157,
      "content": "* Instead of: Boolean(process.env.VARIABLE as unknown)",
      "context": "   * Get environment variable as boolean\n   *\n   * Instead of: Boolean(process.env.VARIABLE as unknown)\n   * Use: EnvUtils.getBoolean('VARIABLE')\n   */",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/utils/type-guards.ts",
      "line": 171,
      "content": "* Instead of: process.env.VARIABLE as unknown as string",
      "context": "   * Require environment variable (throws if not found)\n   *\n   * Instead of: process.env.VARIABLE as unknown as string\n   * Use: EnvUtils.require('VARIABLE')\n   */",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/type-guards.ts",
      "line": 186,
      "content": "* Instead of: JSON.parse(someString as unknown)",
      "context": " * Safe JSON parsing utilities\n *\n * Instead of: JSON.parse(someString as unknown)\n * Use: JsonUtils.safeParse(someString)\n */",
      "category": "type-bridging",
      "priority": "medium",
      "reason": "JSON parsing - may need proper type guards"
    },
    {
      "file": "src/domain/session/session-db-io.test.ts",
      "line": 67,
      "content": "const result = readSessionDbFile(undefined as unknown);",
      "context": "      // \"undefined is not an object (evaluating 'options.baseDir')\"\n      expect(() => {\n        const result = readSessionDbFile(undefined as unknown);\n        expect(result).toHaveProperty(\"sessions\");\n        expect(Array.isArray(result.sessions)).toBe(true);",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "src/domain/session/session-db-io.test.ts",
      "line": 78,
      "content": "const result = readSessionDbFile(null as unknown);",
      "context": "    test(\"should handle null options parameter without throwing runtime error\", () => {\n      expect(() => {\n        const result = readSessionDbFile(null as unknown);\n        expect(result).toHaveProperty(\"sessions\");\n        expect(Array.isArray(result.sessions)).toBe(true);",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "src/domain/session/session-db-io.test.ts",
      "line": 133,
      "content": "writeSessionsToFile(testState.sessions, undefined as unknown);",
      "context": "      // Test that the function doesn't throw when called with undefined options\n      expect(() => {\n        writeSessionsToFile(testState.sessions, undefined as unknown);\n      }).not.toThrow();\n    });",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "src/domain/session/session-db-io.test.ts",
      "line": 144,
      "content": "writeSessionsToFile(testState.sessions, null as unknown);",
      "context": "\n      expect(() => {\n        writeSessionsToFile(testState.sessions, null as unknown);\n      }).not.toThrow();\n    });",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "src/domain/session/session-db.test.ts",
      "line": 195,
      "content": "} as unknown;",
      "context": "        session: \"attempted-rename\",\n        branch: \"updated-branch\",\n      } as unknown;\n\n      const newState = updateSessionFn(state, \"test-session-1\", updates);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/ai/config-service.ts",
      "line": 46,
      "content": "provider: provider as unknown,",
      "context": "      // Create provider config from unified configuration\n      return {\n        provider: provider as unknown,\n        apiKey,\n        baseURL: providerConfig.base_url,",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/git/factory-function.test.ts",
      "line": 19,
      "content": "createGitService(null as unknown as { baseDir?: string });",
      "context": "  test(\"should handle null options parameter without throwing runtime error\", () => {\n    expect(() => {\n      createGitService(null as unknown as { baseDir?: string });\n    }).not.toThrow();\n  });",
      "category": "test-mocking",
      "priority": "medium",
      "reason": "Test parameter passing - check if proper types can be used"
    },
    {
      "file": "src/domain/git/pr-generation-operations.ts",
      "line": 123,
      "content": "throw new MinskyError(createSessionNotFoundMessage(sessionName, context as unknown));",
      "context": "    const context = createErrorContext().addCommand(\"minsky git pr\").build();\n\n    throw new MinskyError(createSessionNotFoundMessage(sessionName, context as unknown));\n  }\n  const workdir = deps.getSessionWorkdir(sessionName);",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/storage/json-file-storage.ts",
      "line": 452,
      "content": "return new JsonFileStorage<T, S>(options as unknown);",
      "context": "  options: JsonFileStorageOptions<S>\n): DatabaseStorage<T, S> {\n  return new JsonFileStorage<T, S>(options as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/__tests__/tasks.test.ts",
      "line": 43,
      "content": "backends: [] as unknown,",
      "context": "  ),\n  setTaskStatus: createMock(() => Promise.resolve()),\n  backends: [] as unknown,\n  currentBackend: {} as unknown,\n  getWorkspacePath: createMock(() => \"/mock/workspace/path\"),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/__tests__/tasks.test.ts",
      "line": 44,
      "content": "currentBackend: {} as unknown,",
      "context": "  setTaskStatus: createMock(() => Promise.resolve()),\n  backends: [] as unknown,\n  currentBackend: {} as unknown,\n  getWorkspacePath: createMock(() => \"/mock/workspace/path\"),\n  createTask: createMock((_specPath: unknown) => Promise.resolve({ ...mockTask, id: \"#new\" })),",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/__tests__/tasks.test.ts",
      "line": 51,
      "content": "const mockCreateTaskService = createMock(() => mockTaskService as unknown);",
      "context": "const mockResolveRepoPath = createMock(() => Promise.resolve(\"/mock/repo/path\"));\nconst mockResolveMainWorkspacePath = createMock(() => Promise.resolve(\"/mock/workspace/path\"));\nconst mockCreateTaskService = createMock(() => mockTaskService as unknown);\n\n// Type assertion for mock dependencies",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/__tests__/tasks.test.ts",
      "line": 58,
      "content": "} as unknown; // Cast to any to avoid TypeScript errors with the deps parameter",
      "context": "  resolveMainWorkspacePath: mockResolveMainWorkspacePath,\n  createTaskService: mockCreateTaskService,\n} as unknown; // Cast to any to avoid TypeScript errors with the deps parameter\n\ndescribe(\"interface-agnostic task functions\", () => {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/__tests__/tasks.test.ts",
      "line": 214,
      "content": "status: \"INVALID-STATUS\" as unknown,",
      "context": "      const params = {\n        taskId: \"#TEST_VALUE\",\n        status: \"INVALID-STATUS\" as unknown,\n        backend: \"markdown\",\n      };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/__tests__/git-pr-workflow.test.ts",
      "line": 91,
      "content": "execAsync: createMock() as unknown,",
      "context": "  test(\"should handle missing session in PR workflow\", async () => {\n    const mockDeps = {\n      execAsync: createMock() as unknown,\n      getSession: createMock(() => Promise.resolve(null)) as unknown,\n      getSessionWorkdir: createMock() as unknown,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/__tests__/git-pr-workflow.test.ts",
      "line": 92,
      "content": "getSession: createMock(() => Promise.resolve(null)) as unknown,",
      "context": "    const mockDeps = {\n      execAsync: createMock() as unknown,\n      getSession: createMock(() => Promise.resolve(null)) as unknown,\n      getSessionWorkdir: createMock() as unknown,\n    };",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/__tests__/git-pr-workflow.test.ts",
      "line": 93,
      "content": "getSessionWorkdir: createMock() as unknown,",
      "context": "      execAsync: createMock() as unknown,\n      getSession: createMock(() => Promise.resolve(null)) as unknown,\n      getSessionWorkdir: createMock() as unknown,\n    };\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/__tests__/git-pr-workflow.test.ts",
      "line": 132,
      "content": "}) as unknown,",
      "context": "        }\n        return { stdout: \"\", stderr: \"\" };\n      }) as unknown,\n      getSession: createMock(() =>\n        Promise.resolve({",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/__tests__/git-pr-workflow.test.ts",
      "line": 139,
      "content": ") as unknown,",
      "context": "          repoUrl: \"https://github.com/user/repo.git\",\n        })\n      ) as unknown,\n      getSessionWorkdir: createMock(() => \"/test/repo/sessions/task-143-session\") as unknown,\n      getSessionByTaskId: createMock(() =>",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/__tests__/git-pr-workflow.test.ts",
      "line": 140,
      "content": "getSessionWorkdir: createMock(() => \"/test/repo/sessions/task-143-session\") as unknown,",
      "context": "        })\n      ) as unknown,\n      getSessionWorkdir: createMock(() => \"/test/repo/sessions/task-143-session\") as unknown,\n      getSessionByTaskId: createMock(() =>\n        Promise.resolve({",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/__tests__/git-pr-workflow.test.ts",
      "line": 148,
      "content": ") as unknown,",
      "context": "          taskId: \"143\",\n        })\n      ) as unknown,\n    };\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/__tests__/git-pr-workflow.test.ts",
      "line": 166,
      "content": "execAsync: createMock() as unknown,",
      "context": "  test(\"should throw error when taskId has no associated session\", async () => {\n    const mockDeps = {\n      execAsync: createMock() as unknown,\n      getSession: createMock() as unknown,\n      getSessionWorkdir: createMock() as unknown,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/__tests__/git-pr-workflow.test.ts",
      "line": 167,
      "content": "getSession: createMock() as unknown,",
      "context": "    const mockDeps = {\n      execAsync: createMock() as unknown,\n      getSession: createMock() as unknown,\n      getSessionWorkdir: createMock() as unknown,\n      getSessionByTaskId: createMock(() => Promise.resolve(null)) as unknown,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/__tests__/git-pr-workflow.test.ts",
      "line": 168,
      "content": "getSessionWorkdir: createMock() as unknown,",
      "context": "      execAsync: createMock() as unknown,\n      getSession: createMock() as unknown,\n      getSessionWorkdir: createMock() as unknown,\n      getSessionByTaskId: createMock(() => Promise.resolve(null)) as unknown,\n    };",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/__tests__/git-pr-workflow.test.ts",
      "line": 169,
      "content": "getSessionByTaskId: createMock(() => Promise.resolve(null)) as unknown,",
      "context": "      getSession: createMock() as unknown,\n      getSessionWorkdir: createMock() as unknown,\n      getSessionByTaskId: createMock(() => Promise.resolve(null)) as unknown,\n    };\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/__tests__/git-pr-workflow.test.ts",
      "line": 183,
      "content": "execAsync: createMock() as unknown,",
      "context": "  test(\"should throw error when getSessionByTaskId dependency is not available\", async () => {\n    const mockDeps = {\n      execAsync: createMock() as unknown,\n      getSession: createMock() as unknown,\n      getSessionWorkdir: createMock() as unknown,",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/__tests__/git-pr-workflow.test.ts",
      "line": 184,
      "content": "getSession: createMock() as unknown,",
      "context": "    const mockDeps = {\n      execAsync: createMock() as unknown,\n      getSession: createMock() as unknown,\n      getSessionWorkdir: createMock() as unknown,\n      // getSessionByTaskId is intentionally omitted",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/__tests__/git-pr-workflow.test.ts",
      "line": 185,
      "content": "getSessionWorkdir: createMock() as unknown,",
      "context": "      execAsync: createMock() as unknown,\n      getSession: createMock() as unknown,\n      getSessionWorkdir: createMock() as unknown,\n      // getSessionByTaskId is intentionally omitted\n    };",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/__tests__/git-pr-workflow.test.ts",
      "line": 225,
      "content": "}) as unknown,",
      "context": "        }\n        return { stdout: \"\", stderr: \"\" };\n      }) as unknown,\n      getSession: createMock(() =>\n        Promise.resolve({",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/__tests__/git-pr-workflow.test.ts",
      "line": 232,
      "content": ") as unknown,",
      "context": "          repoUrl: \"https://github.com/user/repo.git\",\n        })\n      ) as unknown,\n      getSessionWorkdir: createMock(() => \"/test/repo/sessions/direct-session\") as unknown,\n      getSessionByTaskId: createMock() as unknown,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/__tests__/git-pr-workflow.test.ts",
      "line": 233,
      "content": "getSessionWorkdir: createMock(() => \"/test/repo/sessions/direct-session\") as unknown,",
      "context": "        })\n      ) as unknown,\n      getSessionWorkdir: createMock(() => \"/test/repo/sessions/direct-session\") as unknown,\n      getSessionByTaskId: createMock() as unknown,\n    };",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/__tests__/git-pr-workflow.test.ts",
      "line": 234,
      "content": "getSessionByTaskId: createMock() as unknown,",
      "context": "      ) as unknown,\n      getSessionWorkdir: createMock(() => \"/test/repo/sessions/direct-session\") as unknown,\n      getSessionByTaskId: createMock() as unknown,\n    };\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/__tests__/git-pr-workflow.test.ts",
      "line": 267,
      "content": "}) as unknown,",
      "context": "        // Fail other git commands to test error handling\n        throw new Error(\"git: command not found\");\n      }) as unknown,\n      getSession: createMock(() =>\n        Promise.resolve({",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/__tests__/git-pr-workflow.test.ts",
      "line": 273,
      "content": ") as unknown,",
      "context": "          repoName: \"test-repo\",\n        })\n      ) as unknown,\n      getSessionWorkdir: createMock(() => \"/test/repo\") as unknown,\n    };",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/__tests__/git-pr-workflow.test.ts",
      "line": 274,
      "content": "getSessionWorkdir: createMock(() => \"/test/repo\") as unknown,",
      "context": "        })\n      ) as unknown,\n      getSessionWorkdir: createMock(() => \"/test/repo\") as unknown,\n    };\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/workspace/local-workspace-backend.ts",
      "line": 110,
      "content": "throw new FileNotFoundError(workspaceDir, relativePath, error as unknown);",
      "context": "      // Handle file not found\n      if (error instanceof Error && \"code\" in error && (error as any)?.code === \"ENOENT\") {\n        throw new FileNotFoundError(workspaceDir, relativePath, error as unknown);\n      }\n      ",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/workspace/local-workspace-backend.ts",
      "line": 209,
      "content": "throw new FileNotFoundError(workspaceDir, relativePath, error as unknown);",
      "context": "      // Handle file not found\n      if (error instanceof Error && \"code\" in error && (error as any)?.code === \"ENOENT\") {\n        throw new FileNotFoundError(workspaceDir, relativePath, error as unknown);\n      }\n      ",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/workspace/local-workspace-backend.ts",
      "line": 276,
      "content": "throw new FileNotFoundError(workspaceDir, relativePath || \".\", error as unknown);",
      "context": "      // Handle directory not found\n      if (error instanceof Error && \"code\" in error && (error as any)?.code === \"ENOENT\") {\n        throw new FileNotFoundError(workspaceDir, relativePath || \".\", error as unknown);\n      }\n      ",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/tasks/jsonFileTaskBackend.ts",
      "line": 554,
      "content": "return new JsonFileTaskBackend(config as unknown);",
      "context": "export function createJsonFileTaskBackend(config: JsonFileTaskBackendOptions): TaskBackend {\n  // Simply return the instance since JsonFileTaskBackend already implements TaskBackend\n  return new JsonFileTaskBackend(config as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks/taskFunctions.test.ts",
      "line": 240,
      "content": "const updatedTasks = setTaskStatus(testTasks, \"#001\", \"INVALID\" as unknown);",
      "context": "\n    test(\"should return original array if status is invalid\", () => {\n      const updatedTasks = setTaskStatus(testTasks, \"#001\", \"INVALID\" as unknown);\n      expect(updatedTasks).toEqual(testTasks);\n    });",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/task-backend-router.test.ts",
      "line": 270,
      "content": "} as unknown;",
      "context": "        name: \"sqlite\",\n        constructor: { name: \"SqliteTaskBackend\" }\n      } as unknown;\n\n      const routingInfo = router.getBackendRoutingInfo(mockSqliteBackend);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/task-backend-router.test.ts",
      "line": 285,
      "content": "} as unknown;",
      "context": "        name: \"postgres\",\n        constructor: { name: \"PostgresTaskBackend\" }\n      } as unknown;\n\n      const routingInfo = router.getBackendRoutingInfo(mockPostgresBackend);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/task-backend-router.test.ts",
      "line": 301,
      "content": "} as unknown;",
      "context": "        name: \"unknown\",\n        constructor: { name: \"UnknownTaskBackend\" }\n      } as unknown;\n\n      const routingInfo = router.getBackendRoutingInfo(mockUnknownBackend);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/task-backend-router.test.ts",
      "line": 322,
      "content": "} as unknown;",
      "context": "          throw new Error(\"Storage location not available\");\n        }\n      } as unknown;\n\n      const routingInfo = router.getBackendRoutingInfo(mockBackend);",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "src/domain/tasks/taskService.test.ts",
      "line": 172,
      "content": "const saveTasksDataSpy = mockBackend.saveTasksData as unknown as jest.SpyInstance;",
      "context": "    test(\"should update a task's status\", async () => {\n      // Setup spy to check what's passed to saveTasksData\n      const saveTasksDataSpy = mockBackend.saveTasksData as unknown as jest.SpyInstance;\n      const formatTasksSpy = mockBackend.formatTasks as unknown as jest.SpyInstance;\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/tasks/taskService.test.ts",
      "line": 173,
      "content": "const formatTasksSpy = mockBackend.formatTasks as unknown as jest.SpyInstance;",
      "context": "      // Setup spy to check what's passed to saveTasksData\n      const saveTasksDataSpy = mockBackend.saveTasksData as unknown as jest.SpyInstance;\n      const formatTasksSpy = mockBackend.formatTasks as unknown as jest.SpyInstance;\n\n      await taskService.setTaskStatus(\"#001\", \"DONE\");",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/tasks/githubIssuesTaskBackend.ts",
      "line": 658,
      "content": "return new GitHubIssuesTaskBackend(config as unknown);",
      "context": " */\nexport function createGitHubIssuesTaskBackend(config: GitHubIssuesTaskBackendOptions): TaskBackend {\n  return new GitHubIssuesTaskBackend(config as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/tasks/taskService.ts",
      "line": 564,
      "content": "return new TaskService(options as unknown);",
      "context": " */\nexport function createTaskService(options: TaskServiceOptions = {}): TaskService {\n  return new TaskService(options as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/test-utils/mocking.test.ts",
      "line": 13,
      "content": "expect((mockFn as unknown)(\"World\")).toBe(\"Hello, World!\");",
      "context": "\n    // Should work as a function\n    expect((mockFn as unknown)(\"World\")).toBe(\"Hello, World!\");\n\n    // Should track calls",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/utils/test-utils/mocking.test.ts",
      "line": 24,
      "content": "expect((mockFn as unknown)()).toBeUndefined();",
      "context": "    const mockFn = createMock();\n\n    expect((mockFn as unknown)()).toBeUndefined();\n    expect(mockFn.mock.calls.length).toBe(1);\n  });",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/utils/test-utils/mocking.ts",
      "line": 52,
      "content": "return createMock(implementation) as unknown;",
      "context": "export function mockFunction<T extends (...args: unknown[]) => any>(implementation?: T) {\n  // Cast to unknown first to avoid TypeScript errors\n  return createMock(implementation) as unknown;\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "tests/adapters/cli/session.test.ts",
      "line": 87,
      "content": "} as unknown as SessionProviderInterface;",
      "context": "        return Promise.resolve(mockSessions.find((s) => s.session === name) || null);\n      }),\n    } as unknown as SessionProviderInterface;\n  });\n",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "tests/adapters/cli/session-test-utilities.ts",
      "line": 76,
      "content": "} as unknown as SessionProviderInterface;",
      "context": "    }),\n    save: jest.fn().mockResolvedValue(undefined),\n  } as unknown as SessionProviderInterface;\n\n  return {",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "tests/adapters/cli/session-test-utilities.ts",
      "line": 109,
      "content": "} as unknown as GitServiceInterface;",
      "context": "    stashPop: jest.fn().mockResolvedValue(undefined),\n    getCommitHash: jest.fn().mockResolvedValue(\"abc123\"),\n  } as unknown as GitServiceInterface;\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 41,
      "content": "} as unknown;",
      "context": "        registeredTools[name] = { name, description, schema, handler };\n      }),\n    } as unknown;\n\n    // Register the tools",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 71,
      "content": "const mockStat = stat as unknown;",
      "context": "\n      // Mock file doesn't exist\n      const mockStat = stat as unknown;\n      mockStat.mockRejectedValueOnce(new Error(\"ENOENT\"));\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 75,
      "content": "const mockWriteFile = writeFile as unknown;",
      "context": "\n      // Mock successful write\n      const mockWriteFile = writeFile as unknown;\n      mockWriteFile.mockResolvedValueOnce(undefined);\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 79,
      "content": "const mockPathResolver = new SessionPathResolver() as unknown;",
      "context": "\n      // Mock path resolver\n      const mockPathResolver = new SessionPathResolver() as unknown;\n      mockPathResolver.resolvePath.mockResolvedValue(\"/session/path/test.ts\");\n      mockPathResolver.getSessionWorkspacePath.mockResolvedValue(\"/session/path\");",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 100,
      "content": "const mockStat = stat as unknown;",
      "context": "\n      // Mock file exists\n      const mockStat = stat as unknown;\n      mockStat.mockResolvedValueOnce({ isFile: () => true });\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 104,
      "content": "const mockReadFile = readFile as unknown;",
      "context": "\n      // Mock file content\n      const mockReadFile = readFile as unknown;\n      mockReadFile.mockResolvedValueOnce(`function oldFunc() {\n  console.log('old');",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 114,
      "content": "const mockWriteFile = writeFile as unknown;",
      "context": "\n      // Mock successful write\n      const mockWriteFile = writeFile as unknown;\n      mockWriteFile.mockResolvedValueOnce(undefined);\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 118,
      "content": "const mockPathResolver = new SessionPathResolver() as unknown;",
      "context": "\n      // Mock path resolver\n      const mockPathResolver = new SessionPathResolver() as unknown;\n      mockPathResolver.resolvePath.mockResolvedValue(\"/session/path/test.ts\");\n      mockPathResolver.getSessionWorkspacePath.mockResolvedValue(\"/session/path\");",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 145,
      "content": "const mockPathResolver = new SessionPathResolver() as unknown;",
      "context": "\n      // Mock path resolver error\n      const mockPathResolver = new SessionPathResolver() as unknown;\n      mockPathResolver.resolvePath.mockRejectedValue(new Error(\"Invalid path\"));\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 186,
      "content": "const mockReadFile = readFile as unknown;",
      "context": "\n      // Mock file content\n      const mockReadFile = readFile as unknown;\n      mockReadFile.mockResolvedValueOnce(\"This is oldText in the file\");\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 190,
      "content": "const mockWriteFile = writeFile as unknown;",
      "context": "\n      // Mock successful write\n      const mockWriteFile = writeFile as unknown;\n      mockWriteFile.mockResolvedValueOnce(undefined);\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 194,
      "content": "const mockPathResolver = new SessionPathResolver() as unknown;",
      "context": "\n      // Mock path resolver\n      const mockPathResolver = new SessionPathResolver() as unknown;\n      mockPathResolver.resolvePath.mockResolvedValue(\"/session/path/test.ts\");\n      mockPathResolver.validatePathExists.mockResolvedValue(undefined);",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 218,
      "content": "const mockReadFile = readFile as unknown;",
      "context": "\n      // Mock file content\n      const mockReadFile = readFile as unknown;\n      mockReadFile.mockResolvedValueOnce(\"This is some text in the file\");\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 222,
      "content": "const mockPathResolver = new SessionPathResolver() as unknown;",
      "context": "\n      // Mock path resolver\n      const mockPathResolver = new SessionPathResolver() as unknown;\n      mockPathResolver.resolvePath.mockResolvedValue(\"/session/path/test.ts\");\n      mockPathResolver.validatePathExists.mockResolvedValue(undefined);",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 241,
      "content": "const mockReadFile = readFile as unknown;",
      "context": "\n      // Mock file content with multiple occurrences\n      const mockReadFile = readFile as unknown;\n      mockReadFile.mockResolvedValueOnce(\"This is oldText and another oldText in the file\");\n",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/adapters/mcp/session-edit-tools.test.ts",
      "line": 245,
      "content": "const mockPathResolver = new SessionPathResolver() as unknown;",
      "context": "\n      // Mock path resolver\n      const mockPathResolver = new SessionPathResolver() as unknown;\n      mockPathResolver.resolvePath.mockResolvedValue(\"/session/path/test.ts\");\n      mockPathResolver.validatePathExists.mockResolvedValue(undefined);",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 28,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "      // Arrange\n      const repoPath = \"/Users/test/.local/state/minsky/sessions/session-name\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      // Override environment variables for testing",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 49,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "      // Arrange\n      const repoPath = \"/Users/test/projects/non-session-repo\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      // Act",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 66,
      "content": "const result = await isSessionWorkspace(repoPath, execAsyncMock as unknown);",
      "context": "\n      // Act\n      const result = await isSessionWorkspace(repoPath, execAsyncMock as unknown);\n\n      // Assert",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 75,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "      // Arrange\n      const repoPath = \"/Users/test/.local/state/minsky/sessions/session-name\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      // Override environment variables for testing",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 99,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "      // Arrange\n      const repoPath = \"/Users/test/.local/state/minsky/sessions/session-name\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      // Set up environment for testing",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 115,
      "content": "} as unknown;",
      "context": "          createdAt: new Date().toISOString(),\n        }),\n      } as unknown;\n\n      try {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 136,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "      // Arrange\n      const repoPath = \"/Users/test/projects/non-session-repo\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      // Act",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 148,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "      // Arrange\n      const repoPath = \"/Users/test/.local/state/minsky/sessions/unknown-session\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      // Set up environment for testing",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 174,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "      // Arrange\n      const repoPath = \"/Users/test/.local/state/minsky/sessions/session-name\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      // Set up environment for testing",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 189,
      "content": "} as unknown;",
      "context": "          createdAt: new Date().toISOString(),\n        }),\n      } as unknown;\n\n      try {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 209,
      "content": "const execAsyncMock = mockGitRootExecAsync(sessionPath) as unknown;",
      "context": "      // Arrange\n      const sessionPath = \"/Users/test/.local/state/minsky/sessions/session-name\";\n      const execAsyncMock = mockGitRootExecAsync(sessionPath) as unknown;\n\n      // Set up environment for testing",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 225,
      "content": "} as unknown;",
      "context": "          createdAt: new Date().toISOString(),\n        }),\n      } as unknown;\n\n      try {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Test assertion masking type errors - should be fixed"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 242,
      "content": "const execAsyncMock = mockGitRootExecAsync(notSessionPath) as unknown;",
      "context": "      // Arrange\n      const notSessionPath = \"/Users/test/projects/non-session\";\n      const execAsyncMock = mockGitRootExecAsync(notSessionPath) as unknown;\n\n      // Act",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 253,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "    test(\"getCurrentSession returns null when repo path does not exist\", async () => {\n      const repoPath = \"/Users/test/.local/state/minsky/sessions/session-name\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      const result = await getCurrentSession(repoPath, execAsyncMock);",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 261,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "    test(\"getCurrentSession returns null when repoUrl is not found\", async () => {\n      const repoPath = \"/Users/test/.local/state/minsky/sessions/session-name\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      const result = await getCurrentSession(repoPath, execAsyncMock);",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 269,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "    test(\"getCurrentSession returns null when session data doesn't match file structure\", async () => {\n      const repoPath = \"/Users/test/.local/state/minsky/sessions/session-name\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      const result = await getCurrentSession(repoPath, execAsyncMock);",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 277,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "    test(\"getCurrentSession returns null when session doesn't exist\", async () => {\n      const repoPath = \"/Users/test/.local/state/minsky/sessions/unknown-session\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      const result = await getCurrentSession(repoPath, execAsyncMock);",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 285,
      "content": "const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;",
      "context": "    test(\"getCurrentSession returns session info when valid\", async () => {\n      const repoPath = \"/Users/test/.local/state/minsky/sessions/session-name\";\n      const execAsyncMock = mockGitRootExecAsync(repoPath) as unknown;\n\n      const result = await getCurrentSession(repoPath, execAsyncMock);",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "tests/domain/commands/workspace.commands.test.ts",
      "line": 370,
      "content": "const execAsyncMock = mockGitRootExecAsync(sessionPath) as unknown;",
      "context": "      const testPath = `${sessionPath}/some/nested/path`;\n\n      const execAsyncMock = mockGitRootExecAsync(sessionPath) as unknown;\n\n      const result = await getSessionFromWorkspace(testPath, execAsyncMock);",
      "category": "test-mocking",
      "priority": "low",
      "reason": "Test mocking - may be legitimate for test setup"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 113,
      "content": "error as unknown",
      "context": "      context,\n      classification.recoveryActions,\n      error as unknown\n    );\n  }",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 573,
      "content": "backend: error.context.backend as unknown,",
      "context": "    // Log error with context\n    log.error(\"Storage error recorded\", {\n      backend: error.context.backend as unknown,\n      type: (error).type as unknown,\n      severity: (error).severity as unknown,",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 574,
      "content": "type: (error).type as unknown,",
      "context": "    log.error(\"Storage error recorded\", {\n      backend: error.context.backend as unknown,\n      type: (error).type as unknown,\n      severity: (error).severity as unknown,\n      operation: error.context.operation as unknown,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 575,
      "content": "severity: (error).severity as unknown,",
      "context": "      backend: error.context.backend as unknown,\n      type: (error).type as unknown,\n      severity: (error).severity as unknown,\n      operation: error.context.operation as unknown,\n      count: currentCount + 1,",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/error-handling.ts",
      "line": 576,
      "content": "operation: error.context.operation as unknown,",
      "context": "      type: (error).type as unknown,\n      severity: (error).severity as unknown,\n      operation: error.context.operation as unknown,\n      count: currentCount + 1,\n      message: (error as any).message as any,",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 173,
      "content": ".where(eq(postgresSessions.session, id)) as unknown).limit(1);",
      "context": "        .select()\n        .from(postgresSessions)\n        .where(eq(postgresSessions.session, id)) as unknown).limit(1);\n\n      return result.length > 0 ? fromPostgresSelect(result[0]) : null;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 187,
      "content": "const results = await (this.drizzle.select() as unknown).from(postgresSessions);",
      "context": "  async getEntities(options?: DatabaseQueryOptions): Promise<SessionRecord[]> {\n    try {\n      const results = await (this.drizzle.select() as unknown).from(postgresSessions);\n      return results.map(fromPostgresSelect);\n    } catch (error) {",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 227,
      "content": ".set(updateData) as unknown).where(eq(postgresSessions.session, id));",
      "context": "      await (this.drizzle\n        .update(postgresSessions)\n        .set(updateData) as unknown).where(eq(postgresSessions.session, id));\n\n      return updated;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 242,
      "content": ".delete(postgresSessions) as unknown).where(eq(postgresSessions.session, id));",
      "context": "    try {\n      const result = await (this.drizzle\n        .delete(postgresSessions) as unknown).where(eq(postgresSessions.session, id));\n\n      return result.rowCount !== null && result.rowCount > 0;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 259,
      "content": ".where(eq(postgresSessions.session, id)) as unknown).limit(1);",
      "context": "        .select({ session: postgresSessions.session })\n        .from(postgresSessions)\n        .where(eq(postgresSessions.session, id)) as unknown).limit(1);\n\n      return result.length > 0;",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/postgres-storage.ts",
      "line": 293,
      "content": "return new PostgresStorage(config as unknown);",
      "context": " */\nexport function createPostgresStorage(config: PostgresStorageConfig): DatabaseStorage<SessionRecord, SessionDbState> {\n  return new PostgresStorage(config as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 119,
      "content": "const sessions = await (this.drizzleDb.select() as unknown).from(sessionsTable);",
      "context": "\n    try {\n      const sessions = await (this.drizzleDb.select() as unknown).from(sessionsTable);\n\n      // Construct state object - this assumes TState has a sessions array",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 125,
      "content": "baseDir: process.env.XDG_STATE_HOME ? `${process.env.XDG_STATE_HOME}/minsky` : `${process.env.HOME}/.local/state/minsky` as unknown,",
      "context": "      const state = {\n        sessions,\n        baseDir: process.env.XDG_STATE_HOME ? `${process.env.XDG_STATE_HOME}/minsky` : `${process.env.HOME}/.local/state/minsky` as unknown,\n      };\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 200,
      "content": "let query = (this.drizzleDb.select() as unknown).from(sessionsTable);",
      "context": "\n    try {\n      let query = (this.drizzleDb.select() as unknown).from(sessionsTable);\n\n      // Apply filters if provided",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    },
    {
      "file": "src/domain/storage/backends/sqlite-storage.ts",
      "line": 358,
      "content": "return new SqliteStorage<TEntity, TState>(config as unknown);",
      "context": "  config: SqliteStorageConfig\n): DatabaseStorage<TEntity, TState> {\n  return new SqliteStorage<TEntity, TState>(config as unknown);\n}\n",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/utils/test-utils/compatibility/matchers.ts",
      "line": 398,
      "content": "if (!(key in (expectObj as unknown))) {",
      "context": "  // Add each matcher to the expect object\n  for (const [key, value] of Object.entries(asymmetricMatchers)) {\n    if (!(key in (expectObj as unknown))) {\n      expectObj[key] = value;\n    }",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/cli/customizations/config-customizations.ts",
      "line": 31,
      "content": "flatten(obj as unknown);",
      "context": "  }\n\n  flatten(obj as unknown);\n  return flattened;\n}",
      "category": "suspicious",
      "priority": "medium",
      "reason": "Needs manual review"
    },
    {
      "file": "src/adapters/cli/utils/error-handler.ts",
      "line": 136,
      "content": "log.agent({ message: \"Command result\", result } as unknown);",
      "context": "    if (isStructuredMode()) {\n      // In structured mode, log to agent logger\n      log.agent({ message: \"Command result\", result } as unknown);\n    } else {\n      // In human mode or when json is explicitly requested, write directly to stdout",
      "category": "error-masking",
      "priority": "high",
      "reason": "Property access masking - should use proper types"
    }
  ],
  "recommendations": [
    "🚨 HIGH PRIORITY: 344 assertions are masking type errors and should be fixed immediately",
    "⚠️  344 assertions are masking type errors - these reduce TypeScript effectiveness",
    "🧪 92 assertions in tests - review for proper type alternatives",
    "🌉 1 assertions for type bridging - consider proper type guards",
    "📋 Start with high priority items, then medium, then low",
    "🔍 Focus on production code before test code",
    "📚 Document any legitimate uses that must remain"
  ]
}