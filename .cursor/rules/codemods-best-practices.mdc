# Codemod and Automation Best Practices

**Established in Task #178: Establish Codemod Best Practices and Standards**

## Core Mission: Safe, Effective, Maintainable Automation

Every automation tool (codemods, scripts, automated fixes) must meet three fundamental requirements:
1. **Safety**: Never break working code or introduce compilation errors
2. **Effectiveness**: Solve the intended problem comprehensively and efficiently  
3. **Maintainability**: Be understandable, testable, and modifiable

## Core Principle: Root Cause vs Symptoms

**Always address the root cause, not symptoms.**

Before creating any automated solution, ask:
1. **Am I treating symptoms or root cause?**
2. **What's the simplest principle that addresses the core issue?**
3. **Can I solve this with one simple algorithm instead of many patterns?**

## ‚ö†Ô∏è CRITICAL: AST-Based Over Regex (6x More Effective)

**MANDATORY**: Use AST-based approaches over regex-based string manipulation

### Performance Evidence from Task #166

**AST-Based Approach Results**:
- fix-variable-naming-ast.ts: 90 fixes (100% success rate, zero syntax errors)
- Second run: 125 additional fixes (100% success rate)
- Third run: 16 more fixes (100% success rate)
- **Total**: 231 fixes with 100% reliability

**Regex Approach Results**:
- Multiple regex codemods: High syntax error rates
- Complex pattern matching: Frequent failures
- **User Correction**: "I SAID NO REGEX!!!!! @automation-approaches.mdc"

**Simple vs Complex Approach Evidence**:
- **Complex Approach**: ~284 fixes across multiple iterations
- **Simple Approach**: 239 fixes in **one run** - **6x more effective**

### Why AST-Based Approaches Are Superior

1. **Syntax Awareness**: AST understands code structure, preventing syntax errors
2. **Type Safety**: Can access TypeScript type information
3. **Precise Targeting**: Can identify exact nodes to modify
4. **Reliable Transformations**: Built-in validation and error handling
5. **Maintainable Code**: Clear, readable transformation logic

## üî¨ MANDATORY: 5-Step Boundary Validation Methodology

**CRITICAL REQUIREMENT**: All codemods MUST undergo boundary validation testing before deployment

### Step 1: Reverse Engineering Analysis
**Document what the codemod claims to do:**
- Identify stated purpose and transformation logic
- Map the intended workflow and scope
- Understand target problems and expected solutions
- Document method (AST vs regex) and dependencies

### Step 2: Technical Analysis
**Analyze implementation safety and approach:**
- Evaluate transformation method (prefer AST over regex)
- Assess scope analysis capabilities
- Check context awareness (comments vs code vs strings)
- Verify error handling and rollback mechanisms
- Identify external dependencies (ESLint, file system, etc.)

### Step 3: Test Design
**Create comprehensive boundary violation tests:**
- Design test cases for each claimed capability
- Include scope collision scenarios (duplicate identifiers)
- Test false positive scenarios (legitimate underscore usage)
- Create edge cases (nested functions, complex destructuring)
- Test context blindness (comments, strings, unrelated code)

### Step 4: Boundary Validation Results
**Execute tests and document failures:**
- Run comprehensive test suite
- Measure compilation errors introduced
- Document specific failure patterns
- Calculate fix success rates and reliability metrics
- Identify any breaking changes or regressions

### Step 5: Decision and Documentation
**Make evidence-based keep/remove decision:**
- Provide clear justification based on test results
- Document any new anti-patterns discovered
- Update safety guidelines with learnings
- Add comprehensive docstring to codemod file (if keeping)

## Task #178: Critical Anti-Patterns Discovered

**NEWLY IDENTIFIED**: Task #178 Boundary Validation Testing revealed dangerous automation patterns

### Anti-Pattern 1: ESLint-Dependent Variable Renaming
**Example**: fix-underscore-prefix.ts
- **Pattern**: Parse ESLint output, apply regex replacements based on line numbers
- **Critical Failures**:
  - ESLint dependency makes it fragile - fails if ESLint config changes
  - Line-number based approach breaks with file modifications
  - No scope analysis - renames variables still being used elsewhere
  - Hard-coded session path assumptions break reusability

### Anti-Pattern 2: Limited-Window Variable Renaming
**Example**: fix-result-underscore-mismatch.ts
- **Pattern**: 5-line lookahead window to find variable usage
- **Critical Failures**:
  - Limited window misses usage outside the window
  - No understanding of function boundaries or scope
  - Creates naming conflicts with existing variables
  - Matches variable names in comments/strings triggering incorrect renames

### Anti-Pattern 3: Bulk Pattern Replacement Without Context Analysis
**Example**: fix-incorrect-underscore-prefixes.ts
- **Pattern**: 24+ regex patterns for different variable contexts
- **Critical Failures**:
  - Pattern accumulation creates unpredictable interactions
  - No scope verification leads to duplicate identifiers  
  - Context blindness affects legitimate underscore usage
  - No conflict detection with existing underscore variables

### Anti-Pattern 4: Parameter Modification Without Scope Analysis
**Example**: fix-parameter-underscore-mismatch.ts (from previous analysis)
- **Pattern**: Regex patterns targeting function parameters
- **Critical Failures**:
  - Creates functions with duplicate parameter names
  - Incomplete parameter transformations cause "Cannot find name" errors
  - No safety mechanisms or conflict detection

### Anti-Pattern 5: Complex Pattern-Specific Solutions
**DOCUMENTED FAILURE**: Task #166 - Complex Pattern-Specific vs Simple Root-Cause Approaches

**Wrong Approach**: Creating complex, symptom-specific solutions
- Built comprehensive regex patterns for every possible usage context
- Added specific patterns for: function calls, property access, assignments, returns, etc.
- Created multiple targeted codemods for edge cases
- Kept adding more patterns when issues remained

**Correct Approach**: Address the root cause directly
- Simple principle: Find variables with underscores, check if used without underscores, remove underscores from declarations
- One simple algorithm that handles all cases

## üö® Critical Safety Requirements

### Mandatory Pre-Deployment Checks
1. **Scope Analysis**: Must understand variable/function scope before any modification
2. **Conflict Detection**: Check for existing identifiers with target names
3. **Usage Verification**: Confirm elements are actually unused before removal/modification
4. **Context Awareness**: Distinguish code from comments, strings, and unrelated contexts
5. **Compilation Safety**: Zero compilation errors introduced by transformations
6. **Environment Independence**: No dependencies on external tools or configurations

### Required Safety Mechanisms
- **Rollback Capability**: Provide mechanism to undo transformations
- **Error Isolation**: Continue processing other files if one fails
- **Validation**: Verify transformations don't break syntax or semantics
- **Conflict Prevention**: Detect and prevent naming collisions
- **Scope Respect**: Never modify variables outside their proper scope

### Prohibited Approaches
- **ESLint-dependent automation**: Fragile, environment-specific
- **Line-number based modifications**: Break with concurrent changes
- **Limited-window scope analysis**: Misses broader usage patterns
- **Bulk regex pattern application**: Unpredictable interactions
- **Variable renaming without usage analysis**: Creates compilation errors
- **Raw regex string replacement**: High error rates, syntax breaking
- **Manual text manipulation**: Unreliable, context-unaware
- **Ad-hoc pattern matching**: Fragile, hard to maintain

## üìã Automation Development Workflow

### Phase 1: Problem Analysis and Design
1. **Root Cause Identification**: Understand the fundamental issue, not just symptoms
2. **Simple Principle Definition**: Define the simplest approach that addresses the core problem
3. **AST-First Design**: Plan transformation using AST manipulation, not regex
4. **Scope Planning**: Design scope analysis and conflict detection mechanisms

### Phase 2: Implementation
1. **AST-Based Development**: Use ts-morph, jscodeshift, or babel-codemod
2. **Safety Integration**: Implement scope analysis and conflict detection
3. **Error Handling**: Add comprehensive error handling and logging
4. **Testing Preparation**: Create isolated test environments

### Phase 3: Boundary Validation Testing
1. **Apply 5-Step Methodology**: Follow complete boundary validation process
2. **Comprehensive Test Suite**: Cover all failure scenarios and edge cases
3. **Safety Verification**: Ensure zero compilation errors and breaking changes
4. **Performance Measurement**: Document fix rates and reliability metrics

### Phase 4: Decision and Deployment
1. **Evidence-Based Decision**: Keep/remove based on boundary validation results
2. **Documentation**: Add comprehensive docstring to codemod file
3. **Safety Guidelines Update**: Document any new anti-patterns discovered
4. **Deployment**: Only deploy codemods that pass all boundary validation tests

## üìù Documentation Standards

### Required Docstring Format
All codemods MUST include comprehensive documentation at the top of the file:

```typescript
/**
 * Boundary Validation Test: [codemod-name].ts
 * 
 * BOUNDARY VALIDATION RESULT: [SAFE/DANGEROUS - decision with evidence]
 * 
 * Step 1: Reverse Engineering Analysis
 * Claims: [What the codemod claims to do]
 * Method: [AST/regex transformation approach]
 * Scope: [Files and code elements targeted]
 * 
 * Step 2: Technical Analysis  
 * Method: [Detailed transformation method analysis]
 * Scope Analysis: [Scope handling capabilities]
 * Context Awareness: [Comment/string/code distinction]
 * Error Handling: [Safety mechanisms and rollback]
 * Dependencies: [External tool dependencies]
 * 
 * Step 3: Boundary Validation Results
 * [If DANGEROUS] CRITICAL FAILURES DISCOVERED:
 * - [Specific failure pattern 1]
 * - [Specific failure pattern 2]
 * - [Additional safety violations]
 * 
 * [If SAFE] VALIDATION PASSED:
 * - [Safety verification results]
 * - [Performance metrics]
 * - [Reliability confirmation]
 * 
 * Step 4: Decision
 * [REMOVED/KEPT] - [Evidence-based justification]
 * 
 * [If new anti-pattern discovered]
 * Anti-Pattern Identified: "[Anti-Pattern Name]"
 * 
 * Original Claims:
 * [Direct quotes from original codemod documentation]
 */
```

### Test File Requirements
Each codemod MUST have a corresponding `.test.ts` file that:
- Imports and tests the transformation logic in isolation
- Includes all boundary validation test cases
- Documents the specific failures discovered
- Provides evidence for the keep/remove decision

## üîß Approved Tools and Libraries

### REQUIRED: AST-Based Tools
- **ts-morph**: For TypeScript AST manipulation and transformations
- **jscodeshift**: For JavaScript AST transformations
- **babel-codemod**: For Babel-based transformations and plugins
- **@typescript-eslint/typescript-estree**: For TypeScript AST parsing

### SAFE: Text Replacement (When AST Fails)
- **search_replace tool**: For simple, safe text operations
- Only when AST manipulation is not feasible
- Always verify changes don't break syntax
- Include scope analysis even for text replacement

### @ts-expect-error for Type Definition Gaps
- Use @ts-expect-error comments for Bun/Node compatibility issues
- Don't modify working runtime code for type issues
- Document the specific type gap being addressed

## 7 Automation Principles (Enhanced with Task #178 Learnings)

### 1. AST-Based Over Regex (6x More Effective)
- Use ts-morph, jscodeshift, or babel-codemod
- Avoid regex-based string replacement
- Leverage syntax tree understanding for reliable transformations
- **Task #178**: Mandatory boundary validation testing for all codemods

### 2. Safe Text Replacement When AST Fails
- Use search_replace tool for simple, safe text operations
- Only when AST manipulation is not feasible
- Always verify changes don't break syntax
- **Task #178**: Include scope analysis even for text replacement

### 3. Focused Codemods for Specific Files/Patterns
- Create targeted codemods for specific files when needed
- Better than trying to handle all cases in one massive codemod
- Easier to debug and maintain
- **Task #178**: Each focused codemod must still pass boundary validation

### 4. Comprehensive Pattern Coverage
- Ensure codemods handle all variations of a pattern
- Test on representative samples before full application
- Verify edge cases are covered
- **Task #178**: Use boundary validation tests to verify coverage

### 5. Error Handling with Try-Catch
- Wrap codemod operations in proper error handling
- Continue processing other files if one fails
- Log specific errors for debugging

### 6. Verification with Before/After Error Counts
- Always measure error reduction with concrete numbers
- Run TypeScript compilation before and after
- Document success rates and fix counts
- **Task #178**: Include boundary validation test results in metrics

### 7. Safety First (Task #178)
- **Scope analysis before any variable modification**
- **Conflict detection for naming changes**
- **Environment independence from external tools**
- **Rollback capability for failed transformations**

## Automation Design Principles

### 1. Simplicity First
- Start with the simplest possible solution
- Only add complexity when simple approaches prove insufficient
- One clear principle beats many specific patterns

### 2. Root Cause Focus
- Identify the fundamental issue, not just observable symptoms
- Fix the source of the problem, not its manifestations
- Ask "why" multiple times to find the true root cause

### 3. Comprehensive Coverage
- Simple algorithms often handle more cases than complex pattern-matching
- Avoid trying to enumerate every possible context
- Focus on the underlying logic that applies universally

### 4. Measurable Effectiveness
- Track fixes per iteration and success rate
- Compare simple vs complex approaches with concrete metrics
- Prefer approaches that solve more problems with less code

### 5. Safety First (Task #178)
- **Scope analysis before any variable modification**
- **Conflict detection for naming changes**
- **Environment independence from external tools**
- **Rollback capability for failed transformations**

## When Complex Patterns Are Justified

Complex pattern-matching is appropriate when:
- Multiple distinct root causes exist that require different solutions
- The problem is genuinely about context-specific transformations
- Simple approaches have been tried and proven insufficient through boundary validation
- The complexity is in the domain logic, not the implementation approach
- **Task #178**: Complex approaches still require comprehensive boundary validation

## Enforcement Protocol

**If questioned about approach with phrases like:**
- "why did you create a new codemod instead of improving the existing one?"
- "why do we need to keep adding patterns?"
- "is our criteria overly specific?"
- "I SAID NO REGEX!!!!!"

**Immediate Response:**
1. **STOP** creating new patterns/codemods
2. **ANALYZE** if treating symptoms vs root cause
3. **SIMPLIFY** to fundamental principle
4. **SWITCH TO AST-BASED APPROACH** if using regex
5. **APPLY BOUNDARY VALIDATION** before proceeding
6. **VERIFY** simple approach is more effective before proceeding

## üéØ Success Metrics and Quality Standards

### Required Performance Metrics
- **Coverage**: Percentage of issues fixed in single run
- **Efficiency**: Fixes per line of automation code
- **Maintainability**: Ease of understanding and modifying the solution
- **Reliability**: Consistency of results across different codebases
- **Syntax Safety**: Zero syntax errors introduced by transformations
- **Boundary Validation**: Zero critical failures in safety testing
- **Scope Safety**: Zero variable naming conflicts or broken references

### Quality Gates
1. **100% Compilation Safety**: No syntax errors introduced
2. **Zero Scope Violations**: No variable conflicts or broken references
3. **Complete Boundary Validation**: All 5 steps completed with documentation
4. **Evidence-Based Decision**: Clear justification for keep/remove
5. **Anti-Pattern Documentation**: New patterns documented and shared

## üîÑ Continuous Improvement Process

### Learning Integration
1. **Anti-Pattern Documentation**: Update guidelines with each dangerous pattern discovered
2. **Safety Enhancement**: Strengthen safety requirements based on failures
3. **Methodology Refinement**: Improve boundary validation process
4. **Tool Evolution**: Adopt better AST tools as they become available

### Knowledge Sharing
- Document all boundary validation results for future reference
- Share anti-patterns and safety violations with team
- Update automation guidelines with new learnings
- Maintain comprehensive library of safe, proven codemods

## üéì Training and Onboarding

### Required Knowledge
- AST manipulation fundamentals with ts-morph or equivalent
- TypeScript scope analysis and semantic understanding
- Test-driven development for transformation safety
- Boundary validation methodology and safety requirements

### Certification Process
1. Complete boundary validation training
2. Successfully validate 3 existing codemods using 5-step methodology
3. Create 1 new safe codemod with full boundary validation
4. Pass safety review demonstrating anti-pattern recognition

## üöÄ Integration with Development Workflow

### Pre-Commit Requirements
- All new codemods must pass boundary validation testing
- Dangerous codemods must be removed before merging
- Documentation must include complete boundary validation results
- Safety violations must be documented and guidelines updated

### Code Review Standards
- Reviewers must verify boundary validation was completed
- Safety mechanisms must be verified and tested
- AST-based approach must be confirmed over regex
- Anti-pattern identification must be documented

**CRITICAL**: This rule represents the cumulative safety knowledge from Task #178 boundary validation testing. Adherence is mandatory for all automation development to prevent the deployment of dangerous tools that break working code.
