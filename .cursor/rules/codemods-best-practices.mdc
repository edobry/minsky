# Codemod Best Practices and Standards

**Established in Task #178: Establish Codemod Best Practices and Standards**

## Core Mission: Safe, Effective, Maintainable Codemods

Every codemod must meet three fundamental requirements:
1. **Safety**: Never break working code or introduce compilation errors
2. **Effectiveness**: Solve the intended problem comprehensively and efficiently
3. **Maintainability**: Be understandable, testable, and modifiable

## üî¨ MANDATORY: 5-Step Boundary Validation Methodology

**CRITICAL REQUIREMENT**: All codemods MUST undergo boundary validation testing before deployment

### Step 1: Reverse Engineering Analysis
**Document what the codemod claims to do:**
- Identify stated purpose and transformation logic
- Map the intended workflow and scope
- Understand target problems and expected solutions
- Document method (AST vs regex) and dependencies

### Step 2: Technical Analysis
**Analyze implementation safety and approach:**
- Evaluate transformation method (prefer AST over regex)
- Assess scope analysis capabilities
- Check context awareness (comments vs code vs strings)
- Verify error handling and rollback mechanisms
- Identify external dependencies (ESLint, file system, etc.)

### Step 3: Test Design
**Create comprehensive boundary violation tests:**
- Design test cases for each claimed capability
- Include scope collision scenarios (duplicate identifiers)
- Test false positive scenarios (legitimate underscore usage)
- Create edge cases (nested functions, complex destructuring)
- Test context blindness (comments, strings, unrelated code)

### Step 4: Boundary Validation Results
**Execute tests and document failures:**
- Run comprehensive test suite
- Measure compilation errors introduced
- Document specific failure patterns
- Calculate fix success rates and reliability metrics
- Identify any breaking changes or regressions

### Step 5: Decision and Documentation
**Make evidence-based keep/remove decision:**
- Provide clear justification based on test results
- Document any new anti-patterns discovered
- Update safety guidelines with learnings
- Add comprehensive docstring to codemod file (if keeping)

## üö® Critical Safety Requirements

### Mandatory Pre-Deployment Checks
1. **Scope Analysis**: Must understand variable/function scope before any modification
2. **Conflict Detection**: Check for existing identifiers with target names
3. **Usage Verification**: Confirm elements are actually unused before removal/modification
4. **Context Awareness**: Distinguish code from comments, strings, and unrelated contexts
5. **Compilation Safety**: Zero compilation errors introduced by transformations
6. **Environment Independence**: No dependencies on external tools or configurations

### Required Safety Mechanisms
- **Rollback Capability**: Provide mechanism to undo transformations
- **Error Isolation**: Continue processing other files if one fails
- **Validation**: Verify transformations don't break syntax or semantics
- **Conflict Prevention**: Detect and prevent naming collisions
- **Scope Respect**: Never modify variables outside their proper scope

## ‚ö†Ô∏è PROHIBITED: Dangerous Anti-Patterns

### Scope Analysis Violations
- **ESLint-Dependent Variable Renaming**: External tool dependencies make codemods fragile
- **Limited-Window Scope Analysis**: 5-line windows miss broader variable usage
- **Parameter Modification Without Scope Analysis**: Creates duplicate identifiers
- **Variable Renaming Without Usage Verification**: Breaks working code references

### Regex-Based Violations  
- **Bulk Pattern Replacement Without Context Analysis**: 24+ regex patterns create chaos
- **Context-Blind Pattern Matching**: Affects comments, strings, legitimate usage
- **Line-Number Based Modifications**: Break with concurrent file changes
- **Pattern Accumulation**: Adding more regex patterns when existing ones fail

### Development Process Violations
- **Skipping Boundary Validation**: Deploying codemods without safety testing
- **Symptom-Based Solutions**: Treating manifestations instead of root causes
- **Tool Proliferation**: Creating multiple codemods when one would suffice

## üìã Codemod Development Workflow

### Phase 1: Problem Analysis and Design
1. **Root Cause Identification**: Understand the fundamental issue, not just symptoms
2. **Simple Principle Definition**: Define the simplest approach that addresses the core problem
3. **AST-First Design**: Plan transformation using AST manipulation, not regex
4. **Scope Planning**: Design scope analysis and conflict detection mechanisms

### Phase 2: Implementation
1. **AST-Based Development**: Use ts-morph, jscodeshift, or babel-codemod
2. **Safety Integration**: Implement scope analysis and conflict detection
3. **Error Handling**: Add comprehensive error handling and logging
4. **Testing Preparation**: Create isolated test environments

### Phase 3: Boundary Validation Testing
1. **Apply 5-Step Methodology**: Follow complete boundary validation process
2. **Comprehensive Test Suite**: Cover all failure scenarios and edge cases
3. **Safety Verification**: Ensure zero compilation errors and breaking changes
4. **Performance Measurement**: Document fix rates and reliability metrics

### Phase 4: Decision and Deployment
1. **Evidence-Based Decision**: Keep/remove based on boundary validation results
2. **Documentation**: Add comprehensive docstring to codemod file
3. **Safety Guidelines Update**: Document any new anti-patterns discovered
4. **Deployment**: Only deploy codemods that pass all boundary validation tests

## üìù Codemod Documentation Standards

### Required Docstring Format
All codemods MUST include comprehensive documentation at the top of the file:

```typescript
/**
 * Boundary Validation Test: [codemod-name].ts
 * 
 * BOUNDARY VALIDATION RESULT: [SAFE/DANGEROUS - decision with evidence]
 * 
 * Step 1: Reverse Engineering Analysis
 * Claims: [What the codemod claims to do]
 * Method: [AST/regex transformation approach]
 * Scope: [Files and code elements targeted]
 * 
 * Step 2: Technical Analysis  
 * Method: [Detailed transformation method analysis]
 * Scope Analysis: [Scope handling capabilities]
 * Context Awareness: [Comment/string/code distinction]
 * Error Handling: [Safety mechanisms and rollback]
 * Dependencies: [External tool dependencies]
 * 
 * Step 3: Boundary Validation Results
 * [If DANGEROUS] CRITICAL FAILURES DISCOVERED:
 * - [Specific failure pattern 1]
 * - [Specific failure pattern 2]
 * - [Additional safety violations]
 * 
 * [If SAFE] VALIDATION PASSED:
 * - [Safety verification results]
 * - [Performance metrics]
 * - [Reliability confirmation]
 * 
 * Step 4: Decision
 * [REMOVED/KEPT] - [Evidence-based justification]
 * 
 * [If new anti-pattern discovered]
 * Anti-Pattern Identified: "[Anti-Pattern Name]"
 * 
 * Original Claims:
 * [Direct quotes from original codemod documentation]
 */
```

### Test File Requirements
Each codemod MUST have a corresponding `.test.ts` file that:
- Imports and tests the transformation logic in isolation
- Includes all boundary validation test cases
- Documents the specific failures discovered
- Provides evidence for the keep/remove decision

## üéØ Success Metrics and Quality Standards

### Required Performance Metrics
- **Fix Coverage**: Percentage of targeted issues fixed in single run
- **Compilation Safety**: Zero compilation errors introduced
- **Scope Safety**: Zero variable naming conflicts or broken references
- **Boundary Validation**: Zero critical failures in safety testing
- **Reliability**: Consistent results across different codebases

### Quality Gates
1. **100% Compilation Safety**: No syntax errors introduced
2. **Zero Scope Violations**: No variable conflicts or broken references
3. **Complete Boundary Validation**: All 5 steps completed with documentation
4. **Evidence-Based Decision**: Clear justification for keep/remove
5. **Anti-Pattern Documentation**: New patterns documented and shared

## üîß Approved Tools and Libraries

### REQUIRED: AST-Based Tools
- **ts-morph**: For TypeScript AST manipulation and transformations
- **jscodeshift**: For JavaScript AST transformations
- **babel-codemod**: For Babel-based transformations and plugins
- **@typescript-eslint/typescript-estree**: For TypeScript AST parsing

### PROHIBITED: Unsafe Approaches
- **Raw regex string replacement**: High error rates, syntax breaking
- **Manual text manipulation**: Unreliable, context-unaware
- **ESLint output parsing**: Fragile external dependencies
- **Line-number based modifications**: Break with concurrent changes

## üîÑ Continuous Improvement Process

### Learning Integration
1. **Anti-Pattern Documentation**: Update guidelines with each dangerous pattern discovered
2. **Safety Enhancement**: Strengthen safety requirements based on failures
3. **Methodology Refinement**: Improve boundary validation process
4. **Tool Evolution**: Adopt better AST tools as they become available

### Knowledge Sharing
- Document all boundary validation results for future reference
- Share anti-patterns and safety violations with team
- Update automation guidelines with new learnings
- Maintain comprehensive library of safe, proven codemods

## üéì Training and Onboarding

### Required Knowledge
- AST manipulation fundamentals with ts-morph or equivalent
- TypeScript scope analysis and semantic understanding
- Test-driven development for transformation safety
- Boundary validation methodology and safety requirements

### Certification Process
1. Complete boundary validation training
2. Successfully validate 3 existing codemods using 5-step methodology
3. Create 1 new safe codemod with full boundary validation
4. Pass safety review demonstrating anti-pattern recognition

## üöÄ Integration with Development Workflow

### Pre-Commit Requirements
- All new codemods must pass boundary validation testing
- Dangerous codemods must be removed before merging
- Documentation must include complete boundary validation results
- Safety violations must be documented and guidelines updated

### Code Review Standards
- Reviewers must verify boundary validation was completed
- Safety mechanisms must be verified and tested
- AST-based approach must be confirmed over regex
- Anti-pattern identification must be documented

**CRITICAL**: This rule represents the cumulative safety knowledge from Task #178 boundary validation testing. Adherence is mandatory for all codemod development to prevent the deployment of dangerous automation tools that break working code.
