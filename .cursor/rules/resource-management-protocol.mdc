---
description: REQUIRED guidelines for managing project resources using dedicated tools rather than direct file editing
alwaysApply: false
---

# Resource Management Protocol

## Core Principle

Always use dedicated project tools and commands to manage resources, configuration, and metadata rather than directly editing the underlying files.

## When to Apply This Rule

This rule MUST be applied:
- When modifying any project configuration files
- When creating, updating, or removing rules
- When managing metadata, schemas, or other project-specific resources
- Whenever a project provides dedicated CLI commands, APIs, or tools for resource management
- **When accessing task specifications, session data, or other structured project resources**

## Requirements

1. **Tool Verification**
   - Before modifying any project resource, check if a dedicated tool or command exists for managing it
   - Search project documentation and help commands (e.g., `minsky --help`, `minsky rules --help`)
   - Consider the resource type (configuration, rule, schema, etc.) and look for corresponding commands

2. **Tool Usage Mandate**
   - If a dedicated tool exists, it MUST be used instead of direct file editing
   - NEVER modify resource files directly if a management tool is available
   - Consider any direct file editing of managed resources as a critical error

3. **Command Syntax Verification**
   - Always verify the correct command syntax using `--help` flags
   - Check available parameters and options before running commands
   - Read command documentation to understand expected input and output formats

4. **Resource Path Awareness**
   - Be aware that CLI-managed resources may be stored in locations different from apparent or conventional paths
   - Verify the authoritative location of resources using appropriate commands
   - Respect the project's resource management system rather than assuming conventional file paths

## MCP Interface Priority Protocol

**CRITICAL**: When working with Minsky resources, use MCP commands over direct file access:

### Task Specification Access
```bash
# ✅ CORRECT: Use MCP task spec command
mcp_minsky-server_tasks_spec taskId="287"

# ❌ WRONG: Direct file reading
read_file "process/tasks/287-task-name.md"
```

### Session Data Access
```bash
# ✅ CORRECT: Use MCP session commands
mcp_minsky-server_session_get name="session-name"

# ❌ WRONG: Direct file access to session data
read_file ".minsky/sessions/session-data.json"
```

### Rule Access
```bash
# ✅ CORRECT: Use MCP rules command
mcp_minsky-server_rules_get id="rule-name"

# ❌ WRONG: Direct file reading
read_file ".cursor/rules/rule-name.mdc"
```

### MCP Command Discovery
1. **Check available MCP methods**: Use `mcp_minsky-server_debug_listMethods` to see all available commands
2. **Look for resource-specific commands**: Before using `read_file`, check if there's an MCP command for that resource type
3. **Use structured interfaces**: MCP commands often provide structured data with metadata, while file reading only gives raw content

## MCP Tool Calling Protocol

**CRITICAL**: Always provide ALL required parameters when calling MCP tools.

### Required Parameter Verification

Before calling any MCP tool:

1. **Check Tool Schema**: Verify required parameters using tool documentation or schema
2. **Provide Required Parameters**: NEVER call MCP tools without required parameters
3. **Use Correct Parameter Types**: Ensure parameter values match expected types (string, number, boolean)
4. **Include Optional Parameters**: Add optional parameters when they improve the operation

### Common MCP Tool Parameter Requirements

```typescript
// ✅ CORRECT: All required parameters provided
mcp_minsky-server_tasks_create {
  title: "Add session chat interface context UI elements",
  description: "Comprehensive task description..."
}

// ❌ WRONG: Missing required 'title' parameter
mcp_minsky-server_tasks_create {
  description: "Task description..."
}

// ✅ CORRECT: Required taskId parameter provided
mcp_minsky-server_tasks_spec {
  taskId: "#293"
}

// ❌ WRONG: Missing required 'taskId' parameter
mcp_minsky-server_tasks_spec {}
```

### Parameter Validation Checklist

Before executing any MCP tool call:
- [ ] All required parameters are provided
- [ ] Parameter types match expected schema (string, number, boolean, object)
- [ ] Parameter values are appropriate for the operation
- [ ] Optional parameters enhance the operation when applicable

### Tool Call Failure Recovery

If an MCP tool call fails due to missing parameters:
1. **Identify missing parameters** from the error message
2. **Provide the missing parameters** and retry the call
3. **Document the correction** to prevent future occurrences
4. **Update parameter verification** process if needed

## Examples

### ✅ PREFER

```bash
# Check if a tool exists for managing rules
minsky rules --help

# Use MCP command for task specifications
mcp_minsky-server_tasks_spec taskId="123"

# Use the tool to view a rule
minsky rules get user-preferences

# Use the tool to update a rule
minsky rules update user-preferences --description "User preferences for AI behavior"
```

### ❌ AVOID

```bash
# Directly editing a rule file
vi .cursor/rules/user-preferences.mdc  # WRONG!

# Direct file reading when MCP command exists
read_file "process/tasks/123-task-name.md"  # WRONG!

# Assuming conventional paths for resources
echo "New content" > .ai/rules/user-preferences.mdc  # WRONG!
```

## Resource Types and Their Management Tools

| Resource Type | Management Tool | MCP Command | Direct File Access |
|---|-----|-----|-----|
| Rules | `minsky rules` commands | `mcp_minsky-server_rules_*` | FORBIDDEN |
| Tasks | `minsky tasks` commands | `mcp_minsky-server_tasks_*` | FORBIDDEN |
| Task Specifications | `minsky tasks spec` | `mcp_minsky-server_tasks_spec` | FORBIDDEN |
| Sessions | `minsky session` commands | `mcp_minsky-server_session_*` | FORBIDDEN |
| State Files | Appropriate `minsky` commands | Context-specific MCP commands | STRICTLY FORBIDDEN |
| Project Config | Project-specific tools if available | Not applicable | Only if no tool exists |
| Package Dependencies | `bun add/remove` commands | Not applicable | FORBIDDEN for package.json |
| Documentation | Appropriate documentation tools if available | Not applicable | Allowed with caution |

## Rationale

1. **System Integrity**
   - Resource management tools often maintain internal state or perform validation
   - Direct file editing can lead to corrupt or inconsistent state
   - Tools may store metadata in multiple locations that need to remain synchronized

2. **Correctness and Validation**
   - Management tools typically include validation to ensure correctness
   - Direct editing bypasses these validations, potentially causing subtle bugs
   - Tools enforce schema compliance and format requirements

3. **Future Compatibility**
   - Resource formats and locations may change over time
   - Management tools provide abstraction over these details
   - Direct editing creates brittle dependencies on current implementation details

4. **MCP Interface Benefits**
   - **Structured Data**: MCP commands return structured JSON with metadata
   - **Error Handling**: Proper error responses and validation
   - **Consistency**: Uniform interface across different resource types
   - **Context Awareness**: Commands understand workspace and session context

## Protocol for Discovering Resource Management Tools

1. **Documentation Search**
   - Check project README and documentation for command references
   - Look for sections describing resource management

2. **MCP Method Discovery**
   - Use `mcp_minsky-server_debug_listMethods` to see all available MCP commands
   - Look for patterns like `tasks_*`, `session_*`, `rules_*` for resource-specific operations

3. **CLI Exploration**
   - Use top-level help commands: `minsky --help`
   - Explore category-specific help: `minsky rules --help`, `minsky tasks --help`

4. **Verification Process**
   - After identifying a potential tool, verify it can perform the needed operation
   - Test with minimal examples before making significant changes

## Related Rules

- Apply alongside [minsky-cli-usage](mdc:.cursor/rules/minsky-cli-usage.mdc) when working with Minsky CLI commands
- Apply with [workspace-verification](mdc:.cursor/rules/workspace-verification.mdc) for complete workspace context verification
- Apply with [session-first-workflow](mdc:.cursor/rules/session-first-workflow.mdc) when working in session workspaces
