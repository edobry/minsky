---
description:
globs:
alwaysApply: false
---
# Minsky Rules Index

This document categorizes all available rules in the Minsky ecosystem, describes their purpose, and identifies which rules apply in different usage scenarios.

## Core Workflow Rules

These rules define the fundamental workflow and processes for using Minsky:

| Rule | Description | When to Apply |
|------|-------------|--------------|
| **minsky-workflow-orchestrator** | Provides an overview of the Minsky workflow system and serves as entry point to more detailed workflow rules | **Always required**. Start here for understanding the overall workflow |
| **minsky-cli-usage** | Guidelines for using the Minsky CLI for all task and session operations | When using any Minsky CLI command |
| **minsky-session-management** | Procedures for creating and managing sessions | When creating, navigating, or managing sessions |
| **task-implementation-workflow** | Step-by-step process for implementing tasks | When implementing task requirements |
| **task-status-protocol** | Procedures for checking and updating task status | When checking or updating task status |
| **pr-preparation-workflow** | Guidelines for preparing and submitting PRs | When preparing and submitting PRs |
| **session-first-workflow** | Enforces that all implementation work happens in dedicated sessions | During all implementation tasks, ensuring code isolation |
| **creating-tasks** | Guidelines for creating well-structured task specifications | When defining new work items or requirements |

| **rules-management** | Guidelines for creating, updating, and managing Minsky rules using the `rules` command | When working with AI rule files |

## Code Organization Rules

These rules ensure consistent organization and structure in the codebase:

| Rule | Description | When to Apply |
|------|-------------|--------------|
| **command-organization** | Standards for structuring commands with interface-agnostic architecture | When creating new commands or working with code architecture |
| **domain-oriented-modules** | Promotes organizing code by domain concepts | When designing module structure or refactoring |
| **file-size** | Guidelines for avoiding overly large files | When creating new files or growing existing ones |
| **constants-management** | Best practices for organizing constants | When adding new constants or refactoring existing ones |

## Quality Assurance Rules

These rules enforce quality and robustness in code:

| Rule | Description | When to Apply |
|------|-------------|--------------|
| **robust-error-handling** | Standards for comprehensive error handling | When working with operations that might fail |
| **dont-ignore-errors** | Enforces addressing all errors before considering tasks complete | During implementation and review of any code |
| **tests** | Requirements for test coverage and when to run tests | When modifying code that requires testing |
| **testable-design** | Guidelines for creating easily testable code | When designing new features or components |
| **designing-tests** | Principles for effective test design | When writing or modifying tests |
| **test-expectations** | Best practices for managing test expectations | When updating code that changes expected behavior |
| **test-driven-bugfix** | Process for fixing bugs using test-driven development | When addressing bugs or regressions |
| **cli-testing** | Approaches for testing command-line interfaces | When testing CLI commands or features |
| **testing-session-repo-changes** | Procedures for testing changes in session repositories | When modifying code that affects session repositories |

## Documentation & Communication Rules

These rules ensure clear communication about changes and design:

| Rule | Description | When to Apply |
|------|-------------|--------------|
| **pr-description-guidelines** | Format and content requirements for PR descriptions | When preparing pull requests |
| **rule-creation-guidelines** | Standards for creating or updating rule files | When modifying existing rules or creating new ones |
| **json-parsing** | Best practices for working with JSON output | When implementing commands that output JSON |

## Tooling & Environment Rules

These rules standardize the development environment:

| Rule | Description | When to Apply |
|------|-------------|--------------|
| **bun_over_node** | Mandates using Bun instead of Node.js | For all JavaScript/TypeScript execution and package management |
| **template-literals** | Preference for template literals over string concatenation | When constructing strings with variable content |
| **user-preferences** | Records user preferences from interactions | When implementing features that should respect user preferences |
| **derived-cursor-rules** | AI-derived rules from project history | Reference when understanding project conventions |

## Usage Scenarios & Applicable Rules

### For New Contributors

When a developer first joins the project, they should focus on:

1. **minsky-workflow-orchestrator** - Understand the overall workflow system
2. **minsky-cli-usage** - Learn essential CLI commands
3. **minsky-session-management** - Understand session creation and management
4. **session-first-workflow** - Learn the critical session isolation requirements
5. **creating-tasks** - Know how to document new work
6. **command-organization** - Understand the codebase structure
7. **rules-management** - Learn how to work with project rules

### When Implementing Features

During feature implementation, the most relevant rules are:

1. **minsky-workflow-orchestrator** & **session-first-workflow** - Follow the proper process
2. **minsky-session-management** - Create and manage your implementation session
3. **task-implementation-workflow** - Follow the step-by-step implementation process
4. **task-status-protocol** - Keep task status updated correctly
5. **domain-oriented-modules** - Structure code correctly
6. **robust-error-handling** & **dont-ignore-errors** - Ensure resilient code
7. **testable-design** & **tests** - Create properly tested features


### When Fixing Bugs

For bug fixes, prioritize:

1. **test-driven-bugfix** - Use proper bug-fixing methodology
2. **dont-ignore-errors** - Ensure all errors are handled
3. **test-expectations** - Update tests appropriately


### When Reviewing Code

Code reviewers should focus on:

1. **pr-description-guidelines** - Ensure proper documentation
2. **robust-error-handling** & **dont-ignore-errors** - Verify error handling
3. **domain-oriented-modules** & **command-organization** - Check structural alignment
4. **testable-design** & **tests** - Validate test coverage


### When Creating New Rules

When developing new Minsky rules:

1. **rule-creation-guidelines** - Follow the standards for rule creation
2. **rules-management** - Use the rules command for proper rule creation and management
3. **derived-cursor-rules** - Reference existing patterns and conventions

### When Setting Up New Projects

For initializing new projects with Minsky:

1. **minsky-workflow** - Establish the core workflow
2. **session-first-workflow** - Enforce proper session usage
3. **creating-tasks** - Enable structured task creation
4. **rules-management** - Set up rule management guidelines

6. **command-organization** - If developing with the same architecture

## Rule Relationships

Some rules are closely related and often used together:

- **domain-oriented-modules** and **command-organization** complement each other for code structuring
- **testable-design**, **designing-tests**, and **tests** form a comprehensive testing approach
- The workflow rules (**minsky-workflow-orchestrator**, **minsky-cli-usage**, **minsky-session-management**, **task-implementation-workflow**, **task-status-protocol**, **pr-preparation-workflow**) together define the complete development process
- **session-first-workflow** works with all workflow rules to ensure proper isolation
- **robust-error-handling** and **dont-ignore-errors** ensure comprehensive error management
- **pr-description-guidelines** contribute to documentation of changes
- **rule-creation-guidelines** and **rules-management** work together for maintaining AI rules

This index serves as a guide to help you understand which rules are relevant to different aspects of working with Minsky and how they interact with each other.
