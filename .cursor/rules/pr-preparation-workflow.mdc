---
name: PR Preparation Workflow
description: REQUIRED workflow for preparing and submitting pull requests including the git approve command for PR merging
globs:
  - "**/*.md"
  - "**/*.ts"
  - "**/*.js"
alwaysApply: true
---
# PR Preparation Workflow

This rule provides guidelines for preparing and submitting pull requests (PRs) in the Minsky workflow.

## PR Creation Process

### Pacing and Scope Discipline (Critical)

- Do not reduce scope, weaken tests, or relax assertions to achieve a "green" state without explicit user approval.
- A non-green state after merges or edits is acceptable while restoring correctness and full coverage; prioritize fidelity over speed.
- The requirement that "all tests pass" applies to the intended scope of work. It must not be used to justify trimming scope or changing tests to pass.
- If there is any perceived time pressure, treat it as nonexistent by default and ask the user before making trade-offs.

### 1. Verify Implementation Completeness

Before creating a PR, ensure:

1. **All requirements are implemented**: Check the task specification to confirm all requirements are met
2. **All tests pass**: Run the test suite to ensure all tests pass
3. **Code quality is acceptable**: Check for any linting issues or code smells
4. **Documentation is updated**: Ensure task documentation and changelog are updated

### 2. Generate PR Description

Use the Minsky CLI to generate a PR description:

```bash
minsky git pr --task <task-id>
```

or if you're already in a session:

```bash
minsky git pr
```

### 3. Save PR Description

Save the generated PR description to the task directory:

```bash
minsky git pr > process/tasks/<task-id>/pr.md
```

or more simply:

```bash
mkdir -p process/tasks/<task-id>
minsky git pr > process/tasks/<task-id>/pr.md
```

### 4. Edit PR Description

Edit the PR description to:

1. **Follow conventional commits format**: Use the format `<type>(#<task-id>): <description>`
2. **Include a clear summary**: Summarize the changes made
3. **List all changes**: Ensure all significant changes are listed
4. **Explain any decisions**: Document any important design decisions or trade-offs
5. **Include testing information**: Describe how the changes were tested

### 5. Commit PR Description

Commit the PR description to your branch:

```bash
git add process/tasks/<task-id>/pr.md
git commit -m "Add PR description for task #<task-id>"
git push origin $(git branch --show-current)
```

### 6. Update Task Status

Update the task status to IN-REVIEW:

```bash
minsky tasks status set <task-id> IN-REVIEW
```

This can happen automatically when using `minsky git pr` unless the `--no-status-update` flag is used.

## PR Description Format

Follow this format for PR descriptions:

```markdown
# <type>(#<task-id>): <Short description of changes>

## Summary

A brief description of what was changed and why.

## Changes

### Added

- List of new features or functionality added

### Changed

- List of existing functionality that was modified

### Fixed

- List of bugs or issues that were fixed

## Testing

Description of how the changes were tested.

## Checklist

- [x] All requirements implemented
- [x] All tests pass
- [x] Code quality is acceptable
- [x] Documentation is updated
- [x] Changelog is updated
```

### PR Types

Use these types for the PR title:

- **feat**: A new feature
- **fix**: A bug fix
- **docs**: Documentation changes
- **style**: Changes that don't affect the meaning of the code (formatting, etc.)
- **refactor**: Code changes that neither fix a bug nor add a feature
- **perf**: Changes that improve performance
- **test**: Adding or modifying tests
- **chore**: Changes to the build process or auxiliary tools

## PR Title Requirements (Formatting)

- Titles MUST be description-only
  - Do NOT include conventional prefixes in the title (e.g., "feat:", "fix:")
  - Do NOT include task IDs in the title (e.g., "(mt#123)")
  - Keep task IDs in the PR description/body and in commit messages

### Correct Examples
- Task relationships MVP
- Improve error messages for invalid session paths
- Add MCP tool for session file reads

### Incorrect Examples
- feat(mt#238): Task relationships MVP
- Task relationships MVP (mt#238)
- fix: Task relationships MVP

### Validation Notes
- The PR creation command enforces description-only titles. If you include prefixes or IDs, it will fail.
- Use the PR body to reference the task ID (e.g., "Implements mt#238") and include the checklist.

## PR Submission Best Practices

1. **Keep PRs focused**: Each PR should address a single task or issue
2. **Include context**: Provide enough context for reviewers to understand the changes
3. **Reference task ID**: Always include the task ID in the PR title and description
4. **Document trade-offs**: Explain any trade-offs or alternative approaches considered
5. **Include testing information**: Describe how the changes were tested and verified

## Session PR Command Execution Best Practices

### Critical Workflow Requirements

**STOP working on session branch after PR creation.** The session PR command should be the final step in session workflow.

### Command Syntax Best Practices

1. **Use `--body-path` instead of `--body "$(cat file)"`**
   ```bash
   # ❌ AVOID: Shell parsing issues, command hangs
   minsky session pr --body "$(cat process/tasks/285/pr.md)"

   # ✅ PREFER: Clean, reliable execution
   minsky session pr --body-path "/tmp/pr-description.md"
   ```

2. **Use temporary directories for PR descriptions**
   ```bash
   # Create PR description outside session workspace
   mkdir -p /tmp/task285-pr
   cp process/tasks/285/pr.md /tmp/task285-pr/description.md

   # Use with session PR command
   minsky session pr --title "fix(#285): Fix bug" --body-path "/tmp/task285-pr/description.md"

   # Clean up
   rm -rf /tmp/task285-pr
   ```

3. **Prevent title duplication in PR descriptions**
   - PR description body should NOT start with the same title as the PR
   - Validation hooks will catch and reject title duplication
   - Start description with "## Summary" or similar instead of repeating title

### Workflow Sequence

1. **Complete all work** in session workspace
2. **Commit and push** all session changes
3. **Create PR** using `minsky session pr` with proper syntax
4. **STOP** - Do not continue working on session branch after PR creation
5. **Switch to main workspace** if further work needed

### Common Mistakes to Avoid

- ❌ **Continuing to commit** to session branch after PR creation
- ❌ **Using problematic shell syntax** with `--body "$(cat file)"`
- ❌ **Title duplication** in PR description body
- ❌ **Uncommitted changes** when creating PR
- ❌ **Wrong prepared merge commit** due to improper command usage

## Integration with Other Rules

- For task implementation workflow, see [task-implementation-workflow](mdc:.cursor/rules/task-implementation-workflow.mdc)
- For task status checking and updating, see [task-status-protocol](mdc:.cursor/rules/task-status-protocol.mdc)
- For session creation and management, see [minsky-session-management](mdc:.cursor/rules/minsky-session-management.mdc)
- For detailed CLI commands, see [minsky-cli-usage](mdc:.cursor/rules/minsky-cli-usage.mdc)
- For detailed PR description guidelines, see [pr-description-guidelines](mdc:.cursor/rules/pr-description-guidelines.mdc)