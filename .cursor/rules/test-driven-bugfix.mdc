---
description: Use this when fixing a bug or error of any kind
globs:
alwaysApply: false
---
# Test-Driven Bug Fixing

When fixing bugs in the codebase, always follow this test-driven development workflow:

## Core Principles

1. **Write a Failing Test First**
   - Before making any code changes, write a test that reproduces the bug
   - The test should fail in the same way that the bug manifests
   - Include relevant edge cases that may be related to the bug
   ```typescript
   // Example of a failing test for a bug
   describe('calculateTotal', () => {
     it('should handle negative quantities correctly', () => {
       // This test should fail until the bug is fixed
       expect(calculateTotal(-5, 10)).toBe(0);
     });
   });
   ```

2. **Document the Bug in the Test**
   - Add clear comments explaining the bug's symptoms
   - Reference any relevant issue numbers or documentation
   - Include steps to reproduce in the test description
   ```typescript
   describe('user authentication', () => {
     // Bug #123: Users remain logged in after password change
     // Steps to reproduce:
     // 1. User logs in
     // 2. User changes password
     // 3. Old session should be invalidated
     it('should invalidate existing sessions when password changes', async () => {
       const user = await loginUser();
       const oldToken = user.sessionToken;
       await user.changePassword('newPassword');

       // This should fail until the bug is fixed
       expect(await validateToken(oldToken)).toBe(false);
     });
   });
   ```

3. **Verify the Test Fails Correctly**
   - Run the test to confirm it fails as expected
   - Ensure the failure message accurately describes the bug
   - Document the exact error message or behavior

4. **Fix the Implementation**
   - Only after having a failing test, implement the fix
   - Make minimal changes needed to make the test pass
   - Avoid introducing new functionality beyond the bug fix

5. **Verify All Tests Pass**
   - Run the full test suite to ensure the fix doesn't break other functionality
   - Check that the previously failing test now passes
   - Verify any related edge cases

6. **Refactor if Necessary**
   - Clean up the implementation while keeping tests green
   - Look for similar patterns that might need the same fix
   - Update documentation to reflect the fix

## Benefits

- Ensures the bug is reproducible before attempting a fix
- Prevents regression by having a test that would catch the same bug
- Documents the bug and its fix in a maintainable way
- Validates that the fix actually addresses the reported issue

## Anti-patterns to Avoid

- **Fixing Without Testing**: Never implement a fix without first having a failing test
- **Incomplete Test Coverage**: Don't ignore edge cases related to the bug
- **Over-fixing**: Avoid making changes beyond what's needed to fix the bug
- **Skipping Verification**: Always run the full test suite after implementing the fix

## Example Workflow

```typescript
// 1. Write failing test
describe('userPermissions', () => {
  it('should remove user access when group is deleted', async () => {
    // Set up test scenario
    const group = await createGroup();
    const user = await addUserToGroup(group.id);

    // Perform the action that should trigger permission update
    await deleteGroup(group.id);

    // This should fail until the bug is fixed
    const permissions = await getUserPermissions(user.id);
    expect(permissions).not.toContain(group.permissions);
  });
});

// 2. Implement fix
async function deleteGroup(groupId: string) {
  // Fix: Add missing permission cleanup
  await removeGroupPermissionsFromUsers(groupId);
  // Existing deletion logic
  await deleteGroupFromDatabase(groupId);
}

// 3. Verify fix
// Run: bun test
```

## Integration with Other Rules

This rule works in conjunction with:
- **dont-ignore-errors**: Ensure all test failures are addressed
- **test-expectations**: Document any changes to test behavior
- **robust-error-handling**: Include error cases in test coverage
