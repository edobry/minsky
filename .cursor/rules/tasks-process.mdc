---
description: 
globs: 
alwaysApply: true
---
# Tasks Process Rule

## Rule Name: tasks-process

## Description

This rule defines the mandatory process for working with tasks in the project. All code changes must follow this process to maintain consistency and quality.

## Process

### 1. Check Tasks First
- Before starting any work, check `/process/tasks.md` for related tasks
- If your work relates to an existing task, follow that task's process
- If no task exists for your work, create one following the task template

### 2. Follow Task Documentation
- Each task has a detailed specification in `/process/tasks/{id}-{name}.md`
- Read the entire specification before starting work
- Follow all implementation steps in order
- Complete all verification steps
- Update documentation as specified

### 3. Task Completion Rules
- Tasks are only considered complete when:
  - All verification steps pass
  - All documentation is updated
  - CHANGELOG is updated
  - PR is created with proper references
- Use `[x]` to mark completed tasks in tasks.md
- Document any incomplete verification steps
- Never skip verification steps

### 4. CHANGELOG Updates
- Location: `CHANGELOG.md` in project root
- Add entries under [Unreleased] section
- Use appropriate categories:
  - Added: New features
  - Changed: Changes in existing functionality
  - Deprecated: Soon-to-be removed features
  - Removed: Removed features
  - Fixed: Bug fixes
  - Security: Security fixes
- Be specific about changes and their impact

### 5. Pull Request Requirements
- Reference task number in PR title: `[#123] Add new feature`
- Include in PR description:
  - Link to task doc
  - Verification evidence
  - Related issues/docs
  - Testing steps
  - Screenshots if UI changes

### 6. Task Dependencies
- Check task docs for listed dependencies
- Complete dependencies before starting dependent task
- Document any new dependencies discovered
- Update task docs if new dependencies are found

## Task Template

```markdown
# Task Title

## Overview
Brief description of the task and its goals

## Current Issues
List of current issues being addressed

## Required Changes
Detailed list of required changes

## Implementation Steps
Step-by-step implementation guide

## Verification
Checklist of verification steps

## Notes
Additional information and considerations
```

## Benefits

- Ensures consistent task tracking
- Maintains high code quality
- Provides clear documentation
- Facilitates code review
- Enables project tracking
- Preserves implementation context

## Violations

The following are considered violations of this rule:

1. Making code changes without a corresponding task
2. Skipping verification steps
3. Not updating CHANGELOG
4. Marking tasks complete without meeting all requirements
5. Creating PRs without proper task references
6. Not following task dependencies

## Enforcement

This rule is enforced through:
- PR review process
- Automated checks for CHANGELOG updates
- Task completion verification
- Documentation reviews 

# Task Creation Process

## Overview
All tasks and work items must be tracked using the canonical process described here. Ad-hoc or freeform task files (e.g., TODO.something.md) are NOT permitted. All tasks must be:
- Listed in `/process/tasks.md` as a checklist item
- Linked to a detailed task spec in `/process/tasks/{id}-{name}.md`

## Step-by-Step Instructions

### 1. Check for Existing Tasks
- Before starting any new work, check `/process/tasks.md` for an existing task that matches your intended work.
- If a relevant task exists, follow its linked specification.

### 2. Add a New Task
- If no relevant task exists, add a new checklist item to `/process/tasks.md` using the following format:
  ```markdown
  - [ ] Task Title [#NNN](mdc:tasks/NNN-task-title.md)
  ```
  - Use the next available task number (NNN).
  - The title should be concise but descriptive.

### 3. Create the Task Specification
- Create a new file in `/process/tasks/` named `{NNN}-task-title.md`.
- The task spec should include:
  - **Objective**: What is the goal of the task?
  - **Task Breakdown**: A checklist of all required steps and substeps.
  - **Verification**: What must be true for the task to be considered complete?
- Use checkboxes for all actionable items and sub-items.
- Include any relevant context, links, or references.

### 4. Working on the Task
- Follow the task specification exactly.
- Complete all verification steps before marking the task as done.
- Update `CHANGELOG.md` if required by the task.
- Create a PR referencing the task number.
- Check and respect any task dependencies.

### 5. Marking a Task Complete
- When all work and verification steps are done:
  - Change `[ ]` to `[x]` in `/process/tasks.md` for the task.
  - Ensure the PR references the task number.

## Example
```markdown
- [ ] Refactor Dependency Graph [#009](mdc:tasks/009-refactor-dependency-graph.md)
```

## Notes
- Never skip verification steps or mark a task complete without meeting all requirements.
- All code, documentation, and process changes must follow this workflow. 
