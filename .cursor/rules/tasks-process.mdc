---
description: Use this when starting work on a new task
globs: 
alwaysApply: false
---
# Tasks Process Rule

## Description

This rule defines the mandatory process for working with tasks in the project. All code changes must follow this process to maintain consistency and quality.

## Using Minsky for Task Workflow

> **Note:** All task-related workflows (task lookup, session management, implementation, and PR preparation) should be performed using the [Minsky tool](mdc:minsky.mdc). See [`minsky.mdc`](mdc:minsky.mdc) for the standard Minsky workflow.

## Process

### 1. Check Tasks First
- Before starting any work, check `/process/tasks.md` for related tasks
- If your work relates to an existing task, follow that task's process
- If no task exists for your work, create one following the task template

### 2. Follow Task Documentation
- Each task has a detailed specification in `/process/tasks/{id}-{name}.md`
- Read the entire specification before starting work
- Follow all implementation steps in order
- Complete all verification steps
- Update documentation as specified

### 3. Task Completion Rules
- Tasks are only considered complete when:
  - All verification steps pass
  - All documentation is updated
  - CHANGELOG is updated
  - PR is created with proper references
- Use `[x]` to mark completed tasks in tasks.md
- Document any incomplete verification steps
- Never skip verification steps

### 4. CHANGELOG Updates
See [changelog.mdc](mdc:.cursor/rules/changelog.mdc)

### 5. Pull Request Requirements
- Reference task number in PR title: `[#123] Add new feature`
- Include in PR description:
  - Link to task doc
  - Verification evidence
  - Related issues/docs
  - Testing steps
  - Screenshots if UI changes

### 6. Task Dependencies
- Check task docs for listed dependencies
- Complete dependencies before starting dependent task
- Document any new dependencies discovered
- Update task docs if new dependencies are found

## Task Template

```markdown
# Task Title

## Overview
Brief description of the task and its goals

## Current Issues
List of current issues being addressed

## Required Changes
Detailed list of required changes

## Implementation Steps
Step-by-step implementation guide

## Verification
Checklist of verification steps

## Notes
Additional information and considerations
```

## Benefits

- Ensures consistent task tracking
- Maintains high code quality
- Provides clear documentation
- Facilitates code review
- Enables project tracking
- Preserves implementation context

## Violations

The following are considered violations of this rule:

1. Making code changes without a corresponding task
2. Skipping verification steps
3. Not updating CHANGELOG
4. Marking tasks complete without meeting all requirements
5. Creating PRs without proper task references
6. Not following task dependencies

## Enforcement

This rule is enforced through:
- PR review process
- Automated checks for CHANGELOG updates
- Task completion verification
- Documentation reviews 

### 4. Working on the Task
- Follow the task specification exactly.
- Complete all verification steps before marking the task as done.
- Update `CHANGELOG.md` if required by the task.
- Create a PR referencing the task number.
- Check and respect any task dependencies.

### 5. Marking a Task Complete
- When all work and verification steps are done:
  - Change `[ ]` to `[x]` in `/process/tasks.md` for the task.
  - Ensure the PR references the task number.

## Example
```markdown
- [ ] Refactor Dependency Graph [#009](mdc:tasks/009-refactor-dependency-graph.md)
```

## Notes
- Never skip verification steps or mark a task complete without meeting all requirements.
- All code, documentation, and process changes must follow this workflow. 

## Process for Starting a New Task

1. **Verification:** Before starting any work, verify that the task is well-defined and understood.  Ensure all requirements and acceptance criteria are clearly articulated.

2. **Documentation:** Update the task document (`process/tasks/<task-id>-<task-name>.md`) with any clarifications, additional requirements, or design decisions. This should include an implementation plan.

3. **Implementation:** Implement the task, adhering to coding standards and best practices. Commit changes frequently with clear and concise messages.

4. **Verification (Post-Implementation):** After implementing the task, verify that it meets all requirements and acceptance criteria. Test thoroughly.

5. **Documentation (Post-Implementation):** Update the task document with details about the implementation, testing, and verification results.

6. **Pull Request:** Create a pull request with a clear and concise description.  Reference the task number in the PR title and description.

7. **Changelog:** Update the changelog with a summary of the changes made.  Reference the task number.

8. **Code Review:** Request a code review before merging the PR.

9. **Post-Merge:** After merging the PR, update the task status to "DONE".  Close the task if appropriate.

## Process for Continuing Work on an Existing Task

1. **Status Check:** Always check the current status of the task before continuing work:
   ```bash
   minsky tasks status get '<task-id>'
   ```

2. **Task Description Review:** Read the task document (`process/tasks/<task-id>-<task-name>.md`) to refresh your understanding of requirements and objectives.

3. **Verification Status Check:** Review the verification section in the task document to determine what has been completed and what remains.

4. **Session Handling:**
   - Check if a session already exists for the task:
     ```bash
     minsky session list --json | grep "<task-id>"
     ```
   - If a session exists, use it:
     ```bash
     cd $(minsky session dir <session-name>)
     ```
   - If no session exists, create one:
     ```bash
     minsky session start --task <task-id>
     cd $(minsky session dir task#<task-id>)
     ```

5. **Implementation Continuation:** Continue with the implementation, picking up from where the work was left off.

6. **Follow Standard Process:** Complete the remaining steps of the standard process (verification, documentation, changelog, etc.) as needed. 
