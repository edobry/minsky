---
name: Task Implementation Workflow
description: REQUIRED workflow for implementing tasks from start to completion
globs:
  - "**/*"
description:
globs:
alwaysApply: false
---
# Task Implementation Workflow

This rule defines the standard workflow for implementing tasks in the Minsky system, from initial setup through testing and verification.

## Task Selection and Initial Setup

When asked to work on a task (by name, description, or ID):

1. **Find or Access the Task**
   - For a known task ID (e.g., "001" or "#001"): 
     ```bash
     minsky tasks get '<task-id>' --json
     ```
   - For finding tasks in the backlog: 
     ```bash
     minsky tasks list --json
     ```
   - **Note:** Always use `jq` for JSON parsing, not `grep`. This is a general best practice for all projects.

2. **Check Task Status**
   - Before starting work: 
     ```bash
     minsky tasks status get '#<task-id>'
     ```
   - For verification of implementation state versus tracked status, refer to task-status-protocol
   - Task status meanings:
     - `TODO`: Not started, available to work on
     - `IN-PROGRESS`: Work has begun but is not complete
     - `IN-REVIEW`: Work is complete and awaiting review
     - `DONE`: Work is complete, reviewed, and merged
   - If the task is already marked as `DONE` or `IN-REVIEW`, confirm with the user before proceeding.

3. **Understand Requirements**
   - Read the task specification document shown in the output of `minsky tasks get`
   - The path is typically `process/tasks/<task-id>-<task-name>.md` (e.g., `process/tasks/001-update-session-start.md`)
   - Ensure all requirements and acceptance criteria are clearly understood
   - Note any dependencies or blocking issues

4. **Start a Session**
   - Follow minsky-session-management to create and enter a session
   - Mark the task as in progress:
     ```bash
     minsky tasks status set '#<task-id>' IN-PROGRESS
     ```

## Implementation Process

1. **Planning**
   - Review the task document to ensure full understanding
   - For a new task, draft an implementation plan and append it to the task document
   - For continuing work, review the task's "Work Log" section to see progress

2. **Implementation**
   - Follow all project coding standards and best practices
   - Implement the required changes, addressing all requirements
   - Commit changes at logical intervals with clear, descriptive messages
   - Reference the task ID in all commit messages (e.g., "task#001: Implement feature X")
   - **ALWAYS push immediately after committing:**
     ```bash
     # After every commit, immediately push to the session branch
     minsky session commit -m "task#<id>: Description of changes"
     ```
   - Never leave commits unpushed at the end of an implementation session

3. **Work Log**
   - Maintain a "Work Log" section in the task document:
     ```markdown
     ## Work Log
     - YYYY-MM-DD: Implemented X feature
     - YYYY-MM-DD: Fixed Y bug
     - YYYY-MM-DD: Added tests for Z functionality
     ```
   - This log will be used to update the changelog when the task is complete

4. **Testing**
   - Write appropriate tests for all new functionality
   - Ensure all existing tests continue to pass
   - Document any complex test scenarios or edge cases addressed
   - Run tests with:
     ```bash
     bun test
     ```
   - Fix any failing tests before proceeding

## Verification and Documentation

1. **Verification**
   - Verify that all requirements have been implemented correctly
   - Check off completed verification steps in the task document by changing `[ ]` to `[x]`
   - Ensure that all tests pass
   - Verify code quality and adherence to project standards

2. **Documentation**
   - Update the task document with implementation details
   - Document any design decisions or compromises made during implementation
   - Update any relevant project documentation

3. **Changelog**
   - Follow the instructions in changelog for updating the appropriate CHANGELOG.md
   - Use the Work Log from the task document as the basis for changelog entries
   - Reference the task ID in the changelog entry

## Task Completion Checklist

Task implementation is not complete until ALL these steps are performed, in order:

1. ✓ All code changes are made in the session directory (not main workspace)
2. ✓ All tests pass in the session directory
3. ✓ Task document is updated with Work Log and verification steps are checked off
4. ✓ All changes are committed with task ID in commit message
5. ✓ Changes are pushed to remote with `minsky session commit`
6. ✓ Changelog is updated appropriately (see [mdc:changelog.mdc])
7. ✓ PR description is prepared (see [mdc:pr-preparation-workflow.mdc])

## Important Notes

- Never skip verification steps or mark a task complete without meeting all requirements
- Always check the existing task status before beginning work
- Reference the task number in all PRs, commits, and documentation
- Maintain a Work Log in the task document to track implementation progress
- If modifications to the requirements are needed, discuss and document them in the task document
- When a task spans multiple sessions, use the Work Log to ensure continuity

## Request Interpretation and Workflow Priority

1. **Always interpret requests based on their literal meaning in the project context.**
   - For detailed guidance on interpreting requests related to task creation, including the distinction between task specification and implementation, refer to creating-tasks.
   - "Implement" or "code" generally refers to writing the actual implementation for an existing, specified task.

2. **Request Type Recognition**
   - Categorize requests as either "specifying work" or "implementing work"
   - Each category requires different response patterns:
     - Specifying work → create task specification documents
     - Implementing work → write code following existing specifications
   - Never implement code until the specification is verified

3. **When to Request Clarification**
   - If a request could be interpreted multiple ways, ask for clarification
   - Examples of ambiguous requests requiring clarification:
     - "Work on task #123" (specify or implement?)
     - "Handle the task creation feature" (create spec or code?)
     - "Add the minsky task create command" (create spec or implement?)
   - Always err on the side of creating task specifications when unclear

4. **Clear vs. Ambiguous Request Examples**
   - Clear Specification Request: "Create a task to add a minsky task create command"
     → Create a task specification document
   - Clear Implementation Request: "Implement the minsky task create command according to task #007"
     → Implement the code following the specification
   - Ambiguous Request: "Add the minsky task create command"
     → Default to creating a task specification unless context clearly indicates implementation

## See Also
- See minsky-workflow-orchestrator for workflow overview
- See minsky-cli-usage for CLI command reference
- See minsky-session-management for session management
- See task-status-protocol for status update procedures
- See pr-preparation-workflow for PR creation and submission
