---
description: Guidelines for creating or updating .mdc rule files. REQUIRED when writing, modifying, or reviewing any cursor rule.
globs: **/*.mdc
alwaysApply: false
---
# Cursor Rule Creation Guidelines

Rules are read by AI assistants with limited attention spans and context windows. Every word must count.

## Core Principles

- **Rule Follower Perspective**: Write rules imagining you are the AI following them
- **Concision**: Be direct and brief; limit each rule to exactly what's needed
- **Modularity**: Create focused rules targeting specific situations
- **Clarity**: Use simple language and clear examples
- **Hierarchy**: Structure content from most to least important
- **No Duplication**: Never repeat content across rules
- **Update Existing Sections**: Prefer updating existing relevant sections over adding new sections when modifying rules, to avoid redundancy and keep rules concise.

## Rule Structure

1. **Metadata Header (Required)**
   ```markdown
   ---
   description: Brief, actionable summary triggering rule application
   globs: "file/patterns/*.ts"
   alwaysApply: false
   ---
   ```

2. **Title**: Clear, concise name using `# Title` format

3. **Introduction**: 1-2 sentences summarizing purpose

4. **Core Principles/Requirements**: Bulleted list of key points

5. **Examples**: Contrasting good/bad patterns with labels:
   ```
   // AVOID
   badExample();

   // PREFER
   goodExample();
   ```

6. **Rationale**: Only if not self-evident from principles

## Frontmatter Verification Protocol

**CRITICAL: ALL rule edits require strict verification of frontmatter structure and content**

### Frontmatter Structure Verification
1. **REQUIRED elements** in this exact order:
   - Opening `---` delimiter on its own line
   - `name` field (if applicable)
   - `description` field with exact wording from requirements
   - `globs` field with appropriate patterns
   - `alwaysApply` field (true/false)
   - Closing `---` delimiter on its own line

2. **ALWAYS verify complete file structure** after any edit:
   - File must have proper opening and closing frontmatter markers
   - Content must not include duplicate frontmatter sections
   - Frontmatter must be properly formatted YAML

### Exact Requirements Matching
1. **EXACT text matching** for frontmatter fields:
   - When updating from requirements, use the EXACT wording specified
   - Do not paraphrase or reword descriptions unless explicitly instructed
   - Copy and paste values from requirements when available

2. **ALWAYS verify after editing**:
   - Read the complete file after editing
   - Check for duplicated content or frontmatter
   - Ensure all formatting is correct and consistent
   - Compare description text against original requirements word-for-word

### Examples

// AVOID
Editing frontmatter directly with a similar wording:
```
description: Required protocol for CLI usage
```
(when requirements specified: "REQUIRED guidelines for using the Minsky CLI...")

// PREFER
Using exact wording from requirements:
```
description: REQUIRED guidelines for using the Minsky CLI for all task/session operations
```

## Cross-Rule Relationships and Rule Systems

Rules often work together in systems where multiple rules apply to the same scenario. When creating related rules:

1. **Explicit Rule Relationships**: In descriptions, explicitly reference related rules:
   ```
   description: "Use when implementing test mocks. Apply alongside testing-boundaries for proper test focus."
   ```

2. **Rule Application Patterns**: Include one of these relationship indicators:
   - "Apply alongside X": Indicates equal-priority rules that should be used together
   - "Apply with X": Suggests X as a complementary rule for this specific context
   - "Apply after X": Indicates a sequence where X should be consulted first

3. **Router Rule for Rule Systems**: For complex rule systems (4+ rules), create a router rule that:
   - Serves as the entry point for the entire system
   - Contains a relationship matrix showing when each rule applies
   - Uses a description that clearly identifies it as the primary entry point
   - Example:
     ```
     description: "REQUIRED: Entry point for ALL test-related tasks. Always consult first when writing tests."
     ```

4. **Rule Layers**: In complex rule systems, organize rules into clear layers:
   - **Foundation Layer**: Always applicable core principles (marked with "REQUIRED")
   - **Implementation Layer**: How to implement the principles in specific contexts
   - **Specialized Layer**: Rules for edge cases or specific scenarios

5. **Cross-References in Rule Content**: Always include explicit references to related rules:
   ```markdown
   See [testing-boundaries](mdc:.cursor/rules/testing-boundaries.mdc) for what should and should not be tested.
   ```

6. **Avoid Rule Duplication**: When rules relate:
   - Never duplicate content between related rules
   - Clearly define the scope boundary of each rule
   - Use explicit cross-references instead of duplicating content

## File Location

**RULE FILES MUST BE STORED IN THE `.cursor/rules` DIRECTORY AT THE ROOT OF THE PROJECT.**

- Correct path: `<project_root>/.cursor/rules/rule-name.mdc`
- Never create rules in any other location

## Writing the Description Field

The description is **critically important** as it's the main trigger for rule application:

- Focus ONLY on WHEN the rule applies, not WHAT the rule instructs
- Begin with "Use when..." or "Guidelines for..." to clearly state when the rule applies
- Include all relevant trigger keywords (e.g., "required for testing components")
- Specify file types or contexts where the rule applies
- Use "REQUIRED" or "MUST" for non-negotiable rules
- For rules that work together, include relationship indicators ("Apply alongside X")
- Keep under 100 characters while remaining specific
- Test by asking: "Would an AI correctly apply this rule based solely on this description?"

## Using the Rules Command

**ALWAYS USE THE `minsky rules` COMMAND TO CREATE AND MANAGE RULES.**

The Minsky CLI provides dedicated commands for rule management:

```bash
# Create a new rule (interactive mode)
minsky rules create

# Create a new rule (command-line mode)
minsky rules create my-rule --name "My Rule" --description "When to use this rule"

# View an existing rule
minsky rules get my-rule

# Update a rule's metadata
minsky rules update my-rule --description "New description"

# Update a rule's content
minsky rules update my-rule --content path/to/content.md

# List all rules
minsky rules list

# Search rules
minsky rules search "pattern"
```

Benefits of using the `rules` command:
- Ensures proper YAML frontmatter formatting
- Validates rule structure and metadata
- Places rules in the correct directory
- Provides consistent rule management across the project

## Rule Assessment Checklist

Before submitting a rule, verify it:

- [ ] Has a precise description that clearly indicates when it applies
- [ ] Contains no information duplicated in other rules
- [ ] Uses clear, specific language without ambiguity
- [ ] Provides concrete examples of correct and incorrect patterns
- [ ] Is structured from most to least important information
- [ ] Could be correctly applied by someone with limited attention
- [ ] Would be triggered by the correct glob patterns
- [ ] Explicitly references related rules where applicable
- [ ] Clearly states relationship to other rules in the description

## Anti-patterns

- **Verbose Introductions**: Don't waste words explaining the rule exists
- **Duplicate Content**: Never repeat information found in other rules
- **Vague Descriptions**: Avoid general terms like "best practices" without specifics
- **Nested Complexity**: Keep rule structure flat and scannable
- **Excessive Context**: Focus on directives, not background information
- **Mixed Concerns**: Each rule should govern exactly one area of concern
- **Isolated Rules**: Rules without explicit connections to related rules when they exist
- **Overlapping Rules**: Multiple rules covering the same guidance without clear boundaries

## Router Rules

- Router rules are special rules whose sole purpose is to scan for triggers (e.g., user dissatisfaction, error signals) and invoke other rules (such as self-improvement), not to provide direct instructions themselves.
- Router rules should:
  - Be concise and focused only on detection and routing
  - Use `alwaysApply: true` and broad globs (e.g., `**/*`)
  - Never duplicate the full content of the rules they route to
  - Clearly specify the trigger signals and the rule(s) to invoke
- Example:
  ```markdown
  ---
  description: Scan every user message for dissatisfaction, error, or correction signals and invoke self-improvement if found
  globs: ["**/*"]
  alwaysApply: true
  ---
  # Self-Improvement Router
  ...
  ```

## Rule System Organization Strategy

When working with complex rule systems, apply these organizational principles to minimize context usage:

### 1. Workflow-Focused Rule Design (Critical for Context Minimization)
- **Target specific developer workflows** rather than broad topics
- **Minimize context usage** by creating focused rules that only load relevant guidance
- **Clear separation of concerns**: Each rule should address one specific workflow or decision point
- **Specific trigger conditions**: Include "When to Use This Rule" sections with clear scenarios
- **Actionable workflows**: Provide step-by-step guidance for common developer tasks

### 2. Examples of Workflow-Focused Organization
Instead of: One large "test-design" rule covering everything

Prefer: Separate focused rules:
- `test-organization`: **File structure** and organization patterns
- `designing-tests`: **Test content** and implementation patterns
- `bun-test-patterns`: **Framework-specific** utilities and mocking

Each rule targets specific developer questions:
- "Where should I put this test?" â†’ `test-organization`
- "How should I write this test?" â†’ `designing-tests`
- "How do I mock this dependency?" â†’ `bun-test-patterns`

### 3. Rule Refactoring Strategy
- When rules become too broad or overlapping, **extract specific workflows**
- **Remove overlapping content** from existing rules and add cross-references
- **Update router rules** to include new focused rules
- **Verify clear boundaries** between related rules

This strategy ensures AI assistants load only the minimal, relevant rule text for specific developer workflows rather than broad, overlapping guidance.

## Rule System Organization Lessons

When working with complex rule systems, apply these organizational principles to minimize context usage:

1. **Workflow-Focused Rule Design** (Critical for Context Minimization):
   - **Target specific developer workflows** rather than broad topics
   - **Minimize context usage** by creating focused rules that only load relevant guidance
   - **Clear separation of concerns**: Each rule should address one specific workflow or decision point
   - **Specific trigger conditions**: Include "When to Use This Rule" sections with clear scenarios
   - **Actionable workflows**: Provide step-by-step guidance for common developer tasks

2. **Examples of Workflow-Focused Organization**:
   - Instead of: One large "test-design" rule covering everything
   - Prefer: Separate focused rules:
     - `test-organization`: **File structure** and organization patterns
     - `designing-tests`: **Test content** and implementation patterns
     - `bun-test-patterns`: **Framework-specific** utilities and mocking
   - Each rule targets specific developer questions:
     - "Where should I put this test?" â†’ `test-organization`
     - "How should I write this test?" â†’ `designing-tests`
     - "How do I mock this dependency?" â†’ `bun-test-patterns`

3. **Rule Refactoring Strategy**:
   - When rules become too broad or overlapping, **extract specific workflows**
   - **Remove overlapping content** from existing rules and add cross-references
   - **Update router rules** to include new focused rules
   - **Verify clear boundaries** between related rules

4. **Create Rule Hierarchies**:
   - Create a router rule as the entry point for rule systems (4+ related rules)
   - Organize rules into layers (Foundation, Implementation, Specialized)
   - Ensure descriptions clearly indicate rule relationships

5. **Rule Application Clarity**:
   - Ensure every rule has a clear, unique purpose
   - Prevent overlapping guidance between rules
   - Use specific scenarios in descriptions to trigger correct rule application

These principles ensure AI assistants load only the minimal, relevant rule text for specific developer workflows rather than broad, overlapping guidance.
