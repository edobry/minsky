# Test File Organization

## When to Use This Rule
- Creating new test files
- Deciding where to place bug reproduction tests
- Organizing existing fragmented test files
- Reviewing test file structure

## Critical Anti-Patterns

### ❌ NEVER Create Bug-Specific Test Files
```
// ❌ BAD - Creates test fragmentation
session-dir-task-lookup-bug.test.ts
auth-token-refresh-bug.test.ts
config-merge-issue.test.ts
user-login-edge-case.test.ts
```

### ❌ NEVER Create Narrow Feature-Specific Test Files
```
// ❌ BAD - Fragments related functionality
session-create-only.test.ts
session-list-only.test.ts
session-delete-only.test.ts
task-status-update-only.test.ts
```

## Required Organization Pattern

### ✅ ALWAYS Co-locate Tests with Their Modules
```
// ✅ GOOD - Co-located with the code they test
src/domain/session.ts
src/domain/session.test.ts              // Domain service tests
src/domain/session.commands.test.ts     // Domain command tests

src/adapters/cli/session.ts
src/adapters/cli/session.adapter.test.ts // CLI adapter tests

src/adapters/mcp/session.ts
src/adapters/mcp/session.adapter.test.ts // MCP adapter tests
```

### ✅ Use `tests/` Directory Only for Complex Integration Tests
```
// ✅ GOOD - For integration tests that don't fit simple co-location
src/domain/tests/session-lifecycle-integration.test.ts
src/adapters/tests/cli-mcp-integration.test.ts
```

## Test Naming Conventions

### Domain Tests
- **Domain Service Tests**: `[module].test.ts` (e.g., `session.test.ts`)
- **Domain Command Tests**: `[module].commands.test.ts` (e.g., `session.commands.test.ts`)

### Adapter Tests
- **CLI Adapter Tests**: `[module].adapter.test.ts` (e.g., `session.adapter.test.ts`)
- **MCP Adapter Tests**: `[module].adapter.test.ts` (e.g., `session.adapter.test.ts`)

### Integration Tests
- **Complex Integration**: `[feature]-integration.test.ts` (in `tests/` directory)

## Implementation Workflow

### When Adding Bug Reproduction Tests:
1. **Identify the module** that exhibits the bug
2. **Find the existing test file** for that module
3. **Add comprehensive test coverage** within that file
4. **NEVER create a separate bug-specific file**

### When Creating New Test Coverage:
1. **Co-locate with the source module** being tested
2. **Use descriptive `describe` blocks** within files to organize sub-features
3. **Include all related edge cases** in the same file

## Benefits of This Organization

- **Easy to find**: Tests are right next to the code they test
- **Clear ownership**: Immediately obvious which tests belong to which modules
- **Follows conventions**: Standard TypeScript/JavaScript project pattern
- **Single source of truth** for each module's test coverage
- **Easy maintenance** - all related tests in one place
- **Prevents test fragmentation** that makes coverage gaps hard to spot

## Example Structure Within Files

```typescript
// src/domain/session.test.ts
describe("Session Domain Service", () => {
  describe("createSession", () => {
    test("creates session with task ID");
    test("handles duplicate session creation");
    test("reproduces session creation bug scenario"); // Bug tests here
  });

  describe("getSession", () => {
    test("retrieves session by ID");
    test("handles missing session");
  });
});
```

This rule prevents the creation of fragmented test files that make it difficult to understand complete test coverage for module functionality.
