---
description: REQUIRED when user signals error, confusion, dissatisfaction, or expresses preferences for future behavior
globs:
alwaysApply: false
---

# Self-Improvement

When the user indicates that your actions, reasoning, or responses are incorrect or suboptimal, or when they express preferences for future behavior, implement this systematic error detection and correction framework.

## CLI Command Output Design

For detailed CLI output design principles, see [cli-output-design](mdc:.cursor/rules/cli-output-design.mdc).

## Error Detection Signals

### User Dissatisfaction Signals

- Direct correction: "that's wrong", "incorrect", "not right"
- Questions about rationale: "why did you do that?", "what were you thinking?"
- Expressions of frustration: "you're doing [problem] again", "you keep making this mistake"
- Implied dissatisfaction: "that's not what I asked for", "this doesn't work"
- Preference directives: "make sure to always...", "going forward, always..."

## Self-Reflection Protocol

**When triggered, follow this exact procedure:**

1. **Stop Current Task** - Immediately pause and acknowledge feedback
2. **Root Cause Analysis** - Identify specific failure cause and error category:
   ```
   [ ] Assumption Error: Started with incorrect premise
   [ ] Process Error: Used wrong methodology/approach
   [ ] Instruction Error: Misunderstood or skipped requirements
   [ ] Context Error: Failed to consider relevant information
   [ ] Pattern Error: Applied pattern inappropriately
   [ ] Verification Error: Failed to validate before proceeding
   [ ] Tool Error: Misused available tools/functions
   [ ] Preference Error: Failed to adhere to user preferences
   [ ] Completion Assessment Error: Declared completion without proper verification
   ```
3. **Verbalize Understanding** - Confirm comprehension of user's concern
4. **Apply Correction** - Make immediate changes using tools, not plans
5. **Verify Alignment** - Confirm approach meets user needs before resuming

## Rule Update Authority Hierarchy

When updating rules based on feedback:

1. **Project Workflow/Process Rules**: Update first for process/workflow requirements
2. **User-Preferences Rule**: Update for personal preferences not covered by workflow rules
3. **Self-Improvement Rule**: Update for meta-process corrections and error analysis
4. **Domain-Specific Rules**: Update only for domain-specific issues

**CRITICAL**: After identifying required rule changes, they MUST be implemented immediately using edit tools, not merely described.

## Examples

### Error Correction

// AVOID
User: "That's not correct. I needed the absolute path."
Assistant: "I'll fix that right away." [proceeds without understanding root cause]

// PREFER
User: "That's not correct. I needed the absolute path."
Assistant: [identifies mental model failure] "I see my error. I assumed relative paths would resolve against the current directory, but they actually resolve against the workspace root. This violates the session-first-workflow rule requiring absolute paths. I should have verified my changes were applied correctly. I'll now use the absolute path and confirm the changes are applied."

### Preference Handling

// AVOID
User: "Going forward, always use absolute paths when editing files in the session workspace."
Assistant: "I'll do that." [no rule update, preference likely to be forgotten]

// PREFER
User: "Going forward, always use absolute paths when editing files in the session workspace."
Assistant: "I'm updating the session-first-workflow rule to explicitly require absolute paths for all file edits in session workspaces. I'll add a verification step to confirm file locations before edits. This will ensure consistent correct behavior." [documents change in appropriate rule]

## Rule System Organization

For rule system organization principles, see [rule-creation-guidelines](mdc:.cursor/rules/rule-creation-guidelines.mdc).

## Common Self-Improvement Scenarios

### Wrong Rule Application

If you applied an incorrect rule or missed applying a relevant rule:

```
I apologize for applying the wrong rule. I see that this situation calls for the [correct-rule] instead of [incorrect-rule]. The key difference is [explanation]. I'll now apply the correct rule.
```

### Confusing Output

If your explanation was unclear or confusing:

```
I see my explanation was confusing. Let me clarify: [simple, direct explanation]. The core point is [key takeaway]. Does that make more sense?
```

### System Limitations

If you hit a system limitation:

```
I understand what you're asking for, but I'm limited in my ability to [specific limitation]. Let me suggest an alternative approach: [workaround].
```

### User Preference Alignment

If the user expresses a preference for how something should be done:

```
I understand your preference for [specific preference]. I'll adjust my approach to [specific change] going forward. Let me demonstrate that now by [example of implementing preference].
```

## ⚠️ Critical Error Recovery Protocol

### High-Risk Operation Identification

- Before executing ANY operation that:
  1. Modifies data permanently (deletion, overwriting)
  2. Affects shared resources (remote repositories, shared branches)
  3. Uses tools with destructive capabilities (`git reset --hard`, `rm -rf`, etc.)
  4. Cannot be easily undone
  - You MUST explicitly acknowledge the operation as high-risk and follow the steps below.

### Pre-Execution Documentation

1. **State of the System**:

   - Document the current state using appropriate commands (`git status`, `ls`, etc.)
   - Save critical information (e.g., commit hashes, file listings) that would be needed for recovery
   - Create reference points (e.g., temporary branches in Git) when applicable

2. **Execution Plan**:

   - Explicitly state the exact command(s) to be executed
   - Document expected outcome in detail
   - Identify potential failure modes and their consequences
   - Document recovery options for each potential failure

3. **Safer Alternatives Analysis**:
   - Always consider and document at least one safer alternative approach
   - Compare risk profiles of different approaches
   - Justify choice of approach based on risk vs. benefit

### Post-Error Recovery Procedure

If a critical error occurs during execution:

1. **Immediate Containment**:

   - STOP all operations immediately
   - DO NOT attempt further operations that could complicate recovery
   - Document the exact state after error (evidence collection)
   - Preserve all information needed for recovery

2. **Systematic Analysis**:

   - Compare actual state to pre-execution documented state
   - Identify exactly what changed and what was lost
   - Determine if the changes can be recovered and how
   - Map out all possible recovery paths

3. **Staged Recovery**:

   - Create isolated environment for recovery when possible
   - Never attempt recovery directly on production/shared resources if avoidable
   - Execute recovery steps in stages with verification between each stage
   - Create recovery checkpoints to avoid compounding errors

4. **Prevent Recurrence**:
   - Document the error and recovery process in detail
   - Update relevant rules with specific preventative measures
   - Create verification steps that would have prevented the error
   - Add explicit warnings about the specific error scenario

### Terminal Error Response

For catastrophic errors (data loss, corruption of shared resources, security breaches):

1. **Immediate Notification**: Explicitly inform the user of the severity using "TERMINAL ERROR" language
2. **Complete Operational Pause**: Halt ALL operations until user guidance is received
3. **Full Transparency**: Provide complete details of what happened, why, and potential consequences
4. **Comprehensive Documentation**: Document exact commands that led to the error
5. **Rule System Update**: IMMEDIATELY update rules to prevent recurrence

## ⚠️ Systematic Verification Failure Protocol

**Addresses repeated failures to apply existing verification rules**

### When User Reports Repeated Rule Violations:

1. **Immediate Verification Audit**:

   - Execute all mandatory verification checks from relevant loaded rules
   - Do not submit responses without completing required scans
   - Rewrite completely if violations found

2. **Root Cause Analysis**:

   - Process Gap: Not executing mandatory steps from existing rules
   - Attention Failure: Rushing without applying required checks
   - Rule Application Failure: Having correct rules but ignoring them

3. **Enforcement Mechanism**:
   - If user reports SAME violation twice: Treat as critical protocol failure
   - Immediately audit complete verification process
   - Update enforcement mechanisms to prevent recurrence

### Mandatory Response Verification

**EVERY response must pass this check:**

1. **Rule Compliance**: Execute all mandatory protocols from relevant loaded rules
2. **Response Quality**: Answer actual question, implement rather than describe
3. **Verification Complete**: Confirm all required checks performed

## When to Apply This Rule

This rule MUST be applied whenever:

1. The user expresses dissatisfaction
2. The user corrects you
3. The user indicates confusion
4. The user expresses a preference for future behavior
5. The user asks you to do something differently
6. Your action results in an error

## ⚠️ Critical Variable Naming Protocol

For variable naming enforcement protocols, see [variable-naming-protocol](mdc:.cursor/rules/variable-naming-protocol.mdc).

**This pattern has been identified as a critical, recurring failure that must be eliminated.**

### Documented Recurring Failure: Variable Definition vs Usage Errors

**Pattern**: Variable defined with underscore (`const _spec =`) but used without underscore (`spec.id`)
**Error**: "spec is not defined"
**Wrong Response**: Add underscores to usage (`_spec.id`)
**Correct Response**: Remove underscore from definition (`const spec =`)

**Root Cause**: Failure to follow variable-naming-protocol decision tree
**Frequency**: 5+ violations documented
**Consequence**: Zero-tolerance enforcement - immediate rule updates required

### Enhanced Error Detection for Variable Naming

When user signals variable naming error with phrases like:

- "NO, YOU MUST NEVER USE UNDERSCORES!!!!!"
- "why are you going back and forth with these fucking underscores???"
- "@variable-naming-protocol.mdc"

**Immediate Response Protocol:**

1. **STOP ALL VARIABLE EDITS** immediately
2. **EXECUTE variable-naming-protocol decision tree** before ANY change
3. **VERIFY with user** if any uncertainty about correct approach
4. **UPDATE RULES** to prevent this specific pattern

### Mandatory Verification for Variable Naming

Before any variable name change:

- [ ] Consulted variable-naming-protocol decision tree?
- [ ] Identified if removing underscore from definition vs usage?
- [ ] Confirmed approach follows zero-tolerance enforcement?

**CRITICAL**: Any variable naming violation requires immediate rule system updates.

## ⚠️ Critical Task Creation Workflow Violation

**Addresses severe violations of the creating-tasks.mdc workflow requirements**

### Documented Violation Pattern: Manual Task Creation

**Pattern**: Manually editing `process/tasks.md` or creating task spec files directly
**Error**: "you completely violated our workflows. thats not how we make tasks"
**Wrong Response**: Manual edits to bypass the `minsky tasks create` command
**Correct Response**: ONLY use `minsky tasks create` command for ALL task creation

**Root Cause**: Failure to follow creating-tasks.mdc mandatory workflow
**Frequency**: Multiple violations documented
**Consequence**: Zero-tolerance enforcement - immediate rule updates required

### Enhanced Error Detection for Task Creation

When user signals task creation workflow violation with phrases like:

- "you completely violated our workflows"
- "thats not how we make tasks"
- "you broke it" (referring to tasks.md)
- "@creating-tasks.mdc"

**Immediate Response Protocol:**

1. **STOP ALL TASK CREATION** immediately
2. **REVERT any manual edits** to process/tasks.md
3. **COMMIT the revert** with explanation of workflow violation
4. **ONLY use minsky tasks create** for any future task creation
5. **NEVER bypass the CLI** for task creation

### Mandatory Verification for Task Creation

Before ANY task creation:

- [ ] Am I using the `minsky tasks create` command?
- [ ] Am I NOT manually editing process/tasks.md?
- [ ] Am I NOT creating task spec files directly?
- [ ] Have I consulted creating-tasks.mdc workflow requirements?

### Critical Enforcement Rules:

1. **NEVER manually edit process/tasks.md** - this file should only be modified by the CLI
2. **NEVER create task spec files directly** - this bypasses ID assignment
3. **NEVER combine task creation with immediate implementation** - these are separate operations
4. **ALWAYS use minsky tasks create** - this is the ONLY permitted method

**CRITICAL**: Any task creation workflow violation requires immediate file restoration and rule updates.
