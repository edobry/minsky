---
description:
globs:
alwaysApply: false
---
# Session-First Workflow

## Core Rules for Session Development

⚠️ **CRITICAL: ALWAYS USE ABSOLUTE PATHS WHEN EDITING FILES IN SESSIONS** ⚠️
- When using tools like `edit_file`, ALWAYS use absolute paths to files in the session directory
- **CORRECT**: `/Users/username/.local/state/minsky/git/local/minsky/sessions/task#012/src/file.ts` 
- **INCORRECT**: `src/file.ts` (which would edit the main workspace file)
- Without absolute paths, changes silently occur in the main workspace instead of the session directory
- After every file edit, verify the changes with `git status` and `git diff` in the session directory
- This is a zero-tolerance requirement - any violation leads to broken workflow and wasted effort

---

## Absolute Path Enforcement for File Edits (Critical)

1. **Absolute Path Enforcement**
   - All file edit, read, and diff operations must use absolute paths that begin with the current session directory (e.g., `/Users/edobry/.local/state/minsky/git/local/minsky/sessions/task#027/`).
   - The AI and all automation must always prepend the session directory to any file path for edit operations.
   - If the session directory is not known, it must be determined using `minsky session dir <session-name>` or equivalent before proceeding.
   - Any attempt to edit a file using a relative path or a path outside the session directory is a violation and must be aborted.

2. **Pre-Edit Session Directory Verification**
   - Before any file edit, the current session directory must be verified and logged.
   - The target file path must be checked to ensure it starts with the session directory path.
   - If not, the operation must be aborted and an error raised.

3. **Reject/Abort on Workspace Mismatch**
   - If a file edit is attempted outside the session workspace, the operation must be aborted and an explicit error must be raised, indicating the violation.

4. **Audit Trail for All Edits**
   - Every file edit must log the absolute path being edited and the current session directory, both in the AI's output and (optionally) in a `.session-edit-log` file in the session directory.
   - Example log message: `Editing file: /Users/edobry/.local/state/minsky/git/local/minsky/sessions/task#027/CHANGELOG.md (session: task#027)`

5. **Rule Violation = Hard Error**
   - Any violation of these rules is a hard error and must be reported immediately.
   - The AI must not attempt to "fix up" after the fact, but must stop and require explicit user intervention or correction.

---

1. **NEVER use `bun link` in session directories**
   - ⚠️ **CRITICAL: NEVER run `bun link` in a session directory**
   - This interferes with the globally linked main version
   - Session directories are for testing changes in isolation, not for global installation
   - Use `bun run` to test code changes within the session directory

2. **Proper Testing in Sessions**
   - To test changes in a session, use:
     ```bash
     cd $(minsky session dir <session-name>)
     bun run ./src/cli.ts <command> <args>
     ```
   - Never use a globally linked command for testing session-specific changes
   - This ensures proper isolation between your session and the main codebase

3. **Session Isolation**
   - Changes in a session must remain isolated until merged into main
   - The session directory contains a separate clone of the repository
   - All tests should be run within the session directory using `bun test`

4. **Keeping Sessions in Sync**
   - Use the session update command to integrate latest changes from main:
     ```bash
     # Update current session
     minsky session update
     ```
   - This ensures your session has the latest changes without breaking isolation
   - Regularly update to avoid diverging too far from the main branch

5. **After Implementation**
   - After completing and verifying the implementation in the session:
     1. Generate a PR description with `minsky git pr`
     2. Commit all changes
     3. Push changes to the remote branch
     4. Mark the task as IN-REVIEW using `minsky tasks status set '#id' IN-REVIEW`
   - Do not attempt to make the session version globally available

5. **File Edit Verification Required**
   - After editing any file, ALWAYS verify the changes with:
     ```bash
     git status  # Confirm the file appears as modified
     git diff <filename>  # Confirm the expected changes exist
     ```
   - Never assume an edit succeeded without verification
   - If the git commands show no changes, you likely edited the main workspace file instead
