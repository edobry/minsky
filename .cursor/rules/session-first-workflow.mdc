# Session-First Workflow

**Purpose:**
To ensure all code, test, and configuration changes for a task are made exclusively within the session workspace, maintaining strict isolation and traceability as required by the Minsky workflow.

## Best Practices Cross-Reference
- See also: minsky-workflow, dont-ignore-errors, rule-map.mdc
- This rule governs: session workspace integrity, audit trail, progress logging, and tool adaptation.

## Requirements (Revised)
- You MUST perform all code, test, config, and doc changes for a task in the session workspace only.
- **You MUST use absolute paths for ALL file operations in the session workspace.**
- You MUST log all edits and maintain an audit trail for traceability.
- You MUST adapt to tool limitations and log any workarounds in the session worklog.
- You MUST confirm all changes are present in the session workspace before merging or marking a task complete.
- You MUST reference this rule when working in or verifying session workspaces.
- **Main Workspace Edits Prohibition:** NEVER make direct code changes to files within the main Minsky project workspace (e.g., `/Users/edobry/Projects/minsky`). If the Minsky CLI tool itself or any core project file in the main workspace is found to have a bug, this must be addressed by creating a new Minsky task specifically for that bug, and all fixes must be implemented within that task\'s dedicated session workspace. Changes should then be integrated back into the main project via the standard PR process from the session.

---

## 1. Scope and Applicability

- **All changes** (code, tests, configs, fixtures, docs, etc.) related to a task MUST be made **directly within the session workspace** for that task using **absolute paths only**.
- This applies to any file that could affect the outcome of tests, builds, or reviews, including test files, fixtures, helper scripts, and configuration files.
- **No edits to the main workspace are allowed** during an active session, except for the final merge after review.

## 2. Workflow Enforcement

- **Session workspace** is a full, isolated clone of the repository, created and managed by the Minsky CLI.
- All edits, commits, and pushes must be performed from within the session workspace **using absolute paths**.
- **Never copy files from the main workspace into the session workspace.**
  The session workspace already contains all project files as of the session's creation or last update.
- **Never copy files from the session workspace back to the main workspace manually.**
  All changes must be merged via the session branch after review.

## 3. Core Practices for Session File Integrity

This section outlines the non-negotiable rules for file handling and editing within an active Minsky session workspace. Adherence is critical for maintaining session integrity, preventing unintended changes to the main workspace, and ensuring traceability.

### 3.1. Absolute Path Mandate for All Operations

- **Universal Requirement:** When working within a session directory, you **MUST ALWAYS use absolute paths** for any file operation (e.g., edit, read, diff, list). This applies to all tools and manual actions.
- **Correct Example:** `/Users/edobry/.local/state/minsky/sessions/task#227/src/file.ts`
- **Incorrect Example (RISK OF MAIN WORKSPACE MODIFICATION):** `src/file.ts`
- **Session Directory Pattern:** `/Users/edobry/.local/state/minsky/sessions/task#[TASK_ID]/[PROJECT_PATH]`

- **Rationale:** Many tools (including the `edit_file` tool) and system commands may resolve relative paths against the main workspace root by default, *not* the current shell directory, even if your terminal is currently located within the session directory. Using relative paths can lead to silent, unintended modifications to the main workspace, corrupting its state.

### 3.2. Pre-Operation Verification (Mandatory)

Before any file operation (especially edits), the following verifications **MUST** be performed:

1.  **Confirm Session Directory:** Ensure the active Minsky session directory path is known and correct.
    - Example: `/Users/edobry/.local/state/minsky/sessions/task#227`
2.  **Validate Target Path:** The absolute path of the target file **MUST** be constructed and validated to ensure it unequivocally resides *within* the confirmed session directory. (This incorporates the previous "3. Edit Location Verification" rule).
    - Example: `/Users/edobry/.local/state/minsky/sessions/task#227/src/domain/tasks/task-service.ts`
3.  **Existence Check (Highly Recommended):** Before editing, verify the file exists at the constructed absolute session path (e.g., using `ls -la /Users/edobry/.local/state/minsky/sessions/task#227/src/domain/tasks/task-service.ts`).

### 3.3. Strict Enforcement and Error Handling

1.  **Reject/Abort on Workspace Mismatch:** Any attempt to operate on a file using a relative path, or an absolute path that falls outside the current session directory, **MUST** be immediately aborted. This constitutes a hard error.
2.  **Rule Violation = Immediate Stop:** Any violation of these file handling rules is a critical error. Do not attempt to "fix" or proceed after such a violation. The operation **MUST** stop, and the error must be clearly reported to allow for explicit user intervention or correction of the intended file path.

### 3.4. Audit Trail for Edits

- For traceability, every file edit performed by an AI or automated tool **MUST** log:
    - The confirmed absolute session directory path.
    - The absolute path of the file being edited.
- **Example Log Message (to be outputted before an edit operation):**
  ```
  Minsky Session Edit Pre-Check:
  - Session Directory: /Users/edobry/.local/state/minsky/sessions/task#227
  - Target File (Absolute): /Users/edobry/.local/state/minsky/sessions/task#227/src/domain/tasks/task-service.ts
  Proceeding with edit...
  ```
- This logging should primarily be in the AI/tool's direct output to the user. Optional logging to a `.session-edit-log` file can also be considered.

### 3.5. **CRITICAL ENFORCEMENT**: Zero-Tolerance Absolute Path Violations

**Following repeated violations of the absolute path requirement, this section provides zero-tolerance enforcement:**

1. **Mandatory Pre-Edit Verification**: Before ANY file edit in a session workspace, the assistant MUST:
   - Verify the file path starts with `/Users/edobry/.local/state/minsky/sessions/task#[ID]/`
   - Output the "Minsky Session Edit Pre-Check" message
   - REJECT any edit attempt using relative paths

2. **Violation Response Protocol**: If user reports absolute path violation:
   - **FIRST VIOLATION**: Immediate correction with rule reminder
   - **SECOND VIOLATION**: Critical error - update rule enforcement
   - **THIRD VIOLATION**: Terminal error - complete operational pause

3. **Tool Usage Restrictions**: 
   - `edit_file` tool MUST use absolute paths in session workspaces
   - `read_file` tool MUST use absolute paths in session workspaces
   - `delete_file` tool MUST use absolute paths in session workspaces
   - NO EXCEPTIONS for "convenience" or "brevity"

**This enforcement mechanism addresses the documented pattern of repeated absolute path violations.**

## 4. No Temporary or Test-Only Main Workspace Changes

- **No "temporary" or "test-only" changes in the main workspace are permitted.**
- All test expectation, fixture, and helper file changes must be made in the session workspace **using absolute paths**.

## 5. Audit and Logging

- Every file edit must log the absolute path being edited and the current session directory, both in the AI's output and (optionally) in a `.session-edit-log` file in the session directory.

## 6. Automated Enforcement

- Automated tools and contributors must check that all changes for a task are present only in the session workspace until the session is merged.

## 7. Rationale

- This ensures all work is traceable, reviewable, and isolated to the session, preventing accidental pollution or loss of context in the main workspace.
- It guarantees that the main workspace remains stable and unaffected by in-progress work.

## 8. Guidelines for AI `edit_file` Tool Usage

When utilizing the `edit_file` tool, adhere strictly to the **Core Practices for Session File Integrity (Section 3)**, with special attention to the following:

- **Absolute Path Construction:** The `target_file` argument for `edit_file` **MUST** be an absolute path, constructed as per Section 3.2 (e.g., by prepending the known session directory to the relative path of the file within the project).

- **`edit_file` Tool Behavior Reminder:** Be acutely aware that the `edit_file` tool (like many others) resolves relative paths against the **main workspace root**, not the current shell's working directory. This makes using absolute paths derived from the session directory non-negotiable.

- **Mandatory Pre-Edit Verification Message:** Before every call to `edit_file`, the AI **MUST** output the verification message detailed in Section 3.4 (Audit Trail for Edits).

- **Example `edit_file` Invocation:**
  ```typescript
  // Session directory for task #227:
  const sessionDirectory = "/Users/edobry/.local/state/minsky/sessions/task#227";
  const filePathRelativeToProject = "src/app/components/my-component.ts";
  const absolutePathInSession = `${sessionDirectory}/${filePathRelativeToProject}`;

  // Log verification message (as per Section 3.4)
  console.log(`Minsky Session Edit Pre-Check:\n- Session Directory: ${sessionDirectory}\n- Target File (Absolute): ${absolutePathInSession}\nProceeding with edit...`);

  // Call edit_file with the absolute path
  // edit_file(target_file = absolutePathInSession, code_edit = "...your code edit...", instructions = "...");
  ```

## 9. Session Workspace Verification and Command Usage

### 9.1. Mandatory Workspace Verification

Before starting any work in a session:

- **Verify Current Working Directory:** Use terminal CWD information, `pwd`, or `ls` commands to confirm you're in the correct session workspace.
  - Expected: `/Users/edobry/.local/state/minsky/sessions/task#[TASK_ID]`
- **Confirm with Git Status:** Run `git status` to verify you're in the correct branch for the task.
- **Directory Structure Check:** Verify the directory structure matches what's expected for a session workspace (standard project structure).

### 9.2. Command Verification Protocol

When using CLI commands, especially Minsky-specific commands:

- **Verify Command Availability:** Always check command availability with `--help` before attempting to use unfamiliar commands.
- **Confirm Command Options:** For Minsky commands, verify syntax and options with `minsky <command> --help` rather than assuming command structure.
- **Handle Command Errors:** If a command fails, verify syntax using help before proceeding.

### 9.3. Error Verification and Handling

When working with code and tests:

- **Address All Linter Errors:** Acknowledge all linter errors in files you modify.
- **Fix Straightforward Errors:** Attempt to fix straightforward linter errors before committing.
- **Document Complex Issues:** For complex linter errors, explicitly document limitations or reasoning when they can't be fixed immediately.

## 10. Absolute Path Examples and Patterns

### 10.1. Common File Operations with Absolute Paths

- **Reading files:** `/Users/edobry/.local/state/minsky/sessions/task#227/src/domain/tasks/task-service.ts`
- **Editing files:** `/Users/edobry/.local/state/minsky/sessions/task#227/src/domain/tasks/task-service.ts`
- **Creating files:** `/Users/edobry/.local/state/minsky/sessions/task#227/src/domain/tasks/new-service.ts`
- **Running tests:** `cd /Users/edobry/.local/state/minsky/sessions/task#227 && bun test`

### 10.2. Tool-Specific Absolute Path Requirements

- **edit_file tool:** Always use absolute paths like `/Users/edobry/.local/state/minsky/sessions/task#227/src/file.ts`
- **read_file tool:** Always use absolute paths like `/Users/edobry/.local/state/minsky/sessions/task#227/src/file.ts`
- **grep_search tool:** Can use relative patterns but within absolute directory contexts
- **Terminal commands:** Use `cd` to session directory then use relative paths, or use absolute paths consistently

## 11. Rationale

- This ensures all work happens in the correct workspace, preventing accidental changes to the main workspace.
- It promotes proper command usage, reducing errors and workflow disruptions.
- It improves code quality by addressing linter issues proactively.
- **Absolute paths eliminate ambiguity** about which workspace is being modified.

---

- It improves code quality by addressing linter issues proactively.
- **Absolute paths eliminate ambiguity** about which workspace is being modified.

---
