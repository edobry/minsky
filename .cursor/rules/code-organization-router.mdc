---
description: REQUIRED entry point for all code organization decisions. Use to navigate to specific organization rules like domain-oriented-modules or command-organization.
globs:
alwaysApply: false
---
# Code Organization Guidance - Start Here

This rule serves as the entry point for all code organization guidance in the Minsky project. Use it to navigate to the appropriate code organization rules based on your specific scenario.

## ‚ö†Ô∏è Critical Anti-Patterns to Avoid

**MANDATORY CHECK**: Before creating any new module, verify it doesn't exhibit these anti-patterns:

### God Module Anti-Pattern
- **Symptom**: Single module combining multiple unrelated responsibilities
- **Example**: `isolation.ts` combining state management + data generation + database utilities
- **Fix**: Split into focused modules with single responsibilities
- **Check**: Ask "Would an experienced developer immediately understand this module's purpose from its name?"

### Non-Idiomatic Organization
- **Symptom**: Organization that doesn't follow ecosystem standards
- **Example**: Custom patterns when standard testing utility organization exists
- **Fix**: Research and follow established patterns for the domain (testing, CLI, etc.)
- **Check**: "Does this follow standard practices other projects use?"

### Vague Naming
- **Symptom**: Module names that don't describe functionality
- **Example**: `isolation.ts`, `utils.ts`, `helpers.ts`
- **Fix**: Use descriptive names that indicate purpose (`setup.ts`, `database.ts`, `fixtures.ts`)
- **Check**: "Can someone understand what this module does without reading the code?"

## üîç Pattern Research Protocol

**MANDATORY STEP**: Before implementing any non-trivial organization, research ecosystem standards:

### Research Process
1. **Identify the Domain**: What type of functionality are you organizing? (testing, CLI, data processing, etc.)
2. **Study Established Patterns**: Look at how successful projects in the same domain organize similar code
3. **Question Custom Solutions**: Ask "Is there a standard way to solve this problem?"
4. **Verify Ecosystem Fit**: Ensure your approach would be familiar to developers experienced in this domain

### Examples of Standard Patterns to Follow
- **Testing Utilities**: `setup.ts`, `fixtures.ts`, `database.ts` (not `isolation.ts`)
- **CLI Commands**: Command-per-file with shared utilities (not monolithic command files)
- **Data Models**: Domain-grouped models (not technical-layer grouping)
- **Configuration**: Environment-based config files (not single mega-config)

### Red Flags Requiring Research
- Creating modules with names like `utils.ts`, `helpers.ts`, `manager.ts`, `handler.ts`
- Combining multiple unrelated responsibilities in one module
- Inventing custom patterns when standard solutions exist
- Organization that feels "clever" or "unique"

## Rule Application Matrix

| Scenario | Primary Rules | Supporting Rules |
|----------|---------------|------------------|
| Deciding where to put code | domain-oriented-modules | file-size |
| Managing module boundaries | domain-oriented-modules | command-organization |
| Handling constants and strings | constants-management | template-literals |
| Organizing import statements | no-dynamic-imports | N/A |
| Large file refactoring | file-size | domain-oriented-modules |
| Command/adapter organization | command-organization | domain-oriented-modules |
| **Test utility organization** | **idiomatic-patterns** | **testing-boundaries** |

## Rule Relationships

### Core Organization Rules
- [**domain-oriented-modules**](mdc:.cursor/rules/domain-oriented-modules.mdc): Guidance on organizing code by domain concepts
- [**file-size**](mdc:.cursor/rules/file-size.mdc): Guidelines for managing file size and complexity
- [**constants-management**](mdc:.cursor/rules/constants-management.mdc): Patterns for managing string constants and identifiers
- [**command-organization**](mdc:.cursor/rules/command-organization.mdc): Organization of command modules and interface adapters

### Supporting Rules
- [**no-dynamic-imports**](mdc:.cursor/rules/no-dynamic-imports.mdc): Guidelines for static vs. dynamic imports
- [**template-literals**](mdc:.cursor/rules/template-literals.mdc): Guidance on string construction and formatting

## Key Organization Principles

1. **Domain-Driven Organization**
   - Organize code around domain concepts rather than technical concerns
   - Keep related functionality together in cohesive modules
   - Use clear boundaries between different domains

2. **Appropriate Module Size**
   - Maintain reasonable file sizes (ideally <400 lines)
   - Extract related submodules when files grow too large
   - Balance cohesion and separation of concerns

3. **Consistent Patterns**
   - Use consistent naming and organization across similar modules
   - Follow established project patterns for new code
   - Refactor towards improved patterns when identified

4. **Clear Interfaces**
   - Define clear module interfaces and boundaries
   - Minimize dependencies between modules
   - Use explicit imports rather than dynamic loading when possible

5. **Zero Tolerance for Unused Code**
   - **IMMEDIATELY REMOVE** any unused files, functions, classes, or code blocks when identified
   - Do not keep unused code "for future use" or "just in case"
   - This applies to: unused files, functions/methods, classes/interfaces, imports/dependencies, commented-out code, dead code paths
   - When in doubt about usage, perform comprehensive codebase search before removal
   - If code is truly unused, delete it immediately without discussion

For detailed guidance on specific code organization scenarios, refer to the related rules linked above.
