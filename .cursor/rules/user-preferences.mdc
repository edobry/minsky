---
description:
globs:
alwaysApply: true
---
# User Preferences

This rule documents preferences expressed by the user during interactions with the AI coding assistant. These preferences are to be adhered to in future interactions.

## MANDATORY ENFORCEMENT MECHANISM

**This rule MUST be actively enforced before generating any response:**

```
// BEFORE GENERATING ANY RESPONSE, EVALUATE:
if (response contains confirmation question && next step is obvious)
  -> BLOCK response, remove question, proceed with implied action
if (response contains "Would you like me to...")
  -> BLOCK response, replace with direct action statement
if (response explains what will be done next without doing it)
  -> BLOCK response, replace with actual implementation
```

The above is not optional guidance - it is a mandatory filter that must be applied to every response before it is sent.

## Workflow Preferences

- **Avoid unnecessary confirmation prompts:** Do not ask for confirmation on obvious next steps in the workflow. If the next step is clearly implied by the conversation, proceed without asking for confirmation.
- **Never ask clarifying questions if the next steps seem obvious:** If the next steps are clearly implied by the conversation, proceed without asking for confirmation. The AI should make reasonable assumptions about the user's intent and proceed accordingly.
- **Prefer direct action over explanation:** When the user's intent is clear, take the action rather than explaining what you will do.
- **When the user has indicated a clear decision or course of action (e.g., proceeding with a risky operation they are aware of), do not offer unsolicited counter-recommendations or strong warnings against that course of action, especially if they have previously expressed a preference like 'don't tell me what to do'. Execute the implied action directly.**
- **Document new preferences:** Add any new user preferences to this rule as they arise in future sessions.
- **Never ask for confirmation on next steps like 'Would you like to proceed with ...?'.**
- **Always execute the next logical step when the user says 'do it, don't just tell me what to do', or similar.**
- **If a test or command fails or hangs, attempt to debug and resolve it automatically, rather than asking the user what to do next.**
- **When a workflow or troubleshooting step is implied, proceed with it directly.**
- **Balance proactiveness with task interpretation:** When the user asks to "create a task", always create a task specification document first. Only proceed to implementation if explicitly directed to do so.
- **Default to specification over implementation:** When in doubt about whether the user wants a task specified or implemented, default to creating a specification document unless they've explicitly asked for implementation.
- **NEVER end a response with questions or requests for clarification:** Even when acknowledging a user's reference to a rule or document, do not end with phrases like "If you intended something specific..." or "Please clarify..." Instead, proceed with the most logical next action based on context.
- **Treat ambiguity as a signal to act, not ask:** When faced with ambiguous instructions, choose the most reasonable interpretation and proceed with action rather than requesting clarification.
- **Interpret references to rules as reminders to follow them:** When the user references a rule, treat it as a reminder to follow that rule strictly, not as an invitation for discussion about the rule.
- **Prioritize Explicit Rule Directives Over Clarification:** When your previous action or response is corrected by the user referencing a specific directive in *any* provided rule (e.g., "Rule X says you MUST do Y"), treat this as an immediate and non-negotiable instruction.
    *   DO NOT ask if the user wants you to follow that directive (e.g., "Would you like me to do Y?").
    *   DO NOT offer alternatives to the directive.
    *   DO acknowledge the oversight and the specific directive.
    *   DO immediately proceed with the corrected action or confirm future adherence to that specific directive without further questioning its application in that context.
    *   This reinforces the "Interpret references to rules as reminders to follow them" point, with a specific focus on *corrective* references to *explicit directives*.
- **When the user says to keep going or not to ask for confirmation/status, proceed through all actionable issues without pausing, and only stop when all are resolved or all tests pass.**
- **Always push after committing:** After making any commit to a branch, immediately push those changes to the remote repository without asking for confirmation.

## VERIFICATION CHECKPOINT

At the end of drafting ANY response, the AI must verify:
1. Does this response contain ANY confirmation questions? If yes, remove them.
2. Does this response explain actions without taking them? If yes, replace with the actual implementation.
3. Does this response ask "Would you like me to..." when the intent is clear? If yes, rewrite to take direct action.
4. **If the user has stated a preference for uninterrupted progress, never pause for confirmation or status unless explicitly requested.**

## MANDATORY COMMAND PATTERNS

The following command patterns MUST be used exactly as specified, with no variations or omissions:

### Minsky CLI Commands

```
# PATTERN: minsky session start
# REQUIRED FLAGS: --quiet
# EXAMPLE: minsky session start --task 123 --quiet
# VALIDATION: ANY invocation of 'minsky session start' MUST include the '--quiet' flag
```

This is a strict pattern-matching system. Before executing ANY `minsky session start` command, the AI MUST:
1. Verify the `--quiet` flag is included
2. If not present, AUTOMATICALLY ADD the flag
3. NEVER ask if the flag should be added - it is MANDATORY
4. Log an internal reminder of this correction

When the pattern `minsky session start` appears in any planned command:
- Immediately check for `--quiet` flag
- Add it if missing
- This check must be performed EVERY time, regardless of context
- No exceptions are permitted

## CLI Command Usage Protocol

**MANDATORY ENFORCEMENT MECHANISM:**
BEFORE EXECUTING ANY CLI COMMAND:
1. If the command is unfamiliar, FIRST run with --help
2. For data retrieval commands, default to using --json when available
3. Verify command existence and format before execution
4. Document command patterns for future reference

**Verification Checkpoint:**
Before submitting any command for execution, check:
- Has the command syntax been verified with --help? If not, run help first
- Is this retrieving data that might be processed? If so, add --json
- Have I used this exact command before with confirmation it works?

This protocol applies to ALL CLI interactions without exception.

> **AI Commitment:** The AI will always strictly adhere to these preferences, especially regarding avoiding confirmation prompts and always taking the next implied step without asking. This is a persistent, high-priority rule for all future interactions.
