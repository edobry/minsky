---
description: Use this when creating a new task
globs: 
alwaysApply: false
---
# Task Creation Process

## ⚠️ CRITICAL: Always Create Tasks in Main Workspace
Tasks MUST always be created in the main workspace, not in session directories:
- Task creation is a metadata operation that affects the project's task tracking system
- Creating tasks in session directories can lead to lost or inconsistent task data
- Always ensure you are in the main workspace (`cd /path/to/main/workspace`) before creating tasks
- Use the Minsky CLI from the main workspace for all task operations

## ⚠️ IMPORTANT: Task Creation vs. Task Implementation
In Minsky, "creating a task" means authoring a task specification document and adding it to the tracking system - **not** implementing the code for that task.

- When the user requests to "create a task", always produce a task specification document
- Only proceed to implementation if explicitly instructed with phrases like "implement the task" or "write the code for"
- If there is any ambiguity, confirm with the user whether they want task specification or implementation

## ⚠️ IMPORTANT: Always Check for Existing Tasks First
- Before creating a new task, always check `process/tasks.md` and the `process/tasks/` directory for existing tasks that match the user's request
- If a matching task already exists:
  - Inform the user that the task already exists
  - Provide the task ID and title
  - Review the specification to verify it matches the user's requirements
  - Only create a new task if the existing one doesn't adequately cover the requested functionality
  - Never attempt to implement a task when only asked to create one

## Overview
All tasks and work items must be tracked using the canonical process described here. Ad-hoc or freeform task files (e.g., TODO.something.md) are NOT permitted. All tasks must be:
- Listed in `/process/tasks.md` as a checklist item
- Linked to a detailed task spec in `/process/tasks/{id}-{name}.md`

## Task Creation Methods

### Method 1: Using the `minsky tasks create` Command (Recommended)

⚠️ **IMPORTANT: Task ID Assignment**
The task ID is assigned by the system when you run `minsky tasks create`. You must:
1. Create a temporary spec file (e.g., `temp-task-spec.md`)
2. Run `minsky tasks create temp-task-spec.md`
3. Note the assigned task ID from the command output
4. Rename the file to match the assigned ID: `{assigned-id}-task-title.md`

Example workflow:
```bash
# 1. Create temporary spec file
touch process/tasks/temp-task-spec.md
# Edit the spec file...

# 2. Register the task and get the ID
minsky tasks create process/tasks/temp-task-spec.md
# Output: Task #042 created: Add New Feature

# 3. Rename the file to use the assigned ID
mv process/tasks/temp-task-spec.md process/tasks/042-add-new-feature.md
```

The command will:
- Extract the title and description from the spec document
- Find and assign the next available task ID
- Add the task to process/tasks.md with the correct formatting
- Return the details of the created task

The command also supports these options:
- `--session <session>`: Use a specific session for repository resolution
- `--repo <repoPath>`: Specify a repository path (overrides session)
- `--backend <backend>`: Use a specific task backend
- `--json`: Output the task in JSON format

### Method 2: Manual Task Creation
If you need to create a task manually, follow these steps:

#### 1. Check for Existing Tasks
- Before starting any new work, check `/process/tasks.md` for an existing task that matches your intended work.
- If a relevant task exists, follow its linked specification.

#### 2. Add a New Task
- If no relevant task exists, add a new checklist item to `/process/tasks.md` using the following format:
  ```markdown
  - [ ] Task Title [#NNN](mdc:tasks/NNN-task-title.md)
  ```
  - Use the next available task number (NNN).
  - The title should be concise but descriptive.

#### 3. Create the Task Specification Document
- Create a new file in `/process/tasks/` named `{NNN}-task-title.md`.
- The task spec should include:
  - **Objective**: What is the goal of the task?
  - **Context**: Background information and why this task is needed
  - **Requirements**: Specific, detailed requirements
  - **Implementation Steps**: A checklist of all required steps and substeps
  - **Verification**: What must be true for the task to be considered complete?
- Use checkboxes for all actionable items and sub-items.
- Include any relevant context, links, or references.

## Complete Example of a Task Specification

Here's a complete example of a properly formatted task specification document:

```markdown
# Task #007: Add `minsky tasks create` Command

## Context

The Minsky CLI currently lacks a streamlined way to create new tasks from specification documents. Users need to manually update the tasks.md file and ensure proper linking. An automated command would improve workflow efficiency and reduce errors.

## Requirements

1. **CLI Behavior**
   - Command signature:
     ```
     minsky tasks create <spec-path>
     ```
   - The command should:
     - Parse the provided task specification document
     - Extract the title and description
     - Assign the next available ID
     - Add a checklist item to process/tasks.md
     - Return the created task details

2. **Integration with Domain Module**
   - Use the TaskService domain module to record the task
   - Add a createTask method to the TaskService class
   - Implement createTask in the MarkdownTaskBackend

3. **Error Handling**
   - Validate that the spec file exists
   - Ensure the spec file has a valid title and description
   - Handle errors gracefully with informative messages

4. **CLI Options**
   - Support the following options:
     - `--session <session>`: Session name to use for repo resolution
     - `--repo <repoPath>`: Path to a git repository (overrides session)
     - `--backend <backend>`: Specify task backend (markdown, github)
     - `--json`: Output task as JSON

## Implementation Steps

1. [ ] Update TaskBackend interface to include createTask method
2. [ ] Implement createTask in MarkdownTaskBackend:
   - [ ] Parse the spec file to extract title and description
   - [ ] Find the next available task ID
   - [ ] Create a task entry in tasks.md
   - [ ] Return the created Task object
3. [ ] Add createTask method to TaskService
4. [ ] Create a new file in src/commands/tasks/create.ts:
   - [ ] Define command using Commander.js
   - [ ] Add appropriate options and arguments
   - [ ] Implement action handler to call domain method
   - [ ] Add proper error handling
5. [ ] Register command in src/commands/tasks/index.ts
6. [ ] Add tests for the new functionality
7. [ ] Update documentation

## Verification

- [ ] Running `minsky tasks create path/to/spec.md` successfully creates a task
- [ ] The task is added to process/tasks.md with correct formatting
- [ ] The command returns the created task details
- [ ] All options work as expected
- [ ] Error handling works correctly for invalid inputs
- [ ] Tests pass
```

## Task Type Recognition

Always distinguish between:

1. **Task Specification Requests**:
   - "Create a task for..."
   - "Add a task to..."
   - "Make a task that describes..."

2. **Task Implementation Requests**:
   - "Implement the task for..."
   - "Write the code that..."
   - "Let's code the feature for..."

When in doubt, default to creating a task specification document rather than implementing code.
