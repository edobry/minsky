
# Task Creation Process

## ⚠️ MANDATORY: Use the Minsky CLI for Task Creation

- The ONLY supported method for creating new tasks is via the `minsky tasks create` command.
- Manual edits to `process/tasks.md` or direct creation of spec files are NOT permitted.
- **NEVER create task specification files directly** - this bypasses ID assignment and can create duplicates
- All contributors and automations (including AI) MUST use the following workflow:

### Task Creation Workflow

1. **Check for existing tasks first**: Run `minsky tasks list | grep "relevant-keywords"` to verify no duplicate exists
2. **Create task with title and description**:

   ```bash
   # Method 1: Inline description (for short descriptions)
   minsky tasks create --title "Task Title" --description "Task description text"

   # Method 2: Description from file (for comprehensive descriptions)
   minsky tasks create --title "Task Title" --description-path path/to/description.md
   ```

3. The CLI will:
   - Assign the next available task ID
   - Generate a complete task specification file
   - Add the task to `process/tasks.md` in the correct format
   - Output the assigned ID and new file path
4. Verify the task appears in `process/tasks.md` and the spec file is correctly created

> **This process is mandatory. Skipping the CLI or editing files directly is a process violation that can cause duplicate tasks and tracking inconsistencies.**

## ⚠️ CRITICAL: Efficient Task Creation with Comprehensive Descriptions

**NEVER use the two-step approach of creating minimal tasks then editing the spec file.**

### For Comprehensive Task Descriptions:

1. **Create a temporary description file** with the full task specification:

   ```bash
   # Create temporary file with complete description
   cat > temp-task-desc.md << 'EOF'
   ## Objectives
   1. **Install and Configure semantic-release**
      - Install semantic-release and necessary plugins
      - Configure for GitHub releases only
   [... full comprehensive description ...]
   EOF
   ```

2. **Use --description-path flag** to create the complete task in one operation:

   ```bash
   minsky tasks create --title "Setup semantic-release..." --description-path temp-task-desc.md
   ```

3. **Clean up temporary file**:
   ```bash
   rm temp-task-desc.md
   ```

### When to Use Each Method:

- **Use --description flag**: For simple, one-line descriptions
- **Use --description-path flag**: For comprehensive task specifications with multiple sections
- **NEVER**: Create minimal task then edit the spec file afterward

**This eliminates unnecessary file editing and creates complete task specifications in one operation.**

### Legacy Interface (Deprecated)

The old spec-path interface is still supported but deprecated:

```bash
# Legacy method (still works but discouraged)
minsky tasks create process/tasks/temp-task-spec.md
```

### Viewing Task Specifications

To view an existing task specification:

```bash
minsky tasks spec <task-id>
```

This command displays the full content of the task specification document, allowing you to review task details without needing to locate or open the file directly.

## ⚠️ CRITICAL: Always Create Tasks in Main Workspace

Tasks MUST always be created in the main workspace, not in session directories:

- Task creation is a metadata operation that affects the project's task tracking system
- Creating tasks in session directories can lead to lost or inconsistent task data
- Always ensure you are in the main workspace (`cd /path/to/main/workspace`) before creating tasks
- Use the Minsky CLI from the main workspace for all task operations

## ⚠️ IMPORTANT: Task Creation vs. Task Implementation

In Minsky, "creating a task" means authoring a task specification document and adding it to the tracking system - **not** implementing the code for that task.

- When the user requests to "create a task", always produce a task specification document
- Only proceed to implementation if explicitly instructed with phrases like "implement the task" or "write the code for"
- If there is any ambiguity, confirm with the user whether they want task specification or implementation

## ⚠️ IMPORTANT: Always Check for Existing Tasks First

- Before creating a new task, always check `process/tasks.md` and the `process/tasks/` directory for existing tasks that match the user's request
- If a matching task already exists:
  - Inform the user that the task already exists
  - Provide the task ID and title
  - Review the specification to verify it matches the user's requirements
  - Only create a new task if the existing one doesn't adequately cover the requested functionality
  - Never attempt to implement a task when only asked to create one

## Overview

All tasks and work items must be tracked using the canonical process described here. Ad-hoc or freeform task files (e.g., TODO.something.md) are NOT permitted. All tasks must be:

- Listed in `/process/tasks.md` as a checklist item
- Linked to a detailed task spec in `/process/tasks/{id}-{name}.md`

## Task Creation Methods

### Using the `minsky tasks create` Command

**New Interface (Preferred):**

```bash
# Create task with inline description
minsky tasks create --title "Task Title" --description "Task description text"

# Create task with description from file
minsky tasks create --title "Task Title" path/to/description.md
```

**Legacy Interface (Deprecated):**
⚠️ **IMPORTANT: Task ID Assignment**
The task ID is assigned by the system when you run `minsky tasks create`. You must:

1. Create a temporary spec file (e.g., `temp-task-spec.md`)
2. Run `minsky tasks create temp-task-spec.md`
3. Note the assigned task ID from the command output
4. Rename the file to match the assigned ID: `{assigned-id}-task-title.md`

Example workflow:

```bash
# 1. Create temporary spec file
touch process/tasks/temp-task-spec.md
# Edit the spec file...

# 2. Register the task and get the ID
minsky tasks create process/tasks/temp-task-spec.md
# Output: Task #042 created: Add New Feature

# 3. Rename the file to use the assigned ID
mv process/tasks/temp-task-spec.md process/tasks/042-add-new-feature.md
```

The command will:

- Extract the title and description from the spec document
- Find and assign the next available task ID
- Add the task to process/tasks.md with the correct formatting
- Return the details of the created task

The command also supports these options:

- `--session <session>`: Use a specific session for repository resolution
- `--repo <repoPath>`: Specify a repository path (overrides session)
- `--backend <backend>`: Use a specific task backend
- `--json`: Output the task in JSON format

## Complete Example of a Task Specification

Here's a complete example of a properly formatted task specification document:

````markdown
# Task #007: Add `minsky tasks create` Command

## Context

The Minsky CLI currently lacks a streamlined way to create new tasks from specification documents. Users need to manually update the tasks.md file and ensure proper linking. An automated command would improve workflow efficiency and reduce errors.

## Requirements

1. **CLI Behavior**

   - Command signature:
     ```
     minsky tasks create --title "Title" --description "Description"
     ```
   - The command should:
     - Accept title and description parameters
     - Generate a complete task specification
     - Assign the next available ID
     - Add a checklist item to process/tasks.md
     - Return the created task details

2. **Integration with Domain Module**

   - Use the TaskService domain module to record the task
   - Add a createTaskFromTitleAndDescription method to the TaskService class
   - Implement createTaskFromTitleAndDescription in the task commands

3. **Error Handling**

   - Validate that title is provided
   - Ensure either description or descriptionPath is provided
   - Handle errors gracefully with informative messages

4. **CLI Options**
   - Support the following options:
     - `--title <string>`: Title for the task (required)
     - `--description <string>`: Description text for the task
     - `--description-path <string>`: Path to file containing task description
     - `--session <session>`: Session name to use for repo resolution
     - `--repo <repoPath>`: Path to a git repository (overrides session)
     - `--backend <backend>`: Specify task backend (markdown, github)
     - `--json`: Output task as JSON

## Implementation Steps

1. [ ] Update TaskBackend interface to include createTaskFromTitleAndDescription method
2. [ ] Implement createTaskFromTitleAndDescription in task commands:
   - [ ] Accept title and description parameters
   - [ ] Generate complete task specification content
   - [ ] Find the next available task ID
   - [ ] Create a task entry in tasks.md
   - [ ] Return the created Task object
3. [ ] Add createTaskFromTitleAndDescription method to TaskService
4. [ ] Update shared command registration:
   - [ ] Define command parameters with title and description options
   - [ ] Add appropriate validation logic
   - [ ] Implement action handler to call domain method
   - [ ] Add proper error handling
5. [ ] Update CLI customizations for new parameters
6. [ ] Add tests for the new functionality
7. [ ] Update documentation

## Verification

- [ ] Running `minsky tasks create --title "Title" --description "Description"` successfully creates a task
- [ ] The task is added to process/tasks.md with correct formatting
- [ ] The command returns the created task details
- [ ] All options work as expected
- [ ] Error handling works correctly for invalid inputs
- [ ] Tests pass
````

## Task Specification Content Guidelines

### Time Estimates Are Prohibited

- **NEVER include time estimates** in task specifications (e.g., "Week 1-2", "3 days", "2 weeks")
- Use logical phase names without time references (e.g., "Phase 1: Research", not "Phase 1: Research (Week 1-2)")
- Focus on deliverables and outcomes rather than time-based planning
- Let implementers determine their own timeline based on priorities and resources

### Phase Organization

- Organize work into logical phases based on dependencies and natural progression
- Use descriptive phase names that indicate the type of work (Research, Proof of Concept, Implementation, Documentation)
- Structure phases to build upon each other logically
- Include clear success criteria for each phase

## Task Type Recognition

Always distinguish between:

1. **Task Specification Requests**:

   - "Create a task for..."
   - "Add a task to..."
   - "Make a task that describes..."

2. **Task Implementation Requests**:
   - "Implement the task for..."
   - "Write the code that..."
   - "Let's code the feature for..."

When in doubt, default to creating a task specification document rather than implementing code.
