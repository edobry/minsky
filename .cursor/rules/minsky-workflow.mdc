---
description: Use this when working on a task
globs: 
alwaysApply: false
---
# Minsky Workflow

This rule defines the comprehensive process for working with tasks using the Minsky tool. All code changes must follow this process to maintain consistency and quality.

## Task Selection and Initial Setup

When asked to work on a task (by name, description, or ID):

1. **Find or Access the Task**
   - If you already know the task ID (e.g., "001" or "#001"):
     ```bash
     # Get direct information about a specific task
     minsky tasks get '#001' --json
     ```
   - If you need to find a task from the backlog:
     ```bash
     # List all tasks and filter with jq (never use grep for JSON)
     minsky tasks list --json | jq '.[] | select(.title | contains("keyword"))'
     ```

2. **Check Task Status**
   - Before starting any work, check the current status of the task:
     ```bash
     minsky tasks status get '#001'
     ```
   - Task status meanings:
     - `TODO`: Not started, available to work on
     - `IN-PROGRESS`: Work has begun but is not complete
     - `IN-REVIEW`: Work is complete and awaiting review
     - `DONE`: Work is complete, reviewed, and merged
   - If the task is already marked as `DONE` or `IN-REVIEW`, confirm with the user before proceeding.

3. **Understand Requirements**
   - Read the task specification document shown in the output of `minsky tasks get`
   - The path is typically `process/tasks/<task-id>-<task-name>.md` (e.g., `process/tasks/001-update-session-start.md`)
   - Ensure all requirements and acceptance criteria are clearly understood
   - Note any dependencies or blocking issues

## Session Management

### Starting a New Session

1. **Create a Task Session**
   - Begin a new session for the task (no session name needed when using `--task`):
     ```bash
     minsky session start --task 001
     ```
   - The output will show:
     - The auto-generated session name (e.g., `task#001`)
     - The repository location where files were cloned
     - The branch name that was created (same as session name)
     - The task ID association
     - Command to navigate to the session directory

2. **Enter the Session Directory**
   - Navigate to the session directory using the command provided in the previous output:
     ```bash
     cd $(minsky session dir task#001)
     ```

### Re-entering an Existing Session

When asked to continue working on a task:

1. **Find Existing Session**
   - Look up the session associated with the task:
     ```bash
     # Use session get to get details about a specific session
     minsky session get task#001
     ```
   - If you don't know the session name, you may need to list all sessions:
     ```bash
     minsky session list --json | jq '.[] | select(.taskId == "#001")'
     ```
   - Note: A future enhancement will add a `--task` option to the `session get` command to directly query sessions by task ID

2. **Enter Existing Session**
   - Navigate to the session directory:
     ```bash
     cd $(minsky session dir task#001)
     ```
   - If no session exists, create one as described in "Starting a New Session"

## Implementation Process

1. **Planning**
   - Review the task document to ensure full understanding
   - For a new task, draft an implementation plan and append it to the task document
   - For continuing work, review the task's "Work Log" section to see progress

2. **Implementation**
   - Follow all project coding standards and best practices
   - Implement the required changes, addressing all requirements
   - Commit changes at logical intervals with clear, descriptive messages
   - Reference the task ID in all commit messages (e.g., "Implement feature X for #001")

3. **Work Log**
   - Maintain a "Work Log" section in the task document:
     ```markdown
     ## Work Log
     - YYYY-MM-DD: Implemented X feature
     - YYYY-MM-DD: Fixed Y bug
     - YYYY-MM-DD: Added tests for Z functionality
     ```
   - This log will be used to update the changelog when the task is complete

4. **Testing**
   - Write appropriate tests for all new functionality
   - Ensure all existing tests continue to pass
   - Document any complex test scenarios or edge cases addressed

## Verification and Documentation

1. **Verification**
   - Verify that all requirements have been implemented correctly
   - Check off completed verification steps in the task document by changing `[ ]` to `[x]`
   - Ensure that all tests pass

2. **Documentation**
   - Update the task document with implementation details
   - Document any design decisions or compromises made during implementation
   - Update any relevant project documentation

3. **Changelog**
   - Follow the instructions in the [changelog rule](mdc:changelog.mdc) for updating the appropriate CHANGELOG.md
   - Use the Work Log from the task document as the basis for changelog entries
   - Reference the task ID in the changelog entry

## Task Completion

1. **PR Preparation**
   - Generate a PR description:
     ```bash
     minsky git pr
     ```
   - Minsky will automatically create necessary directories and save the PR description to:
     ```
     process/tasks/<task-id>/pr.md
     ```
   - Commit this PR description file

2. **Finalization**
   - Push your branch:
     ```bash
     # Current approach (standard git command)
     git push origin $(git branch --show-current)
     
     # Future: Will be simplified with dedicated command (Task #005)
     # minsky git push
     ```
   - Note: Task #005 is in progress to simplify this step with a dedicated command

3. **Status Update**
   - Update the task status to the appropriate state:
     ```bash
     # Use IN-REVIEW after you've generated a PR and pushed your changes
     minsky tasks status set '#001' IN-REVIEW
     
     # Use DONE only after the changes have been reviewed and merged
     minsky tasks status set '#001' DONE
     ```

## Important Notes

- Never skip verification steps or mark a task complete without meeting all requirements
- Always check the existing task status before beginning work
- Reference the task number in all PRs, commits, and documentation
- Maintain a Work Log in the task document to track implementation progress
- If modifications to the requirements are needed, discuss and document them in the task document
- When a task spans multiple sessions, use the Work Log to ensure continuity
- Minsky manages branch names, session directories, and other infrastructureâ€”you don't need to create these manually
