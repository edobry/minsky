#!/usr/bin/env bun

/**
 * Demo: TypeScript Git Hooks vs Bash Implementation
 * 
 * Shows the differences between the old bash approach and new TypeScript approach
 */

import { ProjectConfigReader } from "./src/domain/project/config-reader";
import { execAsync } from "./src/utils/exec";

async function demoTSHooks() {
  console.log("üéØ TypeScript Git Hooks Demo\n");
  
  console.log("üìä COMPARISON: Bash vs TypeScript Implementation\n");
  
  // 1. Configuration Loading
  console.log("1Ô∏è‚É£ Configuration Loading:");
  console.log("   ‚ùå Bash: Hardcoded 'bun run lint' command");
  console.log("   ‚úÖ TypeScript: Config-aware via ProjectConfigReader");
  
  const configReader = new ProjectConfigReader(process.cwd());
  const config = await configReader.getConfiguration();
  const lintJsonCommand = await configReader.getLintJsonCommand();
  
  console.log(`   üìã Detected config source: ${config.configSource}`);
  console.log(`   üìã Lint command: ${lintJsonCommand}`);
  
  // 2. JSON Parsing
  console.log("\n2Ô∏è‚É£ JSON Parsing:");
  console.log("   ‚ùå Bash: grep -o '\"errorCount\":[0-9]*' | cut -d: -f2 | awk");
  console.log("   ‚úÖ TypeScript: JSON.parse() with proper error handling");
  
  // Demonstrate the TypeScript approach
  try {
    const { stdout } = await execAsync(lintJsonCommand, { timeout: 10000 });
    const lintResults = JSON.parse(stdout || "[]");
    
    // Type-safe aggregation
    const totalErrors = lintResults.reduce((sum: number, result: any) => sum + result.errorCount, 0);
    const totalWarnings = lintResults.reduce((sum: number, result: any) => sum + result.warningCount, 0);
    
    console.log(`   üìä Results: ${totalErrors} errors, ${totalWarnings} warnings`);
    console.log(`   üìù Files analyzed: ${lintResults.length}`);
    
  } catch (error) {
    console.log(`   ‚ö†Ô∏è Lint execution failed: ${error}`);
  }
  
  // 3. Error Handling
  console.log("\n3Ô∏è‚É£ Error Handling:");
  console.log("   ‚ùå Bash: Basic exit codes, limited error context");
  console.log("   ‚úÖ TypeScript: Structured HookResult with detailed messages");
  
  // 4. Maintainability
  console.log("\n4Ô∏è‚É£ Maintainability:");
  console.log("   ‚ùå Bash: 176 lines of complex shell script");
  console.log("   ‚úÖ TypeScript: ~400 lines of well-structured, testable code");
  
  // 5. Type Safety
  console.log("\n5Ô∏è‚É£ Type Safety:");
  console.log("   ‚ùå Bash: Runtime failures from shell parsing errors");
  console.log("   ‚úÖ TypeScript: Compile-time error detection");
  
  // 6. Infrastructure Reuse
  console.log("\n6Ô∏è‚É£ Infrastructure Reuse:");
  console.log("   ‚ùå Bash: Reinvents JSON parsing, config loading");
  console.log("   ‚úÖ TypeScript: Leverages ProjectConfigReader, execAsync, logger");
  
  console.log("\nüéâ KEY BENEFITS:");
  console.log("   ‚Ä¢ No more fragile grep/awk/cut string manipulation");
  console.log("   ‚Ä¢ Uses same config loading as CLI commands");
  console.log("   ‚Ä¢ Type-safe ESLint result processing");
  console.log("   ‚Ä¢ Better error messages and debugging");
  console.log("   ‚Ä¢ Easier to test and maintain");
  console.log("   ‚Ä¢ Consistent with Minsky's TypeScript architecture");
}

demoTSHooks().catch(console.error);
