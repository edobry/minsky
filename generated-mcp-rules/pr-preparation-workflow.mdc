---
name: PR Preparation Workflow
description: 'Complete workflow for preparing, creating, and managing pull requests'
tags:
  - pr
  - pullrequest
  - git
  - workflow
---
# PR Preparation Workflow

This rule provides a complete workflow for preparing, creating, and managing pull requests in the Minsky system.

## Overview

Pull requests are the mechanism for integrating completed work from sessions back into the main codebase. The PR workflow ensures:

- Proper review of all changes
- Integration with task management
- Quality assurance before merge
- Documentation of changes

## Prerequisites

Before creating a PR, ensure:

1. **Implementation is complete** - All task requirements met
2. **Tests are passing** - Full test suite runs successfully
3. **Task status is correct** - Should be IN-REVIEW before PR creation
4. **Session is current** - Session updated with latest changes

## PR Creation Process

### Step 1: Pre-PR Verification

**Check task status**: <function_calls>
<invoke name="mcp_minsky-server_tasks_status_get">
<parameter name="taskId">required taskId value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="workspace">optional workspace value</parameter>
<parameter name="session">optional session value</parameter>
<parameter name="backend">optional backend value</parameter>
<parameter name="json">optional json value</parameter>
</invoke>
</function_calls>
- Verify task is in appropriate state for PR creation
- Update to IN-REVIEW if not already: <function_calls>
<invoke name="mcp_minsky-server_tasks_status_set">
<parameter name="taskId">required taskId value</parameter>
<parameter name="status">optional status value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="workspace">optional workspace value</parameter>
<parameter name="session">optional session value</parameter>
<parameter name="backend">optional backend value</parameter>
<parameter name="json">optional json value</parameter>
</invoke>
</function_calls>

**Verify session state**: <function_calls>
<invoke name="mcp_minsky-server_session_get">
<parameter name="name">optional name value</parameter>
<parameter name="task">optional task value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="json">optional json value</parameter>
</invoke>
</function_calls>
- Confirm session is properly configured
- Check that all changes are committed
- Ensure session is up to date

### Step 2: Create Pull Request

**Generate PR from session**: <function_calls>
<invoke name="mcp_minsky-server_session_pr_create">
<parameter name="title">optional title value</parameter>
<parameter name="body">optional body value</parameter>
<parameter name="bodyPath">optional bodyPath value</parameter>
<parameter name="name">optional name value</parameter>
<parameter name="task">optional task value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="noStatusUpdate">optional noStatusUpdate value</parameter>
<parameter name="debug">optional debug value</parameter>
<parameter name="skipUpdate">optional skipUpdate value</parameter>
<parameter name="autoResolveDeleteConflicts">optional autoResolveDeleteConflicts value</parameter>
<parameter name="skipConflictCheck">optional skipConflictCheck value</parameter>
</invoke>
</function_calls>
- Creates PR from session branch to main branch
- Automatically links PR to associated task
- May update task status to IN-REVIEW

**Provide PR details**:
- Use descriptive title including task ID
- Write comprehensive description of changes
- Include testing information
- Reference any relevant issues or dependencies

### Step 3: PR Content Verification

After PR creation:

1. **Review PR description** - Ensure it follows guidelines
2. **Check file changes** - Verify all intended changes included
3. **Confirm task linkage** - PR should reference task ID
4. **Validate build status** - Ensure CI/CD passes

## PR Description Format

Follow this structure for PR descriptions:

```markdown
# <type>(#<task-id>): <Short description>

## Summary
Brief description of what was changed and why.

## Changes
### Added
- List new features or functionality

### Changed
- List modifications to existing functionality

### Fixed
- List bugs or issues resolved

## Testing
Description of testing performed.

## Checklist
- [x] All requirements implemented
- [x] Tests written and passing
- [x] Documentation updated
```

## PR Types

Use these prefixes for PR titles:

- **feat**: New feature
- **fix**: Bug fix
- **docs**: Documentation changes
- **style**: Code style changes
- **refactor**: Code refactoring
- **perf**: Performance improvements
- **test**: Test additions or modifications
- **chore**: Build process or tool changes

## PR Management Commands

### PR Creation
**Create PR from session**: <function_calls>
<invoke name="mcp_minsky-server_session_pr_create">
<parameter name="title">optional title value</parameter>
<parameter name="body">optional body value</parameter>
<parameter name="bodyPath">optional bodyPath value</parameter>
<parameter name="name">optional name value</parameter>
<parameter name="task">optional task value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="noStatusUpdate">optional noStatusUpdate value</parameter>
<parameter name="debug">optional debug value</parameter>
<parameter name="skipUpdate">optional skipUpdate value</parameter>
<parameter name="autoResolveDeleteConflicts">optional autoResolveDeleteConflicts value</parameter>
<parameter name="skipConflictCheck">optional skipConflictCheck value</parameter>
</invoke>
</function_calls>
- Primary method for creating PRs
- Handles task integration automatically
- Manages branch and status updates

### PR Information
**Get session PR info**: <function_calls>
<invoke name="mcp_minsky-server_session_get">
<parameter name="name">optional name value</parameter>
<parameter name="task">optional task value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="json">optional json value</parameter>
</invoke>
</function_calls>
- Shows PR status for session
- Displays PR URL and details
- Indicates merge status

## PR Review Process

### For PR Authors

1. **Respond to feedback promptly**
2. **Make requested changes in session workspace**
3. **Push updates to session branch**
4. **Re-request review after changes**

### For PR Reviewers

1. **Review code changes thoroughly**
2. **Verify requirements are met**
3. **Check test coverage and quality**
4. **Provide constructive feedback**
5. **Approve when satisfied with changes**

## PR Merge Process

### Automated Merge
When using Minsky's integrated workflow:
- PR merge can trigger automatic task status update to DONE
- Session cleanup may be automated
- Branch deletion handled automatically

### Manual Verification
After PR merge:

1. **Verify task status**: <function_calls>
<invoke name="mcp_minsky-server_tasks_status_get">
<parameter name="taskId">required taskId value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="workspace">optional workspace value</parameter>
<parameter name="session">optional session value</parameter>
<parameter name="backend">optional backend value</parameter>
<parameter name="json">optional json value</parameter>
</invoke>
</function_calls>
2. **Confirm changes in main branch**
3. **Update task status if needed**: <function_calls>
<invoke name="mcp_minsky-server_tasks_status_set">
<parameter name="taskId">required taskId value</parameter>
<parameter name="status">optional status value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="workspace">optional workspace value</parameter>
<parameter name="session">optional session value</parameter>
<parameter name="backend">optional backend value</parameter>
<parameter name="json">optional json value</parameter>
</invoke>
</function_calls>

## Common PR Scenarios

### Scenario 1: Standard Feature PR

```bash
# 1. Verify implementation complete and tests passing
cd $(<function_calls>
<invoke name="mcp_minsky-server_session_dir">
<parameter name="name">optional name value</parameter>
<parameter name="task">optional task value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="json">optional json value</parameter>
</invoke>
</function_calls>)

# 2. Update task status to IN-REVIEW
<function_calls>
<invoke name="mcp_minsky-server_tasks_status_set">
<parameter name="taskId">required taskId value</parameter>
<parameter name="status">optional status value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="workspace">optional workspace value</parameter>
<parameter name="session">optional session value</parameter>
<parameter name="backend">optional backend value</parameter>
<parameter name="json">optional json value</parameter>
</invoke>
</function_calls>

# 3. Create PR from session
<function_calls>
<invoke name="mcp_minsky-server_session_pr_create">
<parameter name="title">optional title value</parameter>
<parameter name="body">optional body value</parameter>
<parameter name="bodyPath">optional bodyPath value</parameter>
<parameter name="name">optional name value</parameter>
<parameter name="task">optional task value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="noStatusUpdate">optional noStatusUpdate value</parameter>
<parameter name="debug">optional debug value</parameter>
<parameter name="skipUpdate">optional skipUpdate value</parameter>
<parameter name="autoResolveDeleteConflicts">optional autoResolveDeleteConflicts value</parameter>
<parameter name="skipConflictCheck">optional skipConflictCheck value</parameter>
</invoke>
</function_calls>
```

### Scenario 2: Bug Fix PR

```bash
# 1. Ensure fix is complete and tested
cd $(<function_calls>
<invoke name="mcp_minsky-server_session_dir">
<parameter name="name">optional name value</parameter>
<parameter name="task">optional task value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="json">optional json value</parameter>
</invoke>
</function_calls>)

# 2. Update task status
<function_calls>
<invoke name="mcp_minsky-server_tasks_status_set">
<parameter name="taskId">required taskId value</parameter>
<parameter name="status">optional status value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="workspace">optional workspace value</parameter>
<parameter name="session">optional session value</parameter>
<parameter name="backend">optional backend value</parameter>
<parameter name="json">optional json value</parameter>
</invoke>
</function_calls>

# 3. Create PR with fix prefix
<function_calls>
<invoke name="mcp_minsky-server_session_pr_create">
<parameter name="title">optional title value</parameter>
<parameter name="body">optional body value</parameter>
<parameter name="bodyPath">optional bodyPath value</parameter>
<parameter name="name">optional name value</parameter>
<parameter name="task">optional task value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="noStatusUpdate">optional noStatusUpdate value</parameter>
<parameter name="debug">optional debug value</parameter>
<parameter name="skipUpdate">optional skipUpdate value</parameter>
<parameter name="autoResolveDeleteConflicts">optional autoResolveDeleteConflicts value</parameter>
<parameter name="skipConflictCheck">optional skipConflictCheck value</parameter>
</invoke>
</function_calls>
```

### Scenario 3: Documentation PR

```bash
# 1. Verify documentation changes
cd $(<function_calls>
<invoke name="mcp_minsky-server_session_dir">
<parameter name="name">optional name value</parameter>
<parameter name="task">optional task value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="json">optional json value</parameter>
</invoke>
</function_calls>)

# 2. Set appropriate status
<function_calls>
<invoke name="mcp_minsky-server_tasks_status_set">
<parameter name="taskId">required taskId value</parameter>
<parameter name="status">optional status value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="workspace">optional workspace value</parameter>
<parameter name="session">optional session value</parameter>
<parameter name="backend">optional backend value</parameter>
<parameter name="json">optional json value</parameter>
</invoke>
</function_calls>

# 3. Create docs PR
<function_calls>
<invoke name="mcp_minsky-server_session_pr_create">
<parameter name="title">optional title value</parameter>
<parameter name="body">optional body value</parameter>
<parameter name="bodyPath">optional bodyPath value</parameter>
<parameter name="name">optional name value</parameter>
<parameter name="task">optional task value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="noStatusUpdate">optional noStatusUpdate value</parameter>
<parameter name="debug">optional debug value</parameter>
<parameter name="skipUpdate">optional skipUpdate value</parameter>
<parameter name="autoResolveDeleteConflicts">optional autoResolveDeleteConflicts value</parameter>
<parameter name="skipConflictCheck">optional skipConflictCheck value</parameter>
</invoke>
</function_calls>
```

## PR Best Practices

### Content Guidelines
- **Keep PRs focused** - One task per PR
- **Write clear descriptions** - Explain what and why
- **Include testing info** - How changes were verified
- **Reference task ID** - Link to original requirement

### Technical Guidelines
- **Ensure tests pass** - All CI/CD checks green
- **Keep changes minimal** - Only what's needed for task
- **Handle conflicts promptly** - Resolve merge conflicts quickly
- **Update documentation** - Keep docs current with changes

### Process Guidelines
- **Create PR when ready** - Don't create draft PRs prematurely
- **Respond to reviews quickly** - Keep momentum going
- **Test final version** - Verify changes after addressing feedback
- **Clean up after merge** - Close related issues, update status

## Troubleshooting

### Problem: PR creation fails
**Solution**: Check session status with <function_calls>
<invoke name="mcp_minsky-server_session_get">
<parameter name="name">optional name value</parameter>
<parameter name="task">optional task value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="json">optional json value</parameter>
</invoke>
</function_calls>, ensure all changes committed

### Problem: PR not linked to task
**Solution**: Verify task ID in PR title and description, update if needed

### Problem: Tests failing in PR
**Solution**: Run tests in session workspace, fix failures before requesting review

### Problem: Merge conflicts
**Solution**: Update session with <function_calls>
<invoke name="mcp_minsky-server_session_update">
<parameter name="name">optional name value</parameter>
<parameter name="task">optional task value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="branch">optional branch value</parameter>
<parameter name="noStash">optional noStash value</parameter>
<parameter name="noPush">optional noPush value</parameter>
<parameter name="force">optional force value</parameter>
<parameter name="json">optional json value</parameter>
<parameter name="skipConflictCheck">optional skipConflictCheck value</parameter>
<parameter name="autoResolveDeleteConflicts">optional autoResolveDeleteConflicts value</parameter>
<parameter name="dryRun">optional dryRun value</parameter>
<parameter name="skipIfAlreadyMerged">optional skipIfAlreadyMerged value</parameter>
</invoke>
</function_calls>, resolve conflicts, push updates

## Integration Points

This workflow integrates with:

- **task-implementation-workflow**: PR creation is final phase of implementation
- **task-status-protocol**: Status updates during PR lifecycle
- **minsky-session-management**: PRs created from sessions
- **pr-description-guidelines**: Detailed formatting requirements

## Verification Checklist

Before creating PR:

- [ ] All requirements implemented
- [ ] Tests written and passing
- [ ] Task status is IN-REVIEW
- [ ] Session is up to date
- [ ] Changes are committed and pushed
- [ ] PR title includes task ID
- [ ] PR description is complete and follows format