---
name: Task Status Protocol
description: Procedures for checking and updating task status throughout the implementation lifecycle
tags:
  - task
  - status
  - protocol
  - workflow
---
# Task Status Protocol

This rule defines the procedures for checking and updating task status throughout the implementation lifecycle.

## Status Values

Minsky uses the following task status values:

| Status | Meaning | When to Use |
|--------|---------|-------------|
| **TODO** | Task ready for implementation | Initial state for new tasks |
| **IN-PROGRESS** | Implementation actively underway | When starting implementation work |
| **IN-REVIEW** | Implementation complete, awaiting review | When submitting PR for review |
| **DONE** | Task fully completed and merged | After successful PR merge |
| **BLOCKED** | Implementation blocked by external factor | When unable to proceed |
| **CLOSED** | Task cancelled or no longer needed | When abandoning task |

## Status Commands

### Checking Status

**Get current status**: minsky tasks status.get <taskId> [--repo <value>] [--workspace <value>] [--session <value>] [--backend <value>] [--json]
- Returns current status of specified task
- Essential before starting any work
- Use to verify status is appropriate for next action

**List tasks by status**: minsky tasks list [--all] [--status <value>] [--filter <value>] [--limit <value>] [--repo <value>] [--workspace <value>] [--session <value>] [--backend <value>] [--json] with status filter
- Shows all tasks matching specific status
- Useful for finding work to do or reviewing progress

### Updating Status

**Set new status**: minsky tasks status.set <taskId> [--status <value>] [--repo <value>] [--workspace <value>] [--session <value>] [--backend <value>] [--json]
- Updates task to new status value
- Include reason/comment when helpful
- Always verify update was successful

## Status Transition Rules

### TODO → IN-PROGRESS
**When**: Starting implementation work
**Trigger**: Creating session and beginning implementation
**Command**: minsky tasks status.set <taskId> [--status <value>] [--repo <value>] [--workspace <value>] [--session <value>] [--backend <value>] [--json] with status "IN-PROGRESS"
**Requirements**:
- Task specification is clear and complete
- Session has been created for the task
- You are ready to begin implementation

### IN-PROGRESS → IN-REVIEW
**When**: Implementation complete, ready for review
**Trigger**: Creating pull request
**Command**: minsky tasks status.set <taskId> [--status <value>] [--repo <value>] [--workspace <value>] [--session <value>] [--backend <value>] [--json] with status "IN-REVIEW"
**Requirements**:
- All requirements implemented
- Tests written and passing
- PR created and properly described

### IN-REVIEW → DONE
**When**: Pull request approved and merged
**Trigger**: Successful PR merge
**Command**: Usually automatic, but can manually set with minsky tasks status.set <taskId> [--status <value>] [--repo <value>] [--workspace <value>] [--session <value>] [--backend <value>] [--json]
**Requirements**:
- PR has been reviewed and approved
- All tests passing in CI
- PR successfully merged to main branch

### Any Status → BLOCKED
**When**: Unable to proceed due to external factors
**Trigger**: Encountering blocking dependency or issue
**Command**: minsky tasks status.set <taskId> [--status <value>] [--repo <value>] [--workspace <value>] [--session <value>] [--backend <value>] [--json] with status "BLOCKED"
**Requirements**:
- Document the blocking factor
- Identify resolution path if possible
- Notify relevant stakeholders

### BLOCKED → IN-PROGRESS
**When**: Blocking issue resolved
**Trigger**: External dependency resolved or issue fixed
**Command**: minsky tasks status.set <taskId> [--status <value>] [--repo <value>] [--workspace <value>] [--session <value>] [--backend <value>] [--json] with status "IN-PROGRESS"
**Requirements**:
- Blocking factor has been resolved
- Implementation can proceed normally

### Any Status → CLOSED
**When**: Task no longer needed or cancelled
**Trigger**: Change in requirements or priorities
**Command**: minsky tasks status.set <taskId> [--status <value>] [--repo <value>] [--workspace <value>] [--session <value>] [--backend <value>] [--json] with status "CLOSED"
**Requirements**:
- Clear reason for closure
- Any partial work properly documented

## Status Verification Protocol

### Before Starting Work

1. **Check current status**: minsky tasks status.get <taskId> [--repo <value>] [--workspace <value>] [--session <value>] [--backend <value>] [--json]
2. **Verify status is TODO or IN-PROGRESS**
3. **If not appropriate, investigate and resolve**
4. **Update to IN-PROGRESS when beginning**: minsky tasks status.set <taskId> [--status <value>] [--repo <value>] [--workspace <value>] [--session <value>] [--backend <value>] [--json]

### During Implementation

1. **Monitor status regularly**: minsky tasks status.get <taskId> [--repo <value>] [--workspace <value>] [--session <value>] [--backend <value>] [--json]
2. **Keep status aligned with actual progress**
3. **Update to BLOCKED if issues arise**: minsky tasks status.set <taskId> [--status <value>] [--repo <value>] [--workspace <value>] [--session <value>] [--backend <value>] [--json]
4. **Document any status changes and reasons**

### Before PR Creation

1. **Verify implementation is complete**
2. **Update to IN-REVIEW**: minsky tasks status.set <taskId> [--status <value>] [--repo <value>] [--workspace <value>] [--session <value>] [--backend <value>] [--json]
3. **Ensure status change is successful**
4. **Proceed with PR creation only after status update**

### After PR Merge

1. **Verify status shows DONE**: minsky tasks status.get <taskId> [--repo <value>] [--workspace <value>] [--session <value>] [--backend <value>] [--json]
2. **If not automatic, manually update**: minsky tasks status.set <taskId> [--status <value>] [--repo <value>] [--workspace <value>] [--session <value>] [--backend <value>] [--json]
3. **Confirm task is properly completed**

## Status Query Patterns

### Check Single Task
```bash
minsky tasks status.get <taskId> [--repo <value>] [--workspace <value>] [--session <value>] [--backend <value>] [--json]
```

### List Tasks by Status
```bash
# Find tasks ready to work on
minsky tasks list [--all] [--status <value>] [--filter <value>] [--limit <value>] [--repo <value>] [--workspace <value>] [--session <value>] [--backend <value>] [--json]

# Find tasks in progress
minsky tasks list [--all] [--status <value>] [--filter <value>] [--limit <value>] [--repo <value>] [--workspace <value>] [--session <value>] [--backend <value>] [--json]

# Find blocked tasks
minsky tasks list [--all] [--status <value>] [--filter <value>] [--limit <value>] [--repo <value>] [--workspace <value>] [--session <value>] [--backend <value>] [--json]
```

### Update Task Status
```bash
# Start implementation
minsky tasks status.set <taskId> [--status <value>] [--repo <value>] [--workspace <value>] [--session <value>] [--backend <value>] [--json]

# Mark for review
minsky tasks status.set <taskId> [--status <value>] [--repo <value>] [--workspace <value>] [--session <value>] [--backend <value>] [--json]

# Mark as blocked with reason
minsky tasks status.set <taskId> [--status <value>] [--repo <value>] [--workspace <value>] [--session <value>] [--backend <value>] [--json]
```

## Status Automation

Some status transitions can be automated:

- **Session creation** can auto-update TO IN-PROGRESS
- **PR creation** can auto-update to IN-REVIEW
- **PR merge** can auto-update to DONE

Always verify automated updates occurred correctly.

## Common Status Issues

### Issue: Status stuck in wrong state
**Solution**: Use minsky tasks status.set <taskId> [--status <value>] [--repo <value>] [--workspace <value>] [--session <value>] [--backend <value>] [--json] to correct it, then investigate why it got wrong

### Issue: Status not updating after PR merge
**Solution**: Manually update with minsky tasks status.set <taskId> [--status <value>] [--repo <value>] [--workspace <value>] [--session <value>] [--backend <value>] [--json], check automation settings

### Issue: Multiple people working on same task
**Solution**: Check status before starting work, coordinate with team on assignment

### Issue: Unclear when to update status
**Solution**: Follow the transition rules above, when in doubt check current status and update accordingly

## Integration with Workflow

Status management integrates with:

- **task-implementation-workflow**: Status updates at each phase
- **minsky-session-management**: Status changes during session operations
- **pr-preparation-workflow**: Status transition during PR creation
- **minsky-workflow-orchestrator**: Overall workflow context

## Verification Checklist

Before considering status management complete:

- [ ] Current status checked and verified
- [ ] Status appropriate for planned action
- [ ] Status updated when starting new phase
- [ ] Status changes documented with reasons
- [ ] Status transitions follow defined rules
- [ ] Final status reflects actual completion state