---
name: Task Implementation Workflow
description: Comprehensive workflow for implementing tasks from creation to completion
tags:
  - task
  - implementation
  - workflow
  - status
---
# Task Implementation Workflow

This rule provides a comprehensive workflow for implementing tasks from start to completion, including all required status updates and checkpoints.

## Prerequisites

Before starting any task implementation, ensure:

1. **Task exists and is properly specified** - Use <function_calls>
<invoke name="mcp_minsky-server_tasks_get">
<parameter name="taskId">required taskId value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="workspace">optional workspace value</parameter>
<parameter name="session">optional session value</parameter>
<parameter name="backend">optional backend value</parameter>
<parameter name="json">optional json value</parameter>
</invoke>
</function_calls> to verify
2. **Task status is appropriate** - Check with <function_calls>
<invoke name="mcp_minsky-server_tasks_status_get">
<parameter name="taskId">required taskId value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="workspace">optional workspace value</parameter>
<parameter name="session">optional session value</parameter>
<parameter name="backend">optional backend value</parameter>
<parameter name="json">optional json value</parameter>
</invoke>
</function_calls> 
3. **You understand the requirements** - Review task specification thoroughly

## Implementation Workflow

### Phase 1: Task Preparation

1. **Verify Task Status**
   - Check current status: <function_calls>
<invoke name="mcp_minsky-server_tasks_status_get">
<parameter name="taskId">required taskId value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="workspace">optional workspace value</parameter>
<parameter name="session">optional session value</parameter>
<parameter name="backend">optional backend value</parameter>
<parameter name="json">optional json value</parameter>
</invoke>
</function_calls>
   - Ensure task is in appropriate state for implementation
   - If not in correct state, update: <function_calls>
<invoke name="mcp_minsky-server_tasks_status_set">
<parameter name="taskId">required taskId value</parameter>
<parameter name="status">optional status value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="workspace">optional workspace value</parameter>
<parameter name="session">optional session value</parameter>
<parameter name="backend">optional backend value</parameter>
<parameter name="json">optional json value</parameter>
</invoke>
</function_calls>

2. **Create or Resume Session**
   - Check existing sessions: <function_calls>
<invoke name="mcp_minsky-server_session_list">
<parameter name="repo">optional repo value</parameter>
<parameter name="json">optional json value</parameter>
</invoke>
</function_calls>
   - Create new session: <function_calls>
<invoke name="mcp_minsky-server_session_start">
<parameter name="name">optional name value</parameter>
<parameter name="task">optional task value</parameter>
<parameter name="description">optional description value</parameter>
<parameter name="branch">optional branch value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="session">optional session value</parameter>
<parameter name="json">optional json value</parameter>
<parameter name="quiet">optional quiet value</parameter>
<parameter name="noStatusUpdate">optional noStatusUpdate value</parameter>
<parameter name="skipInstall">optional skipInstall value</parameter>
<parameter name="packageManager">optional packageManager value</parameter>
</invoke>
</function_calls>
   - Get session directory: <function_calls>
<invoke name="mcp_minsky-server_session_dir">
<parameter name="name">optional name value</parameter>
<parameter name="task">optional task value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="json">optional json value</parameter>
</invoke>
</function_calls>

3. **Set Task Status to IN-PROGRESS**
   - Update status: <function_calls>
<invoke name="mcp_minsky-server_tasks_status_set">
<parameter name="taskId">required taskId value</parameter>
<parameter name="status">optional status value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="workspace">optional workspace value</parameter>
<parameter name="session">optional session value</parameter>
<parameter name="backend">optional backend value</parameter>
<parameter name="json">optional json value</parameter>
</invoke>
</function_calls> with status "IN-PROGRESS"
   - This signals that active work has begun

### Phase 2: Implementation

1. **Navigate to Session Workspace**
   - Use session directory from previous step
   - Verify you're in the correct workspace
   - All implementation must happen in session workspace

2. **Implement Requirements**
   - Follow task specification exactly
   - Write comprehensive tests for new functionality
   - Ensure all existing tests continue to pass
   - Document any design decisions or trade-offs

3. **Continuous Verification**
   - Run tests frequently during development
   - Check that requirements are being met
   - Address any issues immediately

### Phase 3: Completion Verification

1. **Final Testing**
   - Run complete test suite
   - Verify all new functionality works as specified
   - Ensure no regressions have been introduced

2. **Requirements Review**
   - Review original task specification
   - Confirm all requirements have been addressed
   - Check for any overlooked aspects

3. **Code Quality Check**
   - Review code for clarity and maintainability
   - Ensure proper error handling
   - Verify documentation is complete

### Phase 4: PR Preparation

1. **Update Task Status to IN-REVIEW**
   - Set status: <function_calls>
<invoke name="mcp_minsky-server_tasks_status_set">
<parameter name="taskId">required taskId value</parameter>
<parameter name="status">optional status value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="workspace">optional workspace value</parameter>
<parameter name="session">optional session value</parameter>
<parameter name="backend">optional backend value</parameter>
<parameter name="json">optional json value</parameter>
</invoke>
</function_calls> with status "IN-REVIEW"
   - This indicates implementation is complete and ready for review

2. **Create Pull Request**
   - Generate PR using session PR command: <function_calls>
<invoke name="mcp_minsky-server_session_pr_create">
<parameter name="title">optional title value</parameter>
<parameter name="body">optional body value</parameter>
<parameter name="bodyPath">optional bodyPath value</parameter>
<parameter name="name">optional name value</parameter>
<parameter name="task">optional task value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="noStatusUpdate">optional noStatusUpdate value</parameter>
<parameter name="debug">optional debug value</parameter>
<parameter name="skipUpdate">optional skipUpdate value</parameter>
<parameter name="autoResolveDeleteConflicts">optional autoResolveDeleteConflicts value</parameter>
<parameter name="skipConflictCheck">optional skipConflictCheck value</parameter>
</invoke>
</function_calls>
   - Ensure PR description follows guidelines
   - Include task ID in PR title and description

3. **Final Verification**
   - Review PR content thoroughly
   - Ensure all changes are included
   - Verify task status is correctly updated

## Status Transition Protocol

| Current Status | Action Required | Command | Next Status |
|----------------|-----------------|---------|-------------|
| TODO | Start implementation | <function_calls>
<invoke name="mcp_minsky-server_tasks_status_set">
<parameter name="taskId">required taskId value</parameter>
<parameter name="status">optional status value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="workspace">optional workspace value</parameter>
<parameter name="session">optional session value</parameter>
<parameter name="backend">optional backend value</parameter>
<parameter name="json">optional json value</parameter>
</invoke>
</function_calls> | IN-PROGRESS |
| IN-PROGRESS | Complete implementation | <function_calls>
<invoke name="mcp_minsky-server_tasks_status_set">
<parameter name="taskId">required taskId value</parameter>
<parameter name="status">optional status value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="workspace">optional workspace value</parameter>
<parameter name="session">optional session value</parameter>
<parameter name="backend">optional backend value</parameter>
<parameter name="json">optional json value</parameter>
</invoke>
</function_calls> | IN-REVIEW |
| IN-REVIEW | Merge PR | Approve PR | DONE |
| BLOCKED | Resolve blocking issue | <function_calls>
<invoke name="mcp_minsky-server_tasks_status_set">
<parameter name="taskId">required taskId value</parameter>
<parameter name="status">optional status value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="workspace">optional workspace value</parameter>
<parameter name="session">optional session value</parameter>
<parameter name="backend">optional backend value</parameter>
<parameter name="json">optional json value</parameter>
</invoke>
</function_calls> | IN-PROGRESS |

## Quality Gates

Before moving to the next phase, ensure:

### Before IN-PROGRESS → IN-REVIEW
- [ ] All requirements implemented
- [ ] All tests passing
- [ ] Code quality acceptable
- [ ] Documentation complete

### Before IN-REVIEW → DONE  
- [ ] PR created and properly described
- [ ] All feedback addressed
- [ ] Changes approved by reviewer
- [ ] PR merged successfully

## Common Issues and Solutions

### Implementation Issues

**Problem**: Requirements unclear or ambiguous
**Solution**: Update task specification before continuing, don't guess at requirements

**Problem**: Tests failing after changes
**Solution**: Fix tests immediately, don't accumulate technical debt

**Problem**: Scope creep during implementation
**Solution**: Create separate tasks for additional work, stay focused on current task

### Status Management Issues

**Problem**: Forgot to update task status
**Solution**: Check status regularly with <function_calls>
<invoke name="mcp_minsky-server_tasks_status_get">
<parameter name="taskId">required taskId value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="workspace">optional workspace value</parameter>
<parameter name="session">optional session value</parameter>
<parameter name="backend">optional backend value</parameter>
<parameter name="json">optional json value</parameter>
</invoke>
</function_calls>, update as needed

**Problem**: Task status doesn't match actual progress
**Solution**: Align status with actual state immediately using <function_calls>
<invoke name="mcp_minsky-server_tasks_status_set">
<parameter name="taskId">required taskId value</parameter>
<parameter name="status">optional status value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="workspace">optional workspace value</parameter>
<parameter name="session">optional session value</parameter>
<parameter name="backend">optional backend value</parameter>
<parameter name="json">optional json value</parameter>
</invoke>
</function_calls>

### Session Management Issues

**Problem**: Working in wrong directory
**Solution**: Always verify you're in session workspace before making changes

**Problem**: Changes not appearing in session
**Solution**: Ensure you created session properly and are in correct directory

## Integration with Other Rules

This workflow integrates with:

- **task-status-protocol**: For detailed status management procedures
- **session-first-workflow**: For session creation and navigation requirements
- **pr-preparation-workflow**: For PR creation and submission details
- **minsky-workflow-orchestrator**: For overall workflow context
- **tests**: For testing requirements and procedures

## Verification Checklist

Use this checklist to ensure proper workflow adherence:

- [ ] Task status checked and appropriate for implementation
- [ ] Session created and verified
- [ ] Task status updated to IN-PROGRESS at start
- [ ] All implementation done in session workspace  
- [ ] Requirements thoroughly implemented
- [ ] Tests written and passing
- [ ] Task status updated to IN-REVIEW when complete
- [ ] PR created with proper description
- [ ] Task linked to PR appropriately