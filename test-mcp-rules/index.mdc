---
name: Rules Index
description: Index of all available rules in the workspace
tags:
  - index
  - navigation
  - overview
---
# Minsky Rules Index

This document categorizes all available rules in the Minsky ecosystem, describes their purpose, and identifies which rules apply in different usage scenarios.

## Core Workflow Rules

These rules define the fundamental workflow and processes for using Minsky:

| Rule | Description | When to Apply |
|------|-------------|--------------|
| **minsky-workflow** | Defines the complete workflow for working with tasks and sessions. Includes task selection, status management, implementation process, and PR preparation | **Always required**. Applies to any interaction with tasks or sessions |
| **session-first-workflow** | Enforces that all implementation work happens in dedicated sessions | During all implementation tasks, ensuring code isolation |
| **creating-tasks** | Guidelines for creating well-structured task specifications | When defining new work items or requirements |
| **changelog** | Requirements for maintaining a structured changelog | When completing tasks that modify code |

## Code Organization Rules

These rules ensure consistent organization and structure in the codebase:

| Rule | Description | When to Apply |
|------|-------------|--------------|
| **module-organization** | Enforces separation between business logic and CLI concerns | When designing new modules or features |
| **command-organization** | Standards for structuring CLI commands | When creating new commands or modifying existing ones |
| **domain-oriented-modules** | Promotes organizing code by domain concepts | When designing module structure or refactoring |
| **file-size** | Guidelines for avoiding overly large files | When creating new files or growing existing ones |
| **constants-management** | Best practices for organizing constants | When adding new constants or refactoring existing ones |

## Quality Assurance Rules

These rules enforce quality and robustness in code:

| Rule | Description | When to Apply |
|------|-------------|--------------|
| **robust-error-handling** | Standards for comprehensive error handling | When working with operations that might fail |
| **dont-ignore-errors** | Enforces addressing all errors before considering tasks complete | During implementation and review of any code |
| **tests** | Requirements for test coverage and when to run tests | When modifying code that requires testing |
| **testable-design** | Guidelines for creating easily testable code | When designing new features or components |
| **designing-tests** | Principles for effective test design | When writing or modifying tests |
| **test-expectations** | Best practices for managing test expectations | When updating code that changes expected behavior |
| **test-driven-bugfix** | Process for fixing bugs using test-driven development | When addressing bugs or regressions |
| **cli-testing** | Approaches for testing command-line interfaces | When testing CLI commands or features |
| **testing-session-repo-changes** | Procedures for testing changes in session repositories | When modifying code that affects session repositories |

## Documentation & Communication Rules

These rules ensure clear communication about changes and design:

| Rule | Description | When to Apply |
|------|-------------|--------------|
| **pr-description-guidelines** | Format and content requirements for PR descriptions | When preparing pull requests |
| **rule-creation-guidelines** | Standards for creating or updating rule files | When modifying existing rules or creating new ones |
| **json-parsing** | Best practices for working with JSON output | When implementing commands that output JSON |

## Tooling & Environment Rules

These rules standardize the development environment:

| Rule | Description | When to Apply |
|------|-------------|--------------|
| **bun_over_node** | Mandates using Bun instead of Node.js | For all JavaScript/TypeScript execution and package management |
| **template-literals** | Preference for template literals over string concatenation | When constructing strings with variable content |
| **user-preferences** | Records user preferences from interactions | When implementing features that should respect user preferences |

## Command Reference Quick Guide

### Task Management Commands
- **List tasks**: <function_calls>
<invoke name="mcp_minsky-server_tasks_list">
<parameter name="all">optional all value</parameter>
<parameter name="status">optional status value</parameter>
<parameter name="filter">optional filter value</parameter>
<parameter name="limit">optional limit value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="workspace">optional workspace value</parameter>
<parameter name="session">optional session value</parameter>
<parameter name="backend">optional backend value</parameter>
<parameter name="json">optional json value</parameter>
</invoke>
</function_calls> - query available tasks
- **Get task details**: <function_calls>
<invoke name="mcp_minsky-server_tasks_get">
<parameter name="taskId">required taskId value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="workspace">optional workspace value</parameter>
<parameter name="session">optional session value</parameter>
<parameter name="backend">optional backend value</parameter>
<parameter name="json">optional json value</parameter>
</invoke>
</function_calls> - retrieve task information
- **Check status**: <function_calls>
<invoke name="mcp_minsky-server_tasks_status_get">
<parameter name="taskId">required taskId value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="workspace">optional workspace value</parameter>
<parameter name="session">optional session value</parameter>
<parameter name="backend">optional backend value</parameter>
<parameter name="json">optional json value</parameter>
</invoke>
</function_calls> - check task status
- **Update status**: <function_calls>
<invoke name="mcp_minsky-server_tasks_status_set">
<parameter name="taskId">required taskId value</parameter>
<parameter name="status">optional status value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="workspace">optional workspace value</parameter>
<parameter name="session">optional session value</parameter>
<parameter name="backend">optional backend value</parameter>
<parameter name="json">optional json value</parameter>
</invoke>
</function_calls> - update task status

### Session Management Commands  
- **List sessions**: <function_calls>
<invoke name="mcp_minsky-server_session_list">
<parameter name="repo">optional repo value</parameter>
<parameter name="json">optional json value</parameter>
</invoke>
</function_calls> - view all sessions
- **Start session**: <function_calls>
<invoke name="mcp_minsky-server_session_start">
<parameter name="name">optional name value</parameter>
<parameter name="task">optional task value</parameter>
<parameter name="description">optional description value</parameter>
<parameter name="branch">optional branch value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="session">optional session value</parameter>
<parameter name="json">optional json value</parameter>
<parameter name="quiet">optional quiet value</parameter>
<parameter name="noStatusUpdate">optional noStatusUpdate value</parameter>
<parameter name="skipInstall">optional skipInstall value</parameter>
<parameter name="packageManager">optional packageManager value</parameter>
</invoke>
</function_calls> - create new session
- **Get session info**: <function_calls>
<invoke name="mcp_minsky-server_session_get">
<parameter name="name">optional name value</parameter>
<parameter name="task">optional task value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="json">optional json value</parameter>
</invoke>
</function_calls> - retrieve session details
- **Get session directory**: <function_calls>
<invoke name="mcp_minsky-server_session_dir">
<parameter name="name">optional name value</parameter>
<parameter name="task">optional task value</parameter>
<parameter name="repo">optional repo value</parameter>
<parameter name="json">optional json value</parameter>
</invoke>
</function_calls> - get session path

mcp,hybrid



## Usage Scenarios & Applicable Rules

### For New Contributors

When a developer first joins the project, they should focus on:

1. **minsky-workflow** - Understand the overall process
2. **session-first-workflow** - Learn the critical session creation requirements  
3. **creating-tasks** - Know how to document new work
4. **module-organization** & **command-organization** - Understand the codebase structure

### When Implementing Features

During feature implementation, the most relevant rules are:

1. **minsky-workflow** & **session-first-workflow** - Follow the proper process
2. **domain-oriented-modules** & **module-organization** - Structure code correctly
3. **robust-error-handling** & **dont-ignore-errors** - Ensure resilient code
4. **testable-design** & **tests** - Create properly tested features
5. **changelog** - Document the changes

### When Fixing Bugs

For bug fixes, prioritize:

1. **test-driven-bugfix** - Use proper bug-fixing methodology
2. **dont-ignore-errors** - Ensure all errors are handled
3. **test-expectations** - Update tests appropriately
4. **changelog** - Document the fix

### When Reviewing Code

Code reviewers should focus on:

1. **pr-description-guidelines** - Ensure proper documentation
2. **robust-error-handling** & **dont-ignore-errors** - Verify error handling
3. **domain-oriented-modules** & **module-organization** - Check structural alignment
4. **testable-design** & **tests** - Validate test coverage
5. **changelog** - Confirm changes are documented

### When Creating New Rules

When developing new Minsky rules:

1. **rule-creation-guidelines** - Follow the standards for rule creation

### When Setting Up New Projects

For initializing new projects with Minsky:

1. **minsky-workflow** - Establish the core workflow
2. **session-first-workflow** - Enforce proper session usage
3. **creating-tasks** - Enable structured task creation
4. **changelog** - Set up change tracking
5. **module-organization** & **command-organization** - If developing with the same architecture

## Rule Relationships

Some rules are closely related and often used together:

- **module-organization** and **domain-oriented-modules** complement each other for code structuring
- **testable-design**, **designing-tests**, and **tests** form a comprehensive testing approach
- **minsky-workflow** and **session-first-workflow** together define the complete development process
- **robust-error-handling** and **dont-ignore-errors** ensure comprehensive error management
- **pr-description-guidelines** and **changelog** both contribute to documentation of changes

This index serves as a guide to help you understand which rules are relevant to different aspects of working with Minsky and how they interact with each other.