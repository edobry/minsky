bun test v1.2.15 (df017990)

syntax-test.test.ts:
(pass) Session Approve > should approve

session-approve.test.ts:
(pass) Session Approve > should approve session

test.test.ts:

test-verification/quoting.test.ts:
(pass) Rule description quoting fix > createRule should use double quotes for descriptions with special characters [2.92ms]
(pass) Rule description quoting fix > updateRule should use double quotes for descriptions with special characters [3.47ms]
(pass) Rule description quoting fix > createRule should not add quotes to simple descriptions [0.58ms]

codemods/session-approve-log-mock-fixer.test.ts:
(pass) Session Approve Log Mock Fixer > fixLogMockInFile > should skip non-test files for safety [7.23ms]
(pass) Session Approve Log Mock Fixer > fixLogMockInFile > should skip files that already have log.cli mock [1.32ms]
(pass) Session Approve Log Mock Fixer > fixLogMockInFile > should add cli method to existing log mock [6.98ms]
(pass) Session Approve Log Mock Fixer > fixLogMockInFile > should add complete log mock for session approve tests without existing mock [2.82ms]
(pass) Session Approve Log Mock Fixer > fixLogMockInFile > should not modify files that don't need log mocks [0.30ms]
(pass) Session Approve Log Mock Fixer > fixSessionApproveLogMocks > should process multiple files and return results [0.20ms]
‚ùå Error processing /nonexistent/file.test.ts: 331 | (function (errors) {
332 |     class BaseError extends Error {
333 |         constructor(message, node) {
334 |             const nodeLocation = node && getPrettyNodeLocation(node);
335 |             const messageWithLocation = nodeLocation ? `${message}\n\n${nodeLocation}` : message;
336 |             super(messageWithLocation);
                  ^
error: File not found: /nonexistent/file.test.ts
 path: "/nonexistent/file.test.ts",
 code: "ENOENT"

      at new BaseError (/Users/edobry/.local/state/minsky/sessions/task176/node_modules/@ts-morph/common/dist/ts-morph-common.js:336:13)
      at new PathNotFoundError (/Users/edobry/.local/state/minsky/sessions/task176/node_modules/@ts-morph/common/dist/ts-morph-common.js:368:13)
      at new FileNotFoundError (/Users/edobry/.local/state/minsky/sessions/task176/node_modules/@ts-morph/common/dist/ts-morph-common.js:382:13)
      at addSourceFileAtPath (/Users/edobry/.local/state/minsky/sessions/task176/node_modules/ts-morph/dist/ts-morph.js:19291:19)
      at fixSessionApproveLogMocks (/Users/edobry/.local/state/minsky/sessions/task176/codemods/session-approve-log-mock-fixer.ts:227:34)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/codemods/session-approve-log-mock-fixer.test.ts:121:23)

(pass) Session Approve Log Mock Fixer > fixSessionApproveLogMocks > should handle file processing errors gracefully [2.62ms]
(pass) Session Approve Log Mock Fixer > boundary validation tests > should never modify production code files [0.34ms]
(pass) Session Approve Log Mock Fixer > boundary validation tests > should preserve existing complete log mocks without changes [0.33ms]
(pass) Session Approve Log Mock Fixer > boundary validation tests > should maintain valid TypeScript syntax after modifications [1.44ms]

codemods/fix-import-extensions.test.ts:
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 3
Export statements fixed: 0
Total transformations: 3
Processing time: 11ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753727787652-1hy2al2qe/src/test.ts: 3 imports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Unit Tests - Individual Transformations > should remove .js extension from local imports [11.55ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 2
Export statements fixed: 0
Total transformations: 2
Processing time: 2ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753727787668-e44wd5vqj/src/test.ts: 2 imports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Unit Tests - Individual Transformations > should remove .ts extension from local imports [2.31ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 0
Export statements fixed: 3
Total transformations: 3
Processing time: 2ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753727787672-smik0446u/src/test.ts: 3 exports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Unit Tests - Individual Transformations > should remove extensions from export statements [2.40ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 2ms
Success rate: 100.0%

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Unit Tests - Individual Transformations > should preserve external npm package imports [1.66ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 1ms
Success rate: 100.0%

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Unit Tests - Individual Transformations > should preserve non-.js/.ts extensions [1.40ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 2
Export statements fixed: 0
Total transformations: 2
Processing time: 2ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753727787681-piayap7pg/src/test.ts: 2 imports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Unit Tests - Individual Transformations > should handle mixed import types correctly [2.48ms]
üöÄ Starting import extension fixer...
üìÅ Found 3 files to process
üíæ Saving changes...
‚úÖ Saved 3 files

üìä Import Extension Fixer Report
================================
Files processed: 3
Files modified: 3
Import statements fixed: 2
Export statements fixed: 1
Total transformations: 3
Processing time: 11ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753727787684-0y3wdx0r7/src/app.ts: 1 imports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753727787684-0y3wdx0r7/src/components/Button.ts: 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753727787684-0y3wdx0r7/src/utils/index.ts: 1 imports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Integration Tests - Full Codemod Execution > should process multiple files correctly [11.51ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 2
Export statements fixed: 1
Total transformations: 3
Processing time: 2ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753727787697-5y3d7hveq/src/test.ts: 2 imports, 1 exports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Integration Tests - Full Codemod Execution > should generate accurate metrics [2.28ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 1
Export statements fixed: 1
Total transformations: 2
Processing time: 1ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753727787701-s5fejqlee/src/test.ts: 1 imports, 1 exports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Integration Tests - Full Codemod Execution > should provide detailed results per file [1.42ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 1ms
Success rate: 100.0%

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Integration Tests - Full Codemod Execution > should handle files with no changes [1.14ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 1ms
Success rate: 100.0%

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Edge Cases and Error Handling > should handle empty files [1.11ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 1ms
Success rate: 100.0%

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Edge Cases and Error Handling > should handle files with only comments [1.39ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 1ms
Success rate: 100.0%

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Edge Cases and Error Handling > should handle imports without extensions [1.19ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 3
Export statements fixed: 3
Total transformations: 6
Processing time: 3ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753727787713-jco94xtyv/src/complex.ts: 3 imports, 3 exports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Edge Cases and Error Handling > should handle complex import/export patterns [3.86ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 1ms
Success rate: 100.0%

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Edge Cases and Error Handling > should handle exports without module specifiers [1.48ms]
üöÄ Starting import extension fixer...
üìÅ Found 0 files to process
üíæ Saving changes...
‚úÖ Saved 0 files

üìä Import Extension Fixer Report
================================
Files processed: 0
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 0ms
Success rate: 100.0%

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Edge Cases and Error Handling > should exclude test files from processing [0.71ms]
üöÄ Starting import extension fixer...
üìÅ Found 0 files to process
üíæ Saving changes...
‚úÖ Saved 0 files

üìä Import Extension Fixer Report
================================
Files processed: 0
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 1ms
Success rate: 100.0%

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Edge Cases and Error Handling > should exclude spec files from processing [0.95ms]
üöÄ Starting import extension fixer...
üìÅ Found 10 files to process
üíæ Saving changes...
‚úÖ Saved 10 files

üìä Import Extension Fixer Report
================================
Files processed: 10
Files modified: 10
Import statements fixed: 10
Export statements fixed: 10
Total transformations: 20
Processing time: 5ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753727787725-svibgeang/src/file0.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753727787725-svibgeang/src/file1.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753727787725-svibgeang/src/file2.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753727787725-svibgeang/src/file3.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753727787725-svibgeang/src/file4.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753727787725-svibgeang/src/file5.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753727787725-svibgeang/src/file6.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753727787725-svibgeang/src/file7.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753727787725-svibgeang/src/file8.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753727787725-svibgeang/src/file9.ts: 1 imports, 1 exports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Performance Benchmarks > should process files efficiently [5.94ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 2
Export statements fixed: 0
Total transformations: 2
Processing time: 3ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753727787733-mxlo0buvg/src/test.ts: 2 imports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Performance Benchmarks > should maintain high success rate [3.26ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 3
Export statements fixed: 0
Total transformations: 3
Processing time: 1ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753727787738-paxy8pr2h/src/typescript.ts: 3 imports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > TypeScript Support > should handle TypeScript-specific imports [1.97ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 2
Export statements fixed: 0
Total transformations: 2
Processing time: 1ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753727787741-2p5mhqdgr/src/component.tsx: 2 imports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > TypeScript Support > should handle JSX/TSX files [1.53ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 2
Export statements fixed: 0
Total transformations: 2
Processing time: 1ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753727787744-dpxliid3t/src/bun-example.ts: 2 imports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Real-world Scenarios > should handle Bun-style imports correctly [1.76ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 3
Export statements fixed: 0
Total transformations: 3
Processing time: 1ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753727787747-dgx5r6xcj/src/nested/deep/component.ts: 3 imports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Real-world Scenarios > should handle nested directory imports [1.85ms]

codemods/bun-test-mocking-consistency-fixer.test.ts:

# Unhandled error between tests
-------------------------------
1 | (function (entry, fetcher)
              ^
SyntaxError: Export named 'fixBunTestMockingInFiles' not found in module '/Users/edobry/.local/state/minsky/sessions/task176/codemods/bun-test-mocking-consistency-fixer.ts'.
      at loadAndEvaluateModule (1:11)
-------------------------------


codemods/fix-indentation.test.ts:
(pass) ESLint auto-fix codemod runs ONLY the correct ESLint command
(pass) ESLint auto-fix uses only safe ESLint flags [0.07ms]
(pass) ESLint auto-fix handles error cases properly
(pass) ESLint auto-fix uses project configuration
(pass) ESLint auto-fix does NOT modify files directly [0.02ms]
(pass) ESLint auto-fix provides appropriate logging
(pass) ESLint auto-fix has proper imports and dependencies [0.06ms]

codemods/comprehensive-as-unknown-fixer.test.ts:
(pass) ComprehensiveAsUnknownFixer > Session Object Property Access Patterns > should remove sessionProvider cast with non-null assertion [3.72ms]
(pass) ComprehensiveAsUnknownFixer > Session Object Property Access Patterns > should remove sessionRecord cast with non-null assertion [1.45ms]
(pass) ComprehensiveAsUnknownFixer > Session Object Property Access Patterns > should remove sessionInfo cast with non-null assertion [1.22ms]
(pass) ComprehensiveAsUnknownFixer > Dynamic Import Patterns > should fix relative import patterns [0.54ms]
(pass) ComprehensiveAsUnknownFixer > Dynamic Import Patterns > should NOT fix absolute import patterns (keep them safe) [0.02ms]
(pass) ComprehensiveAsUnknownFixer > Config Object Patterns > should remove config object casts [0.89ms]
(pass) ComprehensiveAsUnknownFixer > Config Object Patterns > should remove options object casts [0.50ms]
(pass) ComprehensiveAsUnknownFixer > Error Handling Patterns > should remove error object casts [1.02ms]
(pass) ComprehensiveAsUnknownFixer > Provider/Service Patterns > should remove provider/service/backend casts [1.12ms]
(pass) ComprehensiveAsUnknownFixer > Redundant Cast Patterns > should remove redundant double casts
(pass) ComprehensiveAsUnknownFixer > Promise Return Patterns > should remove unnecessary Promise casts [1.07ms]
(pass) ComprehensiveAsUnknownFixer > Simple Variable Patterns > should remove simple variable casts [1.58ms]
(pass) ComprehensiveAsUnknownFixer > Edge Cases and Safety > should NOT transform complex expressions [0.93ms]
(pass) ComprehensiveAsUnknownFixer > Edge Cases and Safety > should handle mixed patterns in single file [1.82ms]
(pass) ComprehensiveAsUnknownFixer > Real Codebase Scenarios > should handle actual workspace.ts patterns [2.31ms]
(pass) ComprehensiveAsUnknownFixer > Real Codebase Scenarios > should handle actual repository.ts dynamic import patterns [1.07ms]

tests/verification-protocol.test.ts:
(pass) Verification Protocol > should prevent claiming resources don't exist without verification [0.02ms]
(pass) Verification Protocol > should document the self-improvement rule verification failure [2.29ms]
(pass) Verification Protocol > should enforce verification checklist for all negative existence claims [0.07ms]

src/types/project.test.ts:
(pass) ProjectContext > validateRepositoryPath > returns false for clearly invalid paths
(pass) ProjectContext > validateRepositoryPath > returns true for current working directory [0.12ms]
(pass) ProjectContext > createProjectContext > creates a ProjectContext for current working directory [0.06ms]
{"level":"error","message":"Invalid repository path: /definitely/does/not/exist/path/12345","timestamp":"2025-07-28T18:36:27.783Z"}
(pass) ProjectContext > createProjectContext > throws an error for clearly invalid path [0.69ms]
(pass) ProjectContext > createProjectContextFromCwd > creates a ProjectContext from current working directory [0.03ms]

src/utils/task-workspace-commit.test.ts:

# Unhandled error between tests
-------------------------------
error: Cannot find module '../task-workspace-commit' from '/Users/edobry/.local/state/minsky/sessions/task176/src/utils/task-workspace-commit.test.ts'
-------------------------------


src/utils/auto-commit.test.ts:
(pass) autoCommitTaskChanges > should be a function
(pass) autoCommitTaskChanges > should accept workspacePath and message parameters [0.02ms]
(pass) autoCommitTaskChanges > should return a Promise<boolean> [3.88ms]

src/utils/semantic-error-classifier-integration.test.ts:

# Unhandled error between tests
-------------------------------
error: Cannot find module '../semantic-error-classifier' from '/Users/edobry/.local/state/minsky/sessions/task176/src/utils/semantic-error-classifier-integration.test.ts'
-------------------------------


src/utils/package-manager.test.ts:
(pass) Package Manager Utilities > detectPackageManager > detects bun from bun.lock
(pass) Package Manager Utilities > detectPackageManager > detects yarn from yarn.lock [0.02ms]
(pass) Package Manager Utilities > detectPackageManager > detects pnpm from pnpm-lock.yaml
(pass) Package Manager Utilities > detectPackageManager > detects npm from package-lock.json [0.02ms]
(pass) Package Manager Utilities > detectPackageManager > defaults to npm if only package.json exists [0.02ms]
(pass) Package Manager Utilities > detectPackageManager > returns undefined if no package files exist [0.03ms]
(pass) Package Manager Utilities > getInstallCommand > returns correct command for bun [0.01ms]
(pass) Package Manager Utilities > getInstallCommand > returns correct command for npm
(pass) Package Manager Utilities > getInstallCommand > returns correct command for yarn
(pass) Package Manager Utilities > getInstallCommand > returns correct command for pnpm
(pass) Package Manager Utilities > getInstallCommand > returns undefined for unknown package manager
(pass) Package Manager Utilities > installDependencies > successfully installs dependencies [0.10ms]
(pass) Package Manager Utilities > installDependencies > uses provided package manager if specified [0.04ms]
(pass) Package Manager Utilities > installDependencies > handles no package manager detected [0.04ms]
(pass) Package Manager Utilities > installDependencies > handles unsupported package manager [0.04ms]
(pass) Package Manager Utilities > installDependencies > handles installation errors [0.04ms]
(pass) Package Manager Utilities > installDependencies > respects quiet option for stdio [0.04ms]

src/utils/param-schemas.test.ts:
{"error":"Git check-status failed: Command failed: git -C /tmp status --porcelain\nfatal: not a git repository (or any of the parent directories): .git\n\n\nCommand: git -C /tmp status --porcelain\nWorking directory: /tmp\nExecution time: 14ms","level":"error","message":"Auto-commit: Failed to commit task changes test commit","timestamp":"2025-07-28T18:36:27.801Z","workspacePath":"/tmp"}
(pass) Parameter Schemas > Schema Helpers > optionalString should create an optional string schema with description
(pass) Parameter Schemas > Schema Helpers > requiredString should create a required string schema with description
(pass) Parameter Schemas > Schema Helpers > optionalBoolean should create an optional boolean schema with description [0.01ms]
(pass) Parameter Schemas > Common Parameters > all common parameter schemas should have descriptions [0.09ms]

src/utils/filter-messages.test.ts:
(pass) Filter Messages Utility > getStatusFilterMessage > returns correct message for a given status
(pass) Filter Messages Utility > getStatusFilterMessage > includes the status in single quotes
(pass) Filter Messages Utility > getActiveTasksMessage > returns message about active tasks [0.02ms]
(pass) Filter Messages Utility > getActiveTasksMessage > includes instruction about --all flag
(pass) Filter Messages Utility > generateFilterMessages > returns status filter message when status is provided
(pass) Filter Messages Utility > generateFilterMessages > returns active tasks message when not showing all tasks
(pass) Filter Messages Utility > generateFilterMessages > returns no messages when all is true
(pass) Filter Messages Utility > generateFilterMessages > prioritizes status filter over active tasks message [0.03ms]
(pass) Filter Messages Utility > generateFilterMessages > returns empty array when no filter options provided [0.01ms]

src/utils/option-descriptions.test.ts:
(pass) Option Descriptions > all exported descriptions should be non-empty strings [0.04ms]
(pass) Option Descriptions > all descriptions should follow consistent naming pattern (UPPERCASE_WITH_DESCRIPTION suffix) [0.02ms]
(pass) Option Descriptions > all descriptions should end with proper punctuation
(pass) Option Descriptions > repository resolution descriptions should be consistent
(pass) Option Descriptions > output format descriptions should be consistent
(pass) Option Descriptions > task descriptions should be consistent
(pass) Option Descriptions > backend descriptions should be consistent
(pass) Option Descriptions > force option descriptions should be consistent
(pass) Option Descriptions > git option descriptions should be consistent [0.01ms]
(pass) Option Descriptions > rules option descriptions should be consistent

src/utils/logger.test.ts:
(pass) Logger > getLogMode > should return HUMAN when configuration mode is set to HUMAN [0.04ms]
(pass) Logger > getLogMode > should return STRUCTURED when configuration mode is set to STRUCTURED
(pass) Logger > getLogMode > should default to HUMAN when mode is auto and TTY is available [0.03ms]
(pass) Logger > getLogMode > should default to STRUCTURED when mode is auto and TTY is not available
(pass) Logger > createConfigurableLogger > should create logger with configuration [0.69ms]
(pass) Logger > createConfigurableLogger > should create logger with STRUCTURED mode [0.21ms]
(pass) Logger > createConfigurableLogger > should expose logger methods [0.13ms]
(pass) Logger > createConfigurableLogger > should support dependency injection for testing [0.04ms]
(pass) Logger > createConfigurableLogger > should handle different log levels [0.34ms]
(pass) Logger > createConfigurableLogger > should isolate logger instances [0.40ms]
(pass) Logger > configuration integration > should maintain backward compatibility [0.13ms]
(pass) Logger > configuration integration > should support enableAgentLogs configuration [0.09ms]

src/utils/semantic-error-classifier.test.ts:

# Unhandled error between tests
-------------------------------
error: Cannot find module '../semantic-error-classifier' from '/Users/edobry/.local/state/minsky/sessions/task176/src/utils/semantic-error-classifier.test.ts'
-------------------------------


src/mcp/command-mapper.test.ts:
(pass) CommandMapper > Schema Conversion > should convert simple object schema to flat JSON schema without $ref [1.14ms]
(pass) CommandMapper > Schema Conversion > should handle empty object schema [0.16ms]
(pass) CommandMapper > Schema Conversion > should handle complex nested schemas [0.48ms]
(pass) CommandMapper > Schema Conversion > should handle schema with validation rules [0.16ms]
(pass) CommandMapper > Schema Conversion > should ensure schema is MCP-compatible
(pass) CommandMapper > Schema Conversion > should produce schema that passes MCP server validation [0.11ms]
(pass) CommandMapper > should initialize with server and project context
(pass) CommandMapper > should add tool to server when addCommand is called [0.15ms]

src/mcp/server.test.ts:
(pass) MCP Server > should import official MCP SDK module successfully [16.41ms]
(pass) MCP Server > should import stdio transport successfully [1.18ms]
(pass) MCP Server > should be able to import our server modules [10.05ms]
(pass) MCP Server > should create MinskyMCPServer instance [0.52ms]

src/adapters/session-context-resolver.test.ts:

# Unhandled error between tests
-------------------------------
error: Cannot find module '../session-context-resolver' from '/Users/edobry/.local/state/minsky/sessions/task176/src/adapters/session-context-resolver.test.ts'
-------------------------------


src/errors/network-errors.test.ts:
(pass) Network Error handling > NetworkError class > should create a NetworkError with the correct properties
(pass) Network Error handling > PortInUseError class > should create a PortInUseError with the correct message [0.08ms]
(pass) Network Error handling > PortInUseError class > should provide helpful suggestions [0.04ms]
(pass) Network Error handling > NetworkPermissionError class > should create a NetworkPermissionError with the correct message [0.02ms]
(pass) Network Error handling > NetworkPermissionError class > should provide helpful suggestions [0.02ms]
(pass) Network Error handling > isNetworkError function > should identify common network errors [0.03ms]
(pass) Network Error handling > createNetworkError function > should create a PortInUseError for EADDRINUSE errors [0.03ms]
(pass) Network Error handling > createNetworkError function > should create a NetworkPermissionError for EACCES errors [0.01ms]
(pass) Network Error handling > createNetworkError function > should create a generic NetworkError for other errors
(pass) Network Error handling > formatNetworkErrorMessage function > should format a PortInUseError with suggestions [0.04ms]
(pass) Network Error handling > formatNetworkErrorMessage function > should not include the debug hint when debug is true [0.01ms]

src/errors/enhanced-error-templates.test.ts:
(pass) Task 223 Enhanced Error Messages > createSessionPrBranchErrorMessage > should create helpful error message for PR branch restriction
(pass) Task 223 Enhanced Error Messages > createSessionPrBranchErrorMessage > should handle undefined session name gracefully [0.39ms]
(pass) Task 223 Enhanced Error Messages > createSessionPrBranchErrorMessage > should include context information when provided [0.02ms]
(pass) Task 223 Enhanced Error Messages > createTaskIdParsingErrorMessage > should show supported task ID formats [0.04ms]
(pass) Task 223 Enhanced Error Messages > createTaskIdParsingErrorMessage > should include operation context [0.01ms]
(pass) Task 223 Enhanced Error Messages > createVariableNamingErrorMessage > should identify underscore prefix mismatch (declaration has underscore, usage doesn't) [0.04ms]
(pass) Task 223 Enhanced Error Messages > createVariableNamingErrorMessage > should identify reverse underscore mismatch (declaration without underscore, usage has underscore) [0.02ms]
(pass) Task 223 Enhanced Error Messages > createVariableNamingErrorMessage > should include file path and line numbers when provided [0.02ms]
(pass) Task 223 Enhanced Error Messages > createGitTimeoutErrorMessage > should provide troubleshooting steps for git timeouts [0.04ms]
(pass) Task 223 Enhanced Error Messages > createGitTimeoutErrorMessage > should include timeout duration in context [0.03ms]
(pass) Task 223 Enhanced Error Messages > createMergeConflictErrorMessage > should identify conflicting files with conflict types [0.04ms]
(pass) Task 223 Enhanced Error Messages > createMergeConflictErrorMessage > should provide resolution strategies [0.02ms]
(pass) Task 223 Enhanced Error Messages > createBackendDetectionErrorMessage > should show available backends and their requirements [0.08ms]
(pass) Task 223 Enhanced Error Messages > createBackendDetectionErrorMessage > should provide default backend list when no backends provided [0.02ms]
(pass) Task 223 Enhanced Error Messages > createBackendDetectionErrorMessage > should include workspace path in context [0.02ms]
(pass) Task 223 Enhanced Error Messages > Error Message Quality > should use consistent emoji patterns across all error types [0.32ms]
(pass) Task 223 Enhanced Error Messages > Error Message Quality > should provide actionable command suggestions [0.05ms]
(pass) Task 223 Enhanced Error Messages > Error Message Quality > should include context information when provided [0.02ms]

src/errors/message-templates.test.ts:
(pass) Error Message Templates > getErrorMessage > extracts message from Error object [0.63ms]
(pass) Error Message Templates > getErrorMessage > converts non-Error to string [0.01ms]
(pass) Error Message Templates > formatCommandSuggestions > formats single suggestion [0.01ms]
(pass) Error Message Templates > formatCommandSuggestions > formats multiple suggestions [0.04ms]
(pass) Error Message Templates > formatContextInfo > returns empty string for no context
(pass) Error Message Templates > formatContextInfo > formats single context info
(pass) Error Message Templates > formatContextInfo > formats multiple context info [0.02ms]
(pass) Error Message Templates > buildErrorMessage > builds basic error message [0.01ms]
(pass) Error Message Templates > buildErrorMessage > builds error message with description [0.01ms]
(pass) Error Message Templates > buildErrorMessage > builds error message with sections and emojis [0.01ms]
(pass) Error Message Templates > buildErrorMessage > includes context information
(pass) Error Message Templates > createResourceNotFoundMessage > creates session not found message [0.04ms]
(pass) Error Message Templates > createMissingInfoMessage > creates missing information message [0.02ms]
(pass) Error Message Templates > createValidationErrorMessage > creates validation error message [0.04ms]
(pass) Error Message Templates > createCommandFailureMessage > creates command failure message [0.02ms]
(pass) Error Message Templates > createSessionErrorMessage > creates not found session error [0.05ms]
(pass) Error Message Templates > createSessionErrorMessage > creates session exists error
(pass) Error Message Templates > createSessionErrorMessage > creates invalid session error [0.02ms]
(pass) Error Message Templates > createGitErrorMessage > creates git conflict error [0.06ms]
(pass) Error Message Templates > createGitErrorMessage > creates general git error [0.02ms]
(pass) Error Message Templates > createConfigErrorMessage > creates configuration error message [0.03ms]
(pass) Error Message Templates > ErrorContextBuilder > builds empty context [0.03ms]
(pass) Error Message Templates > ErrorContextBuilder > adds current directory [0.02ms]
(pass) Error Message Templates > ErrorContextBuilder > adds session information [0.01ms]
(pass) Error Message Templates > ErrorContextBuilder > adds repository information [0.01ms]
(pass) Error Message Templates > ErrorContextBuilder > adds task information
(pass) Error Message Templates > ErrorContextBuilder > adds command information
(pass) Error Message Templates > ErrorContextBuilder > adds custom information [0.01ms]
(pass) Error Message Templates > ErrorContextBuilder > chains multiple context additions [0.01ms]
(pass) Error Message Templates > Error message consistency > all templates use consistent emoji patterns [0.04ms]
(pass) Error Message Templates > Error message consistency > all templates have consistent structure [0.04ms]

src/domain/session-lookup-bug-integration.test.ts:
{"error":"The \"path\" property must be of type string, got undefined","level":"error","message":"Error during git clone","repoUrl":"https://github.com/nonexistent/invalid-repo-12345.git","stack":"TypeError: The \"path\" property must be of type string, got undefined\n    at dirname (unknown)\n    at cloneImpl (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/git/clone-operations.ts:64:22)\n    at cloneImpl (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/git/clone-operations.ts:40:3)\n    at processTicksAndRejections (native:7:39)","timestamp":"2025-07-28T18:36:27.885Z"}
(pass) Session Lookup Bug Integration Test > should NOT create session directories when git clone fails [0.81ms]
(pass) Session Lookup Bug Integration Test > should create session directories when git clone succeeds [0.01ms]

src/domain/rules.test.ts:
(pass) RuleService > listRules > lists rules from both formats when no format specified [1.16ms]
(pass) RuleService > listRules > filters rules by format [1.03ms]
(pass) RuleService > listRules > filters rules by tag [1.01ms]
(pass) RuleService > getRule > gets a rule by ID [0.51ms]
(pass) RuleService > getRule > throws error for non-existent rule [0.48ms]
(pass) RuleService > getRule > finds rule in specified format [0.54ms]
(pass) RuleService > createRule > creates a new rule with metadata [0.45ms]
(pass) RuleService > createRule > handles undefined metadata fields correctly [0.30ms]
(pass) RuleService > createRule > throws error if rule exists and overwrite is false [0.21ms]
(pass) RuleService > createRule > overwrites existing rule when overwrite is true [0.41ms]
(pass) RuleService > updateRule > updates metadata only [1.66ms]
(pass) RuleService > updateRule > updates content only [0.56ms]
(pass) RuleService > updateRule > updates both metadata and content [0.64ms]
(pass) RuleService > searchRules > searches for rules by content [0.85ms]
(pass) RuleService > searchRules > searches for rules by metadata [1.42ms]
(pass) RuleService > searchRules > filters search results by format and tag [1.23ms]

src/domain/session-lookup-bug-reproduction.test.ts:
BUG CONFIRMED: Orphaned session directory exists at /Users/edobry/.local/state/minsky/sessions/task176/test-tmp/session-lookup-bug-test/local-minsky/sessions/test-orphan-session
(pass) Session Lookup Bug Reproduction (Task #168) > Scenario 1: Git clone creates directory but fails before completion > should not leave orphaned session directories when git clone fails after mkdir [1.20ms]
BUG CONFIRMED: Orphaned session after branch failure at /Users/edobry/.local/state/minsky/sessions/task176/test-tmp/session-lookup-bug-test/local-minsky/sessions/test-branch-failure
(pass) Session Lookup Bug Reproduction (Task #168) > Scenario 2: Git branch creation fails after clone succeeds > should not leave orphaned sessions when branch creation fails [0.32ms]
BUG CONFIRMED: Orphaned session directory at /Users/edobry/.local/state/minsky/sessions/task176/test-tmp/session-lookup-bug-test/local-minsky/sessions/existing-orphan-session not in database
(pass) Session Lookup Bug Reproduction (Task #168) > Scenario 3: Partial cleanup leaves inconsistent state > should handle the case where session directories exist but sessions are not in database [0.10ms]
(pass) Session Lookup Bug Reproduction (Task #168) > Expected behavior after fix > should either succeed completely or fail cleanly with no orphaned directories [0.05ms]

src/domain/session-pr-body-path.test.ts:
(pass) sessionPrFromParams bodyPath file reading functionality > should read body content from bodyPath when provided [0.12ms]
(pass) sessionPrFromParams bodyPath file reading functionality > should handle non-existent files correctly [0.06ms]
(pass) sessionPrFromParams bodyPath file reading functionality > should detect empty files correctly [0.19ms]
(pass) sessionPrFromParams bodyPath file reading functionality > should work with relative paths correctly [0.26ms]
(pass) sessionPrFromParams bodyPath file reading functionality > should validate bodyPath parameter priority logic

src/domain/session-review.test.ts:
(pass) sessionReviewFromParams > reviews session by name [1.10ms]
(pass) sessionReviewFromParams > reviews session by task ID [0.36ms]
(pass) sessionReviewFromParams > throws ValidationError when no session detected [0.05ms]
(pass) sessionReviewFromParams > throws ResourceNotFoundError when session not found [0.05ms]

src/domain/session-git-clone-bug-regression.test.ts:
21 |   it("should not leave orphaned session records when git clone fails", async () => {
22 |     // Arrange - Simulate the exact error scenario that caused the bug using centralized factories
23 | 
24 |     // Create trackable spies for methods we need to verify
25 |     let addSessionSpy = createMock();
26 |     addSessionSpy = mock(() => Promise.resolve(undefined));
                         ^
ReferenceError: mock is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-git-clone-bug-regression.test.ts:26:21)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-git-clone-bug-regression.test.ts:21:72)
(fail) Session Git Clone Bug Regression Test > should not leave orphaned session records when git clone fails
100 |   it("should successfully create session after fixing git directory issues", async () => {
101 |     // Arrange - Now simulate successful scenario after cleanup
102 | 
103 |     // Create trackable spies for methods we need to verify
104 |     let addSessionSpy = createMock();
105 |     addSessionSpy = mock(() => Promise.resolve(undefined));
                          ^
ReferenceError: mock is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-git-clone-bug-regression.test.ts:105:21)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-git-clone-bug-regression.test.ts:100:78)
(fail) Session Git Clone Bug Regression Test > should successfully create session after fixing git directory issues [0.05ms]

src/domain/git-default-branch.test.ts:
(pass) GitService Default Branch Detection > should detect default branch from origin HEAD ref [0.21ms]
(pass) GitService Default Branch Detection > should properly remove origin prefix from branch name
{"error":"Command failed","level":"error","message":"Could not determine default branch, falling back to 'main'","repoPath":"/test/repo","timestamp":"2025-07-28T18:36:27.928Z"}
(pass) GitService Default Branch Detection > should fall back to 'main' when command fails [0.14ms]

src/domain/gitServiceTaskStatusUpdate.test.ts:
(pass) GitService Task Status Update > should be able to update task status after PR creation

src/domain/rules-format.test.ts:
(pass) RuleService Format Compatibility > should get a rule in its original format when requested [0.38ms]
(pass) RuleService Format Compatibility > should get a rule in any format if no format specified [0.21ms]
(pass) RuleService Format Compatibility > should return rule with format note when requested in different format [0.23ms]
(pass) RuleService Format Compatibility > should prioritize the requested format for dual-format rules [0.31ms]
(pass) RuleService Format Compatibility > should throw specific error messages for non-existent rules [0.13ms]

src/domain/session-approve.test.ts:
109 |       throw new MinskyError(errorMessage);
110 |     }
111 | 
112 |     // Re-throw other errors with additional context
113 |     const errorMessage = (error as any)?.message || "Unknown git command error";
114 |     const enhancedError = new MinskyError(
                                ^
MinskyError: Git fetch failed: ENOENT: no such file or directory, posix_spawn '/bin/sh'

Command: git -C /test/repo/path fetch origin
Working directory: /test/repo/path
Execution time: 1ms
 cause: undefined,

      at execGitWithTimeout (/Users/edobry/.local/state/minsky/sessions/task176/src/utils/git-exec.ts:114:27)
(fail) Session Approve > branch cleanup after successful merge > should delete local PR branch and task branch after successful merge [2.82ms]
109 |       throw new MinskyError(errorMessage);
110 |     }
111 | 
112 |     // Re-throw other errors with additional context
113 |     const errorMessage = (error as any)?.message || "Unknown git command error";
114 |     const enhancedError = new MinskyError(
                                ^
MinskyError: Git fetch failed: ENOENT: no such file or directory, posix_spawn '/bin/sh'

Command: git -C /test/repo/path fetch origin
Working directory: /test/repo/path
Execution time: 0ms
 cause: undefined,

      at execGitWithTimeout (/Users/edobry/.local/state/minsky/sessions/task176/src/utils/git-exec.ts:114:27)
(fail) Session Approve > branch cleanup after successful merge > should handle branch cleanup failures gracefully without failing the operation [0.43ms]
109 |       throw new MinskyError(errorMessage);
110 |     }
111 | 
112 |     // Re-throw other errors with additional context
113 |     const errorMessage = (error as any)?.message || "Unknown git command error";
114 |     const enhancedError = new MinskyError(
                                ^
MinskyError: Git fetch failed: ENOENT: no such file or directory, posix_spawn '/bin/sh'

Command: git -C /test/repo/path fetch origin
Working directory: /test/repo/path
Execution time: 0ms
 cause: undefined,

      at execGitWithTimeout (/Users/edobry/.local/state/minsky/sessions/task176/src/utils/git-exec.ts:114:27)
(fail) Session Approve > branch cleanup after successful merge > should not attempt branch cleanup for already approved sessions [0.34ms]
109 |       throw new MinskyError(errorMessage);
110 |     }
111 | 
112 |     // Re-throw other errors with additional context
113 |     const errorMessage = (error as any)?.message || "Unknown git command error";
114 |     const enhancedError = new MinskyError(
                                ^
MinskyError: Git fetch failed: ENOENT: no such file or directory, posix_spawn '/bin/sh'

Command: git -C /test/repo/path fetch origin
Working directory: /test/repo/path
Execution time: 0ms
 cause: undefined,

      at execGitWithTimeout (/Users/edobry/.local/state/minsky/sessions/task176/src/utils/git-exec.ts:114:27)
(fail) Session Approve > branch cleanup after successful merge > should handle case where task branch doesn't exist but PR branch does [0.35ms]
109 |       throw new MinskyError(errorMessage);
110 |     }
111 | 
112 |     // Re-throw other errors with additional context
113 |     const errorMessage = (error as any)?.message || "Unknown git command error";
114 |     const enhancedError = new MinskyError(
                                ^
MinskyError: Git fetch failed: ENOENT: no such file or directory, posix_spawn '/bin/sh'

Command: git -C /test/repo/path fetch origin
Working directory: /test/repo/path
Execution time: 0ms
 cause: undefined,

      at execGitWithTimeout (/Users/edobry/.local/state/minsky/sessions/task176/src/utils/git-exec.ts:114:27)
(fail) Session Approve > successfully approves and merges a PR branch [0.36ms]
109 |       throw new MinskyError(errorMessage);
110 |     }
111 | 
112 |     // Re-throw other errors with additional context
113 |     const errorMessage = (error as any)?.message || "Unknown git command error";
114 |     const enhancedError = new MinskyError(
                                ^
MinskyError: Git fetch failed: ENOENT: no such file or directory, posix_spawn '/bin/sh'

Command: git -C /test/repo/path fetch origin
Working directory: /test/repo/path
Execution time: 0ms
 cause: undefined,

      at execGitWithTimeout (/Users/edobry/.local/state/minsky/sessions/task176/src/utils/git-exec.ts:114:27)
(fail) Session Approve > detects current session when repo path is provided [0.27ms]
(pass) Session Approve > throws error when session is not found [0.10ms]
(pass) Session Approve > throws error when no session or task is provided [0.31ms]
109 |       throw new MinskyError(errorMessage);
110 |     }
111 | 
112 |     // Re-throw other errors with additional context
113 |     const errorMessage = (error as any)?.message || "Unknown git command error";
114 |     const enhancedError = new MinskyError(
                                ^
MinskyError: Git fetch failed: ENOENT: no such file or directory, posix_spawn '/bin/sh'

Command: git -C /test/repo/path fetch origin
Working directory: /test/repo/path
Execution time: 0ms
 cause: undefined,

      at execGitWithTimeout (/Users/edobry/.local/state/minsky/sessions/task176/src/utils/git-exec.ts:114:27)
(fail) Session Approve > handles errors during task metadata update [0.24ms]
109 |       throw new MinskyError(errorMessage);
110 |     }
111 | 
112 |     // Re-throw other errors with additional context
113 |     const errorMessage = (error as any)?.message || "Unknown git command error";
114 |     const enhancedError = new MinskyError(
                                ^
MinskyError: Git fetch failed: ENOENT: no such file or directory, posix_spawn '/bin/sh'

Command: git -C /test/repo/path fetch origin
Working directory: /test/repo/path
Execution time: 0ms
 cause: undefined,

      at execGitWithTimeout (/Users/edobry/.local/state/minsky/sessions/task176/src/utils/git-exec.ts:114:27)
(fail) Session Approve > merges from local PR branch and handles missing remote branch gracefully [0.27ms]

src/domain/session-approve-branch-cleanup.test.ts:
109 |       throw new MinskyError(errorMessage);
110 |     }
111 | 
112 |     // Re-throw other errors with additional context
113 |     const errorMessage = (error as any)?.message || "Unknown git command error";
114 |     const enhancedError = new MinskyError(
                                ^
MinskyError: Git fetch failed: ENOENT: no such file or directory, posix_spawn '/bin/sh'

Command: git -C /test/repo/path fetch origin
Working directory: /test/repo/path
Execution time: 0ms
 cause: undefined,

      at execGitWithTimeout (/Users/edobry/.local/state/minsky/sessions/task176/src/utils/git-exec.ts:114:27)
(fail) Session Approve Branch Cleanup > should delete local PR branch and task branch after successful merge [1.17ms]
109 |       throw new MinskyError(errorMessage);
110 |     }
111 | 
112 |     // Re-throw other errors with additional context
113 |     const errorMessage = (error as any)?.message || "Unknown git command error";
114 |     const enhancedError = new MinskyError(
                                ^
MinskyError: Git fetch failed: ENOENT: no such file or directory, posix_spawn '/bin/sh'

Command: git -C /test/repo/path fetch origin
Working directory: /test/repo/path
Execution time: 0ms
 cause: undefined,

      at execGitWithTimeout (/Users/edobry/.local/state/minsky/sessions/task176/src/utils/git-exec.ts:114:27)
(fail) Session Approve Branch Cleanup > should handle branch cleanup failures gracefully without failing the operation [0.43ms]
109 |       throw new MinskyError(errorMessage);
110 |     }
111 | 
112 |     // Re-throw other errors with additional context
113 |     const errorMessage = (error as any)?.message || "Unknown git command error";
114 |     const enhancedError = new MinskyError(
                                ^
MinskyError: Git fetch failed: ENOENT: no such file or directory, posix_spawn '/bin/sh'

Command: git -C /test/repo/path fetch origin
Working directory: /test/repo/path
Execution time: 0ms
 cause: undefined,

      at execGitWithTimeout (/Users/edobry/.local/state/minsky/sessions/task176/src/utils/git-exec.ts:114:27)
(fail) Session Approve Branch Cleanup > should not attempt branch cleanup for already approved sessions [0.44ms]

src/domain/session-update.test.ts:
(pass) updateSessionFromParams > throws ValidationError when name is not provided [18.91ms]
65 |       expectToBeInstanceOf(error, ValidationError);
66 |     }
67 |   });
68 | 
69 |   test("throws ResourceNotFoundError when session does not exist", async () => {
70 |     mockSessionProvider.getSession = mock(() => Promise.resolve(null));
                                          ^
ReferenceError: mock is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-update.test.ts:70:38)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-update.test.ts:69:68)
(fail) updateSessionFromParams > throws ResourceNotFoundError when session does not exist [0.10ms]
931 |       name: sessionName,
932 |     });
933 |     if (error instanceof MinskyError) {
934 |       throw error;
935 |     } else {
936 |       throw new MinskyError(`Failed to update session: ${getErrorMessage(error)}`, error);
                  ^
MinskyError: Failed to update session: Command failed: git -C /mock/session/workdir rev-list --left-right --count origin/main...main
fatal: cannot change to '/mock/session/workdir': No such file or directory

      at updateSessionFromParams (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session.ts:936:13)

941 |   if (!isURLInstance(fileURLOrPath))
942 |     return fileURLOrPath;
943 |   return Bun.fileURLToPath(fileURLOrPath);
944 | }
945 | var { Error, TypeError } = globalThis;
946 |   let err = new Error(message);
                  ^
error: Command failed: git -C /mock/session/workdir rev-list --left-right --count origin/main...main
fatal: cannot change to '/mock/session/workdir': No such file or directory

   code: 128,
 killed: false,
 signal: null,
    cmd: "git -C /mock/session/workdir rev-list --left-right --count origin/main...main",
 stdout: "",
 stderr: "fatal: cannot change to '/mock/session/workdir': No such file or directory\n",

      at genericNodeError (node:child_process:946:13)
      at exitHandler (node:child_process:102:28)
      at emit (node:events:96:22)
      at #maybeClose (node:child_process:737:16)
      at #handleOnExit (node:child_process:511:72)
(fail) updateSessionFromParams > returns session information when update is successful [7.74ms]
110 |     expectToHaveBeenCalled(mockGitService.popStash);
111 |   });
112 | 
113 |   test("throws error when workspace is dirty and force is not set", async () => {
114 |     // Mock dirty workspace
115 |     mockGitService.execInRepository = mock(() => Promise.resolve("M file.txt"));
                                            ^
ReferenceError: mock is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-update.test.ts:115:39)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-update.test.ts:113:69)
(fail) updateSessionFromParams > throws error when workspace is dirty and force is not set [0.12ms]
129 |     }
130 |   });
131 | 
132 |   test("updates session when workspace is dirty and force is set", async () => {
133 |     // Mock dirty workspace
134 |     mockGitService.execInRepository = mock(() => Promise.resolve("M file.txt"));
                                            ^
ReferenceError: mock is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-update.test.ts:134:39)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-update.test.ts:132:68)
(fail) updateSessionFromParams > updates session when workspace is dirty and force is set
931 |       name: sessionName,
932 |     });
933 |     if (error instanceof MinskyError) {
934 |       throw error;
935 |     } else {
936 |       throw new MinskyError(`Failed to update session: ${getErrorMessage(error)}`, error);
                  ^
MinskyError: Failed to update session: Command failed: git -C /mock/session/workdir rev-list --left-right --count origin/main...main
fatal: cannot change to '/mock/session/workdir': No such file or directory

      at updateSessionFromParams (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session.ts:936:13)

941 |   if (!isURLInstance(fileURLOrPath))
942 |     return fileURLOrPath;
943 |   return Bun.fileURLToPath(fileURLOrPath);
944 | }
945 | var { Error, TypeError } = globalThis;
946 |   let err = new Error(message);
                  ^
error: Command failed: git -C /mock/session/workdir rev-list --left-right --count origin/main...main
fatal: cannot change to '/mock/session/workdir': No such file or directory

   code: 128,
 killed: false,
 signal: null,
    cmd: "git -C /mock/session/workdir rev-list --left-right --count origin/main...main",
 stdout: "",
 stderr: "fatal: cannot change to '/mock/session/workdir': No such file or directory\n",

      at genericNodeError (node:child_process:946:13)
      at exitHandler (node:child_process:102:28)
      at emit (node:events:96:22)
      at #maybeClose (node:child_process:737:16)
      at #handleOnExit (node:child_process:511:72)
(fail) updateSessionFromParams > skips stashing when noStash is true [6.95ms]
931 |       name: sessionName,
932 |     });
933 |     if (error instanceof MinskyError) {
934 |       throw error;
935 |     } else {
936 |       throw new MinskyError(`Failed to update session: ${getErrorMessage(error)}`, error);
                  ^
MinskyError: Failed to update session: Command failed: git -C /mock/session/workdir rev-list --left-right --count origin/main...main
fatal: cannot change to '/mock/session/workdir': No such file or directory

      at updateSessionFromParams (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session.ts:936:13)

941 |   if (!isURLInstance(fileURLOrPath))
942 |     return fileURLOrPath;
943 |   return Bun.fileURLToPath(fileURLOrPath);
944 | }
945 | var { Error, TypeError } = globalThis;
946 |   let err = new Error(message);
                  ^
error: Command failed: git -C /mock/session/workdir rev-list --left-right --count origin/main...main
fatal: cannot change to '/mock/session/workdir': No such file or directory

   code: 128,
 killed: false,
 signal: null,
    cmd: "git -C /mock/session/workdir rev-list --left-right --count origin/main...main",
 stdout: "",
 stderr: "fatal: cannot change to '/mock/session/workdir': No such file or directory\n",

      at genericNodeError (node:child_process:946:13)
      at exitHandler (node:child_process:102:28)
      at emit (node:events:96:22)
      at #maybeClose (node:child_process:737:16)
      at #handleOnExit (node:child_process:511:72)
(fail) updateSessionFromParams > skips pushing when noPush is true [6.76ms]
192 |     expect(mockGitService.push.mock.calls.length).toBe(0);
193 |     expectToHaveBeenCalled(mockGitService.popStash);
194 |   });
195 | 
196 |   test("throws error when merge conflicts are detected", async () => {
197 |     mockGitService.mergeBranch = mock(() => Promise.resolve({ conflicts: true }));
                                       ^
ReferenceError: mock is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-update.test.ts:197:34)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-update.test.ts:196:58)
(fail) updateSessionFromParams > throws error when merge conflicts are detected [0.15ms]

src/domain/session-pr-no-branch-switch.test.ts:
47 | 
48 | // Factory for creating all operations
49 | export function createAllGitOperations(deps?: GitOperationDependencies) {
50 |   return {
51 |     // Basic operations
52 |     clone: createCloneOperation(deps),
                ^
ReferenceError: createCloneOperation is not defined
      at createAllGitOperations (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/git/operations/index.ts:52:12)
      at new ModularGitCommandsManager (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/git/git-commands-modular.ts:33:23)
      at /Users/edobry/.local/state/minsky/sessions/task176/src/domain/git/git-commands-modular.ts:203:42
      at requestImportModule (2:1)
(fail) Session PR Command Branch Behavior > should never switch user to PR branch during session pr creation [1.63ms]
156 |         session: "task#228",
157 |         title: "Test PR",
158 |         body: "Test body",
159 |         baseBranch: "main",
160 |       });
161 |     }).toThrow(/Failed to switch back to session branch/);
             ^
error: expect(received).toThrow(expected)

Expected pattern: /Failed to switch back to session branch/
Received message: "Cannot access 'modularGitCommandsManager' before initialization."

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-pr-no-branch-switch.test.ts:161:8)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-pr-no-branch-switch.test.ts:118:70)
(fail) Session PR Command Branch Behavior > should handle branch switch-back failure as critical error [0.71ms]
(pass) Session PR Command Branch Behavior > should document the behavioral change from switch -C to branch + switch pattern [0.03ms]

src/domain/tasks-core-functions.test.ts:

# Unhandled error between tests
-------------------------------
error: Cannot find module '../tasks' from '/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks-core-functions.test.ts'
-------------------------------


src/domain/session-auto-task-creation.test.ts:
(pass) Session Auto-Task Creation > should auto-create task when description is provided [0.30ms]
(pass) Session Auto-Task Creation > should not auto-create task when task ID is provided [0.07ms]
(pass) Session Auto-Task Creation > should use session name when provided with description [0.05ms]

src/domain/repository-uri.test.ts:

# Unhandled error between tests
-------------------------------
1 | (function (entry, fetcher)
              ^
SyntaxError: Export named 'expandGitHubShorthand' not found in module '/Users/edobry/.local/state/minsky/sessions/task176/src/domain/repository-uri.ts'.
      at loadAndEvaluateModule (1:11)
-------------------------------


src/domain/uri-utils.test.ts:
(pass) URI Utilities > normalizeRepositoryUri > normalizes HTTPS URLs [0.03ms]
(pass) URI Utilities > normalizeRepositoryUri > normalizes SSH URLs [0.05ms]
(pass) URI Utilities > normalizeRepositoryUri > normalizes GitHub shorthand
(pass) URI Utilities > convertRepositoryUri > converts HTTPS to SSH [0.04ms]
(pass) URI Utilities > convertRepositoryUri > converts SSH to HTTPS
(pass) URI Utilities > convertRepositoryUri > converts shorthand to HTTPS
(pass) URI Utilities > convertRepositoryUri > returns same URI if already in target format
(pass) URI Utilities > extractRepositoryInfo > extracts info from HTTPS URL [0.02ms]
(pass) URI Utilities > extractRepositoryInfo > extracts info from SSH URL
(pass) URI Utilities > extractRepositoryInfo > extracts info from shorthand [0.02ms]

src/domain/workspace.test.ts:
(pass) resolveWorkspacePath > uses explicitly provided workspace path [0.22ms]
(pass) resolveWorkspacePath > returns current directory when no workspace option is provided [0.07ms]
(pass) resolveWorkspacePath > returns sessionRepo when provided [0.02ms]
(pass) resolveWorkspacePath > validates that explicitly provided workspace exists [0.06ms]

src/domain/tasks-interface-commands.test.ts:
 95 |         all: false,
 96 |       };
 97 | 
 98 |       const result = await listTasksFromParams(params, mockDeps);
 99 | 
100 |       expect(result).toEqual([mockTask]);
                           ^
error: expect(received).toEqual(expected)

+ []
- [
-   {
-     description: "This is a test task",
-     id: "#123",
-     status: "TODO",
-     title: "Test Task",
-   }
- ]

- Expected  - 8
+ Received  + 1

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks-interface-commands.test.ts:100:22)
(fail) interface-agnostic task functions > listTasksFromParams > should list tasks with valid parameters [2.35ms]
118 | 
119 |       const params = { all: false };
120 | 
121 |       const result = await listTasksFromParams(params, mockDeps);
122 | 
123 |       expect(result.length).toBe(1);
                                  ^
error: expect(received).toBe(expected)

Expected: 1
Received: 0

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks-interface-commands.test.ts:123:29)
(fail) interface-agnostic task functions > listTasksFromParams > should filter out DONE tasks when all is false [0.81ms]
110 |    * @returns Promise resolving to an array of tasks
111 |    */
112 |   async getAllTasks(): Promise<TaskData[]> {
113 |     const result = await this.currentBackend.getTasksData();
114 |     if (!result.success) {
115 |       throw new Error(`Failed to get tasks: ${result.error?.message}`);
                  ^
error: Failed to get tasks: ENOENT: no such file or directory, open '/mock/task/workspace/path/process/tasks.md'
      at getAllTasks (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/taskService.ts:115:13)
(fail) interface-agnostic task functions > getTaskFromParams > should get a task with valid parameters [0.52ms]
30 |  * Custom matcher to replicate Jest"s toBeInstanceOf functionality
31 |  * @param value The value to test
32 |  * @param constructor The expected constructor
33 |  */
34 | export function expectToBeInstanceOf(value: unknown, constructor: Function): void {
35 |   expect(value instanceof constructor).toBeTruthy();
                                            ^
error: expect(received).toBeTruthy()

Received: false

      at expectToBeInstanceOf (/Users/edobry/.local/state/minsky/sessions/task176/src/utils/test-utils/assertions.ts:35:40)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks-interface-commands.test.ts:151:9)
(fail) interface-agnostic task functions > getTaskFromParams > should throw ResourceNotFoundError when task is not found [0.41ms]
110 |    * @returns Promise resolving to an array of tasks
111 |    */
112 |   async getAllTasks(): Promise<TaskData[]> {
113 |     const result = await this.currentBackend.getTasksData();
114 |     if (!result.success) {
115 |       throw new Error(`Failed to get tasks: ${result.error?.message}`);
                  ^
error: Failed to get tasks: ENOENT: no such file or directory, open '/mock/task/workspace/path/process/tasks.md'
      at getAllTasks (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/taskService.ts:115:13)
(fail) interface-agnostic task functions > getTaskFromParams > should normalize non-canonical task IDs (e.g., '123' -> '#123') [0.12ms]
110 |    * @returns Promise resolving to an array of tasks
111 |    */
112 |   async getAllTasks(): Promise<TaskData[]> {
113 |     const result = await this.currentBackend.getTasksData();
114 |     if (!result.success) {
115 |       throw new Error(`Failed to get tasks: ${result.error?.message}`);
                  ^
error: Failed to get tasks: ENOENT: no such file or directory, open '/mock/task/workspace/path/process/tasks.md'
      at getAllTasks (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/taskService.ts:115:13)
(fail) interface-agnostic task functions > getTaskFromParams > should handle task IDs without leading zeros [0.11ms]
248 | 
249 |     // Get the task
250 |     const task = await taskService.getTask(validParams.taskId);
251 | 
252 |     if (!task) {
253 |       throw new ResourceNotFoundError(
                  ^
ResourceNotFoundError: Task 123 not found or has no status
      cause: undefined,
 resourceType: "task",
 resourceId: "123",

      at getTaskStatusFromParams (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/taskCommands.ts:253:13)
(fail) interface-agnostic task functions > getTaskStatusFromParams > should get task status with valid parameters [0.27ms]
(pass) interface-agnostic task functions > getTaskStatusFromParams > should throw ResourceNotFoundError when task status is not found [0.07ms]
322 | 
323 |     // Verify the task exists before setting status and get old status for commit message
324 |     const task = await taskService.getTask(validParams.taskId);
325 | 
326 |     if (!task || !task.id) {
327 |       throw new ResourceNotFoundError(
                  ^
ResourceNotFoundError: Task 123 not found
      cause: undefined,
 resourceType: "task",
 resourceId: "123",

      at setTaskStatusFromParams (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/taskCommands.ts:327:13)
(fail) interface-agnostic task functions > setTaskStatusFromParams > should set task status with valid parameters [0.24ms]
(pass) interface-agnostic task functions > setTaskStatusFromParams > should throw ValidationError when status is invalid [0.13ms]

src/domain/session-lookup-bug-simple.test.ts:
102 |     expect(sessionStartFailed)!.toBe(true); // Session creation should fail
103 | 
104 |     // CRITICAL: This assertion should PASS after fix but FAILS before fix
105 |     // Currently fails because git.clone creates directories before failing
106 |     const sessionDirPath = join(tempDir, "local-minsky", "sessions", "test-session");
107 |     expect(existsSync(sessionDirPath))!.toBe(false); // No orphaned directories should exist
                                              ^
error: expect(received).toBe(expected)

Expected: false
Received: true

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-lookup-bug-simple.test.ts:107:41)
(fail) Session Creation Bug Fix (TDD) > should NOT create session directory if git operations fail [0.50ms]

src/domain/repo-utils.test.ts:
(pass) Repo Utils > normalizeRepoName extracts repo name from URL [0.55ms]
(pass) Repo Utils > resolveRepoPath uses provided repo path [0.14ms]
(pass) Repo Utils > resolveRepoPath resolves from session [0.04ms]
(pass) Repo Utils > resolveRepoPath falls back to git directory
(pass) Repo Utils > resolveRepoPath falls back to current directory when git fails

src/domain/github-backend.test.ts:
(pass) GitHub Repository Backend > constructor creates repository backend with correct settings
(pass) GitHub Repository Backend > getPath returns session workdir path [0.07ms]
(pass) GitHub Repository Backend > validate succeeds for a valid GitHub repository [0.04ms]
(pass) GitHub Repository Backend > getConfig returns correct configuration

src/domain/tasks.specpath.test.ts:

src/domain/task-status-variables.test.ts:
(pass) Task Status Variables Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for TODO status [0.03ms]
(pass) Task Status Variables Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for IN-PROGRESS status
(pass) Task Status Variables Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for DONE status
(pass) Task Status Variables Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should not throw 'status is not defined' error [0.02ms]

src/domain/session-pr-title-duplication.test.ts:
(pass) Session PR Title Duplication Bug Tests > should reproduce title duplication in commit message parsing
(pass) Session PR Title Duplication Bug Tests > should reproduce title duplication when body accidentally contains title [0.04ms]
(pass) Session PR Title Duplication Bug Tests > should fix title duplication with improved parsing [0.13ms]
(pass) Session PR Title Duplication Bug Tests > should handle empty body without duplication [0.06ms]
(pass) Session PR Title Duplication Bug Tests > should handle multiline body with potential title duplication

src/domain/git-service.test.ts:

# Unhandled error between tests
-------------------------------
error: Cannot find module '../git' from '/Users/edobry/.local/state/minsky/sessions/task176/src/domain/git-service.test.ts'
-------------------------------


src/domain/repository.test.ts:
(pass) Repository backends > placeholder test to make CI pass - RepositoryBackend
(pass) Repository backends > placeholder test for LocalGitBackend
(pass) Repository backends > placeholder test for RemoteGitBackend
(pass) Repository backends > placeholder test for GitHubBackend [0.02ms]

src/domain/prepared-merge-commit-workflow.test.ts:
(pass) Prepared Merge Commit Workflow (Task #144) > Current Broken Behavior - preparePr method > SHOULD FAIL: preparePr creates PR branch from feature branch instead of base branch
158 | 
159 |       // 2. Should create PR branch FROM base branch (not feature branch)
160 |       expect(gitCommands).toContain("git -C /test/repo switch -C pr/feature-branch origin/main");
161 | 
162 |       // 3. Should create PR title/body file
163 |       expect(gitCommands).toContain('echo "Test PR" > /test/repo/.pr_title');
                                ^
error: expect(received).toContain(expected)

Expected to contain: "echo \"Test PR\" > /test/repo/.pr_title"
Received: [ "git -C /test/repo fetch origin main", "git -C /test/repo switch -C pr/feature-branch origin/main",
  "echo \"undefined\" > /test/repo/.pr_title", "echo \"Test PR body\" >> /test/repo/.pr_title",
  "git -C /test/repo merge --no-ff feature-branch -F .pr_title", "git -C /test/repo push origin pr/feature-branch"
]

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/prepared-merge-commit-workflow.test.ts:163:27)
(fail) Prepared Merge Commit Workflow (Task #144) > Expected Correct Behavior - What SHOULD happen per Task #025 > preparePr SHOULD create PR branch from base branch and merge feature branch with --no-ff [0.15ms]
207 |           body: params.body,
208 |         };
209 |       });
210 | 
211 |       // Replace the preparePrFromParams function
212 |       const originalPreparePr = require("./git").preparePrFromParams;
                                                       ^
TypeError: Attempted to assign to readonly property.
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/prepared-merge-commit-workflow.test.ts:212:50)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/prepared-merge-commit-workflow.test.ts:181:79)
(fail) Prepared Merge Commit Workflow (Task #144) > Expected Correct Behavior - What SHOULD happen per Task #025 > sessionPrFromParams SHOULD call preparePr with correct parameters
(pass) Prepared Merge Commit Workflow (Task #144) > Fast-Forward Merge Verification > Prepared merge commit SHOULD be fast-forward mergeable
(pass) Prepared Merge Commit Workflow (Task #144) > Error Handling > SHOULD handle merge conflicts during prepared merge commit creation [0.03ms]

src/domain/session-pr-refresh.test.ts:

# Unhandled error between tests
-------------------------------
114 |       mockGitService.execInRepository = mock(() => Promise.resolve("not-exists")) = mock(() =>
                                              ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-pr-refresh.test.ts:114:41

144 |       mockGitService.execInRepository = mock(() => Promise.resolve("not-exists")) = mock(() =>
                                              ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-pr-refresh.test.ts:144:41

166 |       mockGitService.execInRepository = mock(() =>
                                              ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-pr-refresh.test.ts:166:41

187 |       mockGitService.execInRepository = mock(() =>
                                              ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-pr-refresh.test.ts:187:41

217 |       mockGitService.execInRepository = mock(() =>
                                              ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-pr-refresh.test.ts:217:41

245 |       mockGitService.execInRepository
            ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-pr-refresh.test.ts:245:7
-------------------------------


src/domain/git.test.ts:

# Unhandled error between tests
-------------------------------
1140 |     mockExecAsync = mock(() => Promise.resolve({ stdout: "main", stderr: "" })) = mock(() =>
                           ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/domain/git.test.ts:1140:21
-------------------------------


src/domain/session-pr-state-optimization.test.ts:
(pass) PR State Optimization (Task #275) > checkPrBranchExistsOptimized > should use cached PR state when available and not stale [0.21ms]
(pass) PR State Optimization (Task #275) > checkPrBranchExistsOptimized > should refresh stale PR state [0.13ms]
(pass) PR State Optimization (Task #275) > checkPrBranchExistsOptimized > should fall back to git operations when no session record exists [0.04ms]
(pass) PR State Optimization (Task #275) > checkPrBranchExistsOptimized > should provide significant performance improvement [0.04ms]
(pass) PR State Optimization (Task #275) > updatePrStateOnCreation > should create PR state when PR branch is created [0.06ms]
(pass) PR State Optimization (Task #275) > updatePrStateOnMerge > should update PR state when PR is merged [0.07ms]
(pass) PR State Optimization (Task #275) > updatePrStateOnMerge > should handle missing PR state gracefully [0.03ms]
(pass) PR State Optimization (Task #275) > Integration with existing workflow > should maintain backward compatibility [0.03ms]

src/domain/session-pr-branch-reference-bug.test.ts:
(pass) Session PR Branch Reference Bug Regression > should normalize branch references to prevent origin/origin/main [0.63ms]
(pass) Session PR Branch Reference Bug Regression > should detect origin/origin/main patterns in git commands [0.04ms]
(pass) Session PR Branch Reference Bug Regression > should validate git command construction prevents double-prefixing [0.02ms]
(pass) Session PR Branch Reference Bug Regression > should document the specific bug that was fixed

src/domain/session-approve-workflow.test.ts:
(pass) Session Approve Workflow > successfully approves and merges a PR branch with task ID [0.49ms]
(pass) Session Approve Workflow > throws ValidationError when session parameter is missing
(pass) Session Approve Workflow > handles git command failures gracefully

src/domain/github-basic.test.ts:
(pass) GitHub Basic Functionality > initializes with correct repository URL [0.70ms]
(pass) GitHub Basic Functionality > properly uses provided owner and repo values [0.03ms]
(pass) GitHub Basic Functionality > correctly identifies backend type

src/domain/git.pr.test.ts:
(pass) GitService PR Functionality > isGitHubRepo should identify GitHub URLs correctly
(pass) GitService PR Functionality > should create a PR description [0.05ms]

src/domain/session-start-consistency.test.ts:
309 |       taskId = normalizedTaskId;
310 | 
311 |       // Verify the task exists
312 |       const taskObj = await deps.taskService.getTask(normalizedTaskId);
313 |       if (!taskObj) {
314 |         throw new ResourceNotFoundError(`Task ${taskId} not found`, "task", taskId);
                    ^
ResourceNotFoundError: Task 160 not found
      cause: undefined,
 resourceType: "task",
 resourceId: "160",

      at startSessionFromParams (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session.ts:314:15)
(fail) Session Start Consistency Tests > Successful session creation > should only add session to database after git operations succeed [0.19ms]
130 |           gitService: mockGitService,
131 |           taskService: mockTaskService,
132 |           workspaceUtils: mockWorkspaceUtils,
133 |           resolveRepoPath: mockResolveRepoPath,
134 |         })
135 |       ).rejects.toThrow("destination path already exists");
                      ^
error: expect(received).toThrow(expected)

Expected substring: "destination path already exists"
Received message: "Task 160 not found"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-start-consistency.test.ts:135:17)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-start-consistency.test.ts:113:67)
(fail) Session Start Consistency Tests > Git clone failure scenarios > should not add session to database when git clone fails [0.10ms]
158 |           gitService: mockGitService,
159 |           taskService: mockTaskService,
160 |           workspaceUtils: mockWorkspaceUtils,
161 |           resolveRepoPath: mockResolveRepoPath,
162 |         })
163 |       ).rejects.toThrow("failed to create branch");
                      ^
error: expect(received).toThrow(expected)

Expected substring: "failed to create branch"
Received message: "Task 160 not found"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-start-consistency.test.ts:163:17)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-start-consistency.test.ts:141:77)
(fail) Session Start Consistency Tests > Git clone failure scenarios > should not add session to database when git branch creation fails [0.06ms]
187 |           gitService: mockGitService,
188 |           taskService: mockTaskService,
189 |           workspaceUtils: mockWorkspaceUtils,
190 |           resolveRepoPath: mockResolveRepoPath,
191 |         })
192 |       ).rejects.toThrow("git operation failed");
                      ^
error: expect(received).toThrow(expected)

Expected substring: "git operation failed"
Received message: "Task 160 not found"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-start-consistency.test.ts:192:17)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-start-consistency.test.ts:169:60)
(fail) Session Start Consistency Tests > Git clone failure scenarios > should propagate git errors without modification [0.08ms]
226 |           gitService: mockGitService,
227 |           taskService: mockTaskService,
228 |           workspaceUtils: mockWorkspaceUtils,
229 |           resolveRepoPath: mockResolveRepoPath,
230 |         })
231 |       ).rejects.toThrow("Session 'task#160' already exists");
                      ^
error: expect(received).toThrow(expected)

Expected substring: "Session 'task#160' already exists"
Received message: "Task 160 not found"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-start-consistency.test.ts:231:17)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-start-consistency.test.ts:200:71)
(fail) Session Start Consistency Tests > Error handling edge cases > should prevent session creation when session already exists [0.03ms]
266 |           gitService: mockGitService,
267 |           taskService: mockTaskService,
268 |           workspaceUtils: mockWorkspaceUtils,
269 |           resolveRepoPath: mockResolveRepoPath,
270 |         })
271 |       ).rejects.toThrow("A session for task #160 already exists");
                      ^
error: expect(received).toThrow(expected)

Expected substring: "A session for task #160 already exists"
Received message: "Task 160 not found"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-start-consistency.test.ts:271:17)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-start-consistency.test.ts:238:85)
(fail) Session Start Consistency Tests > Error handling edge cases > should prevent session creation when another session exists for same task
(pass) Session Start Consistency Tests > Error handling edge cases > should prevent session creation when task does not exist [0.07ms]
328 |           gitService: mockGitService,
329 |           taskService: mockTaskService,
330 |           workspaceUtils: mockWorkspaceUtils,
331 |           resolveRepoPath: mockResolveRepoPath,
332 |         })
333 |       ).rejects.toThrow("fatal: destination path");
                      ^
error: expect(received).toThrow(expected)

Expected substring: "fatal: destination path"
Received message: "Task 160 not found"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-start-consistency.test.ts:333:17)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-start-consistency.test.ts:309:91)
(fail) Session Start Consistency Tests > Critical consistency verification > should never add session record before all git operations complete successfully [0.05ms]
309 |       taskId = normalizedTaskId;
310 | 
311 |       // Verify the task exists
312 |       const taskObj = await deps.taskService.getTask(normalizedTaskId);
313 |       if (!taskObj) {
314 |         throw new ResourceNotFoundError(`Task ${taskId} not found`, "task", taskId);
                    ^
ResourceNotFoundError: Task 160 not found
      cause: undefined,
 resourceType: "task",
 resourceId: "160",

      at startSessionFromParams (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session.ts:314:15)
(fail) Session Start Consistency Tests > Critical consistency verification > should successfully add session record only after all operations complete [0.06ms]

src/domain/git-service-pr-workflow.test.ts:

# Unhandled error between tests
-------------------------------
error: Cannot find module '../git' from '/Users/edobry/.local/state/minsky/sessions/task176/src/domain/git-service-pr-workflow.test.ts'
-------------------------------


src/domain/task-status-bug-regression.test.ts:
(pass) Task Status Bug Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for TODO status [0.02ms]
(pass) Task Status Bug Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for IN-PROGRESS status
(pass) Task Status Bug Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for IN-REVIEW status
(pass) Task Status Bug Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for DONE status [0.02ms]
(pass) Task Status Bug Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for BLOCKED status [0.01ms]
(pass) Task Status Bug Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should not throw 'status is not defined' error
(pass) Task Status Bug Regression Tests > Integration test with task status functionality > should handle all status transitions without variable naming errors [0.02ms]

src/eslint-rules/no-unsafe-git-network-operations.test.js:
(pass) no-unsafe-git-network-operations > valid > await gitPushWithTimeout("origin", "main", { workdir: "/path" }); [15.02ms]
(pass) no-unsafe-git-network-operations > valid > await gitPullWithTimeout("origin", "main", { workdir: "/path" }); [0.83ms]
(pass) no-unsafe-git-network-operations > valid > await gitFetchWithTimeout("origin", "main", { workdir: "/path" }); [0.87ms]
(pass) no-unsafe-git-network-operations > valid > await gitCloneWithTimeout("repo", "/path"); [0.65ms]
(pass) no-unsafe-git-network-operations > valid > await execGitWithTimeout("push", "push origin main", { workdir: "/path" }); [0.72ms]
(pass) no-unsafe-git-network-operations > valid > await execAsync("git status"); [0.37ms]
(pass) no-unsafe-git-network-operations > valid > await execAsync("git branch"); [0.43ms]
(pass) no-unsafe-git-network-operations > valid > await execAsync("git log"); [0.34ms]
(pass) no-unsafe-git-network-operations > valid > await execAsync("git diff"); [0.34ms]
(pass) no-unsafe-git-network-operations > valid > await execAsync("git add ."); [0.56ms]
(pass) no-unsafe-git-network-operations > valid > await execAsync("git commit -m \"message\""); [0.53ms]
(pass) no-unsafe-git-network-operations > valid > await execAsync("npm install"); [0.82ms]
(pass) no-unsafe-git-network-operations > valid > await execAsync("echo hello"); [0.17ms]
(pass) no-unsafe-git-network-operations > valid > await execGitWithTimeout("fetch", "fetch origin", { workdir }); [0.57ms]
(pass) no-unsafe-git-network-operations > invalid > await execAsync("git push origin main"); [2.16ms]
(pass) no-unsafe-git-network-operations > invalid > await execAsync("git pull origin main"); [0.97ms]
(pass) no-unsafe-git-network-operations > invalid > await execAsync("git fetch origin"); [0.50ms]
(pass) no-unsafe-git-network-operations > invalid > await execAsync("git clone https://github.com/user/repo.git /path"); [0.67ms]
(pass) no-unsafe-git-network-operations > invalid > await execAsync("git -C /repo push origin main"); [1.23ms]
(pass) no-unsafe-git-network-operations > invalid > await execAsync("git -C /repo fetch origin"); [1.13ms]
(pass) no-unsafe-git-network-operations > invalid > await execAsync(`git push origin ${branch}`); [1.22ms]
(pass) no-unsafe-git-network-operations > invalid > await execAsync(`git -C ${workdir} fetch ${remote}`); [0.68ms]
(pass) no-unsafe-git-network-operations > invalid > gitPushWithTimeout("origin", "main", { workdir }); [0.90ms]
(pass) no-unsafe-git-network-operations > invalid > execGitWithTimeout("fetch", "fetch origin", { workdir }); [0.53ms]
(pass) no-unsafe-git-network-operations > invalid > await execAsync("git ls-remote origin"); [0.91ms]

tests/consolidated-utilities/variable-naming-fixer.test.ts:
üè∑Ô∏è  Processing 1 TypeScript files for variable naming fixes...
‚úÖ Fixed 1 naming issues in /var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-yY35se/test.ts

üéØ Variable Naming Fix Results:
   Files processed: 1/1
   Total fixes applied: 1
   Success rate: 100.0%

üìä Fix type breakdown:
   underscore-prefix-mismatch: 1 fixes
(pass) Variable Naming Fixer Consolidated > Underscore Prefix Mismatches > should fix parameter definitions with underscores when usage has no underscore [4.92ms]
üè∑Ô∏è  Processing 1 TypeScript files for variable naming fixes...
‚úÖ Fixed 1 naming issues in /var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-4UUjzA/test.ts

üéØ Variable Naming Fix Results:
   Files processed: 1/1
   Total fixes applied: 1
   Success rate: 100.0%

üìä Fix type breakdown:
   underscore-prefix-mismatch: 1 fixes
(pass) Variable Naming Fixer Consolidated > Underscore Prefix Mismatches > should fix variable declarations with underscores when usage has no underscore [11.09ms]
üè∑Ô∏è  Processing 1 TypeScript files for variable naming fixes...
‚úÖ Fixed 2 naming issues in /var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-KQw3fa/test.ts

üéØ Variable Naming Fix Results:
   Files processed: 1/1
   Total fixes applied: 2
   Success rate: 100.0%

üìä Fix type breakdown:
   underscore-prefix-mismatch: 2 fixes
(pass) Variable Naming Fixer Consolidated > Underscore Prefix Mismatches > should handle destructuring with underscore mismatches [4.87ms]
üè∑Ô∏è  Processing 1 TypeScript files for variable naming fixes...

üéØ Variable Naming Fix Results:
   Files processed: 0/1
   Total fixes applied: 0
   Success rate: 0.0%
(pass) Variable Naming Fixer Consolidated > Boundary Validation - Should NOT Change > should NOT change intentionally unused parameters with underscores [1.52ms]
üè∑Ô∏è  Processing 1 TypeScript files for variable naming fixes...

üéØ Variable Naming Fix Results:
   Files processed: 0/1
   Total fixes applied: 0
   Success rate: 0.0%
(pass) Variable Naming Fixer Consolidated > Boundary Validation - Should NOT Change > should NOT change variables that are used with underscores consistently [0.87ms]
üè∑Ô∏è  Processing 1 TypeScript files for variable naming fixes...

üéØ Variable Naming Fix Results:
   Files processed: 0/1
   Total fixes applied: 0
   Success rate: 0.0%
(pass) Variable Naming Fixer Consolidated > Boundary Validation - Should NOT Change > should NOT change underscore patterns in strings or comments [0.94ms]
üè∑Ô∏è  Processing 1 TypeScript files for variable naming fixes...
(pass) Variable Naming Fixer Consolidated > Boundary Validation - Should NOT Change > should handle scope correctly - same variable names in different scopes [1.45ms]
üè∑Ô∏è  Processing 1 TypeScript files for variable naming fixes...
(pass) Variable Naming Fixer Consolidated > Error Handling > should handle files with syntax errors gracefully [1.73ms]
Error saving /var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-hpBkw4/test.ts: ENOENT: no such file or directory, open '/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-hpBkw4/test.ts'
    path: "/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-hpBkw4/test.ts",
 syscall: "open",
   errno: -2,
    code: "ENOENT"



üéØ Variable Naming Fix Results:
   Files processed: 0/1
   Total fixes applied: 0
   Success rate: 0.0%

üìä Fix type breakdown:
   underscore-prefix-mismatch: 1 fixes
üè∑Ô∏è  Processing 1 TypeScript files for variable naming fixes...

üéØ Variable Naming Fix Results:
   Files processed: 0/1
   Total fixes applied: 0
   Success rate: 0.0%
(pass) Variable Naming Fixer Consolidated > Error Handling > should handle non-existent patterns gracefully [0.93ms]
Error saving /var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-udh1Nf/broken.ts: ENOENT: no such file or directory, open '/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-udh1Nf/broken.ts'
    path: "/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-udh1Nf/broken.ts",
 syscall: "open",
   errno: -2,
    code: "ENOENT"



üéØ Variable Naming Fix Results:
   Files processed: 0/1
   Total fixes applied: 0
   Success rate: 0.0%

üìä Fix type breakdown:
   underscore-prefix-mismatch: 1 fixes
üè∑Ô∏è  Processing 1 TypeScript files for variable naming fixes...
‚úÖ Fixed 2 naming issues in /var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-ShsIm2/mixed.ts

üéØ Variable Naming Fix Results:
   Files processed: 1/1
   Total fixes applied: 2
   Success rate: 100.0%

üìä Fix type breakdown:
   underscore-prefix-mismatch: 2 fixes
(pass) Variable Naming Fixer Consolidated > Complex Scenarios > should handle mixed scenarios correctly [2.22ms]
(pass) Variable Naming Fixer Consolidated > Performance and Metrics > should provide accurate metrics [1.93ms]
üè∑Ô∏è  Processing 1 TypeScript files for variable naming fixes...
‚úÖ Fixed 1 naming issues in /var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-xbbyKH/complex-syntax.ts

üéØ Variable Naming Fix Results:
   Files processed: 1/1
   Total fixes applied: 1
   Success rate: 100.0%

üìä Fix type breakdown:
   underscore-prefix-mismatch: 1 fixes
(pass) Variable Naming Fixer Consolidated > Integration with AST Analysis > should properly parse TypeScript files with complex syntax [4.44ms]

src/utils/test-utils/assertions.test.ts:
(pass) Custom Assertion Helpers > expectToMatch > should match a string against a regex pattern [0.09ms]
(pass) Custom Assertion Helpers > expectToHaveLength > should verify array length [0.02ms]
(pass) Custom Assertion Helpers > expectToHaveLength > should verify string length [0.03ms]
(pass) Custom Assertion Helpers > expectToBeInstanceOf > should verify object instanceof [0.02ms]
(pass) Custom Assertion Helpers > expectToHaveProperty > should verify object has property [0.10ms]
(pass) Custom Assertion Helpers > expectToBeCloseTo > should compare floating point numbers with precision [0.03ms]
(pass) Custom Assertion Helpers > expectToContainEqual > should check if array contains an item with deep equality [0.04ms]

src/utils/test-utils/enhanced-utils.test.ts:
(pass) Enhanced Test Utilities > mockFunction > should create a type-safe mock function [0.06ms]
(pass) Enhanced Test Utilities > mockFunction > should allow changing implementation
(pass) Enhanced Test Utilities > createPartialMock > should create a mock with provided implementations [0.07ms]
(pass) Enhanced Test Utilities > mockReadonlyProperty > should mock readonly properties [0.03ms]
(pass) Enhanced Test Utilities > createTestDeps > should create default test dependencies [0.04ms]
(pass) Enhanced Test Utilities > createTestDeps > should allow overriding specific methods [0.03ms]
(pass) Enhanced Test Utilities > withMockedDeps > should temporarily override dependencies [0.10ms]
(pass) Enhanced Test Utilities > Factory Functions > should create task data with defaults [0.04ms]
(pass) Enhanced Test Utilities > Factory Functions > should create task data with overrides [0.01ms]
(pass) Enhanced Test Utilities > Factory Functions > should create an array of task data [0.04ms]
(pass) Enhanced Test Utilities > Factory Functions > should create session data [0.04ms]
(pass) Enhanced Test Utilities > Integration Example > should demonstrate a complex test scenario [0.04ms]

src/utils/test-utils/centralized-service-mocks.test.ts:
(pass) Centralized Service Mock Factories > createMockSessionProvider > should create a mock SessionProvider with all required methods
(pass) Centralized Service Mock Factories > createMockSessionProvider > should return default mock values [0.23ms]
(pass) Centralized Service Mock Factories > createMockSessionProvider > should allow method overrides [0.08ms]
(pass) Centralized Service Mock Factories > createMockGitService > should create a mock GitService with all required methods [0.05ms]
(pass) Centralized Service Mock Factories > createMockGitService > should return default mock values [0.06ms]
(pass) Centralized Service Mock Factories > createMockGitService > should allow method overrides [0.05ms]
(pass) Centralized Service Mock Factories > createMockTaskService > should create a mock TaskService with all required methods [0.04ms]
(pass) Centralized Service Mock Factories > createMockTaskService > should return default mock values [0.10ms]
(pass) Centralized Service Mock Factories > createMockTaskService > should allow method overrides [0.07ms]

src/utils/test-utils/compatibility.test.ts:

# Unhandled error between tests
-------------------------------
220 |       foo: (compat.createCompatMock() = mock(() => "mocked foo")),
                  ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/utils/test-utils/compatibility.test.ts:220:13

221 |       bar: (compat.createCompatMock() = mock(() => "mocked bar")),
                  ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/utils/test-utils/compatibility.test.ts:221:13

236 |       baz: (compat.createCompatMock() = mock(() => "mocked baz")),
                  ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/utils/test-utils/compatibility.test.ts:236:13
-------------------------------


src/utils/test-utils/mocking.test.ts:
(pass) Mocking Utilities > createMock creates a proper mock function [0.02ms]
(pass) Mocking Utilities > createMock without implementation returns a mock that returns undefined [0.03ms]
(pass) Mocking Utilities > createSpyOn spies on object methods [0.06ms]
(pass) Mocking Utilities > createSpyOn throws error when trying to spy on non-function property [0.13ms]

src/utils/test-utils/individual-service-factories.test.ts:
(pass) Individual Service Mock Factories > createMockSessionProvider > creates a mock with default behavior [0.12ms]
(pass) Individual Service Mock Factories > createMockSessionProvider > uses provided sessions array [0.07ms]
(pass) Individual Service Mock Factories > createMockSessionProvider > accepts method overrides [0.04ms]
(pass) Individual Service Mock Factories > createMockSessionProvider > supports empty options [0.02ms]
(pass) Individual Service Mock Factories > createMockGitService > creates a mock with default behavior [0.04ms]
(pass) Individual Service Mock Factories > createMockGitService > supports branch existence configuration [0.04ms]
(pass) Individual Service Mock Factories > createMockGitService > tracks git call count [0.04ms]
(pass) Individual Service Mock Factories > createMockGitService > accepts method overrides [0.03ms]
(pass) Individual Service Mock Factories > createMockGitService > handles non-PR git commands [0.02ms]
159 |       const mockService = createMockTaskService();
160 | 
161 |       expect(await mockService.getTask("123")).toBeNull();
162 |       expect(await mockService.listTasks()).toEqual([]);
163 |       expect(await mockService.getTaskStatus("123")).toBeUndefined();
164 |       expect(await mockService.deleteTask("123")).toBe(false);
                                                        ^
error: expect(received).toBe(expected)

Expected: false
Received: true

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/utils/test-utils/individual-service-factories.test.ts:164:51)
(fail) Individual Service Mock Factories > createMockTaskService > creates a mock with default behavior [0.11ms]
(pass) Individual Service Mock Factories > createMockTaskService > creates tasks with proper structure [0.03ms]
(pass) Individual Service Mock Factories > createMockTaskService > supports additional properties [0.03ms]
211 |         deleteTask: () => Promise.resolve(true),
212 |       };
213 | 
214 |       const mockService = createMockTaskService(customOptions);
215 | 
216 |       expect(await mockService.getTask("any")).toEqual(customTask);
                                                     ^
error: expect(received).toEqual(expected)

Expected: [32m{
  id: "#custom",
  title: "Custom Task",
  status: "IN_PROGRESS",
}[0m
Received: [31mnull[0m

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/utils/test-utils/individual-service-factories.test.ts:216:48)
(fail) Individual Service Mock Factories > createMockTaskService > accepts method overrides [0.36ms]
(pass) Individual Service Mock Factories > createMockTaskService > supports custom task creation [0.03ms]
(pass) Individual Service Mock Factories > createMockTaskService > handles empty options [0.03ms]
277 |       const branchResult = await mockGitService.execInRepository("/test", "show-ref pr/INT-001");
278 |       expect(branchResult).toBe("ref-exists");
279 | 
280 |       // Test task service
281 |       const task = await mockTaskService.getTask("INT-001");
282 |       expect(task?.title).toBe("Integration Task");
                                ^
error: expect(received).toBe(expected)

Expected: "Integration Task"
Received: undefined

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/utils/test-utils/individual-service-factories.test.ts:282:27)
(fail) Individual Service Mock Factories > Factory Integration > all factories work together in a test scenario [0.04ms]
(pass) Individual Service Mock Factories > Factory Integration > factories can be used independently

src/domain/configuration/index.test.ts:
(pass) Custom Configuration System > CustomConfigurationProvider > should implement getConfig() method [0.03ms]
(pass) Custom Configuration System > CustomConfigurationProvider > should implement get() method with path access [0.11ms]
(pass) Custom Configuration System > CustomConfigurationProvider > should implement has() method for path checking [0.03ms]
(pass) Custom Configuration System > CustomConfigurationProvider > should implement reload() method [0.31ms]
(pass) Custom Configuration System > CustomConfigurationProvider > should implement getMetadata() method [0.09ms]
(pass) Custom Configuration System > CustomConfigurationProvider > should implement validate() method
(pass) Custom Configuration System > CustomConfigurationProvider > should provide consistent configuration structure [0.03ms]
73 |       expect(config.ai).toBeDefined();
74 |     });
75 | 
76 |     test("should handle configuration overrides consistently", () => {
77 |       const config = provider.getConfig();
78 |       expect(config.backend).toBe("json-file"); // From overrides
                                  ^
error: expect(received).toBe(expected)

Expected: "json-file"
Received: "markdown"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/configuration/index.test.ts:78:30)
(fail) Custom Configuration System > CustomConfigurationProvider > should handle configuration overrides consistently [0.11ms]
(pass) Custom Configuration System > Configuration Initialization > should initialize with custom factory [0.27ms]
 98 |       await initializeConfiguration(factory, {
 99 |         overrides: { backend: "custom-override" },
100 |       });
101 | 
102 |       const config = getConfiguration();
103 |       expect(config.backend).toBe("custom-override");
                                   ^
error: expect(received).toBe(expected)

Expected: "custom-override"
Received: "markdown"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/configuration/index.test.ts:103:30)
(fail) Custom Configuration System > Configuration Initialization > should support configuration overrides [0.24ms]
Custom config load time: 0ms
(pass) Custom Configuration System > Performance > should load configuration within acceptable time limits
Average access time: 0.000ms per operation
(pass) Custom Configuration System > Performance > should access configuration values efficiently [0.45ms]
(pass) Custom Configuration System > Error Handling > should handle missing configuration paths gracefully
(pass) Custom Configuration System > Error Handling > should validate configuration structure
(pass) Custom Configuration System > Configuration Factory > should create provider with default options [0.23ms]
167 |         overrides: { backend: "test-backend" },
168 |         enableCache: false,
169 |       });
170 | 
171 |       const config = provider.getConfig();
172 |       expect(config.backend).toBe("test-backend");
                                   ^
error: expect(received).toBe(expected)

Expected: "test-backend"
Received: "markdown"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/configuration/index.test.ts:172:30)
(fail) Custom Configuration System > Configuration Factory > should create provider with custom options [0.20ms]

src/domain/tasks/task-service-interface.test.ts:
(pass) TaskService Interface Compatibility > should provide setTaskStatus method [1.10ms]
(pass) TaskService Interface Compatibility > should have getTaskStatus method (ensures interface completeness) [0.06ms]
(pass) TaskService Interface Compatibility > should validate task status in setTaskStatus method [0.37ms]
(pass) TaskService Interface Compatibility > should maintain interface compatibility with existing commands [0.13ms]

src/domain/tasks/utils.test.ts:
(pass) normalizeTaskId > should normalize "#064" to "#064" (with # and leading zero) [1.09ms]
(pass) normalizeTaskId > should normalize "#64" to "#64" (with #, no leading zero) [0.02ms]
(pass) normalizeTaskId > should normalize "064" to "#064" (no #, with leading zero)
(pass) normalizeTaskId > should normalize "64" to "#64" (no #, no leading zero)
(pass) normalizeTaskId > should normalize "task#064" to "#064" (with task# and leading zero)
(pass) normalizeTaskId > should normalize "task#64" to "#64" (with task#, no leading zero)
(pass) normalizeTaskId > should normalize "TASK#64" to "#64" (with TASK# (uppercase), no leading zero)
(pass) normalizeTaskId > should normalize "  #64  " to "#64" (with whitespace)
(pass) normalizeTaskId > should normalize "task#0" to "#0" (task ID zero)
(pass) normalizeTaskId > should normalize "0" to "#0" (task ID zero numeric)
(pass) normalizeTaskId > should return null for invalid input "abc" (non-numeric) [0.02ms]
(pass) normalizeTaskId > should return null for invalid input "#abc" (# with non-numeric)
(pass) normalizeTaskId > should return null for invalid input "task#abc" (task# with non-numeric)
(pass) normalizeTaskId > should return null for invalid input "64a" (numeric followed by alpha)
(pass) normalizeTaskId > should return null for invalid input "a64" (alpha followed by numeric)
(pass) normalizeTaskId > should return null for invalid input "#" (only #)
(pass) normalizeTaskId > should return null for invalid input "task#" (only task#)
(pass) normalizeTaskId > should return null for invalid input "" (empty string)
(pass) normalizeTaskId > should return null for invalid input "   " (whitespace only)
(pass) normalizeTaskId > should return null for invalid input "null" (null input)
(pass) normalizeTaskId > should return null for invalid input "undefined" (undefined input)
(pass) normalizeTaskId > should return null for invalid input "123" (number input type)

src/domain/tasks/cli-mcp-consistency.test.ts:
113 |     const mcpTask = await getTaskFromParams({ taskId }, mcpDeps);
114 | 
115 |     // BUG: This test should fail because CLI and MCP return different data
116 |     // Expected: Both should return identical task data from special workspace
117 |     // Actual: CLI returns local workspace data, MCP returns special workspace data
118 |     expect(cliTask.title).toBe(mcpTask.title); // This will FAIL until bug is fixed
                                ^
error: expect(received).toBe(expected)

Expected: "Special workspace task"
Received: "Local workspace task"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/cli-mcp-consistency.test.ts:118:27)
(fail) CLI-MCP Task Database Consistency Bug > BUG: CLI and MCP should return identical task data for same task ID [0.83ms]
156 |     const cliTasks = await listTasksFromParams({ all: true }, cliDeps);
157 |     const mcpTasks = await listTasksFromParams({ all: true }, mcpDeps);
158 | 
159 |     // BUG: This should fail because CLI and MCP return different task lists
160 |     expect(cliTasks.length).toBe(mcpTasks.length); // Will FAIL - different number of tasks
161 |     expect(cliTasks.map((t) => t.title)).toEqual(mcpTasks.map((t) => t.title)); // Will FAIL - different tasks
                                               ^
error: expect(received).toEqual(expected)

  [
+   "Local workspace task"
-   "Special workspace task"
  ]

- Expected  - 1
+ Received  + 1

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/cli-mcp-consistency.test.ts:161:42)
(fail) CLI-MCP Task Database Consistency Bug > BUG: Task list should be identical between CLI and MCP [0.54ms]
(pass) CLI-MCP Task Database Consistency Bug > EXPECTED: All task operations should use special workspace path [0.26ms]
(pass) Backend Capabilities System (Task #315) > MarkdownTaskBackend capabilities > should report accurate capabilities
Backend does not support dependencies - use JSON backend or implement feature
Backend requires special workspace management
(pass) Backend Capabilities System (Task #315) > MarkdownTaskBackend capabilities > should provide capabilities discovery for backend selection [0.09ms]

src/domain/tasks/taskService-jsonFile-integration.test.ts:
(pass) TaskService JsonFile Integration (Enhanced) > Basic Task Operations > should create and retrieve tasks [0.93ms]
(pass) TaskService JsonFile Integration (Enhanced) > Basic Task Operations > should handle multiple tasks [0.42ms]
(pass) TaskService JsonFile Integration (Enhanced) > Basic Task Operations > should update task status [0.32ms]
154 | 
155 |       const task = await taskServiceInstance.getTask(invalidId);
156 |       expect(task).toBe(null);
157 | 
158 |       const status = await taskServiceInstance.getTaskStatus(invalidId);
159 |       expect(status).toBeUndefined();
                           ^
error: expect(received).toBeUndefined()

Received: null

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/taskService-jsonFile-integration.test.ts:159:22)
(fail) TaskService JsonFile Integration (Enhanced) > Error Handling > should handle invalid task IDs gracefully [0.24ms]
(pass) TaskService JsonFile Integration (Enhanced) > Error Handling > should validate task status values [0.20ms]
(pass) TaskService JsonFile Integration (Enhanced) > Data Persistence > should persist changes across service instances [0.20ms]
(pass) TaskService JsonFile Integration (Enhanced) > Test Isolation Validation > should maintain proper test isolation
(pass) TaskService JsonFile Integration (Enhanced) > Test Isolation Validation > should cleanup properly after each test

src/domain/tasks/jsonFileTaskBackend.test.ts:
(pass) JsonFileTaskBackend > storage operations > should initialize storage correctly
(pass) JsonFileTaskBackend > storage operations > should store and retrieve tasks [0.42ms]
(pass) JsonFileTaskBackend > storage operations > should update tasks [0.40ms]
(pass) JsonFileTaskBackend > storage operations > should delete tasks [0.48ms]
(pass) JsonFileTaskBackend > TaskBackend interface compliance > should implement getTasksData [0.07ms]
(pass) JsonFileTaskBackend > TaskBackend interface compliance > should implement saveTasksData [1.00ms]
(pass) JsonFileTaskBackend > TaskBackend interface compliance > should implement parseTasks
(pass) JsonFileTaskBackend > TaskBackend interface compliance > should implement formatTasks [0.14ms]
(pass) JsonFileTaskBackend > TaskBackend interface compliance > should handle task spec operations [0.27ms]
(pass) JsonFileTaskBackend > markdown compatibility > should parse markdown task format
(pass) JsonFileTaskBackend > helper methods > should generate correct task spec paths [0.09ms]
(pass) JsonFileTaskBackend > helper methods > should return correct workspace path [0.03ms]

src/domain/tasks/special-workspace-integration.test.ts:
(pass) Enhanced Workspace Integration > Enhanced TaskService Integration > should create TaskService with workspace resolution [0.36ms]
error: Test "should handle repository-based workspace creation" timed out after 5001ms
(fail) Enhanced Workspace Integration > Enhanced TaskService Integration > should handle repository-based workspace creation [5001.04ms]
(pass) Enhanced Workspace Integration > Enhanced TaskService Integration > should support traditional TaskService creation [0.02ms]
(pass) Enhanced Workspace Integration > Architectural Benefits > should validate elimination of complex routing patterns
error: Test "should demonstrate simplified workspace resolution" timed out after 5000ms
(fail) Enhanced Workspace Integration > Architectural Benefits > should demonstrate simplified workspace resolution [5000.06ms]

src/domain/tasks/task-id-utils.test.ts:
(pass) Task ID Utilities for Task 283 > normalizeTaskIdForStorage > should convert display format to storage format [0.02ms]
(pass) Task ID Utilities for Task 283 > normalizeTaskIdForStorage > should keep storage format as-is [0.03ms]
(pass) Task ID Utilities for Task 283 > normalizeTaskIdForStorage > should handle task# prefix format [0.03ms]
(pass) Task ID Utilities for Task 283 > normalizeTaskIdForStorage > should strip multiple # prefixes
(pass) Task ID Utilities for Task 283 > normalizeTaskIdForStorage > should handle whitespace [0.01ms]
(pass) Task ID Utilities for Task 283 > normalizeTaskIdForStorage > should return null for invalid input [0.03ms]
(pass) Task ID Utilities for Task 283 > normalizeTaskIdForStorage > should handle edge cases
(pass) Task ID Utilities for Task 283 > formatTaskIdForDisplay > should add # prefix to storage format [0.04ms]
(pass) Task ID Utilities for Task 283 > formatTaskIdForDisplay > should keep display format as-is [0.01ms]
(pass) Task ID Utilities for Task 283 > formatTaskIdForDisplay > should handle invalid input
(pass) Task ID Utilities for Task 283 > formatTaskIdForDisplay > should handle edge cases
(pass) Task ID Utilities for Task 283 > isStorageFormat > should identify storage format correctly [0.03ms]
(pass) Task ID Utilities for Task 283 > isStorageFormat > should reject display format
(pass) Task ID Utilities for Task 283 > isStorageFormat > should reject invalid formats [0.01ms]
(pass) Task ID Utilities for Task 283 > isStorageFormat > should handle whitespace
(pass) Task ID Utilities for Task 283 > isDisplayFormat > should identify display format correctly [0.02ms]
(pass) Task ID Utilities for Task 283 > isDisplayFormat > should reject storage format [0.01ms]
(pass) Task ID Utilities for Task 283 > isDisplayFormat > should reject invalid formats [0.02ms]
(pass) Task ID Utilities for Task 283 > isDisplayFormat > should handle whitespace
(pass) Task ID Utilities for Task 283 > convertTaskIdFormat > should convert to storage format [0.05ms]
(pass) Task ID Utilities for Task 283 > convertTaskIdFormat > should convert to display format [0.01ms]
(pass) Task ID Utilities for Task 283 > convertTaskIdFormat > should return null for invalid input
(pass) Task ID Utilities for Task 283 > isValidTaskIdInput > should accept valid formats [0.02ms]
(pass) Task ID Utilities for Task 283 > isValidTaskIdInput > should reject invalid formats [0.01ms]
(pass) Task ID Utilities for Task 283 > getTaskIdNumber > should extract numbers from valid formats [0.04ms]
(pass) Task ID Utilities for Task 283 > getTaskIdNumber > should return null for invalid formats [0.02ms]
(pass) Task ID Utilities for Task 283 > getTaskIdNumber > should handle leading zeros correctly [0.01ms]
(pass) Task ID Utilities for Task 283 > integration scenarios > should handle full workflow: input -> storage -> display [0.04ms]
(pass) Task ID Utilities for Task 283 > integration scenarios > should maintain data consistency [0.10ms]

src/domain/tasks/json-backend.test.ts:
19 |       // Ignore cleanup errors
20 |     }
21 |   });
22 | 
23 |   test("should create backend with explicit workspace path", async () => {
24 |     const backend = await createWorkspaceResolvingJsonBackend({
                               ^
ReferenceError: createWorkspaceResolvingJsonBackend is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/json-backend.test.ts:24:27)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/json-backend.test.ts:23:62)
(fail) Enhanced JSON Backend > should create backend with explicit workspace path [0.19ms]
30 |     expect(backend.name).toBe("json-file");
31 |     expect(backend.getWorkspacePath()).toBe(testDir);
32 |   });
33 | 
34 |   test("should resolve workspace using current directory", async () => {
35 |     const backend = await createWorkspaceResolvingJsonBackend({
                               ^
ReferenceError: createWorkspaceResolvingJsonBackend is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/json-backend.test.ts:35:27)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/json-backend.test.ts:34:60)
(fail) Enhanced JSON Backend > should resolve workspace using current directory [0.05ms]
40 |     expect(typeof backend.getWorkspacePath()).toBe("string");
41 |   });
42 | 
43 |   test("should handle database file path configuration", async () => {
44 |     const customDbPath = join(testDir, "my-tasks.json");
45 |     const backend = (await createWorkspaceResolvingJsonBackend({
                                ^
ReferenceError: createWorkspaceResolvingJsonBackend is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/json-backend.test.ts:45:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/json-backend.test.ts:43:58)
(fail) Enhanced JSON Backend > should handle database file path configuration [0.06ms]
50 | 
51 |     expect(backend.getStorageLocation()).toBe(customDbPath);
52 |   });
53 | 
54 |   test("should identify as in-tree backend when using special workspace", async () => {
55 |     const backend = (await createWorkspaceResolvingJsonBackend({
                                ^
ReferenceError: createWorkspaceResolvingJsonBackend is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/json-backend.test.ts:55:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/json-backend.test.ts:54:75)
(fail) Enhanced JSON Backend > should identify as in-tree backend when using special workspace [0.04ms]

src/domain/tasks/real-world-workflow.test.ts:
(pass) Real-World Workflow Testing > JSON Backend Real Storage > should actually create and store data in the correct location [0.36ms]
(pass) Real-World Workflow Testing > JSON Backend Real Storage > should default to process/tasks.json when no explicit path provided [0.03ms]
(pass) Real-World Workflow Testing > TaskService Integration > should work with JSON backend for complete task operations [0.22ms]
(pass) Real-World Workflow Testing > Error Handling > should handle missing process directory gracefully [0.08ms]

src/domain/tasks/taskService.test.ts:
(pass) TaskService > listTasks > should get tasks data and parse it
(pass) TaskService > listTasks > should filter tasks by status if provided [0.04ms]
(pass) TaskService > listTasks > should return empty array if data retrieval fails [0.04ms]
(pass) TaskService > getTask > should find a task by ID [0.04ms]
(pass) TaskService > getTask > should find a task by ID without # prefix [0.04ms]
(pass) TaskService > getTask > should return null if task not found [0.02ms]
(pass) TaskService > getTaskStatus > should get a task's status [0.02ms]
(pass) TaskService > getTaskStatus > should return null if task not found [0.02ms]
(pass) TaskService > setTaskStatus > should update a task's status [0.09ms]
(pass) TaskService > setTaskStatus > should throw error for invalid status [0.03ms]
(pass) TaskService > setTaskStatus > should throw error if task not found [0.04ms]
(pass) TaskService > createTask > should create a new task from spec file [0.06ms]
(pass) TaskService > createTask > should throw error if spec file read fails [0.06ms]
(pass) TaskService > createTaskFromTitleAndDescription > should store proper spec path instead of temporary path [0.10ms]
165 | 
166 |   async createTask(specPath: string, _options?: CreateTaskOptions): Promise<Task> {
167 |     // Read and parse the spec file
168 |     const specResult = await this.getTaskSpecData(specPath);
169 |     if (!specResult.success || !specResult.content) {
170 |       throw new Error(`Failed to read spec file: ${specPath}`);
                  ^
error: Failed to read spec file: /var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/temp-task-integration-test-task-1753727798450.md
      at createTask (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/markdownTaskBackend.ts:170:13)
(fail) TaskService > createTaskFromTitleAndDescription > integration: should create task with proper spec path using real backend [1.41ms]
(pass) TaskService > backend handling > should throw error for non-existent backend [0.07ms]
(pass) TaskService > backend handling > should use markdown backend by default [0.03ms]

src/domain/tasks/backend-workspace-integration.test.ts:
(skip) Backend Workspace Integration - Current Behavior > Current Markdown Backend Behavior > markdown backend should use special workspace when no local tasks.md
(pass) Backend Workspace Integration - Current Behavior > Current Markdown Backend Behavior > markdown backend should work with resolved workspace [0.02ms]
(pass) Backend Workspace Integration - Current Behavior > Current Markdown Backend Behavior > TaskService should work with markdown backend and resolved workspace [0.31ms]
77 |       const workspacePath = await resolveTaskWorkspacePath({
78 |         backend: "json-file",
79 |       });
80 | 
81 |       // JSON backend uses current directory
82 |       expect(workspacePath).toBe((process as any).cwd());
                                 ^
error: expect(received).toBe(expected)

Expected: "/Users/edobry/.local/state/minsky/sessions/task176"
Received: "/Users/edobry/.local/state/minsky/task-operations"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/backend-workspace-integration.test.ts:82:29)
(fail) Backend Workspace Integration - Current Behavior > Current JSON Backend Behavior > json backend should use current directory for external files [0.03ms]
(pass) Backend Workspace Integration - Current Behavior > Current JSON Backend Behavior > json backend should work with resolved workspace [0.02ms]
(pass) Backend Workspace Integration - Current Behavior > Current TaskService Integration > should work with pre-resolved workspace for markdown [0.27ms]
(pass) Backend Workspace Integration - Current Behavior > Current TaskService Integration > should work with pre-resolved workspace for json [0.04ms]
(skip) Backend Workspace Integration - Current Behavior > Current Complex Workflow > should handle full current workflow for markdown
(skip) Backend Workspace Integration - Current Behavior > Current Complex Workflow > should handle edge case: markdown with local tasks.md file
(pass) Target Backend Architecture - Self-Contained Workspace Resolution > Enhanced Markdown Backend > should handle workspace resolution internally with explicit path [0.02ms]
error: Test "should handle current directory workspace resolution" timed out after 5000ms
(fail) Target Backend Architecture - Self-Contained Workspace Resolution > Enhanced Markdown Backend > should handle current directory workspace resolution [5000.37ms]
(skip) Target Backend Architecture - Self-Contained Workspace Resolution > Enhanced Markdown Backend > should handle special workspace resolution with repo URL
(pass) Target Backend Architecture - Self-Contained Workspace Resolution > Enhanced Markdown Backend > should work with task operations [0.08ms]
(pass) Target Backend Architecture - Self-Contained Workspace Resolution > Simplified Workflow > should eliminate external workspace resolution for explicit paths [0.06ms]
(skip) Target Backend Architecture - Self-Contained Workspace Resolution > Simplified Workflow > should eliminate external workspace resolution for repo URLs
(pass) Target Backend Architecture - Self-Contained Workspace Resolution > Simplified Workflow > should enable complete TaskService workflow with enhanced backends [0.17ms]
(skip) Target Backend Architecture - Self-Contained Workspace Resolution > Simplified Workflow > should support repository-based TaskService creation
error: Test "should support auto-detection TaskService creation" timed out after 5000ms
(fail) Target Backend Architecture - Self-Contained Workspace Resolution > Simplified Workflow > should support auto-detection TaskService creation [5000.43ms]
(pass) Target Backend Architecture - Self-Contained Workspace Resolution > Simplified Workflow > should support full configuration pattern [1.19ms]

src/domain/tasks/taskFunctions.test.ts:
(pass) Task Functions > normalizeTaskId > should return canonical form for valid IDs
(pass) Task Functions > normalizeTaskId > should handle various prefix patterns [0.09ms]
(pass) Task Functions > normalizeTaskId > should return undefined for non-numeric input [0.02ms]
(pass) Task Functions > normalizeTaskId > should extract numeric portion from mixed formats
(pass) Task Functions > normalizeTaskId > should handle alphanumeric task IDs
(pass) Task Functions > parseTasksFromMarkdown > should return empty array for empty content [0.02ms]
(pass) Task Functions > parseTasksFromMarkdown > should parse tasks from markdown content [0.07ms]
(pass) Task Functions > parseTasksFromMarkdown > should ignore tasks in code blocks [0.02ms]
(pass) Task Functions > formatTasksToMarkdown > should return empty string for empty array [0.04ms]
(pass) Task Functions > formatTasksToMarkdown > should format tasks to markdown with one-liner format only [0.04ms]
(pass) Task Functions > formatTasksToMarkdown > should use task specPath if available [0.01ms]
(pass) Task Functions > getTaskById > should return null for empty input [0.05ms]
(pass) Task Functions > getTaskById > should find task by exact ID match [0.03ms]
(pass) Task Functions > getTaskById > should find task by ID without # prefix [0.03ms]
(pass) Task Functions > getTaskById > should handle numeric equivalence [0.02ms]
(pass) Task Functions > getNextTaskId > should return 001 for empty tasks array [0.03ms]
(pass) Task Functions > getNextTaskId > should find the maximum ID and increment it [0.02ms]
(pass) Task Functions > getNextTaskId > should handle non-sequential IDs [0.02ms]
(pass) Task Functions > getNextTaskId > should pad with zeros [0.01ms]
(pass) Task Functions > setTaskStatus > should update a task's status [0.05ms]
(pass) Task Functions > setTaskStatus > should work with task ID variations [0.02ms]
(pass) Task Functions > setTaskStatus > should return original array if task not found
(pass) Task Functions > setTaskStatus > should return original array if status is invalid
(pass) Task Functions > addTask > should add a new task to the array [0.04ms]
(pass) Task Functions > addTask > should replace an existing task with the same ID [0.02ms]
(pass) Task Functions > addTask > should generate an ID if not provided [0.03ms]
(pass) Task Functions > filterTasks > should return all tasks if no filter provided [0.03ms]
(pass) Task Functions > filterTasks > should filter by status [0.06ms]
(pass) Task Functions > filterTasks > should filter by ID [0.01ms]
(pass) Task Functions > filterTasks > should filter by title (string match) [0.01ms]
(pass) Task Functions > filterTasks > should filter by title (regex match) [0.02ms]
(pass) Task Functions > filterTasks > should filter by specPath existence [0.02ms]
(pass) Task Functions > filterTasks > should combine multiple filter criteria [0.03ms]
(pass) Task Functions > parseTaskSpecFromMarkdown > should parse task spec from markdown [0.10ms]
(pass) Task Functions > parseTaskSpecFromMarkdown > should handle specs without task ID [0.02ms]
(pass) Task Functions > parseTaskSpecFromMarkdown > should handle general heading format [0.02ms]
(pass) Task Functions > parseTaskSpecFromMarkdown > should return empty values for invalid input
(pass) Task Functions > formatTaskSpecToMarkdown > should format task spec to markdown with ID [0.03ms]
(pass) Task Functions > formatTaskSpecToMarkdown > should format task spec without ID
(pass) Task Functions > isValidTaskStatus > should validate correct statuses [0.02ms]
(pass) Task Functions > isValidTaskStatus > should reject invalid statuses [0.01ms]

src/domain/tasks/configuration-integration.test.ts:
(pass) Configuration Integration > createConfiguredTaskService should use configuration to resolve backend [1.31ms]
(pass) Configuration Integration > createConfiguredTaskService should fall back to default when configuration fails [0.08ms]
(pass) Configuration Integration > createConfiguredTaskService should respect explicit backend parameter [0.53ms]

src/domain/tasks/githubIssuesTaskBackend.test.ts:
(pass) GitHubIssuesTaskBackend > configuration > should create instance with correct configuration
(pass) GitHubIssuesTaskBackend > configuration > should initialize with custom status labels [0.13ms]
(pass) GitHubIssuesTaskBackend > parseTasks > should parse GitHub issues into TaskData objects [0.25ms]
(pass) GitHubIssuesTaskBackend > parseTasks > should handle invalid JSON gracefully [0.02ms]
(pass) GitHubIssuesTaskBackend > formatTasks > should format TaskData objects for GitHub API [0.10ms]
(pass) GitHubIssuesTaskBackend > parseTaskSpec > should parse task specification content [0.02ms]
(pass) GitHubIssuesTaskBackend > formatTaskSpec > should format task specification data [0.04ms]
(pass) GitHubIssuesTaskBackend > getTaskSpecPath > should generate correct spec path [0.04ms]
(pass) GitHubIssuesTaskBackend > getTaskSpecPath > should handle task ID without # prefix [0.04ms]
(pass) GitHubIssuesTaskBackend > getTaskSpecPath > should normalize title for filename [0.03ms]

src/domain/tasks/taskConstants.test.ts:
(pass) Task Constants and Utilities > Basic Constants > should have all required task statuses [1.11ms]
(pass) Task Constants and Utilities > Basic Constants > should have bidirectional mapping between status and checkbox [0.06ms]
(pass) Task Constants and Utilities > Regex Patterns > should match valid task lines [0.05ms]
(pass) Task Constants and Utilities > Regex Patterns > should not match invalid task lines [0.02ms]
(pass) Task Constants and Utilities > Parsing Utilities > should parse valid task lines correctly [0.05ms]
(pass) Task Constants and Utilities > Parsing Utilities > should return null for invalid task lines [0.02ms]
(pass) Task Constants and Utilities > Parsing Utilities > should replace checkbox status correctly [0.04ms]
(pass) Task Constants and Utilities > Parsing Utilities > should get status from checkbox correctly [0.01ms]
(pass) Task Constants and Utilities > Parsing Utilities > should get checkbox from status correctly [0.02ms]
(pass) Task Constants and Utilities > Parsing Utilities > should validate task-like lines correctly [0.02ms]
(pass) Task Constants and Utilities > Status Validation > should validate valid statuses
(pass) Task Constants and Utilities > Status Validation > should reject invalid statuses
(pass) Task Constants and Utilities > Dynamic Pattern Generation > should generate patterns that include all status characters [0.02ms]
(pass) Task Constants and Utilities > Dynamic Pattern Generation > should handle new status additions gracefully [0.02ms]

src/domain/tasks/taskCommands.test.ts:
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should return BLOCKED status for task 155 with [~] checkbox [0.31ms]
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should return TODO status for task 156 with [ ] checkbox [0.11ms]
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should return IN_PROGRESS status for task 157 with [+] checkbox [0.13ms]
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should return DONE status for task 158 with [x] checkbox [0.19ms]
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should throw error when task not found [0.12ms]
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should handle task ID normalization [0.09ms]
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should handle custom repo path [0.05ms]
258 |         resolveTaskWorkspacePath: async (options?: any) => testWorkspacePath,
259 |         createTaskService: async (options: any) => mockTaskService,
260 |       };
261 | 
262 |       const result = await getTaskFromParams(params, mockDeps);
263 |       expect(result).toEqual(mockTask);
                           ^
error: expect(received).toEqual(expected)

  {
+   description: "",
+   id: "#155",
+   specPath: "process/tasks/155-add-blocked-status-support.md",
-   description: "This is a test task",
-   id: "155",
    status: "BLOCKED",
    title: "Add BLOCKED Status Support",
  }

- Expected  - 2
+ Received  + 3

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/taskCommands.test.ts:263:22)
(fail) Interface-Agnostic Task Command Functions > getTaskFromParams > should get task by ID [0.30ms]
(pass) Interface-Agnostic Task Command Functions > getTaskFromParams > should throw error when task not found [0.19ms]
305 |         resolveTaskWorkspacePath: async (options?: any) => testWorkspacePath,
306 |         createTaskService: async (options: any) => mockTaskService,
307 |       };
308 | 
309 |       const result = await getTaskFromParams(params, mockDeps);
310 |       expect(result).toEqual(mockTask);
                           ^
error: expect(received).toEqual(expected)

  {
+   description: "",
+   id: "#155",
+   specPath: "process/tasks/155-add-blocked-status-support.md",
-   id: "155",
    status: "BLOCKED",
    title: "Add BLOCKED Status Support",
  }

- Expected  - 1
+ Received  + 3

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/taskCommands.test.ts:310:22)
(fail) Interface-Agnostic Task Command Functions > getTaskFromParams > should handle task ID normalization [0.25ms]
336 |         resolveTaskWorkspacePath: async (options?: any) => testWorkspacePath,
337 |         createTaskService: async (options: any) => mockTaskService,
338 |       };
339 | 
340 |       const result = await getTaskFromParams(params, mockDeps);
341 |       expect(result).toEqual(mockTask);
                           ^
error: expect(received).toEqual(expected)

  {
+   description: "",
+   id: "#155",
+   specPath: "process/tasks/155-add-blocked-status-support.md",
-   id: "155",
    status: "BLOCKED",
    title: "Add BLOCKED Status Support",
  }

- Expected  - 1
+ Received  + 3

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/taskCommands.test.ts:341:22)
(fail) Interface-Agnostic Task Command Functions > getTaskFromParams > should handle custom repo path [0.22ms]
366 |         resolveTaskWorkspacePath: async (options?: any) => testWorkspacePath,
367 |         createTaskService: async (options: any) => mockTaskService,
368 |       };
369 | 
370 |       const result = await listTasksFromParams(params, mockDeps);
371 |       expect(result).toEqual(mockTasks);
                           ^
error: expect(received).toEqual(expected)

  [
    {
+     description: "",
      id: "#155",
+     specPath: "process/tasks/155-add-blocked-status-support.md",
      status: "BLOCKED",
+     title: "Add BLOCKED Status Support",
-     title: "Task 1",
    },
    {
+     description: "",
      id: "#156",
+     specPath: "process/tasks/156-some-other-task.md",
      status: "TODO",
+     title: "Some other task",
-     title: "Task 2",
    },
    {
+     description: "",
      id: "#157",
+     specPath: "process/tasks/157-in-progress-task.md",
      status: "IN-PROGRESS",
+     title: "In progress task",
-     title: "Task 3",
    },
    {
+     description: "",
      id: "#158",
+     specPath: "process/tasks/158-done-task.md",
      status: "DONE",
+     title: "Done task",
-     title: "Task 4",
    }
  ]

- Expected  - 4
+ Received  + 12

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/taskCommands.test.ts:371:22)
(fail) Interface-Agnostic Task Command Functions > listTasksFromParams > should list all tasks when no filter is provided [0.21ms]
394 |         resolveTaskWorkspacePath: async (options?: any) => testWorkspacePath,
395 |         createTaskService: async (options: any) => mockTaskService,
396 |       };
397 | 
398 |       const result = await listTasksFromParams(params, mockDeps);
399 |       expect(result).toEqual([mockTasks[0]]);
                           ^
error: expect(received).toEqual(expected)

  [
    {
+     description: "",
      id: "#155",
+     specPath: "process/tasks/155-add-blocked-status-support.md",
      status: "BLOCKED",
+     title: "Add BLOCKED Status Support",
-     title: "Task 1",
    }
  ]

- Expected  - 1
+ Received  + 3

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/taskCommands.test.ts:399:22)
(fail) Interface-Agnostic Task Command Functions > listTasksFromParams > should filter tasks by status [0.22ms]
421 |         resolveTaskWorkspacePath: async (options?: any) => testWorkspacePath,
422 |         createTaskService: async (options: any) => mockTaskService,
423 |       };
424 | 
425 |       const result = await listTasksFromParams(params, mockDeps);
426 |       expect(result).toEqual([mockTasks[0], mockTasks[1]]);
                           ^
error: expect(received).toEqual(expected)

  [
    {
+     description: "",
      id: "#155",
+     specPath: "process/tasks/155-add-blocked-status-support.md",
      status: "BLOCKED",
+     title: "Add BLOCKED Status Support",
-     title: "Task 1",
    },
    {
+     description: "",
      id: "#156",
+     specPath: "process/tasks/156-some-other-task.md",
      status: "TODO",
+     title: "Some other task",
+   },
+   {
+     description: "",
+     id: "#157",
+     specPath: "process/tasks/157-in-progress-task.md",
+     status: "IN-PROGRESS",
+     title: "In progress task",
-     title: "Task 2",
    }
  ]

- Expected  - 2
+ Received  + 13

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/taskCommands.test.ts:426:22)
(fail) Interface-Agnostic Task Command Functions > listTasksFromParams > should filter out DONE tasks when all is false [0.27ms]
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id CC0B:A29C1:6CB501:DC808E:6887C340 in 127ms
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id CC06:315B62:731B00:E93FDC:6887C340 in 126ms
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id CC10:307D38:78471C:F386B3:6887C340 in 132ms
GET /repos/test-owner/test-repo/labels/custom%3Atodo - 401 with id CC0E:1FAEC1:75AECA:EE6545:6887C340 in 130ms
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id CC0A:551EB:738D32:EA3AC2:6887C340 in 130ms
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id CC09:1F10A2:7701A0:F0D309:6887C340 in 130ms
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id CC0F:29799B:704ADD:E33C62:6887C340 in 135ms
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id CC0C:18E8DE:7592D6:EE3740:6887C340 in 136ms
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id CC0D:79B75:6FFC70:E2F5AB:6887C340 in 136ms
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id CC08:307D38:78471D:F386B5:6887C340 in 147ms
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id CC07:1DA2F6:7686B2:F01BD5:6887C340 in 146ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id CC0B:A29C1:6CB529:DC80EB:6887C340 in 38ms
GET /repos/test-owner/test-repo/labels/custom%3Ain-progress - 401 with id CC0E:1FAEC1:75AEF8:EE65B7:6887C340 in 42ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id CC06:315B62:731B32:E9403E:6887C340 in 44ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id CC09:1F10A2:7701DA:F0D380:6887C340 in 46ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id CC0A:551EB:738D73:EA3B46:6887C340 in 47ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id CC0C:18E8DE:759318:EE37B7:6887C340 in 42ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id CC0D:79B75:6FFCAB:E2F61B:6887C340 in 47ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id CC10:307D38:784751:F38726:6887C340 in 53ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id CC0F:29799B:704B19:E33CCA:6887C340 in 49ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id CC08:307D38:784775:F38768:6887C340 in 45ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id CC07:1DA2F6:7686F5:F01C74:6887C340 in 45ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id CC0B:A29C1:6CB54E:DC8142:6887C340 in 45ms
GET /repos/test-owner/test-repo/labels/custom%3Ain-review - 401 with id CC0E:1FAEC1:75AF29:EE6603:6887C340 in 55ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id CC06:315B62:731B5A:E940B9:6887C340 in 55ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id CC0A:551EB:738DAC:EA3BDD:6887C340 in 50ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id CC0F:29799B:704B54:E33D3C:6887C340 in 44ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id CC09:1F10A2:770208:F0D3E8:6887C340 in 51ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id CC0C:18E8DE:759351:EE3826:6887C340 in 50ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id CC10:307D38:7847C0:F387AD:6887C340 in 45ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id CC0D:79B75:6FFCD4:E2F666:6887C340 in 46ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id CC07:1DA2F6:76871E:F01CBE:6887C340 in 39ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id CC08:307D38:7847D2:F387D7:6887C340 in 54ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id CC0C:18E8DE:75938F:EE3895:6887C340 in 40ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id CC06:315B62:731B9E:E9412F:6887C340 in 42ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id CC0F:29799B:704B8E:E33D97:6887C340 in 42ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id CC09:1F10A2:770247:F0D460:6887C340 in 43ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id CC0B:A29C1:6CB584:DC81B6:6887C340 in 60ms
GET /repos/test-owner/test-repo/labels/custom%3Adone - 401 with id CC0E:1FAEC1:75AF66:EE6681:6887C340 in 46ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id CC0D:79B75:6FFCFF:E2F6C1:6887C340 in 45ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id CC0A:551EB:738DEF:EA3C49:6887C340 in 46ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id CC10:307D38:7847F8:F3881D:6887C340 in 54ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id CC07:1DA2F6:76874C:F01D01:6887C340 in 51ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id CC08:307D38:784814:F38854:6887C340 in 46ms
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id CC0F:29799B:704BBA:E33E04:6887C340 in 40ms
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id CC0C:18E8DE:7593C0:EE38F0:6887C340 in 43ms
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id CC0B:A29C1:6CB5B4:DC821D:6887C340 in 40ms
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id CC09:1F10A2:77026F:F0D4BB:6887C340 in 41ms
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id CC0D:79B75:6FFD2F:E2F725:6887C340 in 44ms
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id CC0A:551EB:738E22:EA3CB3:6887C340 in 44ms
GET /repos/test-owner/test-repo/labels/custom%3Ablocked - 401 with id CC0E:1FAEC1:75AF94:EE66CE:6887C340 in 46ms
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id CC07:1DA2F6:76877F:F01D67:6887C340 in 42ms
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id CC06:315B62:731BC6:E9417D:6887C340 in 57ms
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id CC10:307D38:78483D:F388A2:6887C340 in 48ms
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id CC08:307D38:784846:F388B7:6887C340 in 47ms
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id CC09:1F10A2:7702A8:F0D530:6887C340 in 39ms
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id CC0C:18E8DE:7593EF:EE3964:6887C340 in 44ms
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id CC0D:79B75:6FFD5C:E2F77B:6887C340 in 41ms
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id CC0A:551EB:738E5A:EA3D1D:6887C340 in 41ms
GET /repos/test-owner/test-repo/labels/custom%3Aclosed - 401 with id CC0E:1FAEC1:75AFBC:EE6720:6887C340 in 44ms
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id CC0B:A29C1:6CB5DB:DC827D:6887C340 in 58ms
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id CC07:1DA2F6:7687AB:F01DC3:6887C340 in 45ms
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id CC06:315B62:731BFC:E941EF:6887C340 in 44ms
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id CC10:307D38:78486D:F3891C:6887C340 in 43ms
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id CC0F:29799B:704BE2:E33E50:6887C340 in 64ms
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id CC08:307D38:78487A:F3893A:6887C340 in 43ms
error: Test "should set task status" timed out after 5001ms
(fail) Interface-Agnostic Task Command Functions > setTaskStatusFromParams > should set task status [5001.01ms]
(pass) Interface-Agnostic Task Command Functions > setTaskStatusFromParams > should throw error when task not found [0.26ms]
error: Test "should handle task ID normalization" timed out after 5000ms
(fail) Interface-Agnostic Task Command Functions > setTaskStatusFromParams > should handle task ID normalization [5000.25ms]
(pass) Interface-Agnostic Task Command Functions > Parameter Validation > should validate task ID format [0.35ms]
(pass) Interface-Agnostic Task Command Functions > Parameter Validation > should handle empty task ID [0.08ms]
173 | 
174 |     // Get the task
175 |     const task = await taskService.getTask(validParams.taskId);
176 | 
177 |     if (!task) {
178 |       throw new ResourceNotFoundError(
                  ^
ResourceNotFoundError: Task 155 not found
      cause: undefined,
 resourceType: "task",
 resourceId: "155",

      at getTaskFromParams (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/taskCommands.ts:178:13)
(fail) Interface-Agnostic Task Command Functions > Parameter Validation > should handle backend parameter [1.02ms]

src/domain/tasks/markdown-backend-workspace-architecture.test.ts:

# Unhandled error between tests
-------------------------------
error: Cannot find module '../markdownTaskBackend' from '/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/markdown-backend-workspace-architecture.test.ts'
-------------------------------


src/domain/workspace/session-path-resolver.test.ts:
(pass) SessionPathResolver > validateAndResolvePath > should resolve relative paths within session [0.08ms]
(pass) SessionPathResolver > validateAndResolvePath > should resolve current directory reference [0.03ms]
(pass) SessionPathResolver > validateAndResolvePath > should throw error for path traversal outside session [0.07ms]
(pass) SessionPathResolver > validateAndResolvePath > should throw error for absolute paths outside session [0.02ms]
(pass) SessionPathResolver > validateAndResolvePath > should handle complex path traversal attempts [0.02ms]
(pass) SessionPathResolver > validateAndResolvePath > should allow absolute paths within session [0.02ms]
(pass) SessionPathResolver > isPathWithinSession > should return true for paths within session [0.02ms]
(pass) SessionPathResolver > isPathWithinSession > should return false for paths outside session [0.02ms]
(pass) SessionPathResolver > isPathWithinSession > should return true for session root [0.01ms]
(pass) SessionPathResolver > absoluteToRelative > should convert absolute path to relative [0.02ms]
(pass) SessionPathResolver > absoluteToRelative > should return null for paths outside session [0.01ms]
(pass) SessionPathResolver > absoluteToRelative > should return '.' for session root
(pass) SessionPathResolver > getRelativePathFromSession > should get relative path from user input [0.02ms]
(pass) SessionPathResolver > getRelativePathFromSession > should normalize relative path from user input
(pass) SessionPathResolver > getRelativePathFromSession > should return '.' for session root reference
(pass) SessionPathResolver > validateMultiplePaths > should validate multiple valid paths [0.07ms]
(pass) SessionPathResolver > validateMultiplePaths > should throw error if any path is invalid [0.06ms]
(pass) SessionPathResolver > createSafePath > should create safe path from components [0.02ms]
(pass) SessionPathResolver > createSafePath > should throw error for unsafe path components [0.01ms]

src/domain/utils/package-manager.test.ts:
37 |         if (filepath.toString().includes("bun.lock")) return true;
38 |         return false;
39 |       });
40 | 
41 |       const result = detectPackageManager("/fake/repo");
42 |       expect(result).toBe("bun");
                          ^
error: expect(received).toBe(expected)

Expected: "bun"
Received: undefined

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/utils/package-manager.test.ts:42:22)
(fail) Package Manager Utilities > detectPackageManager > detects bun from bun.lock
47 |         if (filepath.toString().includes("yarn.lock")) return true;
48 |         return false;
49 |       });
50 | 
51 |       const result = detectPackageManager("/fake/repo");
52 |       expect(result).toBe("yarn");
                          ^
error: expect(received).toBe(expected)

Expected: "yarn"
Received: undefined

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/utils/package-manager.test.ts:52:22)
(fail) Package Manager Utilities > detectPackageManager > detects yarn from yarn.lock [0.04ms]
57 |         if (filepath.toString().includes("pnpm-lock.yaml")) return true;
58 |         return false;
59 |       });
60 | 
61 |       const result = detectPackageManager("/fake/repo");
62 |       expect(result).toBe("pnpm");
                          ^
error: expect(received).toBe(expected)

Expected: "pnpm"
Received: undefined

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/utils/package-manager.test.ts:62:22)
(fail) Package Manager Utilities > detectPackageManager > detects pnpm from pnpm-lock.yaml [0.03ms]
67 |         if (filepath.toString().includes("package-lock.json")) return true;
68 |         return false;
69 |       });
70 | 
71 |       const result = detectPackageManager("/fake/repo");
72 |       expect(result).toBe("npm");
                          ^
error: expect(received).toBe(expected)

Expected: "npm"
Received: undefined

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/utils/package-manager.test.ts:72:22)
(fail) Package Manager Utilities > detectPackageManager > detects npm from package-lock.json [0.03ms]
77 |         if (filepath.toString().includes("package.json")) return true;
78 |         return false;
79 |       });
80 | 
81 |       const result = detectPackageManager("/fake/repo");
82 |       expect(result).toBe("npm");
                          ^
error: expect(received).toBe(expected)

Expected: "npm"
Received: undefined

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/utils/package-manager.test.ts:82:22)
(fail) Package Manager Utilities > detectPackageManager > defaults to npm if only package.json exists [0.03ms]
(pass) Package Manager Utilities > detectPackageManager > returns undefined if no package files exist [0.01ms]
(pass) Package Manager Utilities > getInstallCommand > returns correct command for bun [0.02ms]
(pass) Package Manager Utilities > getInstallCommand > returns correct command for npm
(pass) Package Manager Utilities > getInstallCommand > returns correct command for yarn
(pass) Package Manager Utilities > getInstallCommand > returns correct command for pnpm
(pass) Package Manager Utilities > getInstallCommand > returns undefined for unknown package manager
120 |       });
121 | 
122 |       execSyncMock = mock(() => Buffer.from("Success"));
123 | 
124 |       const result = await installDependencies("/fake/repo");
125 |       expect(result.success).toBe(true);
                                   ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/utils/package-manager.test.ts:125:30)
(fail) Package Manager Utilities > installDependencies > successfully installs dependencies [0.06ms]
135 |       const result = await installDependencies("/fake/repo", {
136 |         packageManager: "bun",
137 |       });
138 | 
139 |       expect(result.success).toBe(true);
140 |       expect(execSyncMock).toHaveBeenCalledWith("bun install", {
                                 ^
error: expect(received).toHaveBeenCalledWith(expected)

Number of calls: 0

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/utils/package-manager.test.ts:140:28)
(fail) Package Manager Utilities > installDependencies > uses provided package manager if specified [0.80ms]
148 | 
149 |       const result = await installDependencies("/fake/repo");
150 | 
151 |       expect(result.success).toBe(false);
152 |       expect(result.error).toBe("No package manager detected for this project");
153 |       expect(execSyncMock).not.toHaveBeenCalled();
                                     ^
error: expect(received).not.toHaveBeenCalled()

Expected number of calls: 0
Received number of calls: 1

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/utils/package-manager.test.ts:153:32)
(fail) Package Manager Utilities > installDependencies > handles no package manager detected [0.11ms]
158 |         packageManager: undefined,
159 |       });
160 | 
161 |       expect(result.success).toBe(false);
162 |       expect(result.error).toBe("No package manager detected for this project");
163 |       expect(execSyncMock).not.toHaveBeenCalled();
                                     ^
error: expect(received).not.toHaveBeenCalled()

Expected number of calls: 0
Received number of calls: 1

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/utils/package-manager.test.ts:163:32)
(fail) Package Manager Utilities > installDependencies > handles unsupported package manager [0.06ms]
174 |       });
175 | 
176 |       const result = await installDependencies("/fake/repo");
177 | 
178 |       expect(result.success).toBe(false);
179 |       expect(result.error).toBe("Installation failed");
                                 ^
error: expect(received).toBe(expected)

Expected: "Installation failed"
Received: "No package manager detected for this project"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/utils/package-manager.test.ts:179:28)
(fail) Package Manager Utilities > installDependencies > handles installation errors [0.10ms]
187 | 
188 |       execSyncMock = mock(() => Buffer.from("Success"));
189 | 
190 |       await installDependencies("/fake/repo", { quiet: true });
191 | 
192 |       expect(execSyncMock).toHaveBeenCalledWith("npm install", {
                                 ^
error: expect(received).toHaveBeenCalledWith(expected)

Number of calls: 0

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/utils/package-manager.test.ts:192:28)
(fail) Package Manager Utilities > installDependencies > respects quiet option for stdio [0.10ms]

src/domain/utils/logger.test.ts:
(pass) Logger > getLogMode > should return HUMAN when configuration mode is set to HUMAN [0.23ms]
(pass) Logger > getLogMode > should return STRUCTURED when configuration mode is set to STRUCTURED [0.82ms]
(pass) Logger > getLogMode > should default to HUMAN when mode is auto and TTY is available [0.02ms]
(pass) Logger > getLogMode > should default to STRUCTURED when mode is auto and TTY is not available
(pass) Logger > createConfigurableLogger > should create logger with configuration [0.24ms]
(pass) Logger > createConfigurableLogger > should create logger with STRUCTURED mode [0.06ms]
(pass) Logger > createConfigurableLogger > should expose logger methods [0.11ms]
(pass) Logger > createConfigurableLogger > should support dependency injection for testing [0.10ms]
(pass) Logger > createConfigurableLogger > should handle different log levels [0.30ms]
(pass) Logger > createConfigurableLogger > should isolate logger instances [0.26ms]
(pass) Logger > configuration integration > should maintain backward compatibility [0.08ms]
(pass) Logger > configuration integration > should support enableAgentLogs configuration [0.12ms]

src/domain/storage/database-integrity-checker.test.ts:
75 |   });
76 | 
77 |   describe("File Format Detection", () => {
78 |     test("should detect valid SQLite format", async () => {
79 |       // Create a valid SQLite file
80 |       const db = new Database(testDbPath);
                      ^
SQLiteError: unable to open database file
      errno: 14,
 byteOffset: -1,
       code: "SQLITE_CANTOPEN"

      at new Database (bun:sqlite:240:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/storage/database-integrity-checker.test.ts:80:18)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/storage/database-integrity-checker.test.ts:78:47)
(fail) DatabaseIntegrityChecker > File Format Detection > should detect valid SQLite format [1.54ms]
(pass) DatabaseIntegrityChecker > File Format Detection > should detect valid JSON format [0.24ms]
(pass) DatabaseIntegrityChecker > File Format Detection > should detect corrupted JSON format [0.66ms]
(pass) DatabaseIntegrityChecker > File Format Detection > should detect empty file [0.16ms]
(pass) DatabaseIntegrityChecker > File Format Detection > should detect missing file
(pass) DatabaseIntegrityChecker > Format Mismatch Detection > should detect JSON file when SQLite expected [0.23ms]
153 |       expect(migrationAction?.priority).toBe("high");
154 |     });
155 | 
156 |     test("should detect SQLite file when JSON expected", async () => {
157 |       const sqlitePath = join(testDirPath, "fake-json.json");
158 |       const db = new Database(sqlitePath);
                       ^
SQLiteError: unable to open database file
      errno: 14,
 byteOffset: -1,
       code: "SQLITE_CANTOPEN"

      at new Database (bun:sqlite:240:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/storage/database-integrity-checker.test.ts:158:18)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/storage/database-integrity-checker.test.ts:156:58)
(fail) DatabaseIntegrityChecker > Format Mismatch Detection > should detect SQLite file when JSON expected [1.10ms]
(pass) DatabaseIntegrityChecker > Backup File Detection > should find backup files with standard patterns [0.34ms]
(pass) DatabaseIntegrityChecker > Backup File Detection > should detect session count in JSON backups [0.21ms]
213 |   });
214 | 
215 |   describe("SQLite Integrity Validation", () => {
216 |     test("should validate SQLite database integrity", async () => {
217 |       // Create valid SQLite database
218 |       const db = new Database(testDbPath);
                       ^
SQLiteError: unable to open database file
      errno: 14,
 byteOffset: -1,
       code: "SQLITE_CANTOPEN"

      at new Database (bun:sqlite:240:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/storage/database-integrity-checker.test.ts:218:18)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/storage/database-integrity-checker.test.ts:216:55)
(fail) DatabaseIntegrityChecker > SQLite Integrity Validation > should validate SQLite database integrity [0.23ms]
241 |       expect(result.issues).toHaveLength(0);
242 |     });
243 | 
244 |     test("should detect SQLite database without sessions table", async () => {
245 |       // Create SQLite database without sessions table
246 |       const db = new Database(testDbPath);
                       ^
SQLiteError: unable to open database file
      errno: 14,
 byteOffset: -1,
       code: "SQLITE_CANTOPEN"

      at new Database (bun:sqlite:240:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/storage/database-integrity-checker.test.ts:246:18)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/storage/database-integrity-checker.test.ts:244:66)
(fail) DatabaseIntegrityChecker > SQLite Integrity Validation > should detect SQLite database without sessions table [1.10ms]
255 |       );
256 |     });
257 | 
258 |     test("should detect empty SQLite database", async () => {
259 |       // Create empty SQLite database
260 |       const db = new Database(testDbPath);
                       ^
SQLiteError: unable to open database file
      errno: 14,
 byteOffset: -1,
       code: "SQLITE_CANTOPEN"

      at new Database (bun:sqlite:240:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/storage/database-integrity-checker.test.ts:260:18)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/storage/database-integrity-checker.test.ts:258:49)
(fail) DatabaseIntegrityChecker > SQLite Integrity Validation > should detect empty SQLite database [0.27ms]
(pass) DatabaseIntegrityChecker > JSON Validation > should validate JSON structure
(pass) DatabaseIntegrityChecker > JSON Validation > should detect JSON without sessions array
(pass) DatabaseIntegrityChecker > JSON Validation > should detect empty JSON sessions array [0.13ms]
(pass) DatabaseIntegrityChecker > Suggested Actions > should suggest repair for corrupted database [0.28ms]
(pass) DatabaseIntegrityChecker > Suggested Actions > should suggest initialization for missing database [0.17ms]
(pass) DatabaseIntegrityChecker > Suggested Actions > should prioritize high-priority actions [0.10ms]
(pass) DatabaseIntegrityChecker > Integrity Report Formatting > should format comprehensive integrity report [3.22ms]
366 |       expect(report).toContain("BACKUP FILES FOUND:");
367 |       expect(report).toContain("SUGGESTED ACTIONS:");
368 |     });
369 | 
370 |     test("should format report for valid database", async () => {
371 |       const db = new Database(testDbPath);
                       ^
SQLiteError: unable to open database file
      errno: 14,
 byteOffset: -1,
       code: "SQLITE_CANTOPEN"

      at new Database (bun:sqlite:240:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/storage/database-integrity-checker.test.ts:371:18)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/storage/database-integrity-checker.test.ts:370:53)
(fail) DatabaseIntegrityChecker > Integrity Report Formatting > should format report for valid database [0.60ms]
(pass) DatabaseIntegrityChecker > Error Handling > should handle permission errors gracefully
(pass) DatabaseIntegrityChecker > Error Handling > should handle invalid file paths gracefully
(pass) DatabaseIntegrityChecker > Edge Cases > should handle extremely large backup directories [0.84ms]
(pass) DatabaseIntegrityChecker > Edge Cases > should handle backup files with different extensions [0.28ms]

src/domain/storage/json-file-storage.test.ts:
(pass) JsonFileStorage Core Tests > Core CRUD Operations > should create and retrieve entities [0.20ms]
(pass) JsonFileStorage Core Tests > Core CRUD Operations > should update entities [0.11ms]
(pass) JsonFileStorage Core Tests > Core CRUD Operations > should delete entities [0.14ms]
(pass) JsonFileStorage Core Tests > Core CRUD Operations > should get all entities [0.27ms]
(pass) JsonFileStorage Core Tests > State Management > should read and write state [0.17ms]
(pass) JsonFileStorage Core Tests > Error Handling > should handle non-existent entities gracefully
(pass) JsonFileStorage Core Tests > Persistence > should persist data across storage instances [0.25ms]
(pass) JsonFileStorage Core Tests > Persistence > should handle storage location correctly [0.04ms]

src/domain/git/clone-operations.test.ts:
(pass) Clone Operations > should handle clone operations with filesystem validation [8.69ms]
(pass) Clone Operations > should handle clone with empty repository URL validation
(pass) Clone Operations > should handle clone with existing non-empty directory [7.35ms]
(pass) Clone Operations > should handle clone failure during git command execution [6.92ms]
(pass) Clone Operations > should handle clone success verification failure [6.59ms]
(pass) Clone Operations > should handle clone with local repository normalization [6.97ms]
(pass) Clone Operations > should handle clone error scenarios with proper error propagation [6.66ms]

src/domain/git/repository-operations.test.ts:
(pass) Repository Operations with Dependency Injection > should have commitWithDependencies method available
(pass) Repository Operations with Dependency Injection > should have stashChangesWithDependencies method available
(pass) Repository Operations with Dependency Injection > should have popStashWithDependencies method available
(pass) Repository Operations with Dependency Injection > should have mergeBranchWithDependencies method available [0.03ms]
(pass) Repository Operations with Dependency Injection > should have stageAllWithDependencies method available
(pass) Repository Operations with Dependency Injection > should have stageModifiedWithDependencies method available [0.01ms]
(pass) Repository Operations with Dependency Injection > should have pullLatestWithDependencies method available
49 |     expect(gitService.pullLatestWithDependencies).toBeDefined();
50 |     expect(typeof gitService.pullLatestWithDependencies).toBe("function");
51 |   });
52 | 
53 |   test("should have cloneWithDependencies method available", () => {
54 |     expect(gitService.cloneWithDependencies).toBeDefined();
                                                  ^
error: expect(received).toBeDefined()

Received: undefined

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/git/repository-operations.test.ts:54:46)
(fail) Repository Operations with Dependency Injection > should have cloneWithDependencies method available [0.09ms]
(pass) Repository Operations with Dependency Injection > should create GitService with base directory [0.02ms]

src/domain/git/conflict-detection.test.ts:

# Unhandled error between tests
-------------------------------
48 |       mockExecAsync = mock(() => Promise.resolve({ stdout: "0\t2", stderr: "" }))
                           ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/domain/git/conflict-detection.test.ts:48:23

73 |       mockExecAsync = mock(() => Promise.resolve({ stdout: "0\t1", stderr: "" }))
                           ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/domain/git/conflict-detection.test.ts:73:23

89 |       mockExecAsync = mock(() => Promise.resolve({ stdout: "3\t0", stderr: "" }))
                           ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/domain/git/conflict-detection.test.ts:89:23

105 |       mockExecAsync = mock(() => Promise.resolve({ stdout: "2\t3", stderr: "" }))
                            ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/domain/git/conflict-detection.test.ts:105:23

125 |       mockExecAsync = mock(() => Promise.resolve({ stdout: "0\t1", stderr: "" }))
                            ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/domain/git/conflict-detection.test.ts:125:23

144 |       mockExecAsync = mock(() => Promise.resolve({ stdout: "1\t1", stderr: "" }))
                            ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/domain/git/conflict-detection.test.ts:144:23

181 |       mockExecAsync = mock(() => Promise.resolve({ stdout: "1\t1", stderr: "" }))
                            ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/domain/git/conflict-detection.test.ts:181:23

222 |       mockExecAsync
            ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/domain/git/conflict-detection.test.ts:222:7

231 |         mock(() => Promise.resolve({ stdout: "", stderr: "" }))({ stdout: "", stderr: ""
              ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/domain/git/conflict-detection.test.ts:231:9

252 |       mockExecAsync = mock(() => Promise.resolve({ stdout: "1\t1", stderr: "" }))
                            ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/domain/git/conflict-detection.test.ts:252:23

280 |       mockExecAsync
            ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/domain/git/conflict-detection.test.ts:280:7

292 |         mock(() => Promise.resolve({ stdout: "", stderr: "" }))({ stdout: "", stderr: ""
              ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/domain/git/conflict-detection.test.ts:292:9

352 |       mockExecAsync = mock(() => Promise.resolve({ stdout: "2\t0", stderr: "" }))
                            ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/domain/git/conflict-detection.test.ts:352:23

384 |       mockExecAsync = mock(() => Promise.resolve({ stdout: "0\t0", stderr: "" }))
                            ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/domain/git/conflict-detection.test.ts:384:23

407 |       mockExecAsync = mock(() => Promise.resolve({ stdout: "2\t0", stderr: "" }))
                            ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/domain/git/conflict-detection.test.ts:407:23

427 |       mockExecAsync = mock(() => Promise.resolve({ stdout: "0\t2", stderr: "" }))
                            ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/domain/git/conflict-detection.test.ts:427:23

468 |       mockExecAsync
            ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/domain/git/conflict-detection.test.ts:468:7
-------------------------------


src/domain/git/git-service-core.test.ts:
(pass) GitService > should be able to create an instance [0.03ms]
(pass) GitService > should get repository status [0.15ms]
(pass) GitService > execInRepository should execute git commands in the specified repository [0.04ms]
(pass) GitService > execInRepository should propagate errors [0.02ms]

src/domain/git/parameter-based-functions.test.ts:

# Unhandled error between tests
-------------------------------
269 |     mockExecAsync = mock(() => Promise.resolve({ stdout: "main", stderr: "" })) = mock(() =>
                          ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/domain/git/parameter-based-functions.test.ts:269:21
-------------------------------


src/domain/git/conflict-detection-working.test.ts:
(pass) ConflictDetectionService > analyzeBranchDivergence > should detect when session is ahead of base [0.32ms]
(pass) ConflictDetectionService > analyzeBranchDivergence > should detect when session changes are already in base [0.08ms]
(pass) ConflictDetectionService > analyzeBranchDivergence > should detect when session is behind base [0.05ms]
(pass) ConflictDetectionService > analyzeBranchDivergence > should detect when branches have diverged [0.03ms]
(pass) ConflictDetectionService > predictConflicts > should return no conflicts when already merged [0.05ms]

src/domain/git/push-operations.test.ts:
(pass) pushImpl > should be defined
(pass) pushImpl > should require dependencies

src/domain/git/pr-workflow.test.ts:
(pass) PR Workflow Operations > should have prWithDependencies method available [0.04ms]
(pass) PR Workflow Operations > should have GitService constructor available [0.02ms]
(pass) PR Workflow Operations > should create GitService with base directory

src/domain/git/commit-operations.test.ts:
(pass) commitChangesFromParams > should be defined [0.07ms]
(pass) commitChangesFromParams > should be a function

src/domain/git/architecture-analysis.test.ts:
(pass) GitService - Core Methods with Dependency Injection > Architecture Analysis - Testing Limitations > should demonstrate the core testing challenge [0.02ms]

src/domain/git/session-workdir.test.ts:
(pass) GitService - Session Workdir Tests > getSessionWorkdir should return the correct path [0.06ms]
(pass) GitService - Session Workdir Tests > should use session-ID-based storage in getSessionWorkdir

src/domain/git/factory-function.test.ts:
(pass) createGitService Factory Function > should handle undefined options parameter without throwing runtime error [0.52ms]
(pass) createGitService Factory Function > should handle null options parameter without throwing runtime error [0.04ms]
(pass) createGitService Factory Function > should handle options with undefined baseDir property [0.03ms]
(pass) createGitService Factory Function > should create GitService with custom baseDir when provided [0.01ms]
(pass) createGitService Factory Function > should create GitService with default baseDir when no options provided [0.01ms]

src/domain/git/conflict-detection.integration.test.ts:
(pass) ConflictDetectionService Integration > should handle basic service instantiation and static methods
(pass) ConflictDetectionService Integration > should have correct enum values defined [0.09ms]
(pass) ConflictDetectionService Integration > should provide proper interface structure for ConflictPrediction [0.03ms]
(pass) ConflictDetectionService Integration > should provide proper interface structure for BranchDivergenceAnalysis [0.02ms]
(pass) ConflictDetectionService Integration > should provide proper interface structure for enhanced results [0.02ms]
(skip) ConflictDetectionService Integration > should detect conflicts in real git repository

src/domain/session/session-approve-bugfix-regression.test.ts:
93 |       const task = await (taskService.getTask
94 |         ? taskService.getTask(taskIdToUse)
95 |         : (taskService as any).getTask(taskIdToUse));
96 |       if (!task) {
97 |         // Task doesn't exist - provide clear, concise error
98 |         throw new ResourceNotFoundError(
                   ^
ResourceNotFoundError: ‚ùå Task not found: 123

The specified task does not exist.

üí° Available options:
‚Ä¢ Run 'minsky tasks list' to see all available tasks
‚Ä¢ Check your task ID for typos
‚Ä¢ Use 'minsky session list' to see tasks with active sessions
      cause: undefined,
 resourceType: "task",
 resourceId: "123",

      at approveSessionImpl (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session/session-approve-operations.ts:98:15)
(fail) Session Approve - Bug Regression Tests > Bug #1: Untracked Files Auto-Stash > should stash untracked files that would be overwritten by merge [0.61ms]
(pass) Session Approve - Bug Regression Tests > Bug #1: Untracked Files Auto-Stash > should include -u flag in git stash command for untracked files [0.03ms]
168 |             sessionDB: mockSessionDB,
169 |             gitService: mockGitService,
170 |             taskService: mockTaskService,
171 |           }
172 |         )
173 |       ).rejects.toThrow("Diverging branches can't be fast-forwarded");
                      ^
error: expect(received).toThrow(expected)

Expected substring: "Diverging branches can't be fast-forwarded"
Received message: "‚ùå Task not found: 123\n\nThe specified task does not exist.\n\nüí° Available options:\n‚Ä¢ Run 'minsky tasks list' to see all available tasks\n‚Ä¢ Check your task ID for typos\n‚Ä¢ Use 'minsky session list' to see tasks with active sessions"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session/session-approve-bugfix-regression.test.ts:173:17)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session/session-approve-bugfix-regression.test.ts:119:70)
(fail) Session Approve - Bug Regression Tests > Bug #2: Fail-Fast on Merge Errors > should fail fast when fast-forward merge is not possible [0.21ms]
93 |       const task = await (taskService.getTask
94 |         ? taskService.getTask(taskIdToUse)
95 |         : (taskService as any).getTask(taskIdToUse));
96 |       if (!task) {
97 |         // Task doesn't exist - provide clear, concise error
98 |         throw new ResourceNotFoundError(
                   ^
ResourceNotFoundError: ‚ùå Task not found: 123

The specified task does not exist.

üí° Available options:
‚Ä¢ Run 'minsky tasks list' to see all available tasks
‚Ä¢ Check your task ID for typos
‚Ä¢ Use 'minsky session list' to see tasks with active sessions
      cause: undefined,
 resourceType: "task",
 resourceId: "123",

      at approveSessionImpl (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session/session-approve-operations.ts:98:15)
(fail) Session Approve - Bug Regression Tests > Bug #2: Fail-Fast on Merge Errors > should continue processing when PR is genuinely already merged [0.14ms]
294 |       } catch (error) {
295 |         // Expected to fail
296 |       }
297 | 
298 |       // Assert: Stash should be restored even after failure
299 |       expect(mockGitService.stashChanges).toHaveBeenCalled();
                                                ^
error: expect(received).toHaveBeenCalled()

Expected number of calls: >= 1
Received number of calls: 0

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session/session-approve-bugfix-regression.test.ts:299:43)
(fail) Session Approve - Bug Regression Tests > Bug #2: Fail-Fast on Merge Errors > should restore stash even when merge fails [0.49ms]

src/domain/session/session-context-resolver.test.ts:
(pass) resolveSessionContext > explicit session resolution > resolves existing session by name [0.10ms]
(pass) resolveSessionContext > explicit session resolution > throws error for non-existent session [0.05ms]
(pass) resolveSessionContext > task ID resolution > resolves session by task ID [0.06ms]
(pass) resolveSessionContext > task ID resolution > throws error for non-existent task [0.05ms]
(pass) resolveSessionContext > no session provided > throws error when no session detected and auto-detection disabled [0.02ms]
(pass) resolveSessionContext > precedence > explicit session takes precedence over task [0.02ms]
(pass) resolveSessionName > returns just the session name [0.09ms]
(pass) validateSessionContext > returns true for valid session [0.09ms]
(pass) validateSessionContext > returns false for invalid session [0.04ms]

src/domain/session/session-path-resolver.test.ts:
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should validate and resolve relative paths correctly [0.01ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should validate and resolve dot paths correctly [0.01ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should validate and resolve root path correctly [0.03ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should block path traversal attempts [0.02ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should block multiple path traversal attempts [0.01ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should handle absolute paths within session workspace [0.02ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should block absolute paths outside session workspace [0.05ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > getRelativePathFromSession > should return relative path from session root [0.02ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > getRelativePathFromSession > should return dot for session root [0.01ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > getRelativePathFromSession > should handle nested paths [0.02ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > createSafePath > should create safe path from components [0.05ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > createSafePath > should prevent unsafe path creation [0.02ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateMultiplePaths > should validate multiple valid paths [0.03ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateMultiplePaths > should throw error when any path is invalid [0.04ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > normalizeRelativePath > should normalize relative path correctly [0.01ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > normalizeRelativePath > should prevent directory traversal in relative paths [0.03ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > absoluteToRelative > should convert absolute path to relative [0.02ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > absoluteToRelative > should return null for paths outside session [0.02ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > absoluteToRelative > should return dot for session root [0.01ms]

src/domain/session/session-adapter.test.ts:
(pass) SessionAdapter > should initialize with empty sessions [0.24ms]
(pass) SessionAdapter > should add and retrieve a session [0.34ms]
(pass) SessionAdapter > should retrieve a session by task ID [0.08ms]
(pass) SessionAdapter > should update a session [0.06ms]
(pass) SessionAdapter > should delete a session [0.05ms]
(pass) SessionAdapter > should return false when deleting a non-existent session [0.02ms]
(pass) SessionAdapter > should get repository path for a session
(pass) SessionAdapter > should get working directory for a session [0.05ms]

src/domain/session/session-approval-error-handling.test.ts:
(pass) Session Approval Error Handling Fix > should validate task existence BEFORE checking for session [34.26ms]
(pass) Session Approval Error Handling Fix > should provide different error for existing task without session [0.23ms]
(pass) Session Approval Error Handling Fix > should have proper validation order [0.18ms]
(pass) Session Approval Error Handling Fix > should provide clear error message format [13.99ms]

src/domain/session/session-approve-task-status-commit.test.ts:
93 |       const task = await (taskService.getTask
94 |         ? taskService.getTask(taskIdToUse)
95 |         : (taskService as any).getTask(taskIdToUse));
96 |       if (!task) {
97 |         // Task doesn't exist - provide clear, concise error
98 |         throw new ResourceNotFoundError(
                   ^
ResourceNotFoundError: ‚ùå Task not found: 123

The specified task does not exist.

üí° Available options:
‚Ä¢ Run 'minsky tasks list' to see all available tasks
‚Ä¢ Check your task ID for typos
‚Ä¢ Use 'minsky session list' to see tasks with active sessions
      cause: undefined,
 resourceType: "task",
 resourceId: "123",

      at approveSessionImpl (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session/session-approve-operations.ts:98:15)
(fail) Session Approve Task Status Commit > should commit task status update after successful merge [0.09ms]
93 |       const task = await (taskService.getTask
94 |         ? taskService.getTask(taskIdToUse)
95 |         : (taskService as any).getTask(taskIdToUse));
96 |       if (!task) {
97 |         // Task doesn't exist - provide clear, concise error
98 |         throw new ResourceNotFoundError(
                   ^
ResourceNotFoundError: ‚ùå Task not found: 124

The specified task does not exist.

üí° Available options:
‚Ä¢ Run 'minsky tasks list' to see all available tasks
‚Ä¢ Check your task ID for typos
‚Ä¢ Use 'minsky session list' to see tasks with active sessions
      cause: undefined,
 resourceType: "task",
 resourceId: "124",

      at approveSessionImpl (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session/session-approve-operations.ts:98:15)
(fail) Session Approve Task Status Commit > should handle case where no task status update is needed [0.11ms]
93 |       const task = await (taskService.getTask
94 |         ? taskService.getTask(taskIdToUse)
95 |         : (taskService as any).getTask(taskIdToUse));
96 |       if (!task) {
97 |         // Task doesn't exist - provide clear, concise error
98 |         throw new ResourceNotFoundError(
                   ^
ResourceNotFoundError: ‚ùå Task not found: 125

The specified task does not exist.

üí° Available options:
‚Ä¢ Run 'minsky tasks list' to see all available tasks
‚Ä¢ Check your task ID for typos
‚Ä¢ Use 'minsky session list' to see tasks with active sessions
      cause: undefined,
 resourceType: "task",
 resourceId: "125",

      at approveSessionImpl (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session/session-approve-operations.ts:98:15)
(fail) Session Approve Task Status Commit > should skip task status update when task is already DONE [0.19ms]
93 |       const task = await (taskService.getTask
94 |         ? taskService.getTask(taskIdToUse)
95 |         : (taskService as any).getTask(taskIdToUse));
96 |       if (!task) {
97 |         // Task doesn't exist - provide clear, concise error
98 |         throw new ResourceNotFoundError(
                   ^
ResourceNotFoundError: ‚ùå Task not found: 266

The specified task does not exist.

üí° Available options:
‚Ä¢ Run 'minsky tasks list' to see all available tasks
‚Ä¢ Check your task ID for typos
‚Ä¢ Use 'minsky session list' to see tasks with active sessions
      cause: undefined,
 resourceType: "task",
 resourceId: "266",

      at approveSessionImpl (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session/session-approve-operations.ts:98:15)
(fail) Session Approve Task Status Commit > should exit early when task is DONE and PR branch doesn't exist (bug reproduction) [0.14ms]

src/domain/session/session-auto-detection-integration.test.ts:
(pass) Session Command Domain Logic > sessionGet domain logic > resolves session by explicit name [0.12ms]
107 |       const allSessions = await sessionProvider!.listSessions();
108 |       const sessionNames = allSessions
109 |         .map((s) => `${s.session}${s.taskId ? ` (Task #${s.taskId})` : ""}`)
110 |         .join(", ");
111 | 
112 |       throw new ResourceNotFoundError(
                  ^
ResourceNotFoundError: No session found for task ID "456"

üí° Available sessions: test-session (Task ##123), task#456 (Task ##456)
      cause: undefined,
 resourceType: "task",
 resourceId: "456",

      at resolveSessionContext (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session/session-context-resolver.ts:112:13)
(fail) Session Command Domain Logic > sessionGet domain logic > resolves session by explicit task ID [0.23ms]
(pass) Session Command Domain Logic > sessionGet domain logic > throws ResourceNotFoundError for non-existent session [0.06ms]
(pass) Session Command Domain Logic > sessionGet domain logic > throws ResourceNotFoundError for non-existent task [0.05ms]
(pass) Session Command Domain Logic > sessionDelete domain logic > deletes session by explicit name [0.06ms]
(pass) Session Command Domain Logic > sessionDelete domain logic > deletes session by explicit task ID [0.03ms]
142 |           },
143 |           {
144 |             sessionDB: mockSessionProvider,
145 |           }
146 |         )
147 |       ).rejects.toThrow(ResourceNotFoundError);
                      ^
error: 

Expected promise that rejects
Received promise that resolved: Promise { <resolved> }

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session/session-auto-detection-integration.test.ts:147:17)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session/session-auto-detection-integration.test.ts:135:67)
(fail) Session Command Domain Logic > sessionDelete domain logic > throws ResourceNotFoundError for non-existent session [0.07ms]
107 |       const allSessions = await sessionProvider!.listSessions();
108 |       const sessionNames = allSessions
109 |         .map((s) => `${s.session}${s.taskId ? ` (Task #${s.taskId})` : ""}`)
110 |         .join(", ");
111 | 
112 |       throw new ResourceNotFoundError(
                  ^
ResourceNotFoundError: No session found for task ID "456"

üí° Available sessions: test-session (Task ##123), task#456 (Task ##456)
      cause: undefined,
 resourceType: "task",
 resourceId: "456",

      at resolveSessionContext (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session/session-context-resolver.ts:112:13)
(fail) Session Command Domain Logic > domain logic consistency > all commands resolve the same session by task ID [0.07ms]
(pass) Session Command Domain Logic > domain logic consistency > all commands provide consistent error messages for missing sessions [0.05ms]
(pass) Session Command Domain Logic > pure function behavior > session provider mock is used directly without global state [0.05ms]
(pass) Session Command Domain Logic > pure function behavior > session resolution is deterministic with same inputs [0.07ms]

src/domain/session/pr-validation.test.ts:
(pass) PR Validation Utilities > validatePrContent > should validate normal PR content without issues [0.45ms]
(pass) PR Validation Utilities > validatePrContent > should detect and remove title duplication in body [0.82ms]
(pass) PR Validation Utilities > validatePrContent > should reject empty title [0.03ms]
(pass) PR Validation Utilities > validatePrContent > should handle empty body gracefully [0.01ms]
(pass) PR Validation Utilities > isDuplicateContent > should detect identical content [0.05ms]
(pass) PR Validation Utilities > isDuplicateContent > should detect content with different whitespace [0.03ms]
(pass) PR Validation Utilities > isDuplicateContent > should detect content with different case
(pass) PR Validation Utilities > isDuplicateContent > should not match different content
(pass) PR Validation Utilities > isDuplicateContent > should handle empty strings
(pass) PR Validation Utilities > sanitizePrBody > should remove lines that duplicate the title [0.05ms]
(pass) PR Validation Utilities > sanitizePrBody > should preserve non-duplicate content [0.02ms]
(pass) PR Validation Utilities > sanitizePrBody > should handle empty body [0.01ms]
(pass) PR Validation Utilities > preparePrContent > should prepare normal content without changes [0.04ms]
(pass) PR Validation Utilities > preparePrContent > should sanitize content with duplication and provide warnings [0.04ms]
(pass) PR Validation Utilities > preparePrContent > should throw error for empty title [0.04ms]
(pass) PR Validation Utilities > preparePrContent > should handle undefined body

src/domain/session/session-db.test.ts:
(pass) SessionDB Functional Implementation > initializeSessionDbState > should initialize state with default values
(pass) SessionDB Functional Implementation > initializeSessionDbState > should initialize state with custom baseDir [0.11ms]
(pass) SessionDB Functional Implementation > initializeSessionDbState > should handle undefined options parameter without throwing runtime error [0.02ms]
(pass) SessionDB Functional Implementation > initializeSessionDbState > should handle null options parameter without throwing runtime error [0.01ms]
(pass) SessionDB Functional Implementation > initializeSessionDbState > should handle options with undefined baseDir property [0.03ms]
(pass) SessionDB Functional Implementation > listSessionsFn > should return all sessions [0.04ms]
(pass) SessionDB Functional Implementation > getSessionFn > should return the session by name [0.04ms]
(pass) SessionDB Functional Implementation > getSessionFn > should return null if session not found [0.01ms]
(pass) SessionDB Functional Implementation > getSessionByTaskIdFn > should return the session by task ID [0.01ms]
(pass) SessionDB Functional Implementation > getSessionByTaskIdFn > should return the session when task ID includes # [0.02ms]
(pass) SessionDB Functional Implementation > getSessionByTaskIdFn > should return null if no session exists for the task ID
(pass) SessionDB Functional Implementation > addSessionFn > should add a new session to the state [0.02ms]
(pass) SessionDB Functional Implementation > updateSessionFn > should update an existing session [0.03ms]
(pass) SessionDB Functional Implementation > updateSessionFn > should not modify state if session not found
(pass) SessionDB Functional Implementation > updateSessionFn > should ignore session property in updates [0.02ms]
(pass) SessionDB Functional Implementation > deleteSessionFn > should delete an existing session [0.02ms]
(pass) SessionDB Functional Implementation > deleteSessionFn > should not modify state if session not found [0.02ms]
(pass) SessionDB Functional Implementation > getRepoPathFn > should return the repository path for a session record
(pass) SessionDB Functional Implementation > getRepoPathFn > should handle session records with repoPath already set [0.01ms]
(pass) SessionDB Functional Implementation > getRepoPathFn > should throw error for invalid input [0.03ms]
(pass) SessionDB Functional Implementation > getSessionWorkdirFn > should return the working directory for a session
(pass) SessionDB Functional Implementation > getSessionWorkdirFn > should return null if session not found

src/domain/session/session-db-io.test.ts:
(pass) Session DB I/O Functions > readSessionDbFile > should read existing session database file [0.05ms]
(pass) Session DB I/O Functions > readSessionDbFile > should return initialized state when database file doesn't exist
(pass) Session DB I/O Functions > readSessionDbFile > should handle undefined options parameter without throwing runtime error [0.08ms]
(pass) Session DB I/O Functions > readSessionDbFile > should handle null options parameter without throwing runtime error [0.02ms]
(pass) Session DB I/O Functions > readSessionDbFile > should handle options with undefined dbPath and baseDir properties
(pass) Session DB I/O Functions > writeSessionsToFile > should write session database file successfully
(pass) Session DB I/O Functions > writeSessionsToFile > should handle undefined options parameter without throwing runtime error
(pass) Session DB I/O Functions > writeSessionsToFile > should handle null options parameter without throwing runtime error
(pass) Session DB I/O Functions > writeSessionsToFile > should handle options with undefined dbPath property [0.04ms]

src/domain/session/session-pr-body-validation.test.ts:

# Unhandled error between tests
-------------------------------
error: Cannot find module '../session-pr-operations' from '/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session/session-pr-body-validation.test.ts'
-------------------------------


tests/adapters/mcp/session-read-file-simple.test.ts:
(pass) session_read_file line range processing > Basic line range functionality > should read entire file when no range specified [1.08ms]
(pass) session_read_file line range processing > Basic line range functionality > should read specific line range [0.05ms]
(pass) session_read_file line range processing > Basic line range functionality > should handle single line request [0.02ms]
(pass) session_read_file line range processing > Basic line range functionality > should handle should_read_entire_file flag [0.02ms]
(pass) session_read_file line range processing > Content summarization > should provide summary for partial content [0.02ms]
(pass) session_read_file line range processing > Content summarization > should handle reading from beginning [0.01ms]
(pass) session_read_file line range processing > Content summarization > should handle reading to end [0.01ms]
(pass) session_read_file line range processing > Edge cases > should handle empty file [0.01ms]
(pass) session_read_file line range processing > Edge cases > should handle single line file [0.02ms]
(pass) session_read_file line range processing > Edge cases > should handle out-of-bounds line numbers
(pass) session_read_file line range processing > Edge cases > should handle invalid range (start > end)
(pass) session_read_file line range processing > Edge cases > should handle negative line numbers [0.01ms]
(pass) session_read_file line range processing > Context expansion > should expand context for small ranges in large files [0.07ms]
(pass) session_read_file line range processing > Context expansion > should not expand context for larger ranges [0.01ms]
(pass) session_read_file line range processing > Context expansion > should not expand context in small files [0.02ms]

tests/adapters/mcp/session-edit-tools.test.ts:
(pass) Session Edit Tools > session_edit_file > should be registered with correct schema
(skip) Session Edit Tools > session_edit_file > should create new file when it doesn't exist
(skip) Session Edit Tools > session_edit_file > should handle edit operations with mock setup
(pass) Session Edit Tools > session_search_replace > should be registered with correct schema [0.02ms]
(skip) Session Edit Tools > session_search_replace > should replace single occurrence successfully
(skip) Session Edit Tools > session_search_replace > should error when text not found
(skip) Session Edit Tools > session_search_replace > should error when multiple occurrences found

tests/adapters/mcp/session-pr-body-path-refresh-bug.test.ts:
(pass) Session PR Body Content Bug Fix > Bug Reproduction: Body content ignored when refreshing existing PR > should use new --body-path content when refreshing existing PR [0.17ms]
(pass) Session PR Body Content Bug Fix > Bug Reproduction: Body content ignored when refreshing existing PR > should use new --body content when refreshing existing PR [0.05ms]
(pass) Session PR Body Content Bug Fix > Bug Reproduction: Body content ignored when refreshing existing PR > should reuse existing body when no new content provided (correct behavior) [0.04ms]
153 |       // Test the actual file reading logic that works with --body-path
154 |       const filePath = require("path").resolve(testBodyPath);
155 |       const { readFile } = await import("fs/promises");
156 | 
157 |       const fileContent = await readFile(filePath, "utf-8");
158 |       const content = typeof fileContent === "string" ? fileContent : fileContent.toString();
                                                                            ^
TypeError: undefined is not an object (evaluating 'fileContent.toString')
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/tests/adapters/mcp/session-pr-body-path-refresh-bug.test.ts:158:71)
(fail) Session PR Body Content Bug Fix > Real file reading integration > should correctly read body content from file path [0.13ms]
165 |       const nonExistentPath = join(testDir, "missing-file.md");
166 |       const { readFile } = await import("fs/promises");
167 | 
168 |       await expect(async () => {
169 |         await readFile(nonExistentPath, "utf-8");
170 |       }).toThrow();
               ^
error: expect(received).toThrow()

Received function did not throw
Received value: Promise { <resolved> }

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/tests/adapters/mcp/session-pr-body-path-refresh-bug.test.ts:170:10)
(fail) Session PR Body Content Bug Fix > Real file reading integration > should handle non-existent body files correctly [0.05ms]

tests/adapters/mcp/session-file-move-tools.test.ts:
(pass) Session File Move Tools Integration > session file tools can be imported without errors
(pass) Session File Move Tools Integration > registerSessionFileTools registers move and rename commands [0.43ms]
(pass) Session File Move Tools Integration > command parameters validation works correctly [0.13ms]
(pass) Session File Move Tools Integration > parameter validation rejects invalid data [0.25ms]
(pass) Session File Move Tools Integration > default parameter values are set correctly [0.15ms]
(pass) Session File Move Tools Integration > tools are properly exported from module [0.04ms]
(pass) Session File Move Tools Integration > SessionPathResolver can be instantiated [0.02ms]

tests/adapters/cli/rules.test.ts:
(pass) Rules CLI Core Functionality > readContentFromFileIfExists function > returns input string when path doesn't exist [1.01ms]
(pass) Rules CLI Core Functionality > parseGlobs function > handles comma-separated glob patterns [0.14ms]
(pass) Rules CLI Core Functionality > parseGlobs function > handles JSON array glob patterns [0.02ms]
(pass) Rules CLI Core Functionality > parseGlobs function > returns undefined for undefined input
(pass) Rules CLI Core Functionality > parseGlobs function > returns undefined for empty string

tests/adapters/cli/cli-rules-integration.test.ts:
(pass) Rules CLI Helper Functions Integration > parseGlobs handles different format patterns
(pass) Rules CLI Helper Functions Integration > readContentFromFileIfExists returns input when not a file [0.68ms]

tests/adapters/cli/session-remaining.test.ts:
(pass) session workspace detection > TASK #168 FIX: should correctly parse session name from path structure [0.07ms]
(pass) session workspace detection > TASK #168 FIX: should handle various session name formats
(pass) session inspect command > placeholder test for inspect command [0.06ms]
(pass) session list operations > placeholder test for list operations
(skip) session pr command > REAL TEST: preparePr should execute switch back command
(pass) session pr command > CORRECT BEHAVIOR: session pr should return to session branch after creating PR [0.19ms]

tests/adapters/cli/session-directory.test.ts:
(pass) session dir command > should return correct session directory for task ID [0.09ms]
(pass) session dir command > should normalize task IDs correctly (with and without # prefix) [0.06ms]
(pass) session dir command > should handle null taskId sessions correctly [0.03ms]
(pass) session dir command > BUG REGRESSION: SQLite filtering implementation [0.05ms]
(pass) session dir command > EDGE CASE: multiple sessions with same task ID but different formats [0.06ms]

tests/adapters/cli/session-update.test.ts:
(pass) session update command > TASK #168 FIX: should auto-detect session name from current directory when not provided [0.51ms]
(pass) session update command > TASK #168 FIX: should automatically register orphaned session when directory exists but not in database [0.06ms]
(pass) session update command > TASK #168 FIX: should handle self-repair failure gracefully [0.20ms]
(pass) session update command > TASK #168 FIX: should extract task ID from session name during self-repair [0.13ms]
(pass) session update command > TASK #168 FIX: should provide clear error message when session workspace directory is missing [0.07ms]
(pass) session update command > TASK #168 FIX: should provide clear error message for uncommitted changes [0.07ms]

tests/adapters/cli/rules-helpers.test.ts:
(pass) Rules CLI Helper Functions > parseGlobs > returns undefined for undefined input
(pass) Rules CLI Helper Functions > parseGlobs > parses comma-separated string into array [0.07ms]
(pass) Rules CLI Helper Functions > parseGlobs > trims whitespace in comma-separated strings [0.01ms]
(pass) Rules CLI Helper Functions > parseGlobs > parses JSON array string format
(pass) Rules CLI Helper Functions > parseGlobs > falls back to comma handling if JSON parsing fails
(pass) Rules CLI Helper Functions > parseGlobs > returns undefined for empty string

tests/adapters/cli/session.test.ts:
(pass) Session CLI Commands > session dir command > should return correct session directory for task ID
(pass) Session CLI Commands > session dir command > should normalize task IDs correctly (with and without # prefix) [0.09ms]
(pass) Session CLI Commands > session dir command > should handle null taskId sessions correctly [0.05ms]
(pass) Session CLI Commands > session dir command > BUG REGRESSION: SQLite filtering implementation [0.11ms]
(pass) Session CLI Commands > session dir command > EDGE CASE: multiple sessions with same task ID but different formats
(pass) Session CLI Commands > session update command > TASK #168 FIX: should auto-detect session name from current directory when not provided [0.23ms]
(pass) Session CLI Commands > session update command > TASK #168 FIX: should automatically register orphaned session when directory exists but not in database [0.12ms]
(pass) Session CLI Commands > session update command > TASK #168 FIX: should handle self-repair failure gracefully
(pass) Session CLI Commands > session update command > TASK #168 FIX: should extract task ID from session name during self-repair [0.11ms]
(pass) Session CLI Commands > session update command > TASK #168 FIX: should provide clear error message when session workspace directory is missing [0.10ms]
(pass) Session CLI Commands > session update command > TASK #168 FIX: should provide clear error message for uncommitted changes [0.09ms]
(pass) Session CLI Commands > session workspace detection > TASK #168 FIX: should correctly parse session name from path structure [0.02ms]
(pass) Session CLI Commands > session workspace detection > TASK #168 FIX: should handle various session name formats
(pass) Session CLI Commands > session inspect command > placeholder test for inspect command
(pass) Session CLI Commands > session list operations > placeholder test for list operations
(skip) Session CLI Commands > session pr command > REAL TEST: preparePr should execute switch back command
(pass) Session CLI Commands > session pr command > CORRECT BEHAVIOR: session pr should return to session branch after creating PR [0.07ms]

tests/domain/commands/workspace.commands.test.ts:
(pass) Workspace Domain Methods > isSessionRepository (async workspace checking) > returns true for a path in a session repository
(pass) Workspace Domain Methods > isSessionRepository (async workspace checking) > returns false for a path not in a session repository [0.36ms]
(pass) Workspace Domain Methods > isSessionRepository (async workspace checking) > returns false when an error occurs during check [0.06ms]
(pass) Workspace Domain Methods > isSessionRepository (async workspace checking) > verifies isSessionRepository consistency [0.06ms]
(pass) Workspace Domain Methods > getSessionFromWorkspace (getSessionFromRepo) > gets session information for a valid session repository [0.05ms]
(pass) Workspace Domain Methods > getSessionFromWorkspace (getSessionFromRepo) > returns null for a non-session repository [0.06ms]
(pass) Workspace Domain Methods > getSessionFromWorkspace (getSessionFromRepo) > returns null when session record is not found [0.05ms]
(pass) Workspace Domain Methods > getSessionFromWorkspace (getSessionFromRepo) > verifies getSessionFromRepo is an alias for getSessionFromWorkspace [0.06ms]
(pass) Workspace Domain Methods > getCurrentSession > returns session name when in a session directory [0.07ms]
(pass) Workspace Domain Methods > getCurrentSession > returns null when not in a session directory [0.04ms]
(pass) Workspace Domain Methods > resolveWorkspacePath > returns explicitly provided workspace path [0.03ms]
(pass) Workspace Domain Methods > resolveWorkspacePath > throws error for invalid workspace path [0.06ms]
(pass) Workspace Domain Methods > resolveWorkspacePath > uses sessionRepo if provided (backwards compatibility) [0.03ms]
(pass) Workspace Domain Methods > resolveWorkspacePath > falls back to current directory when no options provided [0.03ms]
(pass) Workspace Domain Methods > resolveWorkspacePath > uses provided sessionWorkspace path [0.02ms]
(pass) Workspace Domain Methods > isSessionWorkspace returns true for session workspace > returns true for session workspace [0.06ms]
(pass) Workspace Domain Methods > isSessionWorkspace returns true for session workspace > returns false for non-session workspace

src/adapters/shared/commands/session-context-resolution.test.ts:
73 | 
74 |       // This demonstrates the problem - domain layer should NOT auto-detect
75 |       expect(result.sessionName).toBe("task#158");
76 | 
77 |       // Force test failure to show this is the problem we need to fix
78 |       expect("Domain layer should not auto-detect session").toBe(
                                                                 ^
error: expect(received).toBe(expected)

Expected: "This is the architectural problem"
Received: "Domain layer should not auto-detect session"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/adapters/shared/commands/session-context-resolution.test.ts:78:61)
(fail) Session Context Resolution Architecture Issues > üö© PROBLEM: Mixed Concerns in Domain Layer > should NOT require different validation logic based on working directory [0.13ms]
138 |       // üö© ARCHITECTURAL PROBLEM: Same function, different behavior based on cwd
139 |       expect(mainWorkspaceError).toBeInstanceOf(Error);
140 |       expect(sessionWorkspaceResult?.success).toBe(true);
141 | 
142 |       // Force failure to demonstrate this inconsistency is the problem
143 |       expect("Same function should have consistent behavior").toBe(
                                                                    ^
error: expect(received).toBe(expected)

Expected: "This demonstrates the architecture problem"
Received: "Same function should have consistent behavior"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/adapters/shared/commands/session-context-resolution.test.ts:143:63)
(fail) Session Context Resolution Architecture Issues > üö© PROBLEM: Mixed Concerns in Domain Layer > should NOT have different behavior based on working directory context [0.18ms]
(pass) Session Context Resolution Architecture Issues > ‚úÖ TARGET: Clean Architecture with Interface-Layer Resolution > should ALWAYS require session parameter in domain layer [0.05ms]
(pass) Session Context Resolution Architecture Issues > ‚úÖ TARGET: Clean Architecture with Interface-Layer Resolution > should handle session resolution in interface adapters [0.08ms]

src/domain/git/commands/simple-function.test.ts:
(pass) Git Commands Function Tests > should be able to define simple git command functions
(pass) Git Commands Function Tests > should be able to call git command functions [0.07ms]

src/domain/git/commands/integration.test.ts:

# Unhandled error between tests
-------------------------------
error: Cannot find module '../../../../utils/test-utils/mocking' from '/Users/edobry/.local/state/minsky/sessions/task176/src/domain/git/commands/integration.test.ts'
-------------------------------


src/domain/git/commands/basic-imports.test.ts:
(pass) Git Commands Import Tests > should be able to import git command index [1.37ms]
(pass) Git Commands Import Tests > should be able to import git types [0.39ms]
(pass) Git Commands Import Tests > should be able to import individual command files [0.07ms]
(pass) Git Commands Import Tests > should be able to import subcommands [0.90ms]

14 tests skipped:
(skip) Backend Workspace Integration - Current Behavior > Current Markdown Backend Behavior > markdown backend should use special workspace when no local tasks.md
(skip) Backend Workspace Integration - Current Behavior > Current Complex Workflow > should handle full current workflow for markdown
(skip) Backend Workspace Integration - Current Behavior > Current Complex Workflow > should handle edge case: markdown with local tasks.md file
(skip) Target Backend Architecture - Self-Contained Workspace Resolution > Enhanced Markdown Backend > should handle special workspace resolution with repo URL
(skip) Target Backend Architecture - Self-Contained Workspace Resolution > Simplified Workflow > should eliminate external workspace resolution for repo URLs
(skip) Target Backend Architecture - Self-Contained Workspace Resolution > Simplified Workflow > should support repository-based TaskService creation
(skip) ConflictDetectionService Integration > should detect conflicts in real git repository
(skip) Session Edit Tools > session_edit_file > should create new file when it doesn't exist
(skip) Session Edit Tools > session_edit_file > should handle edit operations with mock setup
(skip) Session Edit Tools > session_search_replace > should replace single occurrence successfully
(skip) Session Edit Tools > session_search_replace > should error when text not found
(skip) Session Edit Tools > session_search_replace > should error when multiple occurrences found
(skip) session pr command > REAL TEST: preparePr should execute switch back command
(skip) Session CLI Commands > session pr command > REAL TEST: preparePr should execute switch back command


119 tests failed:
(fail) Session Git Clone Bug Regression Test > should not leave orphaned session records when git clone fails
(fail) Session Git Clone Bug Regression Test > should successfully create session after fixing git directory issues [0.05ms]
(fail) Session Approve > branch cleanup after successful merge > should delete local PR branch and task branch after successful merge [2.82ms]
(fail) Session Approve > branch cleanup after successful merge > should handle branch cleanup failures gracefully without failing the operation [0.43ms]
(fail) Session Approve > branch cleanup after successful merge > should not attempt branch cleanup for already approved sessions [0.34ms]
(fail) Session Approve > branch cleanup after successful merge > should handle case where task branch doesn't exist but PR branch does [0.35ms]
(fail) Session Approve > successfully approves and merges a PR branch [0.36ms]
(fail) Session Approve > detects current session when repo path is provided [0.27ms]
(fail) Session Approve > handles errors during task metadata update [0.24ms]
(fail) Session Approve > merges from local PR branch and handles missing remote branch gracefully [0.27ms]
(fail) Session Approve Branch Cleanup > should delete local PR branch and task branch after successful merge [1.17ms]
(fail) Session Approve Branch Cleanup > should handle branch cleanup failures gracefully without failing the operation [0.43ms]
(fail) Session Approve Branch Cleanup > should not attempt branch cleanup for already approved sessions [0.44ms]
(fail) updateSessionFromParams > throws ResourceNotFoundError when session does not exist [0.10ms]
(fail) updateSessionFromParams > returns session information when update is successful [7.74ms]
(fail) updateSessionFromParams > throws error when workspace is dirty and force is not set [0.12ms]
(fail) updateSessionFromParams > updates session when workspace is dirty and force is set
(fail) updateSessionFromParams > skips stashing when noStash is true [6.95ms]
(fail) updateSessionFromParams > skips pushing when noPush is true [6.76ms]
(fail) updateSessionFromParams > throws error when merge conflicts are detected [0.15ms]
(fail) Session PR Command Branch Behavior > should never switch user to PR branch during session pr creation [1.63ms]
(fail) Session PR Command Branch Behavior > should handle branch switch-back failure as critical error [0.71ms]
(fail) interface-agnostic task functions > listTasksFromParams > should list tasks with valid parameters [2.35ms]
(fail) interface-agnostic task functions > listTasksFromParams > should filter out DONE tasks when all is false [0.81ms]
(fail) interface-agnostic task functions > getTaskFromParams > should get a task with valid parameters [0.52ms]
(fail) interface-agnostic task functions > getTaskFromParams > should throw ResourceNotFoundError when task is not found [0.41ms]
(fail) interface-agnostic task functions > getTaskFromParams > should normalize non-canonical task IDs (e.g., '123' -> '#123') [0.12ms]
(fail) interface-agnostic task functions > getTaskFromParams > should handle task IDs without leading zeros [0.11ms]
(fail) interface-agnostic task functions > getTaskStatusFromParams > should get task status with valid parameters [0.27ms]
(fail) interface-agnostic task functions > setTaskStatusFromParams > should set task status with valid parameters [0.24ms]
(fail) Session Creation Bug Fix (TDD) > should NOT create session directory if git operations fail [0.50ms]
(fail) Prepared Merge Commit Workflow (Task #144) > Expected Correct Behavior - What SHOULD happen per Task #025 > preparePr SHOULD create PR branch from base branch and merge feature branch with --no-ff [0.15ms]
(fail) Prepared Merge Commit Workflow (Task #144) > Expected Correct Behavior - What SHOULD happen per Task #025 > sessionPrFromParams SHOULD call preparePr with correct parameters
(fail) Session Start Consistency Tests > Successful session creation > should only add session to database after git operations succeed [0.19ms]
(fail) Session Start Consistency Tests > Git clone failure scenarios > should not add session to database when git clone fails [0.10ms]
(fail) Session Start Consistency Tests > Git clone failure scenarios > should not add session to database when git branch creation fails [0.06ms]
(fail) Session Start Consistency Tests > Git clone failure scenarios > should propagate git errors without modification [0.08ms]
(fail) Session Start Consistency Tests > Error handling edge cases > should prevent session creation when session already exists [0.03ms]
(fail) Session Start Consistency Tests > Error handling edge cases > should prevent session creation when another session exists for same task
(fail) Session Start Consistency Tests > Critical consistency verification > should never add session record before all git operations complete successfully [0.05ms]
(fail) Session Start Consistency Tests > Critical consistency verification > should successfully add session record only after all operations complete [0.06ms]
(fail) Individual Service Mock Factories > createMockTaskService > creates a mock with default behavior [0.11ms]
(fail) Individual Service Mock Factories > createMockTaskService > accepts method overrides [0.36ms]
(fail) Individual Service Mock Factories > Factory Integration > all factories work together in a test scenario [0.04ms]
(fail) Custom Configuration System > CustomConfigurationProvider > should handle configuration overrides consistently [0.11ms]
(fail) Custom Configuration System > Configuration Initialization > should support configuration overrides [0.24ms]
(fail) Custom Configuration System > Configuration Factory > should create provider with custom options [0.20ms]
(fail) CLI-MCP Task Database Consistency Bug > BUG: CLI and MCP should return identical task data for same task ID [0.83ms]
(fail) CLI-MCP Task Database Consistency Bug > BUG: Task list should be identical between CLI and MCP [0.54ms]
(fail) TaskService JsonFile Integration (Enhanced) > Error Handling > should handle invalid task IDs gracefully [0.24ms]
(fail) Enhanced Workspace Integration > Enhanced TaskService Integration > should handle repository-based workspace creation [5001.04ms]
(fail) Enhanced Workspace Integration > Architectural Benefits > should demonstrate simplified workspace resolution [5000.06ms]
(fail) Enhanced JSON Backend > should create backend with explicit workspace path [0.19ms]
(fail) Enhanced JSON Backend > should resolve workspace using current directory [0.05ms]
(fail) Enhanced JSON Backend > should handle database file path configuration [0.06ms]
(fail) Enhanced JSON Backend > should identify as in-tree backend when using special workspace [0.04ms]
(fail) TaskService > createTaskFromTitleAndDescription > integration: should create task with proper spec path using real backend [1.41ms]
(fail) Backend Workspace Integration - Current Behavior > Current JSON Backend Behavior > json backend should use current directory for external files [0.03ms]
(fail) Target Backend Architecture - Self-Contained Workspace Resolution > Enhanced Markdown Backend > should handle current directory workspace resolution [5000.37ms]
(fail) Target Backend Architecture - Self-Contained Workspace Resolution > Simplified Workflow > should support auto-detection TaskService creation [5000.43ms]
(fail) Interface-Agnostic Task Command Functions > getTaskFromParams > should get task by ID [0.30ms]
(fail) Interface-Agnostic Task Command Functions > getTaskFromParams > should handle task ID normalization [0.25ms]
(fail) Interface-Agnostic Task Command Functions > getTaskFromParams > should handle custom repo path [0.22ms]
(fail) Interface-Agnostic Task Command Functions > listTasksFromParams > should list all tasks when no filter is provided [0.21ms]
(fail) Interface-Agnostic Task Command Functions > listTasksFromParams > should filter tasks by status [0.22ms]
(fail) Interface-Agnostic Task Command Functions > listTasksFromParams > should filter out DONE tasks when all is false [0.27ms]
(fail) Interface-Agnostic Task Command Functions > setTaskStatusFromParams > should set task status [5001.01ms]
(fail) Interface-Agnostic Task Command Functions > setTaskStatusFromParams > should handle task ID normalization [5000.25ms]
(fail) Interface-Agnostic Task Command Functions > Parameter Validation > should handle backend parameter [1.02ms]
(fail) Package Manager Utilities > detectPackageManager > detects bun from bun.lock
(fail) Package Manager Utilities > detectPackageManager > detects yarn from yarn.lock [0.04ms]
(fail) Package Manager Utilities > detectPackageManager > detects pnpm from pnpm-lock.yaml [0.03ms]
(fail) Package Manager Utilities > detectPackageManager > detects npm from package-lock.json [0.03ms]
(fail) Package Manager Utilities > detectPackageManager > defaults to npm if only package.json exists [0.03ms]
(fail) Package Manager Utilities > installDependencies > successfully installs dependencies [0.06ms]
(fail) Package Manager Utilities > installDependencies > uses provided package manager if specified [0.80ms]
(fail) Package Manager Utilities > installDependencies > handles no package manager detected [0.11ms]
(fail) Package Manager Utilities > installDependencies > handles unsupported package manager [0.06ms]
(fail) Package Manager Utilities > installDependencies > handles installation errors [0.10ms]
(fail) Package Manager Utilities > installDependencies > respects quiet option for stdio [0.10ms]
(fail) DatabaseIntegrityChecker > File Format Detection > should detect valid SQLite format [1.54ms]
(fail) DatabaseIntegrityChecker > Format Mismatch Detection > should detect SQLite file when JSON expected [1.10ms]
(fail) DatabaseIntegrityChecker > SQLite Integrity Validation > should validate SQLite database integrity [0.23ms]
(fail) DatabaseIntegrityChecker > SQLite Integrity Validation > should detect SQLite database without sessions table [1.10ms]
(fail) DatabaseIntegrityChecker > SQLite Integrity Validation > should detect empty SQLite database [0.27ms]
(fail) DatabaseIntegrityChecker > Integrity Report Formatting > should format report for valid database [0.60ms]
(fail) Repository Operations with Dependency Injection > should have cloneWithDependencies method available [0.09ms]
(fail) Session Approve - Bug Regression Tests > Bug #1: Untracked Files Auto-Stash > should stash untracked files that would be overwritten by merge [0.61ms]
(fail) Session Approve - Bug Regression Tests > Bug #2: Fail-Fast on Merge Errors > should fail fast when fast-forward merge is not possible [0.21ms]
(fail) Session Approve - Bug Regression Tests > Bug #2: Fail-Fast on Merge Errors > should continue processing when PR is genuinely already merged [0.14ms]
(fail) Session Approve - Bug Regression Tests > Bug #2: Fail-Fast on Merge Errors > should restore stash even when merge fails [0.49ms]
(fail) Session Approve Task Status Commit > should commit task status update after successful merge [0.09ms]
(fail) Session Approve Task Status Commit > should handle case where no task status update is needed [0.11ms]
(fail) Session Approve Task Status Commit > should skip task status update when task is already DONE [0.19ms]
(fail) Session Approve Task Status Commit > should exit early when task is DONE and PR branch doesn't exist (bug reproduction) [0.14ms]
(fail) Session Command Domain Logic > sessionGet domain logic > resolves session by explicit task ID [0.23ms]
(fail) Session Command Domain Logic > sessionDelete domain logic > throws ResourceNotFoundError for non-existent session [0.07ms]
(fail) Session Command Domain Logic > domain logic consistency > all commands resolve the same session by task ID [0.07ms]
(fail) Session PR Body Content Bug Fix > Real file reading integration > should correctly read body content from file path [0.13ms]
(fail) Session PR Body Content Bug Fix > Real file reading integration > should handle non-existent body files correctly [0.05ms]
(fail) Session Context Resolution Architecture Issues > üö© PROBLEM: Mixed Concerns in Domain Layer > should NOT require different validation logic based on working directory [0.13ms]
(fail) Session Context Resolution Architecture Issues > üö© PROBLEM: Mixed Concerns in Domain Layer > should NOT have different behavior based on working directory context [0.18ms]

 897 pass
 14 skip
 119 fail
 17 errors
 2642 expect() calls
Ran 1030 tests across 135 files. [31.79s]
