bun test v1.2.15 (df017990)

src/types/project.test.ts:
(pass) ProjectContext > validateRepositoryPath > returns false for non-existent paths [0.02ms]
(pass) ProjectContext > validateRepositoryPath > returns false for relative paths
(pass) ProjectContext > validateRepositoryPath > returns true for current working directory
(pass) ProjectContext > createProjectContext > creates a ProjectContext for current working directory
{"level":"error","message":"Invalid repository path: /definitely/does/not/exist/path/12345","timestamp":"2025-08-20T00:48:23.057Z"}
(pass) ProjectContext > createProjectContext > throws an error for clearly invalid path [4.04ms]
(pass) ProjectContext > createProjectContextFromCwd > creates a ProjectContext from current working directory

src/utils/auto-commit.test.ts:
(pass) autoCommitTaskChanges > should be a function
(pass) autoCommitTaskChanges > should accept workspacePath and message parameters [0.08ms]
(pass) autoCommitTaskChanges > should return a Promise<boolean> [3.26ms]

src/utils/semantic-error-classifier-integration.test.ts:
(pass) SemanticErrorClassifier Integration Tests > Mock filesystem scenarios > should correctly classify file not found vs directory not found [0.50ms]
(pass) SemanticErrorClassifier Integration Tests > Mock filesystem scenarios > should handle various mock filesystem error formats [0.35ms]
(pass) SemanticErrorClassifier Integration Tests > Mock filesystem scenarios > should provide context-aware solutions for mock scenarios [0.09ms]

src/utils/param-schemas.test.ts:
(pass) Parameter Schemas > Schema Helpers > optionalString should create an optional string schema with description
(pass) Parameter Schemas > Schema Helpers > requiredString should create a required string schema with description
(pass) Parameter Schemas > Schema Helpers > optionalBoolean should create an optional boolean schema with description
(pass) Parameter Schemas > Common Parameters > all common parameter schemas should have descriptions [0.09ms]

src/utils/filter-messages.test.ts:
{"error":"Git check-status failed: Command failed: git -C /tmp status --porcelain\nfatal: not a git repository (or any of the parent directories): .git\n\n\nCommand: git -C /tmp status --porcelain\nWorking directory: /tmp\nExecution time: 12ms","level":"error","message":"Auto-commit: Failed to commit task changes test commit","timestamp":"2025-08-20T00:48:23.073Z","workspacePath":"/tmp"}
(pass) Filter Messages Utility > getStatusFilterMessage > returns correct message for a given status [0.03ms]
(pass) Filter Messages Utility > getStatusFilterMessage > includes the status in single quotes
(pass) Filter Messages Utility > getActiveTasksMessage > returns message about active tasks
(pass) Filter Messages Utility > getActiveTasksMessage > includes instruction about --all flag
(pass) Filter Messages Utility > generateFilterMessages > returns status filter message when status is provided
(pass) Filter Messages Utility > generateFilterMessages > returns active tasks message when not showing all tasks
(pass) Filter Messages Utility > generateFilterMessages > returns no messages when all is true
(pass) Filter Messages Utility > generateFilterMessages > prioritizes status filter over active tasks message
(pass) Filter Messages Utility > generateFilterMessages > returns empty array when no filter options provided

src/utils/option-descriptions.test.ts:
(pass) Option Descriptions > all exported descriptions should be non-empty strings
(pass) Option Descriptions > all descriptions should follow consistent naming pattern (UPPERCASE_WITH_DESCRIPTION suffix)
(pass) Option Descriptions > all descriptions should end with proper punctuation [0.05ms]
(pass) Option Descriptions > repository resolution descriptions should be consistent
(pass) Option Descriptions > output format descriptions should be consistent
(pass) Option Descriptions > task descriptions should be consistent
(pass) Option Descriptions > backend descriptions should be consistent
(pass) Option Descriptions > force option descriptions should be consistent
(pass) Option Descriptions > git option descriptions should be consistent
(pass) Option Descriptions > rules option descriptions should be consistent

src/utils/logger.test.ts:
(pass) Logger > getLogMode > should return HUMAN when configuration mode is set to HUMAN [0.06ms]
(pass) Logger > getLogMode > should return STRUCTURED when configuration mode is set to STRUCTURED
(pass) Logger > getLogMode > should default to HUMAN when mode is auto and TTY is available [0.05ms]
(pass) Logger > getLogMode > should default to STRUCTURED when mode is auto and TTY is not available
(pass) Logger > createConfigurableLogger > should create logger with configuration [0.28ms]
(pass) Logger > createConfigurableLogger > should create logger with STRUCTURED mode [0.27ms]
(pass) Logger > createConfigurableLogger > should expose logger methods [0.14ms]
(pass) Logger > createConfigurableLogger > should support dependency injection for testing [0.11ms]
(pass) Logger > createConfigurableLogger > should handle different log levels [0.30ms]
(pass) Logger > createConfigurableLogger > should isolate logger instances [0.25ms]
(pass) Logger > configuration integration > should maintain backward compatibility [0.12ms]
(pass) Logger > configuration integration > should support enableAgentLogs configuration [0.20ms]

src/utils/semantic-error-classifier.test.ts:
(pass) SemanticErrorClassifier > classifyError > should classify ENOENT file errors correctly [0.56ms]
(pass) SemanticErrorClassifier > classifyError > should classify ENOENT directory errors correctly [0.13ms]
(pass) SemanticErrorClassifier > classifyError > should classify permission errors correctly
(pass) SemanticErrorClassifier > classifyError > should classify session errors correctly [0.19ms]
(pass) SemanticErrorClassifier > classifyError > should classify git errors correctly [0.17ms]
(pass) SemanticErrorClassifier > classifyError > should handle generic errors gracefully [0.09ms]
(pass) SemanticErrorClassifier > classifyError > should extract file paths from error messages
(pass) SemanticErrorClassifier > classifyError > should enhance solutions based on context [0.12ms]

src/mcp/command-mapper.test.ts:
(pass) CommandMapper > Schema Conversion > should convert simple object schema to flat JSON schema without $ref [1.24ms]
(pass) CommandMapper > Schema Conversion > should handle empty object schema [0.15ms]
(pass) CommandMapper > Schema Conversion > should handle complex nested schemas [0.57ms]
(pass) CommandMapper > Schema Conversion > should handle schema with validation rules [0.40ms]
(pass) CommandMapper > Schema Conversion > should ensure schema is MCP-compatible [0.31ms]
(pass) CommandMapper > Schema Conversion > should produce schema that passes MCP server validation [0.12ms]
(pass) CommandMapper > should initialize with server and project context
(pass) CommandMapper > should add tool to server when addCommand is called [0.16ms]

src/mcp/server.test.ts:
(pass) MCP Server > should import official MCP SDK module successfully [18.71ms]
(pass) MCP Server > should import stdio transport successfully [1.09ms]
(pass) MCP Server > should be able to import our server modules [9.76ms]
(pass) MCP Server > should create MinskyMCPServer instance [0.49ms]

src/adapters/session-context-resolver.test.ts:
(pass) Interface-Layer Session Context Resolution > CLI Session Context Resolver > should use explicit name when provided [0.10ms]
(pass) Interface-Layer Session Context Resolution > CLI Session Context Resolver > should auto-detect session from session workspace path [0.12ms]
(pass) Interface-Layer Session Context Resolution > CLI Session Context Resolver > should return params unchanged if no session can be detected [0.04ms]
(pass) Interface-Layer Session Context Resolution > CLI Session Context Resolver > should prefer explicit name over auto-detection
(pass) Interface-Layer Session Context Resolution > CLI Session Context Resolver > should use explicit task parameter for session identification
(pass) Interface-Layer Session Context Resolution > CLI Session Context Resolver > should prefer name over task when both are provided
(pass) Interface-Layer Session Context Resolution > MCP Session Context Resolver > should use explicit session when provided
(pass) Interface-Layer Session Context Resolution > MCP Session Context Resolver > should throw ValidationError when no session provided [0.16ms]
(pass) Interface-Layer Session Context Resolution > MCP Session Context Resolver > should not auto-detect even in session workspace
(pass) Interface-Layer Session Context Resolution > MCP Session Context Resolver > should use explicit task parameter for session identification
(pass) Interface-Layer Session Context Resolution > MCP Session Context Resolver > should prefer name over task when both are provided
(pass) Interface-Layer Session Context Resolution > Session Context Resolver Factory > should return CLI resolver for 'cli' interface
(pass) Interface-Layer Session Context Resolution > Session Context Resolver Factory > should return MCP resolver for 'mcp' interface
(pass) Interface-Layer Session Context Resolution > Session Context Resolver Factory > should default to MCP resolver for unknown interfaces
(pass) Interface-Layer Session Context Resolution > Session Context Resolver Factory > should resolve session context based on interface type [0.16ms]
(pass) Interface-Layer Session Context Resolution > resolveSessionForInterface helper > should resolve CLI session context successfully [0.18ms]
(pass) Interface-Layer Session Context Resolution > resolveSessionForInterface helper > should resolve MCP session context with explicit session
{"error":"Session parameter required for MCP interface.\n\nPlease provide one of:\n  session: \"task#158\"     // Session name\n  name: \"task#158\"        // Session name (alternative)\n  task: \"158\"            // Task ID\n\nExamples:\n  session.pr({ session: \"task#158\", title: \"Fix bug\" })\n  session.pr({ name: \"task#158\", title: \"Fix bug\" })\n  session.pr({ task: \"158\", title: \"Fix bug\" })\n\n💡 MCP tools don't auto-detect session context like CLI commands do.","interfaceType":"mcp","level":"error","message":"Session context resolution failed","params":{"title":"test"},"timestamp":"2025-08-20T00:48:23.123Z"}
(pass) Interface-Layer Session Context Resolution > resolveSessionForInterface helper > should throw ValidationError when MCP has no session [0.15ms]
{"error":"No session context available.\n\nInterface: cli\nParameters: {\n  \"title\": \"test\"\n}\nWorking Directory: /Users/edobry/Projects/minsky\n\nTry running this command from a session workspace, or provide --name <session>","interfaceType":"cli","level":"error","message":"Session context resolution failed","params":{"title":"test"},"timestamp":"2025-08-20T00:48:23.123Z","workingDir":"/Users/edobry/Projects/minsky"}
(pass) Interface-Layer Session Context Resolution > resolveSessionForInterface helper > should throw ValidationError when CLI can't detect session [0.05ms]

src/errors/network-errors.test.ts:
(pass) Network Error handling > NetworkError class > should create a NetworkError with the correct properties
(pass) Network Error handling > PortInUseError class > should create a PortInUseError with the correct message
(pass) Network Error handling > PortInUseError class > should provide helpful suggestions
(pass) Network Error handling > NetworkPermissionError class > should create a NetworkPermissionError with the correct message [0.19ms]
(pass) Network Error handling > NetworkPermissionError class > should provide helpful suggestions
(pass) Network Error handling > isNetworkError function > should identify common network errors [0.05ms]
(pass) Network Error handling > createNetworkError function > should create a PortInUseError for EADDRINUSE errors
(pass) Network Error handling > createNetworkError function > should create a NetworkPermissionError for EACCES errors
(pass) Network Error handling > createNetworkError function > should create a generic NetworkError for other errors
(pass) Network Error handling > formatNetworkErrorMessage function > should format a PortInUseError with suggestions
(pass) Network Error handling > formatNetworkErrorMessage function > should not include the debug hint when debug is true

src/errors/enhanced-error-templates.test.ts:
(pass) Task 223 Enhanced Error Messages > createSessionPrBranchErrorMessage > should create helpful error message for PR branch restriction [0.21ms]
(pass) Task 223 Enhanced Error Messages > createSessionPrBranchErrorMessage > should handle undefined session name gracefully
(pass) Task 223 Enhanced Error Messages > createSessionPrBranchErrorMessage > should include context information when provided
(pass) Task 223 Enhanced Error Messages > createTaskIdParsingErrorMessage > should show supported task ID formats [0.13ms]
(pass) Task 223 Enhanced Error Messages > createTaskIdParsingErrorMessage > should include operation context
(pass) Task 223 Enhanced Error Messages > createVariableNamingErrorMessage > should identify underscore prefix mismatch (declaration has underscore, usage doesn't)
(pass) Task 223 Enhanced Error Messages > createVariableNamingErrorMessage > should identify reverse underscore mismatch (declaration without underscore, usage has underscore)
(pass) Task 223 Enhanced Error Messages > createVariableNamingErrorMessage > should include file path and line numbers when provided
(pass) Task 223 Enhanced Error Messages > createGitTimeoutErrorMessage > should provide troubleshooting steps for git timeouts [0.06ms]
(pass) Task 223 Enhanced Error Messages > createGitTimeoutErrorMessage > should include timeout duration in context [0.03ms]
(pass) Task 223 Enhanced Error Messages > createMergeConflictErrorMessage > should identify conflicting files with conflict types [0.10ms]
(pass) Task 223 Enhanced Error Messages > createMergeConflictErrorMessage > should provide resolution strategies [0.03ms]
(pass) Task 223 Enhanced Error Messages > createBackendDetectionErrorMessage > should show available backends and their requirements [0.09ms]
(pass) Task 223 Enhanced Error Messages > createBackendDetectionErrorMessage > should provide default backend list when no backends provided [0.02ms]
(pass) Task 223 Enhanced Error Messages > createBackendDetectionErrorMessage > should include workspace path in context
(pass) Task 223 Enhanced Error Messages > Error Message Quality > should use consistent emoji patterns across all error types [0.08ms]
(pass) Task 223 Enhanced Error Messages > Error Message Quality > should provide actionable command suggestions [0.03ms]
(pass) Task 223 Enhanced Error Messages > Error Message Quality > should include context information when provided [0.06ms]

src/errors/message-templates.test.ts:
(pass) Error Message Templates > getErrorMessage > extracts message from Error object
(pass) Error Message Templates > getErrorMessage > converts non-Error to string [0.08ms]
(pass) Error Message Templates > formatCommandSuggestions > formats single suggestion
(pass) Error Message Templates > formatCommandSuggestions > formats multiple suggestions
(pass) Error Message Templates > formatContextInfo > returns empty string for no context
(pass) Error Message Templates > formatContextInfo > formats single context info
(pass) Error Message Templates > formatContextInfo > formats multiple context info
(pass) Error Message Templates > buildErrorMessage > builds basic error message
(pass) Error Message Templates > buildErrorMessage > builds error message with description
(pass) Error Message Templates > buildErrorMessage > builds error message with sections and emojis
(pass) Error Message Templates > buildErrorMessage > includes context information
(pass) Error Message Templates > createResourceNotFoundMessage > creates session not found message
(pass) Error Message Templates > createMissingInfoMessage > creates missing information message [0.15ms]
(pass) Error Message Templates > createValidationErrorMessage > creates validation error message [0.07ms]
(pass) Error Message Templates > createCommandFailureMessage > creates command failure message
(pass) Error Message Templates > createSessionErrorMessage > creates not found session error [0.24ms]
(pass) Error Message Templates > createSessionErrorMessage > creates session exists error [0.05ms]
(pass) Error Message Templates > createSessionErrorMessage > creates invalid session error
(pass) Error Message Templates > createGitErrorMessage > creates git conflict error [0.11ms]
(pass) Error Message Templates > createGitErrorMessage > creates general git error [0.02ms]
(pass) Error Message Templates > createConfigErrorMessage > creates configuration error message [0.08ms]
(pass) Error Message Templates > ErrorContextBuilder > builds empty context [0.05ms]
(pass) Error Message Templates > ErrorContextBuilder > adds current directory
(pass) Error Message Templates > ErrorContextBuilder > adds session information [0.13ms]
(pass) Error Message Templates > ErrorContextBuilder > adds repository information
(pass) Error Message Templates > ErrorContextBuilder > adds task information [0.02ms]
(pass) Error Message Templates > ErrorContextBuilder > adds command information
(pass) Error Message Templates > ErrorContextBuilder > adds custom information [0.01ms]
(pass) Error Message Templates > ErrorContextBuilder > chains multiple context additions
(pass) Error Message Templates > Error message consistency > all templates use consistent emoji patterns
(pass) Error Message Templates > Error message consistency > all templates have consistent structure

src/domain/session-lookup-bug-integration.test.ts:
(pass) Session Lookup Bug Integration Test > should NOT create session directories when git clone fails [0.10ms]
(pass) Session Lookup Bug Integration Test > should create session directories when git clone succeeds [0.03ms]

src/domain/rules.test.ts:
(pass) RuleService > listRules > lists rules from both formats when no format specified [3.25ms]
(pass) RuleService > listRules > lists only cursor rules when format is cursor [0.16ms]
(pass) RuleService > listRules > lists only generic rules when format is generic [0.17ms]
(pass) RuleService > findRuleById > finds existing rule by id [0.13ms]
(pass) RuleService > findRuleById > returns null for non-existing rule [0.22ms]

src/domain/session-lookup-bug-reproduction.test.ts:
(pass) Session Lookup Bug Reproduction (Task #168) > 🐛 Session Creation Bug > should NOT register session in database if git operations fail [0.89ms]
(pass) Session Lookup Bug Reproduction (Task #168) > 🐛 Session Creation Bug > should demonstrate the lookup failure scenario [0.31ms]
Scenario: complete-session
  Database: ✗
  Directory: ✓
Scenario: orphaned-session
  Database: ✗
  Directory: ✓
Scenario: ghost-session
  Database: ✓
  Directory: ✗
(pass) Session Lookup Bug Reproduction (Task #168) > 🔍 Session Directory vs Database Consistency > should demonstrate the inconsistency between filesystem and database [0.21ms]
(pass) Session Lookup Bug Reproduction (Task #168) > 🔍 Session Directory vs Database Consistency > should show how the bug affects session commands [0.04ms]

src/domain/session-pr-body-path.test.ts:
(pass) Session PR bodyPath file reading functionality > should read body content from bodyPath when provided
(pass) Session PR bodyPath file reading functionality > should handle non-existent file path [0.11ms]
(pass) Session PR bodyPath file reading functionality > should handle file reading with different encodings [0.04ms]
(pass) Session PR bodyPath file reading functionality > ValidationError should be constructible [0.12ms]

src/domain/session-review.test.ts:
(pass) sessionReviewFromParams > reviews session by name [0.80ms]
(pass) sessionReviewFromParams > reviews session by task ID [0.05ms]
(pass) sessionReviewFromParams > throws ValidationError when no session detected
(pass) sessionReviewFromParams > throws ResourceNotFoundError when session not found

src/domain/session-git-clone-bug-regression.test.ts:
(pass) Session Git Clone Bug Regression Test > should not leave orphaned session records when git clone fails [1.07ms]
(pass) Session Git Clone Bug Regression Test > should successfully create session after fixing git directory issues [0.27ms]

src/domain/session-update-logic.test.ts:
(pass) Session Update Logic > shouldStashChanges > returns true when there are uncommitted changes and no special flags
(pass) Session Update Logic > shouldStashChanges > returns false when noStash is true, even with uncommitted changes
(pass) Session Update Logic > shouldStashChanges > returns false when force is true, even with uncommitted changes
(pass) Session Update Logic > shouldStashChanges > returns false when there are no uncommitted changes
(pass) Session Update Logic > shouldStashChanges > force takes precedence over noStash being false
(pass) Session Update Logic > shouldStashChanges > noStash takes precedence when both noStash and force are false
(pass) Session Update Logic > shouldRestoreStash > returns true when noStash is false (default)
(pass) Session Update Logic > shouldRestoreStash > returns true when noStash is explicitly false
(pass) Session Update Logic > shouldRestoreStash > returns false when noStash is true
(pass) Session Update Logic > shouldRestoreStash > is independent of force flag
(pass) Session Update Logic > shouldPushChanges > returns true when noPush is false (default)
(pass) Session Update Logic > shouldPushChanges > returns true when noPush is explicitly false
(pass) Session Update Logic > shouldPushChanges > returns false when noPush is true
(pass) Session Update Logic > shouldPushChanges > is independent of noStash and force flags
(pass) Session Update Logic > determineGitOperations > determines all operations correctly for default options with uncommitted changes
(pass) Session Update Logic > determineGitOperations > correctly handles noStash flag
(pass) Session Update Logic > determineGitOperations > correctly handles noPush flag
(pass) Session Update Logic > determineGitOperations > correctly handles both noStash and noPush flags
(pass) Session Update Logic > determineGitOperations > correctly handles force flag
(pass) Session Update Logic > determineGitOperations > correctly handles clean workspace (no uncommitted changes)
(pass) Session Update Logic > determineGitOperations > complex scenario: force + noPush with uncommitted changes

src/domain/git-default-branch.test.ts:
(pass) GitService Default Branch Detection > should detect default branch from origin HEAD ref [0.23ms]
(pass) GitService Default Branch Detection > should properly remove origin prefix from branch name
{"error":"Command failed","level":"error","message":"Could not determine default branch, falling back to 'main'","repoPath":"/test/repo","timestamp":"2025-08-20T00:48:23.236Z"}
(pass) GitService Default Branch Detection > should fall back to 'main' when command fails [0.17ms]

src/domain/gitServiceTaskStatusUpdate.test.ts:
(pass) GitService Task Status Update > should be able to update task status after PR creation

src/domain/rules-format.test.ts:
(pass) RuleService Format Compatibility > should get a rule in its original format when requested
(pass) RuleService Format Compatibility > should get a rule in any format if no format specified [0.37ms]
(pass) RuleService Format Compatibility > should return rule with format note when requested in different format [0.14ms]
(pass) RuleService Format Compatibility > should prioritize the requested format for dual-format rules [0.27ms]
(pass) RuleService Format Compatibility > should throw specific error messages for non-existent rules

src/domain/session-approve.test.ts:
🔍 Starting session approval...
📦 Using test-backend backend for approval
✅ Approving branch: pr/test-session
✅ Session PR approved successfully!
💡 Use 'minsky session merge' to merge when ready
(pass) Session Approve > simple approval test with working mock [0.74ms]
🔍 Starting session approval...
📦 Using test-backend backend for approval
✅ Approving branch: pr/test-session
✅ Session PR approved successfully!
💡 Use 'minsky session merge' to merge when ready
🔍 Starting session approval...
📦 Using test-backend backend for approval
✅ Approving branch: pr/test-session
✅ Session PR approved successfully!
💡 Use 'minsky session merge' to merge when ready
(pass) Session Approve > successfully approves and merges a PR branch [0.40ms]
🔍 Starting session approval...
📦 Using test-backend backend for approval
✅ Approving branch: pr/current-session
✅ Session PR approved successfully!
💡 Use 'minsky session merge' to merge when ready
(pass) Session Approve > detects current session when repo path is provided [0.15ms]
🔍 Starting session approval...
(pass) Session Approve > throws error when session is not found [0.13ms]

src/domain/session-approve-branch-cleanup.test.ts:
🔍 Starting session approval...
📦 Using test-backend backend for approval
✅ Approving branch: pr/test-session
✅ Session PR approved successfully!
💡 Use 'minsky session merge' to merge when ready
(pass) Session Approve Branch Cleanup > should delete local PR branch and task branch after successful merge [0.27ms]
🔍 Starting session approval...
📦 Using test-backend backend for approval
✅ Approving branch: pr/test-session
✅ Session PR approved successfully!
💡 Use 'minsky session merge' to merge when ready
(pass) Session Approve Branch Cleanup > should handle branch cleanup failures gracefully without failing the operation [0.12ms]
🔍 Starting session approval...
ℹ️  Session PR is already approved
(pass) Session Approve Branch Cleanup > should not attempt branch cleanup for already approved sessions [0.10ms]

src/domain/session-update.test.ts:
(pass) updateSessionFromParams - Basic Validation > throws ValidationError when name is not provided [2.53ms]
(pass) updateSessionFromParams - Basic Validation > throws ResourceNotFoundError when session does not exist [0.35ms]

src/domain/session-pr-no-branch-switch.test.ts:
{"backend":"sqlite","issues":1,"level":"warn","message":"Database integrity issues detected but continuing","timestamp":"2025-08-20T00:48:23.275Z","warnings":0}
(pass) Session PR Command Branch Behavior > should never switch user to PR branch during session pr creation [7.28ms]
{"backend":"sqlite","issues":1,"level":"warn","message":"Database integrity issues detected but continuing","timestamp":"2025-08-20T00:48:23.278Z","warnings":0}
(pass) Session PR Command Branch Behavior > should handle branch switch-back failure as critical error [0.85ms]
(pass) Session PR Command Branch Behavior > should document the behavioral change from switch -C to branch + switch pattern

src/domain/tasks-core-functions.test.ts:
(pass) interface-agnostic task functions > listTasksFromParams > should list tasks with valid parameters
(pass) interface-agnostic task functions > listTasksFromParams > should filter out DONE tasks when all is false
(pass) interface-agnostic task functions > getTaskFromParams > should get a task with valid parameters [0.92ms]
{"duration":0,"error":"Task md#999 not found","level":"error","message":"[getTaskFromParams] Error getting task:","timestamp":"2025-08-20T00:48:23.283Z"}
(pass) interface-agnostic task functions > getTaskFromParams > should throw ResourceNotFoundError when task is not found [0.17ms]
(pass) interface-agnostic task functions > getTaskFromParams > should normalize task IDs to qualified format (e.g., 'TEST_VALUE' -> 'md#TEST_VALUE') [0.14ms]
(pass) interface-agnostic task functions > getTaskFromParams > should handle task IDs without leading zeros [0.22ms]
(pass) interface-agnostic task functions > getTaskStatusFromParams > should get task status with valid parameters [0.19ms]
(pass) interface-agnostic task functions > getTaskStatusFromParams > should throw ResourceNotFoundError when task status is not found
(pass) interface-agnostic task functions > setTaskStatusFromParams > should set task status with valid parameters [0.33ms]
(pass) interface-agnostic task functions > setTaskStatusFromParams > should throw ValidationError when status is invalid [0.26ms]

src/domain/session-auto-task-creation.test.ts:
Created task md#001: Fix the authentication bug
(pass) Session Auto-Task Creation > should auto-create task when description is provided [0.44ms]
(pass) Session Auto-Task Creation > should not auto-create task when task ID is provided [0.18ms]
Created task md#001: Fix the authentication bug
(pass) Session Auto-Task Creation > should use session name when provided with description [0.32ms]

src/domain/repository-uri.test.ts:
(pass) Repository URI Utilities > parseRepositoryURI > parses HTTPS URLs
(pass) Repository URI Utilities > parseRepositoryURI > parses SSH URLs [0.10ms]
(pass) Repository URI Utilities > parseRepositoryURI > parses GitHub shorthand
(pass) Repository URI Utilities > parseRepositoryURI > handles invalid URLs gracefully [0.05ms]
(pass) Repository URI Utilities > normalizeRepositoryURI > normalizes HTTPS URLs
(pass) Repository URI Utilities > normalizeRepositoryURI > normalizes SSH URLs
(pass) Repository URI Utilities > normalizeRepositoryURI > preserves GitHub shorthand
(pass) Repository URI Utilities > validateRepositoryURI > returns true for valid HTTPS URLs [0.10ms]
(pass) Repository URI Utilities > validateRepositoryURI > returns false for invalid URIs [0.04ms]
(pass) Repository URI Utilities > convertRepositoryURI > converts from GitHub shorthand to HTTPS URL [0.01ms]
(pass) Repository URI Utilities > convertRepositoryURI > converts from GitHub shorthand to SSH URL
(pass) Repository URI Utilities > convertRepositoryURI > converts from HTTPS URL to SSH URL
(pass) Repository URI Utilities > convertRepositoryURI > returns null for incompatible conversions
(pass) Repository URI Utilities > isLocalRepositoryURI > returns true for local paths [0.02ms]
(pass) Repository URI Utilities > isLocalRepositoryURI > returns false for HTTPS URLs [0.03ms]
(pass) Repository URI Utilities > getRepositoryName > extracts name from HTTPS URL
(pass) Repository URI Utilities > getRepositoryName > extracts name from SSH URL [0.14ms]
(pass) Repository URI Utilities > getRepositoryName > extracts name from GitHub shorthand
(pass) Repository URI Utilities > expandGitHubShorthand > expands to HTTPS URL by default
(pass) Repository URI Utilities > expandGitHubShorthand > expands to SSH URL when specified
(pass) Repository URI Utilities > expandGitHubShorthand > returns null for invalid shorthand

src/domain/uri-utils.test.ts:
(pass) URI Utilities > normalizeRepositoryUri > normalizes HTTPS URLs [0.04ms]
(pass) URI Utilities > normalizeRepositoryUri > normalizes SSH URLs
(pass) URI Utilities > normalizeRepositoryUri > normalizes GitHub shorthand
(pass) URI Utilities > convertRepositoryUri > converts HTTPS to SSH
(pass) URI Utilities > convertRepositoryUri > converts SSH to HTTPS
(pass) URI Utilities > convertRepositoryUri > converts shorthand to HTTPS
(pass) URI Utilities > convertRepositoryUri > returns same URI if already in target format
(pass) URI Utilities > extractRepositoryInfo > extracts info from HTTPS URL
(pass) URI Utilities > extractRepositoryInfo > extracts info from SSH URL
(pass) URI Utilities > extractRepositoryInfo > extracts info from shorthand

src/domain/workspace.test.ts:
(pass) resolveWorkspacePath > uses explicitly provided workspace path [0.15ms]
(pass) resolveWorkspacePath > returns current directory when no workspace option is provided [0.02ms]
(pass) resolveWorkspacePath > returns sessionRepo when provided
(pass) resolveWorkspacePath > validates that explicitly provided workspace exists [0.17ms]

src/domain/tasks-interface-commands.test.ts:
(pass) interface-agnostic task functions > listTasksFromParams > should list tasks with valid parameters [0.01ms]
(pass) interface-agnostic task functions > listTasksFromParams > should filter out DONE tasks when all is false [0.07ms]
(pass) interface-agnostic task functions > getTaskFromParams > should get a task with valid parameters [0.31ms]
{"duration":0,"error":"Task md#999 not found","level":"error","message":"[getTaskFromParams] Error getting task:","timestamp":"2025-08-20T00:48:23.294Z"}
(pass) interface-agnostic task functions > getTaskFromParams > should throw ResourceNotFoundError when task is not found
(pass) interface-agnostic task functions > getTaskFromParams > should normalize task IDs to qualified format (e.g., '#123' -> 'md#123') [0.12ms]
(pass) interface-agnostic task functions > getTaskFromParams > should handle task IDs without leading zeros [0.04ms]
(pass) interface-agnostic task functions > getTaskStatusFromParams > should get task status with valid parameters
(pass) interface-agnostic task functions > getTaskStatusFromParams > should throw ResourceNotFoundError when task status is not found [0.05ms]
(pass) interface-agnostic task functions > setTaskStatusFromParams > should set task status with valid parameters [0.04ms]
(pass) interface-agnostic task functions > setTaskStatusFromParams > should throw ValidationError when status is invalid

src/domain/session-lookup-bug-simple.test.ts:
(pass) Session Creation Bug Fix (TDD) > should NOT create session directory if git operations fail [1.05ms]
(pass) Session Creation Bug Fix (TDD) > should properly clean up if session creation partially succeeds then fails [0.14ms]

src/domain/repo-utils.test.ts:
(pass) Repo Utils > normalizeRepoName extracts repo name from URL
(pass) Repo Utils > resolveRepoPath uses provided repo path [0.72ms]
(pass) Repo Utils > resolveRepoPath resolves from session
(pass) Repo Utils > resolveRepoPath falls back to git directory
(pass) Repo Utils > resolveRepoPath falls back to current directory when git fails

src/domain/github-backend.test.ts:
(pass) GitHub Repository Backend > constructor creates repository backend with correct settings [0.01ms]
(pass) GitHub Repository Backend > getPath returns session workdir path
(pass) GitHub Repository Backend > validate succeeds for a valid GitHub repository
(pass) GitHub Repository Backend > getConfig returns correct configuration

src/domain/tasks.specpath.test.ts:

src/domain/task-status-variables.test.ts:
(pass) Task Status Variables Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for TODO status [0.46ms]
(pass) Task Status Variables Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for IN-PROGRESS status
(pass) Task Status Variables Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for DONE status
(pass) Task Status Variables Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should not throw 'status is not defined' error

src/domain/session-pr-title-duplication.test.ts:
(pass) Session PR Title Duplication Bug Tests > should reproduce title duplication in commit message parsing [0.16ms]
(pass) Session PR Title Duplication Bug Tests > should reproduce title duplication when body accidentally contains title [0.13ms]
(pass) Session PR Title Duplication Bug Tests > should fix title duplication with improved parsing
(pass) Session PR Title Duplication Bug Tests > should handle empty body without duplication
(pass) Session PR Title Duplication Bug Tests > should handle multiline body with potential title duplication

src/domain/git-service.test.ts:
(pass) GitService > should be able to create an instance
(pass) GitService > should get repository status
(pass) GitService > getSessionWorkdir should return the correct path
(pass) GitService > execInRepository should execute git commands in the specified repository [0.06ms]
(pass) GitService > execInRepository should propagate errors
(pass) GitService > should use session-ID-based storage in getSessionWorkdir

src/domain/repository.test.ts:
(pass) Repository backends > placeholder test to make CI pass - RepositoryBackend
(pass) Repository backends > placeholder test for LocalGitBackend
(pass) Repository backends > placeholder test for RemoteGitBackend
(pass) Repository backends > placeholder test for GitHubBackend

src/domain/prepared-merge-commit-workflow.test.ts:
(pass) Prepared Merge Commit Workflow (Task #144) > Current Broken Behavior - preparePr method > SHOULD FAIL: preparePr creates PR branch from feature branch instead of base branch
(pass) Prepared Merge Commit Workflow (Task #144) > Expected Correct Behavior - What SHOULD happen per Task #025 > preparePr SHOULD create PR branch from base branch and merge feature branch with --no-ff [0.12ms]
(pass) Prepared Merge Commit Workflow (Task #144) > Fast-Forward Merge Verification > Prepared merge commit SHOULD be fast-forward mergeable
(pass) Prepared Merge Commit Workflow (Task #144) > Error Handling > SHOULD handle merge conflicts during prepared merge commit creation [0.26ms]

src/domain/git.test.ts:
(pass) GitService > should be able to create an instance
(pass) GitService > should get repository status [0.03ms]
(pass) GitService > getSessionWorkdir should return the correct path
(pass) GitService > execInRepository should execute git commands in the specified repository [0.03ms]
(pass) GitService > execInRepository should propagate errors [0.12ms]
(pass) GitService > should use session-ID-based storage in getSessionWorkdir [0.03ms]
(pass) GitService - Core Methods with Dependency Injection > PR Workflow with Dependencies > should generate PR markdown with proper dependency injection [0.84ms]
(pass) GitService - Core Methods with Dependency Injection > PR Workflow with Dependencies > should handle missing session in PR workflow [0.09ms]
(pass) GitService - Core Methods with Dependency Injection > PR Workflow with Dependencies > should resolve taskId to session in PR workflow [0.22ms]
(pass) GitService - Core Methods with Dependency Injection > PR Workflow with Dependencies > should throw error when taskId has no associated session [0.05ms]
(pass) GitService - Core Methods with Dependency Injection > PR Workflow with Dependencies > should throw error when getSessionByTaskId dependency is not available [0.04ms]
(pass) GitService - Core Methods with Dependency Injection > PR Workflow with Dependencies > should prioritize session over taskId when both are provided [0.13ms]
(pass) GitService - Core Methods with Dependency Injection > PR Workflow with Dependencies > should handle git command failures gracefully in PR workflow [0.28ms]
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle commit operations with proper hash extraction [0.11ms]
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should extract commit hash from various git output formats [0.08ms]
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle missing commit hash in git output
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle commit with amend flag [0.05ms]
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle stash operations with state management [0.13ms]
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle no changes to stash scenario
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle popStash with existing stash [0.06ms]
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle popStash with no stash available [0.03ms]
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle merge conflicts with proper detection [0.08ms]
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle successful merge without conflicts [0.05ms]
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle staging operations with proper command execution
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should verify staging commands are correct
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle pullLatest with updates detected [0.10ms]
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle pullLatest with no updates
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle pullLatest with custom remote [0.05ms]
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should document clone operations architectural limitation
{"level":"error","message":"Invalid repository URL","repoUrl":"","timestamp":"2025-08-20T00:48:23.314Z"}
{"error":"Repository URL is required for cloning","level":"error","message":"Error during git clone","repoUrl":"","stack":"Error: Repository URL is required for cloning\n    at cloneImpl (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/git/clone-operations.ts:56:17)\n    at cloneImpl (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/git/clone-operations.ts:40:3)\n    at processTicksAndRejections (native:7:39)\n    at toThrow (unknown)\n    at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/git.test.ts:770:17)\n    at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/git.test.ts:754:70)","timestamp":"2025-08-20T00:48:23.314Z"}
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle clone with empty repository URL validation [0.45ms]
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should document clone directory validation limitation [0.02ms]
{"error":"Workdir is required for git clone operation","level":"error","message":"Error during git clone","repoUrl":"https://github.com/user/nonexistent.git","stack":"Error: Workdir is required for git clone operation\n    at cloneImpl (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/git/clone-operations.ts:65:17)\n    at cloneImpl (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/git/clone-operations.ts:40:3)\n    at processTicksAndRejections (native:7:39)\n    at toThrow (unknown)\n    at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/git.test.ts:806:17)\n    at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/git.test.ts:781:70)","timestamp":"2025-08-20T00:48:23.314Z"}
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle clone failure during git command execution [0.11ms]
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should document clone verification limitation
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should document local repository normalization limitation
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle error scenarios with proper error propagation [0.24ms]
(pass) GitService - Core Methods with Dependency Injection > Architecture Analysis - Testing Limitations > should demonstrate the core testing challenge
(pass) createGitService Factory Function > should handle undefined options parameter without throwing runtime error [0.13ms]
(pass) createGitService Factory Function > should handle null options parameter without throwing runtime error [0.01ms]
(pass) createGitService Factory Function > should handle options with undefined baseDir property
(pass) createGitService Factory Function > should create GitService with custom baseDir when provided
(pass) createGitService Factory Function > should create GitService with default baseDir when no options provided
(pass) Service-Level Git Operations with Dependency Injection > commit operations through service layer > should commit changes with dependency injection - all parameters [0.03ms]
(pass) Service-Level Git Operations with Dependency Injection > commit operations through service layer > should commit changes with dependency injection - minimal parameters
(pass) Service-Level Git Operations with Dependency Injection > commit operations through service layer > should handle commit with amend through service layer [0.03ms]
(pass) Service-Level Git Operations with Dependency Injection > commit operations through service layer > should handle commit error scenarios with proper DI [0.03ms]
(pass) Service-Level Git Operations with Dependency Injection > push operations - architectural note > should document that push operations need DI implementation [0.01ms]

src/domain/session-pr-state-optimization.test.ts:
(pass) PR State Optimization (Task #275) > checkPrBranchExistsOptimized > should use cached PR state when available and not stale
(pass) PR State Optimization (Task #275) > checkPrBranchExistsOptimized > should refresh stale PR state [0.48ms]
(pass) PR State Optimization (Task #275) > checkPrBranchExistsOptimized > should fall back to git operations when no session record exists [0.09ms]
(pass) PR State Optimization (Task #275) > checkPrBranchExistsOptimized > should provide significant performance improvement
(pass) PR State Optimization (Task #275) > updatePrStateOnCreation > should create PR state when PR branch is created [0.12ms]
(pass) PR State Optimization (Task #275) > updatePrStateOnMerge > should update PR state when PR is merged [0.12ms]
(pass) PR State Optimization (Task #275) > updatePrStateOnMerge > should handle missing PR state gracefully [0.08ms]
(pass) PR State Optimization (Task #275) > Integration with existing workflow > should maintain backward compatibility [0.03ms]

src/domain/session-pr-branch-reference-bug.test.ts:
(pass) Session PR Branch Reference Bug Regression > should normalize branch references to prevent origin/origin/main [0.46ms]
(pass) Session PR Branch Reference Bug Regression > should detect origin/origin/main patterns in git commands
(pass) Session PR Branch Reference Bug Regression > should validate git command construction prevents double-prefixing [0.03ms]
(pass) Session PR Branch Reference Bug Regression > should document the specific bug that was fixed [0.02ms]

src/domain/session-approve-workflow.test.ts:
🔍 Starting session approval...
📦 Using test-backend backend for approval
✅ Approving branch: pr/test-session
✅ Session PR approved successfully!
💡 Use 'minsky session merge' to merge when ready
(pass) Session Approve Workflow > successfully approves and merges a PR branch with task ID [0.32ms]
🔍 Starting session approval...
(pass) Session Approve Workflow > throws ValidationError when session parameter is missing [0.07ms]
🔍 Starting session approval...
📦 Using local backend for approval
✅ Approving branch: pr/test-session
{"level":"warn","message":"Storage backend created with warnings","timestamp":"2025-08-20T00:48:23.325Z","warnings":["Database is empty - no sessions found"]}
(pass) Session Approve Workflow > handles git command failures gracefully [3.09ms]

src/domain/github-basic.test.ts:
(pass) GitHub Basic Functionality > initializes with correct repository URL [0.89ms]
(pass) GitHub Basic Functionality > properly uses provided owner and repo values [0.04ms]
(pass) GitHub Basic Functionality > correctly identifies backend type

src/domain/git.pr.test.ts:
(pass) GitService PR Functionality > isGitHubRepo should identify GitHub URLs correctly [0.01ms]
(pass) GitService PR Functionality > should create a PR description

src/domain/session-start-consistency.test.ts:
(pass) Session Start Consistency Tests > Successful session creation > should only add session to database after git operations succeed [0.30ms]
(pass) Session Start Consistency Tests > Git clone failure scenarios > should not add session to database when git clone fails [0.40ms]
(pass) Session Start Consistency Tests > Git clone failure scenarios > should not add session to database when git branch creation fails
(pass) Session Start Consistency Tests > Git clone failure scenarios > should propagate git errors without modification [0.34ms]
(pass) Session Start Consistency Tests > Error handling edge cases > should prevent session creation when session already exists [0.09ms]
(pass) Session Start Consistency Tests > Error handling edge cases > should prevent session creation when another session exists for same task [0.08ms]
(pass) Session Start Consistency Tests > Error handling edge cases > should prevent session creation when task does not exist [0.06ms]
(pass) Session Start Consistency Tests > Critical consistency verification > should never add session record before all git operations complete successfully [0.14ms]
(pass) Session Start Consistency Tests > Critical consistency verification > should successfully add session record only after all operations complete [0.14ms]

src/domain/git-service-pr-workflow.test.ts:
(pass) PR Workflow with Dependencies > should generate PR markdown with proper dependency injection [0.55ms]
(pass) PR Workflow with Dependencies > should handle missing session in PR workflow [0.14ms]
(pass) PR Workflow with Dependencies > should resolve taskId to session in PR workflow [0.17ms]
(pass) PR Workflow with Dependencies > should throw error when taskId has no associated session [0.12ms]
(pass) PR Workflow with Dependencies > should throw error when getSessionByTaskId dependency is not available [0.03ms]
(pass) PR Workflow with Dependencies > should prioritize session over taskId when both are provided [0.17ms]
(pass) PR Workflow with Dependencies > should handle git command failures gracefully in PR workflow

src/domain/task-status-bug-regression.test.ts:
(pass) Task Status Bug Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for TODO status [0.45ms]
(pass) Task Status Bug Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for IN-PROGRESS status
(pass) Task Status Bug Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for IN-REVIEW status
(pass) Task Status Bug Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for DONE status
(pass) Task Status Bug Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for BLOCKED status
(pass) Task Status Bug Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should not throw 'status is not defined' error
(pass) Task Status Bug Regression Tests > Integration test with task status functionality > should handle all status transitions without variable naming errors [0.48ms]

src/eslint-rules/no-real-fs-in-tests.test.js:
(skip) filesystem operations test > should detect filesystem operations
(skip) filesystem operations test > should detect dynamic imports
(skip) filesystem operations test > should detect process.cwd usage

src/eslint-rules/no-unsafe-git-network-operations.test.js:
(pass) no-unsafe-git-network-operations > valid > await gitPushWithTimeout("origin", "main", { workdir: "/path" }); [14.34ms]
(pass) no-unsafe-git-network-operations > valid > await gitPullWithTimeout("origin", "main", { workdir: "/path" }); [1.42ms]
(pass) no-unsafe-git-network-operations > valid > await gitFetchWithTimeout("origin", "main", { workdir: "/path" }); [0.87ms]
(pass) no-unsafe-git-network-operations > valid > await gitCloneWithTimeout("repo", "/path"); [0.76ms]
(pass) no-unsafe-git-network-operations > valid > await execGitWithTimeout("push", "push origin main", { workdir: "/path" }); [1.04ms]
(pass) no-unsafe-git-network-operations > valid > await execAsync("git status"); [0.61ms]
(pass) no-unsafe-git-network-operations > valid > await execAsync("git branch"); [0.45ms]
(pass) no-unsafe-git-network-operations > valid > await execAsync("git log"); [0.42ms]
(pass) no-unsafe-git-network-operations > valid > await execAsync("git diff"); [0.34ms]
(pass) no-unsafe-git-network-operations > valid > await execAsync("git add ."); [0.20ms]
(pass) no-unsafe-git-network-operations > valid > await execAsync("git commit -m \"message\""); [0.64ms]
(pass) no-unsafe-git-network-operations > valid > await execAsync("npm install"); [0.39ms]
(pass) no-unsafe-git-network-operations > valid > await execAsync("echo hello"); [0.30ms]
(pass) no-unsafe-git-network-operations > valid > await execGitWithTimeout("fetch", "fetch origin", { workdir }); [0.38ms]
(pass) no-unsafe-git-network-operations > invalid > await execAsync("git push origin main"); [2.07ms]
(pass) no-unsafe-git-network-operations > invalid > await execAsync("git pull origin main"); [0.75ms]
(pass) no-unsafe-git-network-operations > invalid > await execAsync("git fetch origin"); [0.45ms]
(pass) no-unsafe-git-network-operations > invalid > await execAsync("git clone https://github.com/user/repo.git /path"); [0.81ms]
(pass) no-unsafe-git-network-operations > invalid > await execAsync("git -C /repo push origin main"); [0.73ms]
(pass) no-unsafe-git-network-operations > invalid > await execAsync("git -C /repo fetch origin"); [1.27ms]
(pass) no-unsafe-git-network-operations > invalid > await execAsync(`git push origin ${branch}`); [1.18ms]
(pass) no-unsafe-git-network-operations > invalid > await execAsync(`git -C ${workdir} fetch ${remote}`);
(pass) no-unsafe-git-network-operations > invalid > gitPushWithTimeout("origin", "main", { workdir }); [1.47ms]
(pass) no-unsafe-git-network-operations > invalid > execGitWithTimeout("fetch", "fetch origin", { workdir }); [0.52ms]
(pass) no-unsafe-git-network-operations > invalid > await execAsync("git ls-remote origin"); [0.55ms]

src/utils/test-utils/assertions.test.ts:
(pass) Custom Assertion Helpers > expectToMatch > should match a string against a regex pattern [0.14ms]
(pass) Custom Assertion Helpers > expectToHaveLength > should verify array length [0.01ms]
(pass) Custom Assertion Helpers > expectToHaveLength > should verify string length [0.04ms]
(pass) Custom Assertion Helpers > expectToBeInstanceOf > should verify object instanceof
(pass) Custom Assertion Helpers > expectToHaveProperty > should verify object has property [0.16ms]
(pass) Custom Assertion Helpers > expectToBeCloseTo > should compare floating point numbers with precision [0.05ms]
(pass) Custom Assertion Helpers > expectToContainEqual > should check if array contains an item with deep equality [0.11ms]

src/utils/test-utils/enhanced-utils.test.ts:
(pass) Enhanced Test Utilities > mockFunction > should create a type-safe mock function [0.04ms]
(pass) Enhanced Test Utilities > mockFunction > should allow changing implementation [0.02ms]
(pass) Enhanced Test Utilities > createPartialMock > should create a mock with provided implementations [0.09ms]
(pass) Enhanced Test Utilities > mockReadonlyProperty > should mock readonly properties
(pass) Enhanced Test Utilities > createTestDeps > should create default test dependencies
(pass) Enhanced Test Utilities > createTestDeps > should allow overriding specific methods
(pass) Enhanced Test Utilities > withMockedDeps > should temporarily override dependencies [0.34ms]
(pass) Enhanced Test Utilities > Factory Functions > should create task data with defaults
(pass) Enhanced Test Utilities > Factory Functions > should create task data with overrides
(pass) Enhanced Test Utilities > Factory Functions > should create an array of task data [0.14ms]
(pass) Enhanced Test Utilities > Factory Functions > should create session data [0.07ms]
(pass) Enhanced Test Utilities > Integration Example > should demonstrate a complex test scenario [0.11ms]

src/utils/test-utils/centralized-service-mocks.test.ts:
(pass) Centralized Service Mock Factories > createMockSessionProvider > should create a mock SessionProvider with all required methods
(pass) Centralized Service Mock Factories > createMockSessionProvider > should return default mock values
(pass) Centralized Service Mock Factories > createMockSessionProvider > should allow method overrides
(pass) Centralized Service Mock Factories > createMockGitService > should create a mock GitService with all required methods
(pass) Centralized Service Mock Factories > createMockGitService > should return default mock values [0.68ms]
(pass) Centralized Service Mock Factories > createMockGitService > should allow method overrides [0.07ms]
(pass) Centralized Service Mock Factories > createMockTaskService > should create a mock TaskService with all required methods [0.02ms]
(pass) Centralized Service Mock Factories > createMockTaskService > should return default mock values [0.09ms]
(pass) Centralized Service Mock Factories > createMockTaskService > should allow method overrides [0.06ms]

src/utils/test-utils/mocking.test.ts:
(pass) Mocking Utilities > createMock creates a proper mock function
(pass) Mocking Utilities > createMock without implementation returns a mock that returns undefined
(pass) Mocking Utilities > createSpyOn spies on object methods
(pass) Mocking Utilities > createSpyOn throws error when trying to spy on non-function property

src/utils/test-utils/individual-service-factories.test.ts:
(pass) Individual Service Mock Factories > createMockSessionProvider > creates a mock with default behavior
(pass) Individual Service Mock Factories > createMockSessionProvider > uses provided sessions array
(pass) Individual Service Mock Factories > createMockSessionProvider > accepts method overrides
(pass) Individual Service Mock Factories > createMockSessionProvider > supports empty options
(pass) Individual Service Mock Factories > createMockGitService > creates a mock with default behavior
(pass) Individual Service Mock Factories > createMockGitService > supports branch existence configuration [0.55ms]
(pass) Individual Service Mock Factories > createMockGitService > tracks git call count
(pass) Individual Service Mock Factories > createMockGitService > accepts method overrides [0.12ms]
(pass) Individual Service Mock Factories > createMockGitService > handles non-PR git commands [0.03ms]
(pass) Individual Service Mock Factories > createMockTaskService > creates a mock with default behavior
(pass) Individual Service Mock Factories > createMockTaskService > creates tasks with proper structure [0.12ms]
(pass) Individual Service Mock Factories > createMockTaskService > supports additional properties
(pass) Individual Service Mock Factories > createMockTaskService > accepts method overrides [0.08ms]
(pass) Individual Service Mock Factories > createMockTaskService > supports custom task creation [0.04ms]
(pass) Individual Service Mock Factories > createMockTaskService > handles empty options [0.01ms]
(pass) Individual Service Mock Factories > Factory Integration > all factories work together in a test scenario [0.06ms]
(pass) Individual Service Mock Factories > Factory Integration > factories can be used independently

src/commands/context/suggest-rules.integration.test.ts:
🤔 Thinking...
(pass) suggest-rules service integration > should suggest relevant rules for bug fixing query [0.42ms]
🤔 Thinking...
(pass) suggest-rules service integration > should suggest domain rules for refactoring query [0.27ms]
(pass) suggest-rules service integration > should handle empty rule sets gracefully [0.02ms]
🤔 Thinking...
(pass) suggest-rules service integration > should filter suggestions based on relevance threshold [0.12ms]
🤔 Thinking...
(pass) suggest-rules service integration > should respect max suggestions configuration [0.07ms]
🤔 Thinking...
(pass) suggest-rules service integration > should provide performance metrics [0.09ms]
🤔 Thinking...
⚠️  AI unavailable, using keyword-based fallback
(pass) suggest-rules service integration > should handle AI service errors gracefully [0.25ms]

src/commands/config/unset.test.ts:
(pass) config unset command > executeConfigUnset function > should remove an existing configuration value [0.13ms]
(pass) config unset command > executeConfigUnset function > should handle unsetting non-existent values gracefully [0.04ms]
(pass) config unset command > executeConfigUnset function > should handle nested configuration values [0.06ms]
{"level":"error","message":"Failed to unset configuration: Permission denied","timestamp":"2025-08-20T00:48:23.462Z"}
{"level":"error","message":"Failed to unset configuration: process.exit() called","timestamp":"2025-08-20T00:48:23.462Z"}
(pass) config unset command > executeConfigUnset function > should handle config writer failures gracefully [0.28ms]
(pass) config unset command > executeConfigUnset function > should output JSON format when requested [0.05ms]
(pass) config unset command > executeConfigUnset function > should skip backup when noBackup option is set [0.02ms]
(pass) config unset command > executeConfigUnset function > should use JSON format when specified
{"level":"error","message":"Failed to unset configuration: Unexpected error","timestamp":"2025-08-20T00:48:23.462Z"}
(pass) config unset command > executeConfigUnset function > should handle exceptions from config writer
(pass) config unset command > executeConfigUnset function > should output error in JSON format when requested
(pass) config unset command > formatValue function > should format undefined as (not set)
(pass) config unset command > formatValue function > should format null as null [0.17ms]
(pass) config unset command > formatValue function > should format strings with quotes
(pass) config unset command > formatValue function > should format numbers as strings [0.01ms]
(pass) config unset command > formatValue function > should format booleans as strings
(pass) config unset command > formatValue function > should format objects as JSON [0.01ms]
(pass) config unset command > formatValue function > should format arrays as JSON

src/commands/config/set.test.ts:
(pass) config set command > executeConfigSet function > should set a simple configuration value
(pass) config set command > executeConfigSet function > should set a nested configuration value
(pass) config set command > executeConfigSet function > should parse boolean values correctly
{"level":"error","message":"Failed to set configuration: Permission denied","timestamp":"2025-08-20T00:48:23.465Z"}
{"level":"error","message":"Failed to set configuration: process.exit() called","timestamp":"2025-08-20T00:48:23.465Z"}
(pass) config set command > executeConfigSet function > should handle config writer failures gracefully
(pass) config set command > executeConfigSet function > should output JSON format when requested
(pass) config set command > executeConfigSet function > should skip backup when noBackup option is set
(pass) config set command > executeConfigSet function > should use JSON format when specified
(pass) config set command > parseConfigValue function > should parse boolean values correctly
(pass) config set command > parseConfigValue function > should parse null and undefined
(pass) config set command > parseConfigValue function > should parse numbers correctly
(pass) config set command > parseConfigValue function > should parse JSON objects correctly
(pass) config set command > parseConfigValue function > should parse JSON arrays correctly
(pass) config set command > parseConfigValue function > should treat malformed JSON as string
(pass) config set command > parseConfigValue function > should treat regular strings as strings
(pass) config set command > parseConfigValue function > should handle number-like strings that aren't pure numbers
(pass) config set command > formatValue function > should format undefined as (not set)
(pass) config set command > formatValue function > should format null as null
(pass) config set command > formatValue function > should format strings with quotes
(pass) config set command > formatValue function > should format numbers as strings
(pass) config set command > formatValue function > should format booleans as strings
(pass) config set command > formatValue function > should format objects as JSON
(pass) config set command > formatValue function > should format arrays as JSON

src/domain/configuration/index.test.ts:
(pass) Custom Configuration System > CustomConfigurationProvider > should implement getConfig() method
(pass) Custom Configuration System > CustomConfigurationProvider > should implement get() method with path access [0.05ms]
(pass) Custom Configuration System > CustomConfigurationProvider > should implement has() method for path checking
(pass) Custom Configuration System > CustomConfigurationProvider > should implement reload() method
(pass) Custom Configuration System > CustomConfigurationProvider > should implement getMetadata() method [0.02ms]
(pass) Custom Configuration System > CustomConfigurationProvider > should implement validate() method [0.02ms]
(pass) Custom Configuration System > CustomConfigurationProvider > should provide consistent configuration structure [0.01ms]
(pass) Custom Configuration System > CustomConfigurationProvider > should handle configuration overrides consistently [0.02ms]
Warning: Failed to parse config file /mock/projects/minsky/config/local.yaml: ENOENT: no such file or directory, open '/mock/projects/minsky/config/local.yaml'
    path: "/mock/projects/minsky/config/local.yaml",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.test.ts:240:63)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.test.ts:238:51)

Warning: Failed to parse config file /mock/projects/minsky/config/local.yml: ENOENT: no such file or directory, open '/mock/projects/minsky/config/local.yml'
    path: "/mock/projects/minsky/config/local.yml",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.test.ts:240:63)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.test.ts:238:51)

Warning: Failed to parse config file /mock/projects/minsky/config/local.json: ENOENT: no such file or directory, open '/mock/projects/minsky/config/local.json'
    path: "/mock/projects/minsky/config/local.json",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.test.ts:240:63)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.test.ts:238:51)

Warning: Failed to parse config file /mock/projects/minsky/.minsky/config.yaml: ENOENT: no such file or directory, open '/mock/projects/minsky/.minsky/config.yaml'
    path: "/mock/projects/minsky/.minsky/config.yaml",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.test.ts:240:63)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.test.ts:238:51)

Warning: Failed to parse config file /mock/projects/minsky/.minsky/config.yml: ENOENT: no such file or directory, open '/mock/projects/minsky/.minsky/config.yml'
    path: "/mock/projects/minsky/.minsky/config.yml",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.test.ts:240:63)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.test.ts:238:51)

Warning: Failed to parse config file /mock/projects/minsky/.minsky/config.json: ENOENT: no such file or directory, open '/mock/projects/minsky/.minsky/config.json'
    path: "/mock/projects/minsky/.minsky/config.json",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.test.ts:240:63)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.test.ts:238:51)

Warning: Failed to parse config file /mock/projects/minsky/minsky.config.yaml: ENOENT: no such file or directory, open '/mock/projects/minsky/minsky.config.yaml'
    path: "/mock/projects/minsky/minsky.config.yaml",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.test.ts:240:63)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.test.ts:238:51)

Warning: Failed to parse config file /mock/projects/minsky/minsky.config.yml: ENOENT: no such file or directory, open '/mock/projects/minsky/minsky.config.yml'
    path: "/mock/projects/minsky/minsky.config.yml",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.test.ts:240:63)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.test.ts:238:51)

Warning: Failed to parse config file /mock/projects/minsky/minsky.config.json: ENOENT: no such file or directory, open '/mock/projects/minsky/minsky.config.json'
    path: "/mock/projects/minsky/minsky.config.json",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.test.ts:240:63)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.test.ts:238:51)

(pass) Custom Configuration System > Configuration Initialization > should initialize with custom factory [8.76ms]
(pass) Custom Configuration System > Configuration Initialization > should support configuration overrides [0.05ms]
Warning: Failed to parse config file /mock/projects/minsky/config/local.yaml: ENOENT: no such file or directory, open '/mock/projects/minsky/config/local.yaml'
    path: "/mock/projects/minsky/config/local.yaml",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)

Warning: Failed to parse config file /mock/projects/minsky/config/local.yml: ENOENT: no such file or directory, open '/mock/projects/minsky/config/local.yml'
    path: "/mock/projects/minsky/config/local.yml",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)

Warning: Failed to parse config file /mock/projects/minsky/config/local.json: ENOENT: no such file or directory, open '/mock/projects/minsky/config/local.json'
    path: "/mock/projects/minsky/config/local.json",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)

Warning: Failed to parse config file /mock/projects/minsky/.minsky/config.yaml: ENOENT: no such file or directory, open '/mock/projects/minsky/.minsky/config.yaml'
    path: "/mock/projects/minsky/.minsky/config.yaml",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)

Warning: Failed to parse config file /mock/projects/minsky/.minsky/config.yml: ENOENT: no such file or directory, open '/mock/projects/minsky/.minsky/config.yml'
    path: "/mock/projects/minsky/.minsky/config.yml",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)

Warning: Failed to parse config file /mock/projects/minsky/.minsky/config.json: ENOENT: no such file or directory, open '/mock/projects/minsky/.minsky/config.json'
    path: "/mock/projects/minsky/.minsky/config.json",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)

Warning: Failed to parse config file /mock/projects/minsky/minsky.config.yaml: ENOENT: no such file or directory, open '/mock/projects/minsky/minsky.config.yaml'
    path: "/mock/projects/minsky/minsky.config.yaml",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)

Warning: Failed to parse config file /mock/projects/minsky/minsky.config.yml: ENOENT: no such file or directory, open '/mock/projects/minsky/minsky.config.yml'
    path: "/mock/projects/minsky/minsky.config.yml",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)

Warning: Failed to parse config file /mock/projects/minsky/minsky.config.json: ENOENT: no such file or directory, open '/mock/projects/minsky/minsky.config.json'
    path: "/mock/projects/minsky/minsky.config.json",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)

Custom config load time: 1ms
(pass) Custom Configuration System > Performance > should load configuration within acceptable time limits [1.35ms]
Average access time: 0.001ms per operation
(pass) Custom Configuration System > Performance > should access configuration values efficiently [0.53ms]
(pass) Custom Configuration System > Error Handling > should handle missing configuration paths gracefully
(pass) Custom Configuration System > Error Handling > should validate configuration structure
Warning: Failed to parse config file /mock/projects/minsky/config/local.yaml: ENOENT: no such file or directory, open '/mock/projects/minsky/config/local.yaml'
    path: "/mock/projects/minsky/config/local.yaml",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)

Warning: Failed to parse config file /mock/projects/minsky/config/local.yml: ENOENT: no such file or directory, open '/mock/projects/minsky/config/local.yml'
    path: "/mock/projects/minsky/config/local.yml",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)

Warning: Failed to parse config file /mock/projects/minsky/config/local.json: ENOENT: no such file or directory, open '/mock/projects/minsky/config/local.json'
    path: "/mock/projects/minsky/config/local.json",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)

Warning: Failed to parse config file /mock/projects/minsky/.minsky/config.yaml: ENOENT: no such file or directory, open '/mock/projects/minsky/.minsky/config.yaml'
    path: "/mock/projects/minsky/.minsky/config.yaml",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)

Warning: Failed to parse config file /mock/projects/minsky/.minsky/config.yml: ENOENT: no such file or directory, open '/mock/projects/minsky/.minsky/config.yml'
    path: "/mock/projects/minsky/.minsky/config.yml",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)

Warning: Failed to parse config file /mock/projects/minsky/.minsky/config.json: ENOENT: no such file or directory, open '/mock/projects/minsky/.minsky/config.json'
    path: "/mock/projects/minsky/.minsky/config.json",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)

Warning: Failed to parse config file /mock/projects/minsky/minsky.config.yaml: ENOENT: no such file or directory, open '/mock/projects/minsky/minsky.config.yaml'
    path: "/mock/projects/minsky/minsky.config.yaml",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)

Warning: Failed to parse config file /mock/projects/minsky/minsky.config.yml: ENOENT: no such file or directory, open '/mock/projects/minsky/minsky.config.yml'
    path: "/mock/projects/minsky/minsky.config.yml",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)

Warning: Failed to parse config file /mock/projects/minsky/minsky.config.json: ENOENT: no such file or directory, open '/mock/projects/minsky/minsky.config.json'
    path: "/mock/projects/minsky/minsky.config.json",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)

(pass) Custom Configuration System > Configuration Factory > should create provider with default options [1.14ms]
Warning: Failed to parse config file /mock/projects/minsky/config/local.yaml: ENOENT: no such file or directory, open '/mock/projects/minsky/config/local.yaml'
    path: "/mock/projects/minsky/config/local.yaml",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)

Warning: Failed to parse config file /mock/projects/minsky/config/local.yml: ENOENT: no such file or directory, open '/mock/projects/minsky/config/local.yml'
    path: "/mock/projects/minsky/config/local.yml",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)

Warning: Failed to parse config file /mock/projects/minsky/config/local.json: ENOENT: no such file or directory, open '/mock/projects/minsky/config/local.json'
    path: "/mock/projects/minsky/config/local.json",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)

Warning: Failed to parse config file /mock/projects/minsky/.minsky/config.yaml: ENOENT: no such file or directory, open '/mock/projects/minsky/.minsky/config.yaml'
    path: "/mock/projects/minsky/.minsky/config.yaml",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)

Warning: Failed to parse config file /mock/projects/minsky/.minsky/config.yml: ENOENT: no such file or directory, open '/mock/projects/minsky/.minsky/config.yml'
    path: "/mock/projects/minsky/.minsky/config.yml",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)

Warning: Failed to parse config file /mock/projects/minsky/.minsky/config.json: ENOENT: no such file or directory, open '/mock/projects/minsky/.minsky/config.json'
    path: "/mock/projects/minsky/.minsky/config.json",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)

Warning: Failed to parse config file /mock/projects/minsky/minsky.config.yaml: ENOENT: no such file or directory, open '/mock/projects/minsky/minsky.config.yaml'
    path: "/mock/projects/minsky/minsky.config.yaml",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)

Warning: Failed to parse config file /mock/projects/minsky/minsky.config.yml: ENOENT: no such file or directory, open '/mock/projects/minsky/minsky.config.yml'
    path: "/mock/projects/minsky/minsky.config.yml",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)

Warning: Failed to parse config file /mock/projects/minsky/minsky.config.json: ENOENT: no such file or directory, open '/mock/projects/minsky/minsky.config.json'
    path: "/mock/projects/minsky/minsky.config.json",
 syscall: "open",
   errno: -2,
    code: "ENOENT"

      at loadConfigFile (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:62:21)
      at getProjectConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/sources/project.ts:140:32)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:211:31)
      at loadAllSources (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:181:72)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:107:40)
      at load (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:97:50)
      at loadConfiguration (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/loader.ts:498:3)
      at initialize (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/configuration/index.ts:118:33)

(pass) Custom Configuration System > Configuration Factory > should create provider with custom options [0.68ms]

src/domain/configuration/config-writer.test.ts:
(pass) ConfigWriter > should create config directory if it doesn't exist [2.60ms]
(pass) ConfigWriter > should create backup before modifying existing config [0.60ms]
(pass) ConfigWriter > should handle nested key paths correctly [0.25ms]
(pass) ConfigWriter > should preserve existing values when setting new ones [0.37ms]
(pass) ConfigWriter > should handle backup failure gracefully [0.25ms]
(pass) ConfigWriter > should return previous value when overwriting existing config [0.19ms]
(pass) ConfigWriter > should remove configuration value and create backup [0.36ms]
(pass) ConfigWriter > should handle unsetting non-existent values gracefully [0.05ms]
(pass) ConfigWriter > should handle unsetting nested values [0.33ms]
(pass) ConfigWriter > should clean up empty parent objects after unsetting [0.11ms]
(pass) ConfigWriter > should fail gracefully when no config file exists [0.03ms]
(pass) ConfigWriter > should restore from backup if file write fails after unset [0.13ms]
(pass) ConfigWriter > should handle malformed YAML files [0.51ms]
(pass) ConfigWriter > should handle permission errors on config directory creation [0.22ms]
(pass) ConfigWriter > should handle very deep nested paths [0.29ms]
(pass) ConfigWriter > should handle special characters in keys and values
(pass) ConfigWriter > should include timestamp in backup filename
(pass) ConfigWriter > should skip backup when noBackup option is set
(pass) createConfigWriter > should create ConfigWriter instance with default options
(pass) createConfigWriter > should create ConfigWriter instance with custom options

src/domain/tasks/task-service-interface.test.ts:
(pass) TaskService Interface Compatibility > should provide setTaskStatus method [1.00ms]
(pass) TaskService Interface Compatibility > should have getTaskStatus method (ensures interface completeness)
{"level":"error","message":"Failed to read tasks file: /test/workspace/process/tasks.md","timestamp":"2025-08-20T00:48:23.491Z"}
(pass) TaskService Interface Compatibility > should validate task status in setTaskStatus method [0.55ms]
(pass) TaskService Interface Compatibility > should maintain interface compatibility with existing commands [0.09ms]

src/domain/tasks/utils.test.ts:
(pass) strict-only utils > placeholder strict-only utils test [0.01ms]

src/domain/tasks/taskService-jsonFile-integration.test.ts:
(pass) TaskService Integration with Dependency Injection > Task Service DI Integration > should provide comprehensive task service capabilities
(pass) TaskService Integration with Dependency Injection > Task Service DI Integration > should integrate with git service for task workflows
(pass) TaskService Integration with Dependency Injection > Task Service DI Integration > should integrate with session management for task workflows
(pass) TaskService Integration with Dependency Injection > Task Service DI Integration > should demonstrate workspace integration capabilities
(pass) TaskService Integration with Dependency Injection > DI Architecture Verification > should demonstrate comprehensive dependency integration
(pass) TaskService Integration with Dependency Injection > DI Architecture Verification > should show zero real filesystem operations in integration testing
(pass) TaskService Integration with Dependency Injection > DI Architecture Verification > should demonstrate integration testing benefits with DI
(pass) TaskService Integration with Dependency Injection > DI Architecture Verification > should demonstrate task service DI readiness [0.04ms]
(pass) TaskService Integration with Dependency Injection > DI Architecture Verification > should show performance benefits of DI testing approach

src/domain/tasks/jsonFileTaskBackend.test.ts:
(pass) JsonFileTaskBackend > storage operations > should initialize storage correctly
(pass) JsonFileTaskBackend > storage operations > should store and retrieve tasks [0.31ms]
(pass) JsonFileTaskBackend > storage operations > should update tasks [0.07ms]
(pass) JsonFileTaskBackend > storage operations > should delete tasks [0.08ms]
(pass) JsonFileTaskBackend > TaskBackend interface compliance > should implement getTasksData [0.09ms]
(pass) JsonFileTaskBackend > TaskBackend interface compliance > should implement saveTasksData [0.09ms]
(pass) JsonFileTaskBackend > TaskBackend interface compliance > should implement parseTasks [0.08ms]
(pass) JsonFileTaskBackend > TaskBackend interface compliance > should implement formatTasks
(pass) JsonFileTaskBackend > TaskBackend interface compliance > should handle task spec operations [0.14ms]
(pass) JsonFileTaskBackend > markdown compatibility > should parse markdown task format [0.03ms]
(pass) JsonFileTaskBackend > helper methods > should generate correct task spec paths
(pass) JsonFileTaskBackend > helper methods > should return correct workspace path [0.03ms]

src/domain/tasks/multi-backend-system.test.ts:
(pass) Multi-Backend Task System > TaskBackend Interface > should include prefix property for qualified IDs
(pass) Multi-Backend Task System > TaskBackend Interface > should support different backend prefixes
(pass) Multi-Backend Task System > TaskBackend Interface > should validate local IDs according to backend rules
(pass) Multi-Backend Task System > Multi-Backend TaskService > Backend Registration > should register multiple backends
(pass) Multi-Backend Task System > Multi-Backend TaskService > Backend Registration > should prevent duplicate backend prefixes
(pass) Multi-Backend Task System > Multi-Backend TaskService > Backend Registration > should return null for unknown backends
(pass) Multi-Backend Task System > Multi-Backend TaskService > Task Routing > should route qualified task IDs to correct backend
(pass) Multi-Backend Task System > Multi-Backend TaskService > Task Routing > should handle unqualified task IDs with default backend
(pass) Multi-Backend Task System > Multi-Backend TaskService > Task Routing > should throw error for unknown backend in qualified ID
(pass) Multi-Backend Task System > Multi-Backend TaskService > Cross-Backend Operations > should list tasks from all backends [0.88ms]
(pass) Multi-Backend Task System > Multi-Backend TaskService > Cross-Backend Operations > should filter tasks by backend
(pass) Multi-Backend Task System > Multi-Backend TaskService > Cross-Backend Operations > should search across multiple backends
(pass) Multi-Backend Task System > Multi-Backend TaskService > Task Migration > should migrate task between backends [0.41ms]
(pass) Multi-Backend Task System > Multi-Backend TaskService > Task Migration > should handle migration failures gracefully
(pass) Multi-Backend Task System > Multi-Backend TaskService > Collision Detection > should detect ID collisions between backends
(pass) Multi-Backend Task System > Multi-Backend TaskService > Collision Detection > should generate collision summary by backend [0.37ms]
(pass) Multi-Backend Task System > Multi-Backend TaskService > Backend Selection > should select default backend for new tasks
(pass) Multi-Backend Task System > Multi-Backend TaskService > Backend Selection > should select backend based on configuration
(pass) Multi-Backend Task System > Error Handling > should handle backend failures gracefully
(pass) Multi-Backend Task System > Error Handling > should validate qualified ID format
(pass) Multi-Backend Task System > Error Handling > should handle empty backend list gracefully
(pass) Multi-Backend Task System > Backward Compatibility > should handle existing unqualified task operations
(pass) Multi-Backend Task System > Backward Compatibility > should convert all task IDs to qualified format in responses

src/domain/tasks/task-id-utils.test.ts:
(pass) Task ID Utilities - STRICT QUALIFIED IDs ONLY > validateQualifiedTaskId > should accept only qualified IDs
(pass) Task ID Utilities - STRICT QUALIFIED IDs ONLY > validateQualifiedTaskId > should reject non-qualified IDs
(pass) Task ID Utilities - STRICT QUALIFIED IDs ONLY > validateQualifiedTaskId > should handle invalid input
(pass) Task ID Utilities - STRICT QUALIFIED IDs ONLY > formatTaskIdForDisplay > should preserve qualified IDs unchanged
(pass) Task ID Utilities - STRICT QUALIFIED IDs ONLY > formatTaskIdForDisplay > should convert legacy formats for display (graceful fallback) [0.23ms]
(pass) Task ID Utilities - STRICT QUALIFIED IDs ONLY > formatTaskIdForDisplay > should handle invalid input
(pass) Task ID Utilities - STRICT QUALIFIED IDs ONLY > isQualifiedFormat > should identify qualified IDs correctly
(pass) Task ID Utilities - STRICT QUALIFIED IDs ONLY > isQualifiedFormat > should reject non-qualified formats
(pass) Task ID Utilities - STRICT QUALIFIED IDs ONLY > getTaskIdNumber > should extract numbers from qualified IDs only
(pass) Task ID Utilities - STRICT QUALIFIED IDs ONLY > getTaskIdNumber > should return null for non-qualified formats
(pass) Task ID Utilities - STRICT QUALIFIED IDs ONLY > getTaskIdNumber > should handle invalid input
(pass) Task ID Utilities - STRICT QUALIFIED IDs ONLY > integration scenarios > should maintain strict qualified ID policy [1.03ms]
(pass) Task ID Utilities - STRICT QUALIFIED IDs ONLY > integration scenarios > should reject non-qualified inputs consistently

src/domain/tasks/task-id-integration.test.ts:
(pass) Task ID Integration Issues (Domain Layer Testing) > Task Service Operations > should handle qualified task IDs in task operations [0.24ms]
(pass) Task ID Integration Issues (Domain Layer Testing) > Task Service Operations > should retrieve specific qualified task by ID [0.11ms]
Warning: Dependency installation failed. You may need to run install manually.
Error: No package manager detected for this project
(pass) Task ID Integration Issues (Domain Layer Testing) > Session Operations with Qualified Task IDs > should start session with qualified task ID [0.69ms]
(pass) Task ID Integration Issues (Domain Layer Testing) > Task ID Parsing Consistency > should parse qualified IDs consistently across all parsers [0.16ms]
✅ VERIFIED: Full qualified ID workflow works with domain functions
(pass) Task ID Integration Issues (Domain Layer Testing) > End-to-End Qualified ID Workflow > should support complete workflow with qualified IDs

src/domain/tasks/markdownTaskBackend.create-commit.test.ts:
📦 Stashing uncommitted changes...
✅ Changes stashed successfully
📦 Stashing uncommitted changes...
✅ Changes stashed successfully
💾 Committing task creation...
📤 Pushing changes...
✅ Changes committed and pushed successfully
📂 Restoring stashed changes...
✅ Stashed changes restored successfully
💾 Committing task creation...
📤 Pushing changes...
✅ Changes committed and pushed successfully
📂 Restoring stashed changes...
✅ Stashed changes restored successfully
(pass) MarkdownTaskBackend - createTask auto-commit > commits and pushes after creating a task from object (title/description) [1.51ms]
(pass) MarkdownTaskBackend - createTask auto-commit > does not commit when there are no changes to commit

src/domain/tasks/json-backend.test.ts:
(pass) Enhanced JSON Backend > should create backend with explicit workspace path [1.20ms]
(pass) Enhanced JSON Backend > should handle workspace path resolution [0.25ms]

src/domain/tasks/multi-backend-errors.test.ts:
(pass) Multi-Backend Error Handling > Error Types > MultiBackendError should contain all required information [0.05ms]
(pass) Multi-Backend Error Handling > Error Types > MultiBackendError should serialize to JSON correctly [0.10ms]
(pass) Multi-Backend Error Handling > Error Types > BackendNotFoundError should include available backends
(pass) Multi-Backend Error Handling > Error Types > TaskRoutingError should include task ID and reason
(pass) Multi-Backend Error Handling > Error Types > BackendOperationError should include all operation details
(pass) Multi-Backend Error Handling > Error Types > TaskMigrationError should include migration details
(pass) Multi-Backend Error Handling > ErrorContext > should build context with all fields
(pass) Multi-Backend Error Handling > ErrorContext > should create empty context by default
(pass) Multi-Backend Error Handling > ErrorContext > should support method chaining
(pass) Multi-Backend Error Handling > ConsoleMultiBackendLogger > should log info messages with context [0.05ms]
(pass) Multi-Backend Error Handling > ConsoleMultiBackendLogger > should log info messages without context
(pass) Multi-Backend Error Handling > ConsoleMultiBackendLogger > should log warn messages [0.04ms]
(pass) Multi-Backend Error Handling > ConsoleMultiBackendLogger > should log error messages
(pass) Multi-Backend Error Handling > ConsoleMultiBackendLogger > should log debug messages
(pass) Multi-Backend Error Handling > ErrorRecovery > withRetry > should succeed on first attempt [0.25ms]
(pass) Multi-Backend Error Handling > ErrorRecovery > withRetry > should retry on failure and eventually succeed [32.10ms]
(pass) Multi-Backend Error Handling > ErrorRecovery > withRetry > should throw MultiBackendError after max retries [10.39ms]
(pass) Multi-Backend Error Handling > ErrorRecovery > withRetry > should handle non-Error objects
[WARN] Partial failure in list_tasks: 1/3 backends failed {
  "failures": [
    {
      "backend": "gh",
      "error": "Failed"
    }
  ]
}
(pass) Multi-Backend Error Handling > ErrorRecovery > handlePartialFailure > should return successful results and log failures [0.25ms]
[WARN] Partial failure in list_tasks: 2/2 backends failed {
  "failures": [
    {
      "backend": "md",
      "error": "Failed 1"
    },
    {
      "backend": "gh",
      "error": "Failed 2"
    }
  ]
}
(pass) Multi-Backend Error Handling > ErrorRecovery > handlePartialFailure > should handle all failures gracefully
(pass) Multi-Backend Error Handling > ErrorRecovery > handlePartialFailure > should handle all successes
(pass) Multi-Backend Error Handling > MultiBackendValidation > validateTaskId > should accept valid task IDs
(pass) Multi-Backend Error Handling > MultiBackendValidation > validateTaskId > should reject invalid task IDs
(pass) Multi-Backend Error Handling > MultiBackendValidation > validateBackendName > should accept valid backend names
(pass) Multi-Backend Error Handling > MultiBackendValidation > validateBackendName > should reject invalid backend names
(pass) Multi-Backend Error Handling > MultiBackendValidation > validateTaskSpec > should accept valid task specs
(pass) Multi-Backend Error Handling > MultiBackendValidation > validateTaskSpec > should reject invalid task specs

src/domain/tasks/real-world-workflow.test.ts:
(pass) Real-World Workflow Testing > JSON Backend Real Storage > should actually create and store data in the correct location [0.35ms]
(pass) Real-World Workflow Testing > JSON Backend Real Storage > should default to process/tasks.json when no explicit path provided
(pass) Real-World Workflow Testing > TaskService Integration > should work with JSON backend for complete task operations [0.44ms]
(pass) Real-World Workflow Testing > Error Handling > should handle missing process directory gracefully [0.05ms]

src/domain/tasks/backend-qualified-id.test.ts:
(pass) Backend-Qualified ID System > parseTaskId > should parse qualified IDs correctly
(pass) Backend-Qualified ID System > parseTaskId > should parse different backend types [0.08ms]
(pass) Backend-Qualified ID System > parseTaskId > should handle numeric local IDs
(pass) Backend-Qualified ID System > parseTaskId > should handle string local IDs [0.02ms]
(pass) Backend-Qualified ID System > parseTaskId > should return null for invalid formats
(pass) Backend-Qualified ID System > parseTaskId > should handle complex local IDs with special characters [0.03ms]
(pass) Backend-Qualified ID System > isQualifiedId > should return true for qualified IDs
(pass) Backend-Qualified ID System > isQualifiedId > should return false for unqualified IDs [0.03ms]
(pass) Backend-Qualified ID System > isQualifiedId > should return false for invalid formats
(pass) Backend-Qualified ID System > formatTaskId > should format backend and local ID correctly [0.02ms]
(pass) Backend-Qualified ID System > formatTaskId > should handle special characters in local ID
(pass) Backend-Qualified ID System > formatTaskId > should throw for empty backend [0.06ms]
(pass) Backend-Qualified ID System > formatTaskId > should throw for empty local ID
(pass) Backend-Qualified ID System > formatForDisplay > should return qualified IDs as-is [0.03ms]
(pass) Backend-Qualified ID System > formatForDisplay > should return unqualified IDs as-is for backward compatibility
(pass) Backend-Qualified ID System > extractBackendFromId > should extract backend from qualified IDs
(pass) Backend-Qualified ID System > extractBackendFromId > should return null for unqualified IDs
(pass) Backend-Qualified ID System > extractBackendFromId > should return null for invalid formats
(pass) Backend-Qualified ID System > extractLocalIdFromId > should extract local ID from qualified IDs
(pass) Backend-Qualified ID System > extractLocalIdFromId > should return the full ID for unqualified IDs (backward compatibility) [0.09ms]
(pass) Backend-Qualified ID System > extractLocalIdFromId > should return null for invalid formats
(pass) Git Branch Naming Conversion > sessionNameToBranchName > should convert qualified session names to git-compatible branch names [0.02ms]
(pass) Git Branch Naming Conversion > sessionNameToBranchName > should handle unqualified session names for backward compatibility
(pass) Git Branch Naming Conversion > sessionNameToBranchName > should handle complex local IDs
(pass) Git Branch Naming Conversion > branchNameToSessionName > should convert git branch names back to session names
(pass) Git Branch Naming Conversion > branchNameToSessionName > should handle unqualified branch names for backward compatibility
(pass) Git Branch Naming Conversion > branchNameToSessionName > should handle complex local IDs
(pass) Git Branch Naming Conversion > Round-trip conversion > should maintain consistency through round-trip conversions
(pass) Backward Compatibility > should handle existing unqualified task IDs
(pass) Backward Compatibility > should handle existing session formats
(pass) Edge Cases and Error Handling > should handle empty strings gracefully
(pass) Edge Cases and Error Handling > should handle malformed IDs
(pass) Edge Cases and Error Handling > should preserve special characters in local IDs [0.17ms]

src/domain/tasks/taskService.test.ts:
(pass) TaskService > listTasks > should get tasks data and parse it [0.34ms]
(pass) TaskService > listTasks > should filter tasks by status if provided [0.07ms]
(pass) TaskService > listTasks > should return empty array if data retrieval fails
(pass) TaskService > getTask > should find a task by ID [0.20ms]
(pass) TaskService > getTask > should find a task by qualified ID [0.02ms]
(pass) TaskService > getTask > should return null if task not found [0.02ms]
(pass) TaskService > getTaskStatus > should get a task's status [0.03ms]
(pass) TaskService > getTaskStatus > should return null if task not found [0.02ms]
(pass) TaskService > setTaskStatus > should update a task's status
(pass) TaskService > setTaskStatus > should throw error for invalid status
(pass) TaskService > setTaskStatus > should throw error if task not found
(pass) TaskService > createTask > should create a new task from spec file [0.44ms]
(pass) TaskService > createTask > should throw error if spec file read fails [0.03ms]
(pass) TaskService > createTaskFromTitleAndDescription > should store proper spec path instead of temporary path
(pass) TaskService > createTaskFromTitleAndDescription > integration: should create task with proper spec path using mock backend [0.41ms]
(pass) TaskService > backend handling > should throw error for non-existent backend [0.19ms]
(pass) TaskService > backend handling > should use markdown backend by default

src/domain/tasks/markdown-task-backend-integration.test.ts:
(pass) MarkdownTaskBackend Multi-Backend Integration > TaskBackend Interface Compliance > should have correct backend name
(pass) MarkdownTaskBackend Multi-Backend Integration > TaskBackend Interface Compliance > should implement all required TaskBackend methods
(pass) MarkdownTaskBackend Multi-Backend Integration > TaskBackend Interface Compliance > should return correct capabilities
(pass) MarkdownTaskBackend Multi-Backend Integration > TaskBackend Interface Compliance > should return correct workspace path
(pass) MarkdownTaskBackend Multi-Backend Integration > Qualified Task ID Management > should create tasks with qualified IDs (md#123)
(pass) MarkdownTaskBackend Multi-Backend Integration > Qualified Task ID Management > should retrieve tasks by qualified ID [1.04ms]
(pass) MarkdownTaskBackend Multi-Backend Integration > Qualified Task ID Management > should retrieve tasks by local ID for backward compatibility
(pass) MarkdownTaskBackend Multi-Backend Integration > Qualified Task ID Management > should list tasks with qualified IDs [0.34ms]
(pass) MarkdownTaskBackend Multi-Backend Integration > Legacy Format Migration > should handle existing legacy tasks with #123 format [0.06ms]
(pass) MarkdownTaskBackend Multi-Backend Integration > Legacy Format Migration > should retrieve legacy tasks by various ID formats [0.06ms]
(pass) MarkdownTaskBackend Multi-Backend Integration > Task Operations > should update task status correctly
(pass) MarkdownTaskBackend Multi-Backend Integration > Task Operations > should delete tasks correctly [0.32ms]
(pass) MarkdownTaskBackend Multi-Backend Integration > Task Operations > should filter tasks by status [0.10ms]
(pass) MarkdownTaskBackend Multi-Backend Integration > Task Operations > should filter tasks by backend [0.04ms]
(pass) MarkdownTaskBackend Multi-Backend Integration > Export/Import Operations > should export tasks correctly [0.09ms]
(pass) MarkdownTaskBackend Multi-Backend Integration > Export/Import Operations > should import tasks correctly
(pass) MarkdownTaskBackend Multi-Backend Integration > Local ID Validation > should validate local IDs correctly
(pass) MarkdownTaskBackend Multi-Backend Integration > File System Integration > should generate correct task spec paths
(pass) MarkdownTaskBackend Multi-Backend Integration > File System Integration > should persist tasks to markdown format [0.28ms]

src/domain/tasks/tasks-legacy-backend.create-commit.test.ts:
{"error":{"cmd":"git -C /Users/edobry/.local/state/minsky/sessions/task-md#423/tmp/legacy-backend-commit-test status --porcelain","code":128,"killed":false,"signal":null,"stderr":"fatal: not a git repository (or any of the parent directories): .git\n","stdout":""},"level":"warn","message":"Failed to commit task creation","taskId":"#001","timestamp":"2025-08-20T00:48:23.587Z"}
⚠️ Warning: Failed to commit changes: Error: Command failed: git -C /Users/edobry/.local/state/minsky/sessions/task-md#423/tmp/legacy-backend-commit-test status --porcelain
fatal: not a git repository (or any of the parent directories): .git

(pass) Legacy MarkdownTaskBackend in tasks.ts - createTask auto-commit > commits and pushes after creating a task from spec file [18.41ms]

src/domain/tasks/taskFunctions.test.ts:
(pass) Task Functions > parseTasksFromMarkdown > should return empty array for empty content
(pass) Task Functions > parseTasksFromMarkdown > should parse tasks from markdown content [0.69ms]
(pass) Task Functions > parseTasksFromMarkdown > should ignore tasks in code blocks
(pass) Task Functions > formatTasksToMarkdown > should return empty string for empty array
(pass) Task Functions > formatTasksToMarkdown > should format tasks to markdown with one-liner format only [0.01ms]
(pass) Task Functions > formatTasksToMarkdown > should use task specPath if available [0.01ms]
(pass) Task Functions > getTaskById > should return null for empty input [0.02ms]
(pass) Task Functions > getTaskById > should find task by exact ID match [0.05ms]
(pass) Task Functions > getTaskById > should find task by ID without # prefix [0.01ms]
(pass) Task Functions > getTaskById > should handle exact ID matching [0.02ms]
(pass) Task Functions > getNextTaskId > should return 001 for empty tasks array
(pass) Task Functions > getNextTaskId > should find the maximum ID and increment it
(pass) Task Functions > getNextTaskId > should handle non-sequential IDs
(pass) Task Functions > getNextTaskId > should pad with zeros
(pass) Task Functions > setTaskStatus > should update a task's status
(pass) Task Functions > setTaskStatus > should work with task ID variations
(pass) Task Functions > setTaskStatus > should return original array if task not found
(pass) Task Functions > setTaskStatus > should return original array if status is invalid
(pass) Task Functions > addTask > should add a new task to the array
(pass) Task Functions > addTask > should replace an existing task with the same ID
(pass) Task Functions > addTask > should generate an ID if not provided
(pass) Task Functions > filterTasks > should return all tasks if no filter provided
(pass) Task Functions > filterTasks > should filter by status
(pass) Task Functions > filterTasks > should filter by ID
(pass) Task Functions > filterTasks > should filter by title (string match)
(pass) Task Functions > filterTasks > should filter by title (regex match)
(pass) Task Functions > filterTasks > should filter by specPath existence
(pass) Task Functions > filterTasks > should combine multiple filter criteria
(pass) Task Functions > parseTaskSpecFromMarkdown > should parse task spec from markdown
(pass) Task Functions > parseTaskSpecFromMarkdown > should handle specs without task ID
(pass) Task Functions > parseTaskSpecFromMarkdown > should handle general heading format
(pass) Task Functions > parseTaskSpecFromMarkdown > should return empty values for invalid input
(pass) Task Functions > formatTaskSpecToMarkdown > should format task spec to markdown with ID
(pass) Task Functions > formatTaskSpecToMarkdown > should format task spec without ID
(pass) Task Functions > isValidTaskStatus > should validate correct statuses [0.58ms]
(pass) Task Functions > isValidTaskStatus > should reject invalid statuses

src/domain/tasks/multi-backend-real-integration.test.ts:
(pass) MultiBackendTaskService with Real MarkdownTaskBackend > Backend Registration and Routing > should register markdown backend correctly
(pass) MultiBackendTaskService with Real MarkdownTaskBackend > Backend Registration and Routing > should route qualified IDs to correct backend [0.74ms]
(pass) MultiBackendTaskService with Real MarkdownTaskBackend > Backend Registration and Routing > should list tasks from all backends [0.09ms]
(pass) MultiBackendTaskService with Real MarkdownTaskBackend > Cross-Backend Operations > should handle task updates across backends [0.07ms]
(pass) MultiBackendTaskService with Real MarkdownTaskBackend > Cross-Backend Operations > should handle task status transitions correctly
(pass) MultiBackendTaskService with Real MarkdownTaskBackend > Cross-Backend Operations > should handle task deletion across backends [0.58ms]

src/domain/tasks/task-id.test.ts:
(pass) Unified Task ID System > parseTaskId > should parse qualified task IDs correctly
(pass) Unified Task ID System > parseTaskId > should parse different backend types
(pass) Unified Task ID System > parseTaskId > should handle numeric local IDs
(pass) Unified Task ID System > parseTaskId > should handle string local IDs
(pass) Unified Task ID System > parseTaskId > should return null for invalid formats
(pass) Unified Task ID System > parseTaskId > should handle complex local IDs with special characters
(pass) Unified Task ID System > isQualifiedTaskId > should return true for qualified task IDs
(pass) Unified Task ID System > isQualifiedTaskId > should return false for unqualified IDs [0.11ms]
(pass) Unified Task ID System > isQualifiedTaskId > should return false for invalid formats [0.01ms]
(pass) Unified Task ID System > formatTaskId > should format backend and local ID correctly
(pass) Unified Task ID System > formatTaskId > should handle special characters in local ID
(pass) Unified Task ID System > formatTaskId > should throw for empty backend
(pass) Unified Task ID System > formatTaskId > should throw for empty local ID
(pass) Unified Task ID System > extractBackend > should extract backend from qualified task IDs
(pass) Unified Task ID System > extractBackend > should return null for unqualified IDs
(pass) Unified Task ID System > extractBackend > should return null for invalid formats [0.10ms]
(pass) Unified Task ID System > extractLocalId > should extract local ID from qualified task IDs [0.01ms]
(pass) Unified Task ID System > extractLocalId > should return null for unqualified IDs
(pass) Unified Task ID System > extractLocalId > should return null for invalid formats
(pass) Session/Branch Conversion > taskIdToSessionName > should convert qualified task IDs to session names
(pass) Session/Branch Conversion > taskIdToSessionName > should return unqualified IDs as-is
(pass) Session/Branch Conversion > taskIdToSessionName > should handle complex local IDs
(pass) Session/Branch Conversion > sessionNameToTaskId > should convert session names to task IDs
(pass) Session/Branch Conversion > sessionNameToTaskId > should handle complex local IDs
(pass) Session/Branch Conversion > Round-trip conversion > should maintain consistency through round-trip conversions
(pass) Edge Cases and Error Handling > should handle empty strings gracefully
(pass) Edge Cases and Error Handling > should handle malformed IDs [0.15ms]
(pass) Edge Cases and Error Handling > should preserve special characters in local IDs
(pass) Edge Cases and Error Handling > should handle conversion edge cases

src/domain/tasks/configuration-integration.test.ts:
(pass) Configuration Integration > createConfiguredTaskService should use configuration to resolve backend [0.70ms]
(pass) Configuration Integration > createConfiguredTaskService should handle missing config directory [0.06ms]
{"level":"error","message":"Failed to read tasks file: /mock/config-test-explicit/process/tasks.md","timestamp":"2025-08-20T00:48:23.596Z"}
(pass) Configuration Integration > createConfiguredTaskService should handle explicit backend override [0.26ms]

src/domain/tasks/githubIssuesTaskBackend.test.ts:
(pass) GitHubIssuesTaskBackend > configuration > should create instance with correct configuration [0.02ms]
(pass) GitHubIssuesTaskBackend > configuration > should initialize with custom status labels [0.15ms]
(pass) GitHubIssuesTaskBackend > parseTasks > should parse GitHub issues into TaskData objects [0.23ms]
{"error":"JSON Parse error: Unexpected identifier \"invalid\"","level":"error","message":"Failed to parse GitHub issues data","timestamp":"2025-08-20T00:48:23.601Z"}
(pass) GitHubIssuesTaskBackend > parseTasks > should handle invalid JSON gracefully [0.20ms]
(pass) GitHubIssuesTaskBackend > formatTasks > should format TaskData objects for GitHub API [0.07ms]
(pass) GitHubIssuesTaskBackend > parseTaskSpec > should parse task specification content [0.19ms]
(pass) GitHubIssuesTaskBackend > formatTaskSpec > should format task specification data [0.03ms]
(pass) GitHubIssuesTaskBackend > getTaskSpecPath > should generate correct spec path [0.13ms]
(pass) GitHubIssuesTaskBackend > getTaskSpecPath > should handle task ID without # prefix [0.01ms]
(pass) GitHubIssuesTaskBackend > getTaskSpecPath > should normalize title for filename [0.08ms]

src/domain/tasks/repository-backend-integration.test.ts:
(pass) Task Backend Compatibility Validation > should allow markdown backend with any repository backend [0.42ms]
(pass) Task Backend Compatibility Validation > should allow json-file backend with any repository backend [0.03ms]
(pass) Task Backend Compatibility Validation > should allow github-issues backend only with GitHub repository backend [0.07ms]
(pass) Task Backend Compatibility Validation > should provide helpful error message for incompatible backend [0.04ms]
(pass) Compatible Task Backends Detection > should return correct compatible backends for each repository type [0.02ms]
(pass) Compatible Task Backends Detection > should correctly identify backend compatibility [0.05ms]
(pass) GitHub URL Parsing > should parse SSH GitHub URLs correctly [0.10ms]
(pass) GitHub URL Parsing > should parse HTTPS GitHub URLs correctly [0.03ms]
(pass) GitHub URL Parsing > should handle URLs without .git suffix
(pass) GitHub URL Parsing > should return null for non-GitHub URLs
(pass) GitHub Repository Override (New Feature) > should parse GitHub repository string correctly
(pass) GitHub Repository Override (New Feature) > should handle whitespace in repository string
(pass) GitHub Repository Override (New Feature) > should return null for invalid repository format

src/domain/tasks/taskConstants.test.ts:
(pass) Task Constants and Utilities > Basic Constants > should have all required task statuses
(pass) Task Constants and Utilities > Basic Constants > should have bidirectional mapping between status and checkbox
(pass) Task Constants and Utilities > Regex Patterns > should match valid task lines
(pass) Task Constants and Utilities > Regex Patterns > should not match invalid task lines
(pass) Task Constants and Utilities > Parsing Utilities > should parse valid task lines correctly
(pass) Task Constants and Utilities > Parsing Utilities > should return null for invalid task lines
(pass) Task Constants and Utilities > Parsing Utilities > should replace checkbox status correctly
(pass) Task Constants and Utilities > Parsing Utilities > should get status from checkbox correctly
(pass) Task Constants and Utilities > Parsing Utilities > should get checkbox from status correctly
(pass) Task Constants and Utilities > Parsing Utilities > should validate task-like lines correctly
(pass) Task Constants and Utilities > Status Validation > should validate valid statuses
(pass) Task Constants and Utilities > Status Validation > should reject invalid statuses
(pass) Task Constants and Utilities > Dynamic Pattern Generation > should generate patterns that include all status characters
(pass) Task Constants and Utilities > Dynamic Pattern Generation > should handle new status additions gracefully

src/domain/tasks/taskCommands.test.ts:
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should return BLOCKED status for task 155 with [~] checkbox
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should return TODO status for task 156 with [ ] checkbox
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should return IN_PROGRESS status for task 157 with [+] checkbox [0.45ms]
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should return DONE status for task 158 with [x] checkbox [0.12ms]
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should throw error when task not found [0.02ms]
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should handle task ID normalization [0.18ms]
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should handle custom repo path [0.11ms]
(pass) Interface-Agnostic Task Command Functions > getTaskFromParams > should get task by ID [9.36ms]
{"duration":8,"error":"Task md#999 not found","level":"error","message":"[getTaskFromParams] Error getting task:","timestamp":"2025-08-20T00:48:23.625Z"}
(pass) Interface-Agnostic Task Command Functions > getTaskFromParams > should throw error when task not found [7.98ms]
(pass) Interface-Agnostic Task Command Functions > getTaskFromParams > should handle task ID normalization [9.13ms]
(pass) Interface-Agnostic Task Command Functions > getTaskFromParams > should handle custom repo path [0.21ms]
(pass) Interface-Agnostic Task Command Functions > listTasksFromParams > should list all tasks when no filter is provided [7.88ms]
(pass) Interface-Agnostic Task Command Functions > listTasksFromParams > should filter tasks by status [8.37ms]
(pass) Interface-Agnostic Task Command Functions > listTasksFromParams > should filter out DONE tasks when all is false [7.23ms]
(pass) Interface-Agnostic Task Command Functions > setTaskStatusFromParams > should set task status [0.22ms]
(pass) Interface-Agnostic Task Command Functions > setTaskStatusFromParams > should throw error when task not found [0.13ms]
(pass) Interface-Agnostic Task Command Functions > setTaskStatusFromParams > should handle task ID normalization [0.11ms]
{"duration":0,"error":"[\n  {\n    \"code\": \"custom\",\n    \"message\": \"Task ID must be qualified (md#123, gh#456)\",\n    \"path\": [\n      \"taskId\"\n    ]\n  }\n]","level":"error","message":"[getTaskFromParams] Error getting task:","timestamp":"2025-08-20T00:48:23.659Z"}
(pass) Interface-Agnostic Task Command Functions > Parameter Validation > should validate task ID format [0.35ms]
{"duration":0,"error":"Task ID is required","level":"error","message":"[getTaskFromParams] Error getting task:","timestamp":"2025-08-20T00:48:23.659Z"}
(pass) Interface-Agnostic Task Command Functions > Parameter Validation > should handle empty task ID [0.08ms]
(pass) Interface-Agnostic Task Command Functions > Parameter Validation > should handle backend parameter [8.99ms]

src/domain/workspace/session-path-resolver.test.ts:
(pass) SessionPathResolver > validateAndResolvePath > should resolve relative paths within session [1.38ms]
(pass) SessionPathResolver > validateAndResolvePath > should resolve current directory reference [0.06ms]
(pass) SessionPathResolver > validateAndResolvePath > should throw error for path traversal outside session [0.10ms]
(pass) SessionPathResolver > validateAndResolvePath > should throw error for absolute paths outside session
(pass) SessionPathResolver > validateAndResolvePath > should handle complex path traversal attempts [0.02ms]
(pass) SessionPathResolver > validateAndResolvePath > should allow absolute paths within session [0.02ms]
(pass) SessionPathResolver > isPathWithinSession > should return true for paths within session [0.01ms]
(pass) SessionPathResolver > isPathWithinSession > should return false for paths outside session
(pass) SessionPathResolver > isPathWithinSession > should return true for session root
(pass) SessionPathResolver > absoluteToRelative > should convert absolute path to relative
(pass) SessionPathResolver > absoluteToRelative > should return null for paths outside session
(pass) SessionPathResolver > absoluteToRelative > should return '.' for session root [0.02ms]
(pass) SessionPathResolver > getRelativePathFromSession > should get relative path from user input
(pass) SessionPathResolver > getRelativePathFromSession > should normalize relative path from user input
(pass) SessionPathResolver > getRelativePathFromSession > should return '.' for session root reference
(pass) SessionPathResolver > validateMultiplePaths > should validate multiple valid paths
(pass) SessionPathResolver > validateMultiplePaths > should throw error if any path is invalid
(pass) SessionPathResolver > createSafePath > should create safe path from components [0.23ms]
(pass) SessionPathResolver > createSafePath > should throw error for unsafe path components [0.02ms]

src/domain/utils/package-manager.test.ts:
(pass) Package Manager Utilities with Dependency Injection > detectPackageManager > detects bun from bun.lock [0.16ms]
(pass) Package Manager Utilities with Dependency Injection > detectPackageManager > detects yarn from yarn.lock
(pass) Package Manager Utilities with Dependency Injection > detectPackageManager > detects pnpm from pnpm-lock.yaml
(pass) Package Manager Utilities with Dependency Injection > detectPackageManager > detects npm from package-lock.json
(pass) Package Manager Utilities with Dependency Injection > detectPackageManager > defaults to npm if only package.json exists [0.13ms]
(pass) Package Manager Utilities with Dependency Injection > detectPackageManager > returns undefined if no package files exist
(pass) Package Manager Utilities with Dependency Injection > getInstallCommand > returns correct command for bun [0.04ms]
(pass) Package Manager Utilities with Dependency Injection > getInstallCommand > returns correct command for npm [0.01ms]
(pass) Package Manager Utilities with Dependency Injection > getInstallCommand > returns correct command for yarn
(pass) Package Manager Utilities with Dependency Injection > getInstallCommand > returns correct command for pnpm
(pass) Package Manager Utilities with Dependency Injection > getInstallCommand > returns undefined for unknown package manager
(pass) Package Manager Utilities with Dependency Injection > installDependencies > successfully installs dependencies [0.04ms]
(pass) Package Manager Utilities with Dependency Injection > installDependencies > uses provided package manager if specified
(pass) Package Manager Utilities with Dependency Injection > installDependencies > handles no package manager detected
(pass) Package Manager Utilities with Dependency Injection > installDependencies > handles unsupported package manager
(pass) Package Manager Utilities with Dependency Injection > installDependencies > handles installation errors
(pass) Package Manager Utilities with Dependency Injection > installDependencies > respects quiet option for stdio
(pass) Package Manager Utilities with Dependency Injection > installDependencies > uses inherit stdio when not quiet [0.42ms]

src/domain/utils/logger.test.ts:
(pass) Logger > getLogMode > should return HUMAN when configuration mode is set to HUMAN
(pass) Logger > getLogMode > should return STRUCTURED when configuration mode is set to STRUCTURED
(pass) Logger > getLogMode > should default to HUMAN when mode is auto and TTY is available
(pass) Logger > getLogMode > should default to STRUCTURED when mode is auto and TTY is not available
(pass) Logger > createConfigurableLogger > should create logger with configuration [0.49ms]
(pass) Logger > createConfigurableLogger > should create logger with STRUCTURED mode [0.08ms]
(pass) Logger > createConfigurableLogger > should expose logger methods [0.02ms]
(pass) Logger > createConfigurableLogger > should support dependency injection for testing [0.07ms]
(pass) Logger > createConfigurableLogger > should handle different log levels [0.33ms]
(pass) Logger > createConfigurableLogger > should isolate logger instances [0.32ms]
(pass) Logger > configuration integration > should maintain backward compatibility [0.17ms]
(pass) Logger > configuration integration > should support enableAgentLogs configuration [0.23ms]

src/domain/storage/database-integrity-checker.test.ts:
(pass) DatabaseIntegrityChecker > File Format Detection > should detect valid SQLite format [0.66ms]
(pass) DatabaseIntegrityChecker > Integrity Validation > should detect SQLite corruption [0.17ms]

src/domain/storage/json-file-storage.test.ts:
Setting up test with mock storage path: /mock/tmp/storage-core-test/storage-core-test-20240101-120000-test-uuid-123-1
(pass) JsonFileStorage Core Tests > Core CRUD Operations > should create and retrieve entities [0.40ms]
Test cleanup completed
Setting up test with mock storage path: /mock/tmp/storage-core-test/storage-core-test-20240101-120000-test-uuid-123-1
(pass) JsonFileStorage Core Tests > Core CRUD Operations > should update entities [0.03ms]
Test cleanup completed
Setting up test with mock storage path: /mock/tmp/storage-core-test/storage-core-test-20240101-120000-test-uuid-123-1
(pass) JsonFileStorage Core Tests > Core CRUD Operations > should delete entities
Test cleanup completed
Setting up test with mock storage path: /mock/tmp/storage-core-test/storage-core-test-20240101-120000-test-uuid-123-1
(pass) JsonFileStorage Core Tests > Core CRUD Operations > should get all entities [0.42ms]
Test cleanup completed
Setting up test with mock storage path: /mock/tmp/storage-core-test/storage-core-test-20240101-120000-test-uuid-123-1
(pass) JsonFileStorage Core Tests > State Management > should read and write state [0.05ms]
Test cleanup completed
Setting up test with mock storage path: /mock/tmp/storage-core-test/storage-core-test-20240101-120000-test-uuid-123-1
(pass) JsonFileStorage Core Tests > Error Handling > should handle non-existent entities gracefully [0.09ms]
Test cleanup completed
Setting up test with mock storage path: /mock/tmp/storage-core-test/storage-core-test-20240101-120000-test-uuid-123-1
(pass) JsonFileStorage Core Tests > Persistence > should persist data across storage instances
Test cleanup completed
Setting up test with mock storage path: /mock/tmp/storage-core-test/storage-core-test-20240101-120000-test-uuid-123-1
(pass) JsonFileStorage Core Tests > Persistence > should handle storage location correctly
Test cleanup completed

src/domain/rules/rule-template-service.test.ts:
GET /repos/test-owner/test-repo/labels/custom%3Atodo - 401 with id C565:442F0:D7ED59:3126E92:68A51B57 in 137ms
{"error":"Bad credentials - https://docs.github.com/rest","level":"error","message":"Failed to create GitHub label: custom:todo","timestamp":"2025-08-20T00:48:23.738Z"}
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id C560:18AC9A:DBE63F:31EEBAF:68A51B57 in 137ms
{"error":"Bad credentials - https://docs.github.com/rest","level":"error","message":"Failed to create GitHub label: minsky:todo","timestamp":"2025-08-20T00:48:23.738Z"}
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id C562:1C9B4:E5B17A:3451FF7:68A51B57 in 137ms
{"error":"Bad credentials - https://docs.github.com/rest","level":"error","message":"Failed to create GitHub label: minsky:todo","timestamp":"2025-08-20T00:48:23.738Z"}
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id C55E:2E9956:11DFCE8:3ACC0E2:68A51B57 in 137ms
{"error":"Bad credentials - https://docs.github.com/rest","level":"error","message":"Failed to create GitHub label: minsky:todo","timestamp":"2025-08-20T00:48:23.738Z"}
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id C567:ACAB4:D7ADB1:311F4DB:68A51B57 in 139ms
{"error":"Bad credentials - https://docs.github.com/rest","level":"error","message":"Failed to create GitHub label: minsky:todo","timestamp":"2025-08-20T00:48:23.738Z"}
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id C561:3A4F7E:D59A5A:3087134:68A51B57 in 137ms
{"error":"Bad credentials - https://docs.github.com/rest","level":"error","message":"Failed to create GitHub label: minsky:todo","timestamp":"2025-08-20T00:48:23.738Z"}
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id C563:18A073:DF45DB:32C43A2:68A51B57 in 138ms
{"error":"Bad credentials - https://docs.github.com/rest","level":"error","message":"Failed to create GitHub label: minsky:todo","timestamp":"2025-08-20T00:48:23.738Z"}
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id C55D:47FB6:E892E4:34CB6A6:68A51B57 in 137ms
{"error":"Bad credentials - https://docs.github.com/rest","level":"error","message":"Failed to create GitHub label: minsky:todo","timestamp":"2025-08-20T00:48:23.738Z"}
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id C566:18A073:DF45DB:32C43A3:68A51B57 in 139ms
{"error":"Bad credentials - https://docs.github.com/rest","level":"error","message":"Failed to create GitHub label: minsky:todo","timestamp":"2025-08-20T00:48:23.739Z"}
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id C55F:442F0:D7ED65:3126EC0:68A51B57 in 147ms
{"error":"Bad credentials - https://docs.github.com/rest","level":"error","message":"Failed to create GitHub label: minsky:todo","timestamp":"2025-08-20T00:48:23.748Z"}
(pass) RuleTemplateService > Template Registration > registers templates correctly [0.12ms]
(pass) RuleTemplateService > Template Registration > getTemplate returns undefined for non-existent template
(pass) RuleTemplateService > Template Registration > getTemplates returns all registered templates [0.04ms]
(pass) RuleTemplateService > Single Rule Generation > generates rule with CLI configuration [0.55ms]
(pass) RuleTemplateService > Single Rule Generation > generates rule with MCP configuration [0.53ms]
(pass) RuleTemplateService > Single Rule Generation > generates rule with hybrid configuration preferring CLI
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id C564:3FD927:DEB0B0:32A07F7:68A51B57 in 156ms
{"error":"Bad credentials - https://docs.github.com/rest","level":"error","message":"Failed to create GitHub label: minsky:todo","timestamp":"2025-08-20T00:48:23.756Z"}
(pass) RuleTemplateService > Single Rule Generation > generates rule with hybrid configuration preferring MCP [0.07ms]
(pass) RuleTemplateService > Multiple Rule Generation > generates multiple rules
(pass) RuleTemplateService > Multiple Rule Generation > generates all rules when none specified
(pass) RuleTemplateService > Multiple Rule Generation > handles generation errors gracefully [0.04ms]
(pass) RuleTemplateService > Template Helper Integration > template can use all helper functions [0.23ms]
(pass) RuleTemplateService > Custom Metadata Generation > applies custom metadata generation [0.09ms]
(pass) RuleTemplateService > Configuration Presets > generateCliRules uses CLI configuration
(pass) RuleTemplateService > Configuration Presets > generateMcpRules uses MCP configuration [0.49ms]
(pass) RuleTemplateService > Configuration Presets > generateHybridRules uses hybrid configuration [0.06ms]
(pass) RuleTemplateService > Factory Functions > createRuleTemplateService creates service correctly
(pass) RuleTemplateService > Factory Functions > generateRulesWithConfig generates rules correctly [0.07ms]
(pass) RuleTemplateService > File System Integration > creates actual rule files when not in dry run mode

src/domain/rules/template-system.test.ts:
(pass) Template System > createTemplateContext > should create context with proper config [0.03ms]
(pass) Template System > helpers.command > CLI context should generate CLI command references [0.05ms]
(pass) Template System > helpers.command > MCP context should generate MCP command references [0.02ms]
(pass) Template System > helpers.command > Hybrid context should default to CLI references when preferMcp is false [0.01ms]
(pass) Template System > helpers.command > should work without description
(pass) Template System > helpers.command > should throw error for unknown command [0.06ms]
(pass) Template System > helpers.codeBlock > should wrap content in code block with language [0.02ms]
(pass) Template System > helpers.codeBlock > should default to bash language
(pass) Template System > helpers.conditionalSection > should include content when condition is true
(pass) Template System > helpers.conditionalSection > should exclude content when condition is false
(pass) Template System > helpers.conditionalSection > should use fallback content when condition is false and fallback is provided [0.02ms]
(pass) Template System > helpers.parameterDoc > should generate parameter documentation [0.03ms]
(pass) Template System > helpers.workflowStep > should generate CLI workflow step
(pass) Template System > helpers.workflowStep > should generate MCP workflow step
(pass) Template System > helpers.workflowStep > should throw error for unknown command
(pass) Template System > DEFAULT_CLI_CONFIG > should have proper CLI defaults
(pass) Template System > DEFAULT_MCP_CONFIG > should have proper MCP defaults
(pass) Template System > DEFAULT_HYBRID_CONFIG > should have proper hybrid defaults

src/domain/rules/command-generator.test.ts:
(pass) CommandGenerator XML Format Tests > MCP XML Format Generation > should generate correct XML format for command with no parameters
(pass) CommandGenerator XML Format Tests > MCP XML Format Generation > should generate correct XML format for command with optional parameters
(pass) CommandGenerator XML Format Tests > MCP XML Format Generation > should generate correct XML format for command with required parameters
(pass) CommandGenerator XML Format Tests > MCP XML Format Generation > should generate correct XML format for command with mixed required and optional parameters
(pass) CommandGenerator XML Format Tests > MCP XML Format Generation > should handle command IDs with multiple dots correctly
(pass) CommandGenerator XML Format Tests > MCP XML Format Generation > should properly handle parameter names with special characters
(pass) CommandGenerator XML Format Tests > CommandGeneratorService Configuration > should create service with initial config
(pass) CommandGenerator XML Format Tests > CommandGeneratorService Configuration > should update config correctly
(pass) CommandGenerator XML Format Tests > XML Format Structure Validation > should produce valid XML structure with proper nesting
(pass) CommandGenerator XML Format Tests > XML Format Structure Validation > should properly escape parameter names in XML attributes
(pass) CommandGenerator XML Format Tests > XML Format Structure Validation > should generate different value hints for required vs optional parameters
(pass) CommandGenerator XML Format Tests > Command ID to MCP Name Conversion > should convert single dot correctly
(pass) CommandGenerator XML Format Tests > Command ID to MCP Name Conversion > should convert multiple dots correctly
(pass) CommandGenerator XML Format Tests > Command ID to MCP Name Conversion > should handle no dots correctly

src/domain/git/clone-operations.test.ts:
(pass) Clone Operations with Dependency Injection > Successful clone operations > should clone repository successfully [0.12ms]
(pass) Clone Operations with Dependency Injection > Successful clone operations > should handle clone with default target directory
(pass) Clone Operations with Dependency Injection > Successful clone operations > should support various repository URL formats [0.07ms]
(pass) Clone Operations with Dependency Injection > Clone error handling > should handle nonexistent repository
(pass) Clone Operations with Dependency Injection > Clone error handling > should handle local repository that doesn't exist
(pass) Clone Operations with Dependency Injection > DI architecture verification > should use dependency injection for git operations
(pass) Clone Operations with Dependency Injection > DI architecture verification > should provide consistent mocked behavior
(pass) Clone Operations with Dependency Injection > DI architecture verification > should demonstrate zero real git operations

src/domain/git/repository-operations.test.ts:
(pass) Repository Operations with Dependency Injection > should have commitWithDependencies method available
(pass) Repository Operations with Dependency Injection > should have stashChangesWithDependencies method available
(pass) Repository Operations with Dependency Injection > should have popStashWithDependencies method available
(pass) Repository Operations with Dependency Injection > should have mergeBranchWithDependencies method available
(pass) Repository Operations with Dependency Injection > should have stageAllWithDependencies method available
(pass) Repository Operations with Dependency Injection > should have stageModifiedWithDependencies method available
(pass) Repository Operations with Dependency Injection > should have pullLatestWithDependencies method available
(pass) Repository Operations with Dependency Injection > should have cloneWithDependencies method available [0.06ms]
(pass) Repository Operations with Dependency Injection > should create GitService with base directory

src/domain/git/conflict-detection.test.ts:
(pass) ConflictDetectionService with Phase 2 DI Enhancement Demonstration > Current Service Architecture Analysis > should demonstrate static service interface availability
(pass) ConflictDetectionService with Phase 2 DI Enhancement Demonstration > Current Service Architecture Analysis > should demonstrate service instantiation capability
(pass) ConflictDetectionService with Phase 2 DI Enhancement Demonstration > Current Service Architecture Analysis > should identify Phase 2 enhancement opportunities
(pass) ConflictDetectionService with Phase 2 DI Enhancement Demonstration > Phase 2 DI Enhancement Strategy Demonstration > should demonstrate enhanced service architecture concept
(pass) ConflictDetectionService with Phase 2 DI Enhancement Demonstration > Phase 2 DI Enhancement Strategy Demonstration > should demonstrate integration with existing DI infrastructure
(pass) ConflictDetectionService with Phase 2 DI Enhancement Demonstration > Phase 2 DI Enhancement Strategy Demonstration > should demonstrate testing benefits of Phase 2 enhancement [0.19ms]
(pass) ConflictDetectionService with Phase 2 DI Enhancement Demonstration > Phase 2 DI Enhancement Strategy Demonstration > should show Phase 2 implementation strategy [0.02ms]
(pass) ConflictDetectionService with Phase 2 DI Enhancement Demonstration > Integration Readiness Verification > should demonstrate comprehensive DI infrastructure readiness [0.02ms]
(pass) ConflictDetectionService with Phase 2 DI Enhancement Demonstration > Integration Readiness Verification > should show createPartialMock utility for Phase 2 enhancement
(pass) ConflictDetectionService with Phase 2 DI Enhancement Demonstration > Integration Readiness Verification > should demonstrate Phase 2 service integration potential
(pass) ConflictDetectionService with Phase 2 DI Enhancement Demonstration > Current Service Functionality > should instantiate service without errors [0.07ms]
(pass) ConflictDetectionService with Phase 2 DI Enhancement Demonstration > Current Service Functionality > should have expected ConflictType and ConflictSeverity enums

src/domain/git/git-service-core.test.ts:
(pass) GitService > should be able to work with mocked git service
(pass) GitService > should get repository status [0.08ms]
(pass) GitService > execInRepository should execute git commands in the specified repository
(pass) GitService > should return repository root path
(pass) GitService > should handle empty command responses
(pass) GitService > should have dependency injection variants available

src/domain/git/pr-branch-bug.test.ts:
(pass) PR Branch Double Prefix Bug > should demonstrate the double prefix bug
(pass) PR Branch Double Prefix Bug > should show correct behavior for session branches
(pass) PR Branch Double Prefix Bug > should reject PR creation from PR branches [0.49ms]

src/domain/git/parameter-based-functions.test.ts:
(pass) Parameter-Based Git Functions with Dependency Injection > Legacy functions (need architectural DI support) > should note that commitChangesFromParams needs service-level DI
(pass) Parameter-Based Git Functions with Dependency Injection > Legacy functions (need architectural DI support) > should note that pushFromParams needs service-level DI
(pass) Parameter-Based Git Functions with Dependency Injection > should use dependency injection for git operations
(pass) Parameter-Based Git Functions with Dependency Injection > should provide proper mock implementations
(pass) Parameter-Based Git Functions with Dependency Injection > should demonstrate zero real git operations
(pass) Parameter-Based Git Functions with Dependency Injection > should show improved test architecture with DI

src/domain/git/pr-branch-validation.test.ts:
(skip) PR Branch Validation Bug Fix > preparePrImpl > should reject PR creation when current branch is a PR branch
(skip) PR Branch Validation Bug Fix > preparePrImpl > should allow PR creation when current branch is a session branch
(skip) PR Branch Validation Bug Fix > preparePrImpl > should detect various PR branch naming patterns

src/domain/git/conflict-detection-working.test.ts:
(pass) ConflictDetectionService > analyzeBranchDivergence > should detect when session is ahead of base [0.17ms]
(pass) ConflictDetectionService > analyzeBranchDivergence > should detect when session changes are already in base [0.17ms]
(pass) ConflictDetectionService > analyzeBranchDivergence > should detect when session is behind base
(pass) ConflictDetectionService > analyzeBranchDivergence > should detect when branches have diverged
(pass) ConflictDetectionService > predictConflicts > should return no conflicts when already merged [0.24ms]

src/domain/git/push-operations.test.ts:
(pass) pushImpl > should be defined
(pass) pushImpl > should require dependencies [0.02ms]

src/domain/git/pr-workflow.test.ts:
(pass) PR Workflow Operations > should have prWithDependencies method available [0.09ms]
(pass) PR Workflow Operations > should have GitService constructor available [0.03ms]
(pass) PR Workflow Operations > should create GitService with base directory

src/domain/git/prepared-merge-commit-uncommitted-changes.test.ts:
(pass) Prepared Merge Commit Workflow - Uncommitted Changes Handling > should detect and stash uncommitted changes before checkout operations [0.73ms]
(pass) Prepared Merge Commit Workflow - Uncommitted Changes Handling > should skip stashing when no uncommitted changes exist
(pass) Prepared Merge Commit Workflow - Uncommitted Changes Handling > should restore stash even if workflow fails [0.97ms]
(pass) Prepared Merge Commit Workflow - Uncommitted Changes Handling > should handle stash failures gracefully [0.11ms]
(pass) Prepared Merge Commit Workflow - Uncommitted Changes Handling > should handle stash restoration failures gracefully [0.19ms]
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id C55E:2E9956:11DFD33:3ACC1EE:68A51B57 in 45ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id C562:1C9B4:E5B1AD:3452097:68A51B57 in 46ms

src/domain/git/commit-operations.test.ts:
(pass) commitChangesFromParams > should be defined [0.36ms]
(pass) commitChangesFromParams > should be a function [0.01ms]

src/domain/git/architecture-analysis.test.ts:
(pass) GitService - Core Methods with Dependency Injection > Architecture Analysis - Testing Limitations > should demonstrate the core testing challenge [0.22ms]

src/domain/git/session-workdir.test.ts:
(pass) GitService - Session Workdir Tests with Dependency Injection > DI Architecture Verification > should demonstrate DI infrastructure availability [0.14ms]
(pass) GitService - Session Workdir Tests with Dependency Injection > DI Architecture Verification > should show getSessionWorkdir works without external dependencies [0.04ms]
(pass) GitService - Session Workdir Tests with Dependency Injection > DI Architecture Verification > should demonstrate DI readiness for enhanced session operations [0.04ms]
(pass) GitService - Session Workdir Tests with Dependency Injection > getSessionWorkdir should return session-ID-based path
(pass) GitService - Session Workdir Tests with Dependency Injection > should use consistent session-ID-based storage format
(pass) GitService - Session Workdir Tests with Dependency Injection > should handle special characters in session IDs

src/domain/git/factory-function.test.ts:
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id C566:18A073:DF45FE:32C4450:68A51B57 in 49ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id C563:18A073:DF45FE:32C444F:68A51B57 in 50ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id C55D:47FB6:E8930C:34CB723:68A51B57 in 50ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id C567:ACAB4:D7ADE1:311F57A:68A51B57 in 50ms
GET /repos/test-owner/test-repo/labels/custom%3Ain-progress - 401 with id C565:442F0:D7ED94:3126F69:68A51B57 in 50ms
(pass) createGitService Factory Function > should handle undefined options parameter without throwing runtime error [0.07ms]
(pass) createGitService Factory Function > should handle null options parameter without throwing runtime error
(pass) createGitService Factory Function > should handle options with undefined baseDir property
(pass) createGitService Factory Function > should create GitService with custom baseDir when provided
(pass) createGitService Factory Function > should create GitService with default baseDir when no options provided

src/domain/git/multi-backend-integration.test.ts:
(pass) Git Operations Multi-Backend Integration > Prepare PR with qualified session names > should handle qualified session names (task-md#123) [0.44ms]
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id C561:3A4F7E:D59A87:30871EC:68A51B57 in 52ms
(pass) Git Operations Multi-Backend Integration > Prepare PR with qualified session names > should handle legacy session names (task123) [0.13ms]
(pass) Git Operations Multi-Backend Integration > Prepare PR with qualified session names > should handle legacy task# format (task#456) [0.08ms]
(pass) Git Operations Multi-Backend Integration > Prepare PR with qualified session names > should handle GitHub backend sessions (task-gh#789) [0.16ms]
(pass) Git Operations Multi-Backend Integration > Prepare PR with qualified session names > should handle custom sessions without task IDs [0.32ms]
(pass) Git Operations Multi-Backend Integration > Prepare PR with qualified session names > should not modify existing qualified session records [0.20ms]
(pass) Git Operations Multi-Backend Integration > Backward compatibility > should continue working with existing legacy session records [0.12ms]
(pass) Git Operations Multi-Backend Integration > Backward compatibility > should handle mixed session database (legacy + modern) [0.16ms]

src/domain/git/conflict-detection.integration.test.ts:
(pass) ConflictDetectionService Integration > should handle basic service instantiation and static methods [0.03ms]
(pass) ConflictDetectionService Integration > should have correct enum values defined [0.07ms]
(pass) ConflictDetectionService Integration > should provide proper interface structure for ConflictPrediction
(pass) ConflictDetectionService Integration > should provide proper interface structure for BranchDivergenceAnalysis
(pass) ConflictDetectionService Integration > should provide proper interface structure for enhanced results [0.08ms]
(pass) ConflictDetectionService Integration > should detect conflicts in real git repository [0.14ms]

src/domain/session/session-approve-bugfix-regression.test.ts:
(pass) Session Approve - Bug Regression Tests > Bug #1: Untracked Files Auto-Stash > should approve PR using repository backend [0.17ms]
(pass) Session Approve - Bug Regression Tests > Bug #1: Untracked Files Auto-Stash > should include -u flag in git stash command for untracked files
(pass) Session Approve - Bug Regression Tests > Bug #2: Fail-Fast on Merge Errors > should fail when repository backend approval fails [0.30ms]
(pass) Session Approve - Bug Regression Tests > Bug #2: Fail-Fast on Merge Errors > should handle already approved PR gracefully [0.08ms]
(pass) Session Approve - Bug Regression Tests > Bug #2: Fail-Fast on Merge Errors > should fail when session has no PR branch [0.04ms]

src/domain/session/session-context-resolver.test.ts:
45 |         session: "test-session",
46 |         sessionProvider: mockSessionProvider,
47 |         allowAutoDetection: false,
48 |       });
49 | 
50 |       expect(result).toEqual({
                          ^
error: expect(received).toEqual(expected)

  {
    resolvedBy: "explicit-session",
    sessionName: "test-session",
    taskId: "md#123",
+   workingDirectory: "/mock/projects/minsky",
-   workingDirectory: "/Users/edobry/.local/state/minsky/sessions/task-md#414",
  }

- Expected  - 1
+ Received  + 1

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/session/session-context-resolver.test.ts:50:22)
(fail) resolveSessionContext > explicit session resolution > resolves existing session by name
(pass) resolveSessionContext > explicit session resolution > throws error for non-existent session
72 |         task: "md#456",
73 |         sessionProvider: mockSessionProvider,
74 |         allowAutoDetection: false,
75 |       });
76 | 
77 |       expect(result).toEqual({
                          ^
error: expect(received).toEqual(expected)

  {
    resolvedBy: "explicit-task",
    sessionName: "task#456",
    taskId: "md#456",
+   workingDirectory: "/mock/projects/minsky",
-   workingDirectory: "/Users/edobry/.local/state/minsky/sessions/task-md#414",
  }

- Expected  - 1
+ Received  + 1

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task-md#414/src/domain/session/session-context-resolver.test.ts:77:22)
(fail) resolveSessionContext > task ID resolution > resolves session by task ID
(pass) resolveSessionContext > task ID resolution > throws error for non-existent task [0.53ms]
(pass) resolveSessionContext > no session provided > throws error when no session detected and auto-detection disabled [0.03ms]
(pass) resolveSessionContext > precedence > explicit session takes precedence over task
(pass) resolveSessionName > returns just the session name [0.10ms]
(pass) validateSessionContext > returns true for valid session [0.05ms]
(pass) validateSessionContext > returns false for invalid session [0.03ms]

src/domain/session/session-path-resolver.test.ts:
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id C55F:442F0:D7EDA6:3126F97:68A51B57 in 50ms
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should validate and resolve relative paths correctly
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should validate and resolve dot paths correctly
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should validate and resolve root path correctly
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should block path traversal attempts
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should block multiple path traversal attempts
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should handle absolute paths within session workspace
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should block absolute paths outside session workspace
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > getRelativePathFromSession > should return relative path from session root [0.02ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > getRelativePathFromSession > should return dot for session root
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > getRelativePathFromSession > should handle nested paths
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > createSafePath > should create safe path from components
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > createSafePath > should prevent unsafe path creation
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateMultiplePaths > should validate multiple valid paths
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateMultiplePaths > should throw error when any path is invalid
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > normalizeRelativePath > should normalize relative path correctly
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > normalizeRelativePath > should prevent directory traversal in relative paths
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > absoluteToRelative > should convert absolute path to relative
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > absoluteToRelative > should return null for paths outside session
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > absoluteToRelative > should return dot for session root

src/domain/session/session-adapter.test.ts:
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id C560:18AC9A:DBE679:31EEC8D:68A51B57 in 64ms
(pass) SessionAdapter with Dependency Injection > DI Architecture Verification > should demonstrate comprehensive session management with DI [0.03ms]
(pass) SessionAdapter with Dependency Injection > DI Architecture Verification > should show zero real filesystem operations in session testing [0.05ms]
(pass) SessionAdapter with Dependency Injection > DI Architecture Verification > should demonstrate integration readiness with other services
(pass) SessionAdapter with Dependency Injection > should initialize with empty sessions
(pass) SessionAdapter with Dependency Injection > should add and retrieve a session
(pass) SessionAdapter with Dependency Injection > should retrieve a session by task ID [0.04ms]
(pass) SessionAdapter with Dependency Injection > should update a session [0.05ms]
(pass) SessionAdapter with Dependency Injection > should delete a session
(pass) SessionAdapter with Dependency Injection > should return false when deleting a non-existent session
(pass) SessionAdapter with Dependency Injection > should handle multiple sessions correctly

src/domain/session/session-approval-error-handling.test.ts:
(pass) Session Approval Error Handling (Task #358 Updated) > should handle missing session for task [1.23ms]
(pass) Session Approval Error Handling (Task #358 Updated) > should handle task without session using mocked sessionDB [0.12ms]
(pass) Session Approval Error Handling (Task #358 Updated) > should require session name or task ID
(pass) Session Approval Error Handling (Task #358 Updated) > should provide clear error message for missing session [0.21ms]

src/domain/session/session-database-basedir-bug.test.ts:
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id C55E:2E9956:11DFD80:3ACC2CF:68A51B57 in 45ms
GET /repos/test-owner/test-repo/labels/custom%3Ain-review - 401 with id C567:ACAB4:D7AE0C:311F64D:68A51B57 in 42ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id C565:442F0:D7EDCE:3127024:68A51B57 in 42ms
(pass) Session Database BaseDir Bug > should fail with posix_spawn error when session database has incorrect baseDir [2.15ms]
(pass) Session Database BaseDir Bug > should succeed when session database has correct baseDir [0.54ms]
(pass) Session Database BaseDir Bug > should demonstrate the path construction difference that causes the bug [0.09ms]
(pass) Session Database BaseDir Bug > should demonstrate the LocalGitBackend vs SessionDB path inconsistency [0.07ms]

src/domain/session/migration-command.test.ts:
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id C562:1C9B4:E5B1E0:3452183:68A51B57 in 52ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id C564:3FD927:DEB0F9:32A08F1:68A51B57 in 80ms
(pass) Session Migration Command > SessionMigrationService > analyzeMigrationNeeds > should correctly identify sessions needing migration [0.30ms]
(pass) Session Migration Command > SessionMigrationService > analyzeMigrationNeeds > should handle empty database [0.02ms]
(pass) Session Migration Command > SessionMigrationService > preview migration > should preview migration without making changes [0.44ms]
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id C55D:47FB6:E8933B:34CB7D4:68A51B57 in 49ms
(pass) Session Migration Command > SessionMigrationService > preview migration > should show detailed changes for each session [0.10ms]
(pass) Session Migration Command > SessionMigrationService > full migration > should migrate all legacy sessions [0.11ms]
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id C566:18A073:DF4628:32C450A:68A51B57 in 53ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id C563:18A073:DF4628:32C450B:68A51B57 in 56ms
(pass) Session Migration Command > SessionMigrationService > full migration > should handle batch processing [10.39ms]
(pass) Session Migration Command > SessionMigrationService > full migration > should create backup before migration [0.17ms]
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id C55F:442F0:D7EDDA:3127074:68A51B57 in 49ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id C561:3A4F7E:D59AB1:30872DB:68A51B57 in 58ms
(pass) Session Migration Command > SessionMigrationService > filtering > should filter by task backend [0.14ms]
(pass) Session Migration Command > SessionMigrationService > filtering > should filter by date [0.08ms]
(pass) Session Migration Command > SessionMigrationService > filtering > should filter by session name pattern [0.11ms]
(pass) Session Migration Command > SessionMigrationService > error handling > should handle migration errors gracefully
(pass) Session Migration Command > SessionMigrationService > error handling > should handle database update failures [0.28ms]
Would restore from backup: backup-123.json
(pass) Session Migration Command > SessionMigrationService > rollback functionality > should support rollback [0.04ms]
(pass) Session Migration Command > SessionMigrationService > edge cases > should handle sessions with no task ID
(pass) Session Migration Command > SessionMigrationService > edge cases > should handle empty filter results [0.12ms]

src/domain/session/session-approve-task-status-commit.test.ts:
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id C560:18AC9A:DBE6BA:31EED5C:68A51B57 in 49ms
(pass) Session Approve Task Status Commit > should commit task status update after successful merge [0.29ms]
(pass) Session Approve Task Status Commit > should handle case where no task status update is needed
(pass) Session Approve Task Status Commit > should skip task status update when task is already DONE [0.37ms]
(pass) Session Approve Task Status Commit > should exit early when task is DONE and PR branch doesn't exist (bug reproduction) [0.12ms]

src/domain/session/session-pr-workflow-bug.test.ts:
(pass) Session PR Workflow Architectural Bug > sessionPr function > should use session PR operations layer (not bypass to git layer) [1.42ms]
(pass) Session PR Workflow Architectural Bug > sessionPr function > should now use session operations layer (architectural fix verified) [0.27ms]
(pass) Session PR Workflow Architectural Bug > sessionPr function > should demonstrate the correct session workflow layers

src/domain/session/session-auto-detection-integration.test.ts:
(pass) Session Command Domain Logic > sessionGet domain logic > resolves session by explicit name [0.22ms]
(pass) Session Command Domain Logic > sessionGet domain logic > resolves session by explicit task ID
(pass) Session Command Domain Logic > sessionGet domain logic > throws ResourceNotFoundError for non-existent session
(pass) Session Command Domain Logic > sessionGet domain logic > throws ResourceNotFoundError for non-existent task
(pass) Session Command Domain Logic > sessionDelete domain logic > deletes session by explicit name
(pass) Session Command Domain Logic > sessionDelete domain logic > deletes session by explicit task ID
Session cleanup failed, falling back to database-only deletion: ResourceNotFoundError: Session 'non-existent' not found
(pass) Session Command Domain Logic > sessionDelete domain logic > throws ResourceNotFoundError for non-existent session
(pass) Session Command Domain Logic > domain logic consistency > all commands resolve the same session by task ID [0.19ms]
(pass) Session Command Domain Logic > domain logic consistency > all commands provide consistent error messages for missing sessions [0.03ms]
(pass) Session Command Domain Logic > pure function behavior > session provider mock is used directly without global state
(pass) Session Command Domain Logic > pure function behavior > session resolution is deterministic with same inputs [0.13ms]

src/domain/session/session-start-task-id-bug.test.ts:
getNextTaskId result: 372
Expected next ID: 372
(pass) Task ID Generation Bug Reproduction > should demonstrate correct ID generation with getNextTaskId function
Buggy approach (tasks.length + 1): 2
Should be: 372
(pass) Task ID Generation Bug Reproduction > should demonstrate the BUG in JsonFileTaskBackend ID generation
Correct approach (max ID + 1): 372
Buggy approach (array.length + 1): 4
(pass) Task ID Generation Bug Reproduction > should show the difference between correct and buggy approaches [0.17ms]
(pass) Task ID Generation Bug Reproduction > should show that getNextTaskId handles qualified IDs correctly

src/domain/session/session-merge-security-validation.test.ts:
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id C55E:2E9956:11DFDBF:3ACC3DB:68A51B57 in 87ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id C565:442F0:D7EDFD:31270CA:68A51B57 in 85ms
GET /repos/test-owner/test-repo/labels/custom%3Adone - 401 with id C567:ACAB4:D7AE38:311F6E4:68A51B57 in 85ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id C562:1C9B4:E5B20B:3452263:68A51B57 in 80ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id C564:3FD927:DEB144:32A0A19:68A51B57 in 80ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id C55D:47FB6:E89386:34CB8B3:68A51B57 in 79ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id C566:18A073:DF4662:32C45D3:68A51B57 in 75ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id C563:18A073:DF4665:32C45DD:68A51B57 in 72ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id C55F:442F0:D7EE0E:3127107:68A51B57 in 68ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id C561:3A4F7E:D59AE4:30873C9:68A51B57 in 68ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id C560:18AC9A:DBE6EB:31EEE3E:68A51B57 in 65ms
(pass) Session Merge Security Validation > validateSessionApprovedForMerge > should REJECT merge when prBranch is missing [1.66ms]
(pass) Session Merge Security Validation > validateSessionApprovedForMerge > should REJECT merge when prApproved is false
(pass) Session Merge Security Validation > validateSessionApprovedForMerge > should REJECT merge when prApproved is undefined
(pass) Session Merge Security Validation > validateSessionApprovedForMerge > should REJECT merge when prApproved is truthy but not boolean true
(pass) Session Merge Security Validation > validateSessionApprovedForMerge > should ALLOW merge only when both prBranch and prApproved are properly set [0.23ms]
(pass) Session Merge Security Validation > mergeSessionPr - End-to-End Security Validation > should REJECT merge operation for unapproved session [0.90ms]
(pass) Session Merge Security Validation > mergeSessionPr - End-to-End Security Validation > should REJECT merge operation for session with no PR branch [0.09ms]
(pass) Session Merge Security Validation > mergeSessionPr - End-to-End Security Validation > should ALLOW merge operation only for properly approved sessions [1.73ms]
(pass) Session Merge Security Validation > Security Edge Cases > should handle malicious approval state manipulation
(pass) Session Merge Security Validation > Security Edge Cases > should handle null and undefined edge cases

src/domain/session/pr-validation.test.ts:
(pass) PR Validation Utilities > validatePrContent > should validate normal PR content without issues [0.85ms]
(pass) PR Validation Utilities > validatePrContent > should detect and remove title duplication in body
(pass) PR Validation Utilities > validatePrContent > should reject empty title
(pass) PR Validation Utilities > validatePrContent > should handle empty body gracefully
(pass) PR Validation Utilities > isDuplicateContent > should detect identical content [0.22ms]
(pass) PR Validation Utilities > isDuplicateContent > should detect content with different whitespace
(pass) PR Validation Utilities > isDuplicateContent > should detect content with different case
(pass) PR Validation Utilities > isDuplicateContent > should not match different content
(pass) PR Validation Utilities > isDuplicateContent > should handle empty strings
(pass) PR Validation Utilities > sanitizePrBody > should remove lines that duplicate the title [0.14ms]
(pass) PR Validation Utilities > sanitizePrBody > should preserve non-duplicate content [0.01ms]
(pass) PR Validation Utilities > sanitizePrBody > should handle empty body
(pass) PR Validation Utilities > preparePrContent > should prepare normal content without changes [0.01ms]
(pass) PR Validation Utilities > preparePrContent > should sanitize content with duplication and provide warnings [0.03ms]
(pass) PR Validation Utilities > preparePrContent > should throw error for empty title [0.01ms]
(pass) PR Validation Utilities > preparePrContent > should handle undefined body

src/domain/session/session-approve-operations.test.ts:
(pass) Session Approval Repository Backend Bug > should use session's stored repository configuration instead of re-detecting backend type [0.31ms]
(pass) Session Approval Repository Backend Bug > should respect session's GitHub backend configuration when explicitly set

src/domain/session/session-db.test.ts:
(pass) SessionDB Functional Implementation > initializeSessionDbState > should initialize state with default values [0.69ms]
(pass) SessionDB Functional Implementation > initializeSessionDbState > should initialize state with custom baseDir
(pass) SessionDB Functional Implementation > initializeSessionDbState > should handle undefined options parameter without throwing runtime error [0.05ms]
(pass) SessionDB Functional Implementation > initializeSessionDbState > should handle null options parameter without throwing runtime error
(pass) SessionDB Functional Implementation > initializeSessionDbState > should handle options with undefined baseDir property
(pass) SessionDB Functional Implementation > listSessionsFn > should return all sessions
(pass) SessionDB Functional Implementation > getSessionFn > should return the session by name [0.12ms]
(pass) SessionDB Functional Implementation > getSessionFn > should return null if session not found
(pass) SessionDB Functional Implementation > getSessionByTaskIdFn > should return the session by task ID [0.02ms]
(pass) SessionDB Functional Implementation > getSessionByTaskIdFn > should return the session when task ID includes # [0.01ms]
(pass) SessionDB Functional Implementation > getSessionByTaskIdFn > should return null if no session exists for the task ID
(pass) SessionDB Functional Implementation > addSessionFn > should add a new session to the state [0.03ms]
(pass) SessionDB Functional Implementation > updateSessionFn > should update an existing session [0.04ms]
(pass) SessionDB Functional Implementation > updateSessionFn > should not modify state if session not found
(pass) SessionDB Functional Implementation > updateSessionFn > should ignore session property in updates
(pass) SessionDB Functional Implementation > deleteSessionFn > should delete an existing session [0.09ms]
(pass) SessionDB Functional Implementation > deleteSessionFn > should not modify state if session not found
(pass) SessionDB Functional Implementation > getRepoPathFn > should return the repository path for a session record
(pass) SessionDB Functional Implementation > getRepoPathFn > should handle session records with repoPath already set
(pass) SessionDB Functional Implementation > getRepoPathFn > should throw error for invalid input
(pass) SessionDB Functional Implementation > getSessionWorkdirFn > should return the working directory for a session
(pass) SessionDB Functional Implementation > getSessionWorkdirFn > should return null if session not found

src/domain/session/multi-backend-integration.test.ts:
(pass) Session Multi-Backend Integration > SessionMultiBackendIntegration > generateSessionName > should generate session names for qualified task IDs
(pass) Session Multi-Backend Integration > SessionMultiBackendIntegration > generateSessionName > should throw for invalid or legacy IDs [0.03ms]
(pass) Session Multi-Backend Integration > SessionMultiBackendIntegration > generateSessionName > should throw for empty task ID
(pass) Session Multi-Backend Integration > SessionMultiBackendIntegration > extractTaskIdFromSessionName > should extract qualified task IDs from new format session names
(pass) Session Multi-Backend Integration > SessionMultiBackendIntegration > extractTaskIdFromSessionName > should return null for legacy session names
(pass) Session Multi-Backend Integration > SessionMultiBackendIntegration > extractTaskIdFromSessionName > should return null for invalid session names
(pass) Session Multi-Backend Integration > SessionMultiBackendIntegration > extractTaskIdFromSessionName > should handle complex local IDs [0.10ms]
(pass) Session Multi-Backend Integration > SessionMultiBackendIntegration > enhanceSessionRecord > should enhance records with qualified task IDs
(pass) Session Multi-Backend Integration > SessionMultiBackendIntegration > enhanceSessionRecord > should passthrough legacy records without enrichment
(pass) Session Multi-Backend Integration > SessionMultiBackendIntegration > enhanceSessionRecord > should handle records without task IDs
(pass) Session Multi-Backend Integration > SessionMultiBackendIntegration > enhanceSessionRecord > should handle different backend types
(pass) Session Multi-Backend Integration > SessionMultiBackendIntegration > isMultiBackendSessionName > should identify new format session names [0.07ms]
(pass) Session Multi-Backend Integration > SessionMultiBackendIntegration > isMultiBackendSessionName > should identify legacy format session names [0.01ms]
(pass) Session Multi-Backend Integration > SessionMultiBackendIntegration > validateSessionTaskCompatibility > should validate compatible session names and task IDs [0.02ms]
(pass) Session Multi-Backend Integration > SessionMultiBackendIntegration > validateSessionTaskCompatibility > should detect incompatible session names and task IDs
(pass) Session Multi-Backend Integration > SessionMultiBackendIntegration > getTaskBackend > should extract backend from enhanced records
(pass) Session Multi-Backend Integration > SessionMultiBackendIntegration > getTaskBackend > should extract backend from qualified task IDs
(pass) Session Multi-Backend Integration > SessionMultiBackendIntegration > getTaskBackend > should default to markdown for legacy records
(pass) Session Multi-Backend Integration > SessionMultiBackendIntegration > getTaskBackend > should return null for records without task IDs
(pass) Session Multi-Backend Integration > Integration scenarios > should handle round-trip session creation and extraction [0.06ms]

src/domain/session/session-start-operations.test.ts:
(pass) startSessionImpl - backendType > sets backendType=github for GitHub URLs [1.63ms]
(pass) startSessionImpl - backendType > sets backendType=local for local paths [0.11ms]

src/domain/session/session-db-io.test.ts:
(pass) Session DB I/O Functions > readSessionDbFile > should read existing session database file
(pass) Session DB I/O Functions > readSessionDbFile > should return empty array for non-existent file
(pass) Session DB I/O Functions > readSessionDbFile > should handle invalid JSON gracefully [0.29ms]
(pass) Session DB I/O Functions > readSessionDbFile > should handle empty file
(pass) Session DB I/O Functions > writeSessionDbFile > should write session data to file [0.05ms]
(pass) Session DB I/O Functions > writeSessionDbFile > should create directory if it doesn't exist [0.07ms]
(pass) Session DB I/O Functions > writeSessionDbFile > should overwrite existing file [0.03ms]
(pass) Session DB I/O Functions > writeSessionDbFile > should handle empty array

src/domain/session/session-pr-approval-bug.test.ts:
(pass) Session PR Approval Bug > CRITICAL: should retrieve existing session from database
(pass) Session PR Approval Bug > should retrieve prBranch field after it was persisted
(pass) Session PR Approval Bug > should allow PR approval when prBranch exists
(pass) Session PR Approval Bug > should fail approval validation when prBranch is missing

src/domain/session/session-pr-body-validation.test.ts:
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id C565:442F0:D7EE49:312722F:68A51B57 in 43ms
(pass) Session PR Body Validation Bug Fix > should throw ValidationError for new PR without body [3.30ms]

src/adapters/shared/commands/rules.test.ts:
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id C563:18A073:DF46B2:32C46CE:68A51B57 in 48ms
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id C562:1C9B4:E5B276:345239B:68A51B57 in 48ms
(pass) Rules Commands > rules.generate > should be registered in command registry [0.05ms]
(pass) Rules Commands > rules.generate > should generate rules with default CLI configuration [0.31ms]
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id C566:18A073:DF46B2:32C46CF:68A51B57 in 49ms
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id C561:3A4F7E:D59B1F:30874D7:68A51B57 in 49ms
(pass) Rules Commands > rules.generate > should generate rules with MCP configuration
(pass) Rules Commands > rules.generate > should generate rules with hybrid configuration
(pass) Rules Commands > rules.generate > should handle specific rule selection [0.04ms]
(pass) Rules Commands > rules.generate > should support dry run mode
(pass) Rules Commands > rules.generate > should support custom output directory
(pass) Rules Commands > rules.generate > should handle errors gracefully
(pass) Rules Commands > rules.generate > should validate parameter schemas [0.01ms]
(pass) Rules Commands > rules.list > should be registered in command registry
(pass) Rules Commands > rules.list > should exclude content field from returned rules
(pass) Rules Commands > rules.list > should pass through filtering parameters to domain service

src/adapters/shared/commands/session-context-resolution.test.ts:
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id C55D:47FB6:E893D0:34CB9C3:68A51B57 in 52ms
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id C560:18AC9A:DBE732:31EEF16:68A51B57 in 53ms
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id C55F:442F0:D7EE4C:3127241:68A51B57 in 53ms
(pass) Session Context Resolution Architecture Issues > 🚩 PROBLEM: Mixed Concerns in Domain Layer > should NOT require different validation logic based on working directory
(pass) Session Context Resolution Architecture Issues > 🚩 PROBLEM: Mixed Concerns in Domain Layer > should NOT have different behavior based on working directory context [0.29ms]
(pass) Session Context Resolution Architecture Issues > ✅ TARGET: Clean Architecture with Interface-Layer Resolution > should ALWAYS require session parameter in domain layer [0.09ms]
(pass) Session Context Resolution Architecture Issues > ✅ TARGET: Clean Architecture with Interface-Layer Resolution > should handle session resolution in interface adapters [0.10ms]

src/domain/configuration/schemas/ai.test.ts:
(pass) AI Configuration Schema - Unknown Field Handling > should handle unknown AI providers gracefully [0.21ms]
(pass) AI Configuration Schema - Unknown Field Handling > should not warn when all fields are known
(pass) AI Configuration Schema - Unknown Field Handling > should handle unknown fields in individual providers
(pass) AI Configuration Schema - Unknown Field Handling > should validate known fields correctly [0.18ms]
(pass) AI Configuration Schema - Unknown Field Handling > should handle complete AI config with unknown providers [0.03ms]

src/domain/git/commands/simple-function.test.ts:
(pass) Git Commands Function Tests > should be able to define simple git command functions [1.17ms]
(pass) Git Commands Function Tests > should be able to call git command functions [0.03ms]

src/domain/git/commands/integration.test.ts:
(pass) Git Commands Integration Tests with Dependency Injection > Git Service Integration > should integrate clone operation with session management
(pass) Git Commands Integration Tests with Dependency Injection > Git Service Integration > should handle clone errors gracefully [0.29ms]
(pass) Git Commands Integration Tests with Dependency Injection > Branch Operations Integration > should verify branch operation interface availability
(pass) Git Commands Integration Tests with Dependency Injection > Command Execution Integration > should integrate commit operations with git execution
(pass) Git Commands Integration Tests with Dependency Injection > Command Execution Integration > should integrate push operations with session state
(pass) Git Commands Integration Tests with Dependency Injection > DI Integration Architecture Verification > should demonstrate comprehensive dependency integration
(pass) Git Commands Integration Tests with Dependency Injection > DI Integration Architecture Verification > should show zero real git operations in integration testing
(pass) Git Commands Integration Tests with Dependency Injection > DI Integration Architecture Verification > should demonstrate integration testing benefits with DI
(pass) Git Commands Integration Tests with Dependency Injection > Phase 2 Enhancement Demonstration > should demonstrate DI readiness for command function enhancement
(pass) Git Commands Integration Tests with Dependency Injection > Phase 2 Enhancement Demonstration > should show established DI patterns scale to integration scenarios

src/domain/git/commands/basic-imports.test.ts:
(pass) Git Commands Import Tests > should be able to import git command index [1.18ms]
(pass) Git Commands Import Tests > should be able to import git types [0.35ms]
(pass) Git Commands Import Tests > should be able to import individual command files [0.07ms]
(pass) Git Commands Import Tests > should be able to import subcommands [0.95ms]

src/adapters/shared/commands/session/pr-subcommand-commands.edit-validation.test.ts:
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id C564:3FD927:DEB19B:32A0B38:68A51B57 in 63ms
(pass) SessionPrEditCommand - title/type validation > throws when --title is description-only without --type [1.43ms]
Debug: hasLocalPr=undefined, hasGitHubPr=undefined, backendType=undefined
(pass) SessionPrEditCommand - title/type validation > accepts description-only title when --type provided (composed) [0.82ms]
Debug: hasLocalPr=undefined, hasGitHubPr=undefined, backendType=undefined
(pass) SessionPrEditCommand - title/type validation > accepts full conventional commit title without --type

src/adapters/shared/commands/session/pr-subcommand-title-type-validation.test.ts:
(pass) Session PR Create - type/title validation > should require --type and throw if missing [1.44ms]
(pass) Session PR Create - type/title validation > should reject titles that already include conventional prefix
(pass) Session PR Create - type/title validation > should generate 'type(taskId): title' when valid

src/adapters/shared/commands/session/pr-subcommand-commands.test.ts:
(pass) Session PR Create Command - Task Parameter Bug Fix > 🐛 Bug: PR Detection with Task Parameter > should detect existing PR when using --task parameter instead of --name [0.10ms]
(pass) Session PR Create Command - Task Parameter Bug Fix > 🐛 Bug: PR Detection with Task Parameter > should still require body for truly new PRs (regression check) [0.35ms]
(pass) Session PR Create Command - Task Parameter Bug Fix > 🔍 Current Implementation Analysis > should show how checkIfPrCanBeRefreshed currently fails with task parameter [0.60ms]

6 tests skipped:
(skip) filesystem operations test > should detect filesystem operations
(skip) filesystem operations test > should detect dynamic imports
(skip) filesystem operations test > should detect process.cwd usage
(skip) PR Branch Validation Bug Fix > preparePrImpl > should reject PR creation when current branch is a PR branch
(skip) PR Branch Validation Bug Fix > preparePrImpl > should allow PR creation when current branch is a session branch
(skip) PR Branch Validation Bug Fix > preparePrImpl > should detect various PR branch naming patterns


2 tests failed:
(fail) resolveSessionContext > explicit session resolution > resolves existing session by name
(fail) resolveSessionContext > task ID resolution > resolves session by task ID

 1261 pass
 6 skip
 2 fail
 3513 expect() calls
Ran 1269 tests across 141 files. [1003.00ms]
