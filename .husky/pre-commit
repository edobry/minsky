#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "🔒 SECURITY: Scanning for secrets (CRITICAL - MUST RUN FIRST)..."

# SECURITY: Secret scanning with enhanced gitleaks configuration
echo "🔍 Running enhanced gitleaks scan (includes database credentials)..."
if command -v gitleaks >/dev/null 2>&1; then
    if ! gitleaks protect --staged --source . --config .gitleaks.toml --verbose; then
        echo "❌ 🚨 SECRETS DETECTED BY GITLEAKS! Commit blocked for security."
        echo "📋 Review the findings above and sanitize any real credentials."
        echo "💡 Database URLs: Use placeholder values (avoid real credentials)"
        echo "💡 API Keys: Use placeholder values like 'sk-proj-xxx...xxxxx'"
        echo "💡 Real credentials detected in: PostgreSQL, MySQL, MongoDB, Redis URLs, or API keys"
        exit 1
    fi
    echo "✅ Gitleaks: No secrets detected in staged changes (enhanced scan complete)."
else
    echo "⚠️  gitleaks not found. Please install via:"
    echo "   macOS: brew install gitleaks"
    echo "   Linux: apt install gitleaks (or check: https://github.com/gitleaks/gitleaks)"
    echo "⚠️  Skipping secret scanning - SECURITY RISK!"
fi

echo "✅ SECURITY: Secret scanning completed."

echo "🔍 Checking for variable naming issues..."

# Run the variable naming checker
if ! bun run scripts/check-variable-naming.ts; then
  echo "❌ Variable naming issues found! Please fix them before committing."
  echo "💡 You can run 'bun run scripts/fix-variable-naming.ts' to auto-fix many issues."
  exit 1
fi

echo "✅ No variable naming issues found."

echo "🧪 MANDATORY: Running unit test suite..."

# Run the unit test suite (excluding integration tests) - ANY failure blocks the commit
echo "  → Executing unit tests with timeout (excluding integration tests)..."
if ! AGENT=1 bun test --preload ./tests/setup.ts --timeout=15000 --bail src tests/adapters tests/domain; then
  echo ""
  echo "❌ ❌ ❌ TESTS FAILED! COMMIT BLOCKED! ❌ ❌ ❌"
  echo ""
  echo "🚫 One or more tests are failing. Fix ALL test failures before committing."
  echo "💡 Run 'bun run test' locally to see detailed failure information."
  echo "🔧 Ensure your changes don't break existing functionality."
  echo ""
  echo "📋 Common fixes:"
  echo "   • Update test expectations if behavior intentionally changed"
  echo "   • Fix bugs in your code that break existing tests"
  echo "   • Add missing mocks or dependencies"
  echo "   • Check for import/export issues"
  echo ""
  exit 1
fi

echo "✅ All tests passing! Test suite validation completed."

echo "🔍 Checking for test anti-patterns..."

# NEW: Test Pattern Validation (Task #332 extension)
# Check for global mock.module() usage outside describe blocks
echo "  → Checking for global module mocks..."
STAGED_TEST_FILES=$(git diff --cached --name-only | grep -E '\.(test|spec)\.(ts|js)$' || true)
if [ -n "$STAGED_TEST_FILES" ]; then
  if echo "$STAGED_TEST_FILES" | xargs grep -l "mock\.module" 2>/dev/null | xargs grep -n "mock\.module" 2>/dev/null | grep -v "describe\|it\|test\|beforeEach\|afterEach" | grep -q "mock\.module"; then
    echo "⚠️  Global mock.module() usage detected outside test blocks!"
    echo "💡 Move mock.module() calls inside describe/it blocks or to test-utils."
    echo "$STAGED_TEST_FILES" | xargs grep -n "mock\.module" 2>/dev/null | grep -v "describe\|it\|test\|beforeEach\|afterEach" | head -5 || true
    echo "   (Showing first 5 matches - there may be more)"
    echo "   Continuing commit with WARNING..."
  fi
fi

# Check for unreliable factory mock patterns
echo "  → Checking for unreliable factory mock patterns..."
if [ -n "$STAGED_TEST_FILES" ]; then
  if echo "$STAGED_TEST_FILES" | xargs grep -l "createMockTaskService" 2>/dev/null | xargs grep -n "createMockTaskService.*async" 2>/dev/null | grep -q .; then
    echo "⚠️  Unreliable factory mock patterns detected!"
    echo "💡 Use explicit mock patterns with fixed return values instead of async factories."
    echo "$STAGED_TEST_FILES" | xargs grep -n "createMockTaskService.*async" 2>/dev/null | head -3 || true
    echo "   (Showing first 3 matches - there may be more)"
    echo "   Continuing commit with WARNING..."
  fi
fi

# Check for CLI execution in test files
echo "  → Checking for CLI execution in tests..."
if [ -n "$STAGED_TEST_FILES" ]; then
  if echo "$STAGED_TEST_FILES" | xargs grep -l "execAsync\|spawn" 2>/dev/null | xargs grep -n "execAsync.*cli\.ts\|spawn.*cli\.ts" 2>/dev/null | grep -q .; then
    echo "⚠️  CLI execution detected in test files!"
    echo "💡 Tests should call domain functions directly, not CLI interfaces."
    echo "$STAGED_TEST_FILES" | xargs grep -n "execAsync.*cli\.ts\|spawn.*cli\.ts" 2>/dev/null | head -3 || true
    echo "   (Showing first 3 matches - there may be more)"
    echo "   Continuing commit with WARNING..."
  fi
fi

echo "✅ Test pattern validation completed."

# Run code formatting (fixes many linting issues automatically)
echo "🎨 Running code formatter..."
if ! bun run format; then
  echo "❌ Code formatting failed! Please check for syntax errors."
  exit 1
fi
echo "✅ Code formatting completed."

# Check for console usage violations (prevents test noise pollution)
echo "🔇 Checking for console usage violations..."
if ! bun run lint:console:strict; then
  echo "❌ Console usage violations found! These cause test output pollution."
  echo "💡 Replace console.* calls with logger.* or mock logger utilities"
  echo "📖 See docs/testing/global-test-setup.md for guidance"
  exit 1
fi
echo "✅ No console usage violations found."

# Run linting (suppress warnings to reduce noise, only show errors)
echo "🔍 Running ESLint..."
if ! npm run lint -- --quiet; then
  echo "❌ Linting failed! Please fix the issues before committing."
  exit 1
fi

# Run ESLint rule tooling tests (separate from main test suite)
echo "🔧 Running ESLint rule tooling tests..."
if ! AGENT=1 bun test src/eslint-rules/fixtures-test.test.js --timeout=5000; then
  echo "❌ ESLint rule tooling tests failed! Please fix the fixture validation."
  exit 1
fi

echo "✅ All checks passed! Commit proceeding..."
