bun test v1.2.15 (df017990)

as-unknown-ast-fixer.test.ts:
🚀 Starting codemod execution...
📁 Adding source files...
Found 1 files to process
✅ Added 1 source files
🔍 Analyzing 'as unknown' assertions...
📊 Found 4 'as unknown' assertions
🔧 Applying 'as unknown' transformations...
📋 Found 4 auto-fixable issues
✅ Applied 4 transformations
💾 Saving changes...
✅ Saved 1 modified files

📊 Codemod Execution Report
==================================================
Files Processed: 1
Issues Found: 4
Issues Fixed: 4
Success Rate: 0.0%
Processing Time: 421ms

📊 AS-UNKNOWN TRANSFORMATION REPORT
=====================================
🎯 By Risk Level:
🔧 By Transformation Type:

🤖 Auto-fixable: 4
👁️  Manual review: 0

📈 Reduction Rate: 100.0%
✅ SUCCESS: Target reduction of 50%+ achieved!
(pass) AS-UNKNOWN AST Codemod > Critical Priority Transformations > should fix return statement null/undefined patterns [422.63ms]
🚀 Starting codemod execution...
📁 Adding source files...
Found 1 files to process
✅ Added 1 source files
🔍 Analyzing 'as unknown' assertions...
📊 Found 6 'as unknown' assertions
🔧 Applying 'as unknown' transformations...
📋 Found 6 auto-fixable issues
✅ Applied 6 transformations
💾 Saving changes...
✅ Saved 1 modified files

📊 Codemod Execution Report
==================================================
Files Processed: 1
Issues Found: 6
Issues Fixed: 6
Success Rate: 0.0%
Processing Time: 255ms

📊 AS-UNKNOWN TRANSFORMATION REPORT
=====================================
🎯 By Risk Level:
🔧 By Transformation Type:

🤖 Auto-fixable: 6
👁️  Manual review: 0

📈 Reduction Rate: 100.0%
✅ SUCCESS: Target reduction of 50%+ achieved!
(pass) AS-UNKNOWN AST Codemod > Critical Priority Transformations > should fix null/undefined assignment patterns [256.63ms]
🚀 Starting codemod execution...
📁 Adding source files...
Found 1 files to process
✅ Added 1 source files
🔍 Analyzing 'as unknown' assertions...
📊 Found 3 'as unknown' assertions
🔧 Applying 'as unknown' transformations...
📋 Found 3 auto-fixable issues
✅ Applied 3 transformations
💾 Saving changes...
✅ Saved 1 modified files

📊 Codemod Execution Report
==================================================
Files Processed: 1
Issues Found: 3
Issues Fixed: 3
Success Rate: 0.0%
Processing Time: 228ms

📊 AS-UNKNOWN TRANSFORMATION REPORT
=====================================
🎯 By Risk Level:
🔧 By Transformation Type:

🤖 Auto-fixable: 3
👁️  Manual review: 0

📈 Reduction Rate: 100.0%
✅ SUCCESS: Target reduction of 50%+ achieved!
(pass) AS-UNKNOWN AST Codemod > High Priority Transformations > should fix state/session property access [229.28ms]
🚀 Starting codemod execution...
📁 Adding source files...
Found 1 files to process
✅ Added 1 source files
🔍 Analyzing 'as unknown' assertions...
📊 Found 4 'as unknown' assertions
🔧 Applying 'as unknown' transformations...
📋 Found 4 auto-fixable issues
✅ Applied 4 transformations
💾 Saving changes...
✅ Saved 1 modified files

📊 Codemod Execution Report
==================================================
Files Processed: 1
Issues Found: 4
Issues Fixed: 4
Success Rate: 0.0%
Processing Time: 190ms

📊 AS-UNKNOWN TRANSFORMATION REPORT
=====================================
🎯 By Risk Level:
🔧 By Transformation Type:

🤖 Auto-fixable: 4
👁️  Manual review: 0

📈 Reduction Rate: 100.0%
✅ SUCCESS: Target reduction of 50%+ achieved!
(pass) AS-UNKNOWN AST Codemod > High Priority Transformations > should fix service method calls [191.21ms]
🚀 Starting codemod execution...
📁 Adding source files...
Found 1 files to process
✅ Added 1 source files
🔍 Analyzing 'as unknown' assertions...
📊 Found 10 'as unknown' assertions
🔧 Applying 'as unknown' transformations...
📋 Found 10 auto-fixable issues
✅ Applied 10 transformations
💾 Saving changes...
✅ Saved 1 modified files

📊 Codemod Execution Report
==================================================
Files Processed: 1
Issues Found: 10
Issues Fixed: 10
Success Rate: 0.0%
Processing Time: 205ms

📊 AS-UNKNOWN TRANSFORMATION REPORT
=====================================
🎯 By Risk Level:
🔧 By Transformation Type:

🤖 Auto-fixable: 10
👁️  Manual review: 0

📈 Reduction Rate: 100.0%
✅ SUCCESS: Target reduction of 50%+ achieved!
(pass) AS-UNKNOWN AST Codemod > High Priority Transformations > should fix array/object method access [207.60ms]
🚀 Starting codemod execution...
📁 Adding source files...
Found 1 files to process
✅ Added 1 source files
🔍 Analyzing 'as unknown' assertions...
📊 Found 2 'as unknown' assertions
🔧 Applying 'as unknown' transformations...
📋 Found 2 auto-fixable issues
✅ Applied 2 transformations
💾 Saving changes...
✅ Saved 1 modified files

📊 Codemod Execution Report
==================================================
Files Processed: 1
Issues Found: 2
Issues Fixed: 2
Success Rate: 0.0%
Processing Time: 201ms

📊 AS-UNKNOWN TRANSFORMATION REPORT
=====================================
🎯 By Risk Level:
🔧 By Transformation Type:

🤖 Auto-fixable: 2
👁️  Manual review: 0

📈 Reduction Rate: 100.0%
✅ SUCCESS: Target reduction of 50%+ achieved!
(pass) AS-UNKNOWN AST Codemod > High Priority Transformations > should fix this context access [201.29ms]
🚀 Starting codemod execution...
📁 Adding source files...
Found 1 files to process
✅ Added 1 source files
🔍 Analyzing 'as unknown' assertions...
📊 Found 3 'as unknown' assertions
🔧 Applying 'as unknown' transformations...
📋 Found 3 auto-fixable issues
✅ Applied 3 transformations
💾 Saving changes...
✅ Saved 1 modified files

📊 Codemod Execution Report
==================================================
Files Processed: 1
Issues Found: 3
Issues Fixed: 3
Success Rate: 0.0%
Processing Time: 186ms

📊 AS-UNKNOWN TRANSFORMATION REPORT
=====================================
🎯 By Risk Level:
🔧 By Transformation Type:

🤖 Auto-fixable: 3
👁️  Manual review: 0

📈 Reduction Rate: 100.0%
✅ SUCCESS: Target reduction of 50%+ achieved!
(pass) AS-UNKNOWN AST Codemod > Medium Priority Transformations > should fix environment variable access [187.60ms]
🚀 Starting codemod execution...
📁 Adding source files...
Found 1 files to process
✅ Added 1 source files
🔍 Analyzing 'as unknown' assertions...
📊 Found 8 'as unknown' assertions

📊 Codemod Execution Report
==================================================
Files Processed: 1
Issues Found: 8
Issues Fixed: 0
Success Rate: 0.0%
Processing Time: 177ms

📊 AS-UNKNOWN TRANSFORMATION REPORT
=====================================
🎯 By Risk Level:
🔧 By Transformation Type:

🤖 Auto-fixable: 8
👁️  Manual review: 0

📈 Reduction Rate: 0.0%
⚠️  Target reduction of 50%+ not yet achieved
(pass) AS-UNKNOWN AST Codemod > Pattern Detection and Risk Assessment > should correctly identify and categorize patterns [182.15ms]
🚀 Starting codemod execution...
📁 Adding source files...
Found 1 files to process
✅ Added 1 source files
🔍 Analyzing 'as unknown' assertions...
📊 Found 5 'as unknown' assertions
🔧 Applying 'as unknown' transformations...
📋 Found 5 auto-fixable issues
✅ Applied 5 transformations
💾 Saving changes...
✅ Saved 1 modified files

📊 Codemod Execution Report
==================================================
Files Processed: 1
Issues Found: 5
Issues Fixed: 5
Success Rate: 0.0%
Processing Time: 196ms

📊 AS-UNKNOWN TRANSFORMATION REPORT
=====================================
🎯 By Risk Level:
🔧 By Transformation Type:

🤖 Auto-fixable: 5
👁️  Manual review: 0

📈 Reduction Rate: 100.0%
✅ SUCCESS: Target reduction of 50%+ achieved!
(pass) AS-UNKNOWN AST Codemod > Pattern Detection and Risk Assessment > should handle complex nested expressions [197.17ms]
🚀 Starting codemod execution...
📁 Adding source files...
Found 1 files to process
✅ Added 1 source files
🔍 Analyzing 'as unknown' assertions...
📊 Found 1 'as unknown' assertions
🔧 Applying 'as unknown' transformations...
📋 Found 1 auto-fixable issues
✅ Applied 1 transformations
💾 Saving changes...
✅ Saved 1 modified files

📊 Codemod Execution Report
==================================================
Files Processed: 1
Issues Found: 1
Issues Fixed: 1
Success Rate: 0.0%
Processing Time: 211ms

📊 AS-UNKNOWN TRANSFORMATION REPORT
=====================================
🎯 By Risk Level:
🔧 By Transformation Type:

🤖 Auto-fixable: 1
👁️  Manual review: 0

📈 Reduction Rate: 100.0%
✅ SUCCESS: Target reduction of 50%+ achieved!
(pass) AS-UNKNOWN AST Codemod > Edge Cases and Error Handling > should handle files with syntax errors gracefully [211.27ms]
🚀 Starting codemod execution...
📁 Adding source files...
Found 1 files to process
✅ Added 1 source files
🔍 Analyzing 'as unknown' assertions...
📊 Found 0 'as unknown' assertions
🔧 Applying 'as unknown' transformations...
📋 Found 0 auto-fixable issues
✅ Applied 0 transformations
💾 Saving changes...
✅ Saved 0 modified files

📊 Codemod Execution Report
==================================================
Files Processed: 1
Issues Found: 0
Issues Fixed: 0
Success Rate: 0.0%
Processing Time: 1ms

📊 AS-UNKNOWN TRANSFORMATION REPORT
=====================================
🎯 By Risk Level:
🔧 By Transformation Type:

🤖 Auto-fixable: 0
👁️  Manual review: 0

📈 Reduction Rate: NaN%
⚠️  Target reduction of 50%+ not yet achieved
(pass) AS-UNKNOWN AST Codemod > Edge Cases and Error Handling > should handle empty files [2.30ms]
🚀 Starting codemod execution...
📁 Adding source files...
Found 1 files to process
✅ Added 1 source files
🔍 Analyzing 'as unknown' assertions...
📊 Found 0 'as unknown' assertions
🔧 Applying 'as unknown' transformations...
📋 Found 0 auto-fixable issues
✅ Applied 0 transformations
💾 Saving changes...
✅ Saved 0 modified files

📊 Codemod Execution Report
==================================================
Files Processed: 1
Issues Found: 0
Issues Fixed: 0
Success Rate: 0.0%
Processing Time: 2ms

📊 AS-UNKNOWN TRANSFORMATION REPORT
=====================================
🎯 By Risk Level:
🔧 By Transformation Type:

🤖 Auto-fixable: 0
👁️  Manual review: 0

📈 Reduction Rate: NaN%
⚠️  Target reduction of 50%+ not yet achieved
(pass) AS-UNKNOWN AST Codemod > Edge Cases and Error Handling > should handle files with no as unknown patterns [1.81ms]
🚀 Starting codemod execution...
📁 Adding source files...
Found 1 files to process
✅ Added 1 source files
🔍 Analyzing 'as unknown' assertions...
📊 Found 1 'as unknown' assertions
🔧 Applying 'as unknown' transformations...
📋 Found 1 auto-fixable issues
✅ Applied 1 transformations
💾 Saving changes...
✅ Saved 1 modified files

📊 Codemod Execution Report
==================================================
Files Processed: 1
Issues Found: 1
Issues Fixed: 1
Success Rate: 0.0%
Processing Time: 205ms

📊 AS-UNKNOWN TRANSFORMATION REPORT
=====================================
🎯 By Risk Level:
🔧 By Transformation Type:

🤖 Auto-fixable: 1
👁️  Manual review: 0

📈 Reduction Rate: 100.0%
✅ SUCCESS: Target reduction of 50%+ achieved!
(pass) AS-UNKNOWN AST Codemod > Edge Cases and Error Handling > should preserve code formatting and comments [205.80ms]
🚀 Starting codemod execution...
📁 Adding source files...
Found 1 files to process
✅ Added 1 source files
🔍 Analyzing 'as unknown' assertions...
📊 Found 1 'as unknown' assertions

📊 Codemod Execution Report
==================================================
Files Processed: 1
Issues Found: 1
Issues Fixed: 0
Success Rate: 0.0%
Processing Time: 208ms

📊 AS-UNKNOWN TRANSFORMATION REPORT
=====================================
🎯 By Risk Level:
🔧 By Transformation Type:

🤖 Auto-fixable: 1
👁️  Manual review: 0

📈 Reduction Rate: 0.0%
⚠️  Target reduction of 50%+ not yet achieved
(pass) AS-UNKNOWN AST Codemod > Dry Run Mode > should not modify files in dry run mode [208.77ms]
🚀 Starting codemod execution...
📁 Adding source files...
Found 1 files to process
✅ Added 1 source files
🔍 Analyzing 'as unknown' assertions...
📊 Found 5 'as unknown' assertions
🔧 Applying 'as unknown' transformations...
📋 Found 5 auto-fixable issues
✅ Applied 5 transformations
💾 Saving changes...
✅ Saved 1 modified files

📊 Codemod Execution Report
==================================================
Files Processed: 1
Issues Found: 5
Issues Fixed: 5
Success Rate: 0.0%
Processing Time: 206ms

📊 AS-UNKNOWN TRANSFORMATION REPORT
=====================================
🎯 By Risk Level:
🔧 By Transformation Type:

🤖 Auto-fixable: 5
👁️  Manual review: 0

📈 Reduction Rate: 100.0%
✅ SUCCESS: Target reduction of 50%+ achieved!
(pass) AS-UNKNOWN AST Codemod > Metrics and Reporting > should provide accurate metrics [205.95ms]
🚀 Starting codemod execution...
📁 Adding source files...
Found 1 files to process
✅ Added 1 source files
🔍 Analyzing 'as unknown' assertions...
📊 Found 3 'as unknown' assertions
🔧 Applying 'as unknown' transformations...
📋 Found 3 auto-fixable issues
✅ Applied 3 transformations
💾 Saving changes...
✅ Saved 1 modified files

📊 Codemod Execution Report
==================================================
Files Processed: 1
Issues Found: 3
Issues Fixed: 3
Success Rate: 0.0%
Processing Time: 199ms

📊 AS-UNKNOWN TRANSFORMATION REPORT
=====================================
🎯 By Risk Level:
🔧 By Transformation Type:

🤖 Auto-fixable: 3
👁️  Manual review: 0

📈 Reduction Rate: 100.0%
✅ SUCCESS: Target reduction of 50%+ achieved!
(pass) AS-UNKNOWN AST Codemod > Metrics and Reporting > should calculate success rate correctly [199.39ms]
🚀 Starting codemod execution...
📁 Adding source files...
Found 1 files to process
✅ Added 1 source files
🔍 Analyzing 'as unknown' assertions...
📊 Found 2 'as unknown' assertions
🔧 Applying 'as unknown' transformations...
📋 Found 2 auto-fixable issues
✅ Applied 2 transformations
💾 Saving changes...
✅ Saved 1 modified files

📊 Codemod Execution Report
==================================================
Files Processed: 1
Issues Found: 2
Issues Fixed: 2
Success Rate: 0.0%
Processing Time: 205ms

📊 AS-UNKNOWN TRANSFORMATION REPORT
=====================================
🎯 By Risk Level:
🔧 By Transformation Type:

🤖 Auto-fixable: 2
👁️  Manual review: 0

📈 Reduction Rate: 100.0%
✅ SUCCESS: Target reduction of 50%+ achieved!
(pass) AS-UNKNOWN AST Codemod > Integration with TypeScript > should maintain valid TypeScript syntax after transformation [205.79ms]

test-verification/quoting.test.ts:
(pass) Rule description quoting fix > createRule should use double quotes for descriptions with special characters [2.19ms]
(pass) Rule description quoting fix > updateRule should use double quotes for descriptions with special characters [1.89ms]
(pass) Rule description quoting fix > createRule should not add quotes to simple descriptions [0.33ms]

codemods/fix-import-extensions.test.ts:
🚀 Starting import extension fixer...
📁 Found 1 files to process
💾 Saving changes...
✅ Saved 1 files

📊 Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 3
Export statements fixed: 0
Total transformations: 3
Processing time: 8ms
Success rate: 100.0%

🔧 Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1752792542306-3oz232kn5/src/test.ts: 3 imports

✅ Import extension fixing completed!
(pass) ImportExtensionFixer > Unit Tests - Individual Transformations > should remove .js extension from local imports [9.16ms]
🚀 Starting import extension fixer...
📁 Found 1 files to process
💾 Saving changes...
✅ Saved 1 files

📊 Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 2
Export statements fixed: 0
Total transformations: 2
Processing time: 2ms
Success rate: 100.0%

🔧 Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1752792542319-rvyqmtdmf/src/test.ts: 2 imports

✅ Import extension fixing completed!
(pass) ImportExtensionFixer > Unit Tests - Individual Transformations > should remove .ts extension from local imports [2.30ms]
🚀 Starting import extension fixer...
📁 Found 1 files to process
💾 Saving changes...
✅ Saved 1 files

📊 Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 0
Export statements fixed: 3
Total transformations: 3
Processing time: 2ms
Success rate: 100.0%

🔧 Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1752792542323-09zl46w8j/src/test.ts: 3 exports

✅ Import extension fixing completed!
(pass) ImportExtensionFixer > Unit Tests - Individual Transformations > should remove extensions from export statements [2.13ms]
🚀 Starting import extension fixer...
📁 Found 1 files to process
💾 Saving changes...
✅ Saved 1 files

📊 Import Extension Fixer Report
================================
Files processed: 1
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 3ms
Success rate: 100.0%

✅ Import extension fixing completed!
(pass) ImportExtensionFixer > Unit Tests - Individual Transformations > should preserve external npm package imports [4.43ms]
🚀 Starting import extension fixer...
📁 Found 1 files to process
💾 Saving changes...
✅ Saved 1 files

📊 Import Extension Fixer Report
================================
Files processed: 1
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 3ms
Success rate: 100.0%

✅ Import extension fixing completed!
(pass) ImportExtensionFixer > Unit Tests - Individual Transformations > should preserve non-.js/.ts extensions [3.61ms]
🚀 Starting import extension fixer...
📁 Found 1 files to process
💾 Saving changes...
✅ Saved 1 files

📊 Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 2
Export statements fixed: 0
Total transformations: 2
Processing time: 2ms
Success rate: 100.0%

🔧 Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1752792542340-cxgkjsb7m/src/test.ts: 2 imports

✅ Import extension fixing completed!
(pass) ImportExtensionFixer > Unit Tests - Individual Transformations > should handle mixed import types correctly [2.52ms]
🚀 Starting import extension fixer...
📁 Found 3 files to process
💾 Saving changes...
✅ Saved 3 files

📊 Import Extension Fixer Report
================================
Files processed: 3
Files modified: 3
Import statements fixed: 2
Export statements fixed: 1
Total transformations: 3
Processing time: 5ms
Success rate: 100.0%

🔧 Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1752792542344-599ms466p/src/app.ts: 1 imports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1752792542344-599ms466p/src/components/Button.ts: 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1752792542344-599ms466p/src/utils/index.ts: 1 imports

✅ Import extension fixing completed!
(pass) ImportExtensionFixer > Integration Tests - Full Codemod Execution > should process multiple files correctly [5.85ms]
🚀 Starting import extension fixer...
📁 Found 1 files to process
💾 Saving changes...
✅ Saved 1 files

📊 Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 2
Export statements fixed: 1
Total transformations: 3
Processing time: 7ms
Success rate: 100.0%

🔧 Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1752792542353-7hfgdqhxw/src/test.ts: 2 imports, 1 exports

✅ Import extension fixing completed!
(pass) ImportExtensionFixer > Integration Tests - Full Codemod Execution > should generate accurate metrics [7.40ms]
🚀 Starting import extension fixer...
📁 Found 1 files to process
💾 Saving changes...
✅ Saved 1 files

📊 Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 1
Export statements fixed: 1
Total transformations: 2
Processing time: 2ms
Success rate: 100.0%

🔧 Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1752792542363-cshde8xzd/src/test.ts: 1 imports, 1 exports

✅ Import extension fixing completed!
(pass) ImportExtensionFixer > Integration Tests - Full Codemod Execution > should provide detailed results per file [2.31ms]
🚀 Starting import extension fixer...
📁 Found 1 files to process
💾 Saving changes...
✅ Saved 1 files

📊 Import Extension Fixer Report
================================
Files processed: 1
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 1ms
Success rate: 100.0%

✅ Import extension fixing completed!
(pass) ImportExtensionFixer > Integration Tests - Full Codemod Execution > should handle files with no changes [1.68ms]
🚀 Starting import extension fixer...
📁 Found 1 files to process
💾 Saving changes...
✅ Saved 1 files

📊 Import Extension Fixer Report
================================
Files processed: 1
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 1ms
Success rate: 100.0%

✅ Import extension fixing completed!
(pass) ImportExtensionFixer > Edge Cases and Error Handling > should handle empty files [1.35ms]
🚀 Starting import extension fixer...
📁 Found 1 files to process
💾 Saving changes...
✅ Saved 1 files

📊 Import Extension Fixer Report
================================
Files processed: 1
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 3ms
Success rate: 100.0%

✅ Import extension fixing completed!
(pass) ImportExtensionFixer > Edge Cases and Error Handling > should handle files with only comments [3.41ms]
🚀 Starting import extension fixer...
📁 Found 1 files to process
💾 Saving changes...
✅ Saved 1 files

📊 Import Extension Fixer Report
================================
Files processed: 1
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 2ms
Success rate: 100.0%

✅ Import extension fixing completed!
(pass) ImportExtensionFixer > Edge Cases and Error Handling > should handle imports without extensions [2.87ms]
🚀 Starting import extension fixer...
📁 Found 1 files to process
💾 Saving changes...
✅ Saved 1 files

📊 Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 3
Export statements fixed: 3
Total transformations: 6
Processing time: 3ms
Success rate: 100.0%

🔧 Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1752792542384-1yfdo8zqm/src/complex.ts: 3 imports, 3 exports

✅ Import extension fixing completed!
(pass) ImportExtensionFixer > Edge Cases and Error Handling > should handle complex import/export patterns [3.02ms]
🚀 Starting import extension fixer...
📁 Found 1 files to process
💾 Saving changes...
✅ Saved 1 files

📊 Import Extension Fixer Report
================================
Files processed: 1
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 2ms
Success rate: 100.0%

✅ Import extension fixing completed!
(pass) ImportExtensionFixer > Edge Cases and Error Handling > should handle exports without module specifiers [1.75ms]
🚀 Starting import extension fixer...
📁 Found 0 files to process
💾 Saving changes...
✅ Saved 0 files

📊 Import Extension Fixer Report
================================
Files processed: 0
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 1ms
Success rate: 100.0%

✅ Import extension fixing completed!
(pass) ImportExtensionFixer > Edge Cases and Error Handling > should exclude test files from processing [0.89ms]
🚀 Starting import extension fixer...
📁 Found 0 files to process
💾 Saving changes...
✅ Saved 0 files

📊 Import Extension Fixer Report
================================
Files processed: 0
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 1ms
Success rate: 100.0%

✅ Import extension fixing completed!
(pass) ImportExtensionFixer > Edge Cases and Error Handling > should exclude spec files from processing [0.93ms]
🚀 Starting import extension fixer...
📁 Found 10 files to process
💾 Saving changes...
✅ Saved 10 files

📊 Import Extension Fixer Report
================================
Files processed: 10
Files modified: 10
Import statements fixed: 10
Export statements fixed: 10
Total transformations: 20
Processing time: 9ms
Success rate: 100.0%

🔧 Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1752792542397-bmvijd5ux/src/file0.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1752792542397-bmvijd5ux/src/file1.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1752792542397-bmvijd5ux/src/file2.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1752792542397-bmvijd5ux/src/file3.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1752792542397-bmvijd5ux/src/file4.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1752792542397-bmvijd5ux/src/file5.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1752792542397-bmvijd5ux/src/file6.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1752792542397-bmvijd5ux/src/file7.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1752792542397-bmvijd5ux/src/file8.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1752792542397-bmvijd5ux/src/file9.ts: 1 imports, 1 exports

✅ Import extension fixing completed!
(pass) ImportExtensionFixer > Performance Benchmarks > should process files efficiently [9.62ms]
🚀 Starting import extension fixer...
📁 Found 1 files to process
💾 Saving changes...
✅ Saved 1 files

📊 Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 2
Export statements fixed: 0
Total transformations: 2
Processing time: 2ms
Success rate: 100.0%

🔧 Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1752792542408-tjx127ot8/src/test.ts: 2 imports

✅ Import extension fixing completed!
(pass) ImportExtensionFixer > Performance Benchmarks > should maintain high success rate [2.43ms]
🚀 Starting import extension fixer...
📁 Found 1 files to process
💾 Saving changes...
✅ Saved 1 files

📊 Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 3
Export statements fixed: 0
Total transformations: 3
Processing time: 1ms
Success rate: 100.0%

🔧 Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1752792542412-ffkqrwgw2/src/typescript.ts: 3 imports

✅ Import extension fixing completed!
(pass) ImportExtensionFixer > TypeScript Support > should handle TypeScript-specific imports [1.77ms]
🚀 Starting import extension fixer...
📁 Found 1 files to process
💾 Saving changes...
✅ Saved 1 files

📊 Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 2
Export statements fixed: 0
Total transformations: 2
Processing time: 1ms
Success rate: 100.0%

🔧 Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1752792542416-5oct0aqhl/src/component.tsx: 2 imports

✅ Import extension fixing completed!
(pass) ImportExtensionFixer > TypeScript Support > should handle JSX/TSX files [1.95ms]
🚀 Starting import extension fixer...
📁 Found 1 files to process
💾 Saving changes...
✅ Saved 1 files

📊 Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 2
Export statements fixed: 0
Total transformations: 2
Processing time: 2ms
Success rate: 100.0%

🔧 Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1752792542419-97bvlb40q/src/bun-example.ts: 2 imports

✅ Import extension fixing completed!
(pass) ImportExtensionFixer > Real-world Scenarios > should handle Bun-style imports correctly [2.42ms]
🚀 Starting import extension fixer...
📁 Found 1 files to process
💾 Saving changes...
✅ Saved 1 files

📊 Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 3
Export statements fixed: 0
Total transformations: 3
Processing time: 4ms
Success rate: 100.0%

🔧 Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1752792542424-9rp2go3dn/src/nested/deep/component.ts: 3 imports

✅ Import extension fixing completed!
(pass) ImportExtensionFixer > Real-world Scenarios > should handle nested directory imports [4.82ms]

codemods/fix-indentation.test.ts:
(pass) ESLint auto-fix codemod runs ONLY the correct ESLint command [1.13ms]
(pass) ESLint auto-fix uses only safe ESLint flags [0.10ms]
(pass) ESLint auto-fix handles error cases properly [0.15ms]
(pass) ESLint auto-fix uses project configuration [0.04ms]
(pass) ESLint auto-fix does NOT modify files directly [0.05ms]
(pass) ESLint auto-fix provides appropriate logging [0.13ms]
(pass) ESLint auto-fix has proper imports and dependencies [0.28ms]

tests/verification-protocol.test.ts:
(pass) Verification Protocol > should prevent claiming resources don't exist without verification [0.03ms]
(pass) Verification Protocol > should document the self-improvement rule verification failure [0.08ms]
(pass) Verification Protocol > should enforce verification checklist for all negative existence claims [0.02ms]

src/types/project.test.ts:
(pass) ProjectContext > validateRepositoryPath > returns false for clearly invalid paths [0.04ms]
(pass) ProjectContext > validateRepositoryPath > returns true for current working directory [0.05ms]
(pass) ProjectContext > createProjectContext > creates a ProjectContext for current working directory [0.05ms]
{"level":"error","message":"Invalid repository path: /definitely/does/not/exist/path/12345","timestamp":"2025-07-17T22:49:02.439Z"}
(pass) ProjectContext > createProjectContext > throws an error for clearly invalid path [0.33ms]
(pass) ProjectContext > createProjectContextFromCwd > creates a ProjectContext from current working directory [0.03ms]

src/utils/package-manager.test.ts:
(pass) Package Manager Utilities > detectPackageManager > detects bun from bun.lock [0.08ms]
(pass) Package Manager Utilities > detectPackageManager > detects yarn from yarn.lock [0.02ms]
(pass) Package Manager Utilities > detectPackageManager > detects pnpm from pnpm-lock.yaml [0.02ms]
(pass) Package Manager Utilities > detectPackageManager > detects npm from package-lock.json [0.02ms]
(pass) Package Manager Utilities > detectPackageManager > defaults to npm if only package.json exists [0.01ms]
(pass) Package Manager Utilities > detectPackageManager > returns undefined if no package files exist
(pass) Package Manager Utilities > getInstallCommand > returns correct command for bun [0.01ms]
(pass) Package Manager Utilities > getInstallCommand > returns correct command for npm
(pass) Package Manager Utilities > getInstallCommand > returns correct command for yarn
(pass) Package Manager Utilities > getInstallCommand > returns correct command for pnpm [0.01ms]
(pass) Package Manager Utilities > getInstallCommand > returns undefined for unknown package manager [0.02ms]
(pass) Package Manager Utilities > installDependencies > successfully installs dependencies [0.33ms]
(pass) Package Manager Utilities > installDependencies > uses provided package manager if specified [0.09ms]
(pass) Package Manager Utilities > installDependencies > handles no package manager detected [0.05ms]
(pass) Package Manager Utilities > installDependencies > handles unsupported package manager [0.03ms]
{"level":"error","message":"Failed to install dependencies: Installation failed","timestamp":"2025-07-17T22:49:02.444Z"}
(pass) Package Manager Utilities > installDependencies > handles installation errors [0.20ms]
(pass) Package Manager Utilities > installDependencies > respects quiet option for stdio [0.04ms]

src/utils/param-schemas.test.ts:
(pass) Parameter Schemas > Schema Helpers > optionalString should create an optional string schema with description [0.08ms]
(pass) Parameter Schemas > Schema Helpers > requiredString should create a required string schema with description [0.10ms]
(pass) Parameter Schemas > Schema Helpers > optionalBoolean should create an optional boolean schema with description [0.05ms]
(pass) Parameter Schemas > Common Parameters > all common parameter schemas should have descriptions [0.09ms]

src/utils/filter-messages.test.ts:
(pass) Filter Messages Utility > getStatusFilterMessage > returns correct message for a given status
(pass) Filter Messages Utility > getStatusFilterMessage > includes the status in single quotes [0.01ms]
(pass) Filter Messages Utility > getActiveTasksMessage > returns message about active tasks
(pass) Filter Messages Utility > getActiveTasksMessage > includes instruction about --all flag [0.02ms]
(pass) Filter Messages Utility > generateFilterMessages > returns status filter message when status is provided [0.07ms]
(pass) Filter Messages Utility > generateFilterMessages > returns active tasks message when not showing all tasks [0.02ms]
(pass) Filter Messages Utility > generateFilterMessages > returns no messages when all is true
(pass) Filter Messages Utility > generateFilterMessages > prioritizes status filter over active tasks message [0.01ms]
(pass) Filter Messages Utility > generateFilterMessages > returns empty array when no filter options provided [0.01ms]

src/utils/option-descriptions.test.ts:
(pass) Option Descriptions > all exported descriptions should be non-empty strings [0.18ms]
(pass) Option Descriptions > all descriptions should follow consistent naming pattern (UPPERCASE_WITH_DESCRIPTION suffix)
(pass) Option Descriptions > all descriptions should end with proper punctuation [0.09ms]
(pass) Option Descriptions > repository resolution descriptions should be consistent [0.01ms]
(pass) Option Descriptions > output format descriptions should be consistent
(pass) Option Descriptions > task descriptions should be consistent
(pass) Option Descriptions > backend descriptions should be consistent
(pass) Option Descriptions > force option descriptions should be consistent
(pass) Option Descriptions > git option descriptions should be consistent
(pass) Option Descriptions > rules option descriptions should be consistent

src/utils/logger.test.ts:
(pass) Logger > getLogMode > should return HUMAN when configuration mode is set to HUMAN
(pass) Logger > getLogMode > should return STRUCTURED when configuration mode is set to STRUCTURED
(pass) Logger > getLogMode > should default to HUMAN when mode is auto and TTY is available [0.03ms]
(pass) Logger > getLogMode > should default to STRUCTURED when mode is auto and TTY is not available [0.01ms]
(pass) Logger > createConfigurableLogger > should create logger with configuration [0.69ms]
(pass) Logger > createConfigurableLogger > should create logger with STRUCTURED mode [0.26ms]
(pass) Logger > createConfigurableLogger > should expose logger methods [0.14ms]
(pass) Logger > createConfigurableLogger > should support dependency injection for testing [0.16ms]
(pass) Logger > createConfigurableLogger > should handle different log levels [0.35ms]
(pass) Logger > createConfigurableLogger > should isolate logger instances [0.27ms]
(pass) Logger > configuration integration > should maintain backward compatibility [0.15ms]
(pass) Logger > configuration integration > should support enableAgentLogs configuration [0.09ms]

src/mcp/command-mapper.test.ts:
(pass) CommandMapper > should initialize with server and project context
(pass) CommandMapper > should add tool to server when addCommand is called [0.29ms]

src/mcp/server.test.ts:
(pass) MCP Server > should import FastMCP module successfully [52.69ms]
(pass) MCP Server > should be able to import our server modules [0.04ms]

src/errors/network-errors.test.ts:
(pass) Network Error handling > NetworkError class > should create a NetworkError with the correct properties [1.27ms]
(pass) Network Error handling > PortInUseError class > should create a PortInUseError with the correct message [0.04ms]
(pass) Network Error handling > PortInUseError class > should provide helpful suggestions [0.04ms]
(pass) Network Error handling > NetworkPermissionError class > should create a NetworkPermissionError with the correct message [0.02ms]
(pass) Network Error handling > NetworkPermissionError class > should provide helpful suggestions [0.02ms]
(pass) Network Error handling > isNetworkError function > should identify common network errors [0.04ms]
(pass) Network Error handling > createNetworkError function > should create a PortInUseError for EADDRINUSE errors [0.04ms]
(pass) Network Error handling > createNetworkError function > should create a NetworkPermissionError for EACCES errors
(pass) Network Error handling > createNetworkError function > should create a generic NetworkError for other errors [0.02ms]
(pass) Network Error handling > formatNetworkErrorMessage function > should format a PortInUseError with suggestions [0.05ms]
(pass) Network Error handling > formatNetworkErrorMessage function > should not include the debug hint when debug is true [0.01ms]

src/errors/enhanced-error-templates.test.ts:
(pass) Task 223 Enhanced Error Messages > createSessionPrBranchErrorMessage > should create helpful error message for PR branch restriction [0.16ms]
(pass) Task 223 Enhanced Error Messages > createSessionPrBranchErrorMessage > should handle undefined session name gracefully [0.02ms]
(pass) Task 223 Enhanced Error Messages > createSessionPrBranchErrorMessage > should include context information when provided
(pass) Task 223 Enhanced Error Messages > createTaskIdParsingErrorMessage > should show supported task ID formats [0.05ms]
(pass) Task 223 Enhanced Error Messages > createTaskIdParsingErrorMessage > should include operation context
(pass) Task 223 Enhanced Error Messages > createVariableNamingErrorMessage > should identify underscore prefix mismatch (declaration has underscore, usage doesn't) [0.04ms]
(pass) Task 223 Enhanced Error Messages > createVariableNamingErrorMessage > should identify reverse underscore mismatch (declaration without underscore, usage has underscore) [0.02ms]
(pass) Task 223 Enhanced Error Messages > createVariableNamingErrorMessage > should include file path and line numbers when provided [0.02ms]
(pass) Task 223 Enhanced Error Messages > createGitTimeoutErrorMessage > should provide troubleshooting steps for git timeouts [0.02ms]
(pass) Task 223 Enhanced Error Messages > createGitTimeoutErrorMessage > should include timeout duration in context [0.20ms]
(pass) Task 223 Enhanced Error Messages > createMergeConflictErrorMessage > should identify conflicting files with conflict types [0.12ms]
(pass) Task 223 Enhanced Error Messages > createMergeConflictErrorMessage > should provide resolution strategies [0.02ms]
(pass) Task 223 Enhanced Error Messages > createBackendDetectionErrorMessage > should show available backends and their requirements [0.09ms]
(pass) Task 223 Enhanced Error Messages > createBackendDetectionErrorMessage > should provide default backend list when no backends provided [0.02ms]
(pass) Task 223 Enhanced Error Messages > createBackendDetectionErrorMessage > should include workspace path in context [0.02ms]
(pass) Task 223 Enhanced Error Messages > Error Message Quality > should use consistent emoji patterns across all error types [0.05ms]
(pass) Task 223 Enhanced Error Messages > Error Message Quality > should provide actionable command suggestions [0.05ms]
(pass) Task 223 Enhanced Error Messages > Error Message Quality > should include context information when provided [0.03ms]

src/errors/message-templates.test.ts:
(pass) Error Message Templates > getErrorMessage > extracts message from Error object
(pass) Error Message Templates > getErrorMessage > converts non-Error to string [0.44ms]
(pass) Error Message Templates > formatCommandSuggestions > formats single suggestion [0.04ms]
(pass) Error Message Templates > formatCommandSuggestions > formats multiple suggestions [0.02ms]
(pass) Error Message Templates > formatContextInfo > returns empty string for no context
(pass) Error Message Templates > formatContextInfo > formats single context info
(pass) Error Message Templates > formatContextInfo > formats multiple context info
(pass) Error Message Templates > buildErrorMessage > builds basic error message [0.01ms]
(pass) Error Message Templates > buildErrorMessage > builds error message with description [0.01ms]
(pass) Error Message Templates > buildErrorMessage > builds error message with sections and emojis [0.02ms]
(pass) Error Message Templates > buildErrorMessage > includes context information [0.01ms]
(pass) Error Message Templates > createResourceNotFoundMessage > creates session not found message [0.03ms]
(pass) Error Message Templates > createMissingInfoMessage > creates missing information message [0.02ms]
(pass) Error Message Templates > createValidationErrorMessage > creates validation error message [0.04ms]
(pass) Error Message Templates > createCommandFailureMessage > creates command failure message [0.03ms]
(pass) Error Message Templates > createSessionErrorMessage > creates not found session error [0.05ms]
(pass) Error Message Templates > createSessionErrorMessage > creates session exists error [0.02ms]
(pass) Error Message Templates > createSessionErrorMessage > creates invalid session error [0.03ms]
(pass) Error Message Templates > createGitErrorMessage > creates git conflict error [0.06ms]
(pass) Error Message Templates > createGitErrorMessage > creates general git error [0.03ms]
(pass) Error Message Templates > createConfigErrorMessage > creates configuration error message [0.03ms]
(pass) Error Message Templates > ErrorContextBuilder > builds empty context [0.02ms]
(pass) Error Message Templates > ErrorContextBuilder > adds current directory [0.02ms]
(pass) Error Message Templates > ErrorContextBuilder > adds session information [0.02ms]
(pass) Error Message Templates > ErrorContextBuilder > adds repository information [0.01ms]
(pass) Error Message Templates > ErrorContextBuilder > adds task information [0.01ms]
(pass) Error Message Templates > ErrorContextBuilder > adds command information
(pass) Error Message Templates > ErrorContextBuilder > adds custom information
(pass) Error Message Templates > ErrorContextBuilder > chains multiple context additions [0.01ms]
(pass) Error Message Templates > Error message consistency > all templates use consistent emoji patterns [0.03ms]
(pass) Error Message Templates > Error message consistency > all templates have consistent structure [0.06ms]

src/domain/session-lookup-bug-integration.test.ts:
{"error":"The \"path\" property must be of type string, got undefined","level":"error","message":"Error during git clone","repoUrl":"https://github.com/nonexistent/invalid-repo-12345.git","stack":"TypeError: The \"path\" property must be of type string, got undefined\n    at dirname (unknown)\n    at clone (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git.ts:353:19)\n    at processTicksAndRejections (native:7:39)","timestamp":"2025-07-17T22:49:02.635Z"}
(pass) Session Lookup Bug Integration Test > should NOT create session directories when git clone fails [0.91ms]
(pass) Session Lookup Bug Integration Test > should create session directories when git clone succeeds

src/domain/rules.test.ts:
(pass) RuleService > listRules > lists rules from both formats when no format specified [1.31ms]
(pass) RuleService > listRules > filters rules by format [0.76ms]
(pass) RuleService > listRules > filters rules by tag [0.93ms]
(pass) RuleService > getRule > gets a rule by ID [0.41ms]
(pass) RuleService > getRule > throws error for non-existent rule [0.25ms]
(pass) RuleService > getRule > finds rule in specified format [0.62ms]
(pass) RuleService > createRule > creates a new rule with metadata [0.43ms]
(pass) RuleService > createRule > handles undefined metadata fields correctly [0.28ms]
(pass) RuleService > createRule > throws error if rule exists and overwrite is false [0.27ms]
(pass) RuleService > createRule > overwrites existing rule when overwrite is true [0.41ms]
(pass) RuleService > updateRule > updates metadata only [0.62ms]
(pass) RuleService > updateRule > updates content only [0.57ms]
(pass) RuleService > updateRule > updates both metadata and content [0.74ms]
(pass) RuleService > searchRules > searches for rules by content [0.68ms]
(pass) RuleService > searchRules > searches for rules by metadata [1.29ms]
(pass) RuleService > searchRules > filters search results by format and tag [1.04ms]

src/domain/git-pr-workflow.test.ts:
Auto-detected session: task#276
88 | 
89 |     // Merge the PR branch
90 |     const mergeResult = await deps.gitService.mergeBranch(workdir, currentBranch);
91 | 
92 |     if (mergeResult.conflicts) {
93 |       throw new MinskyError(`Merge conflicts detected while merging ${currentBranch} into ${baseBranch}`);
                 ^
MinskyError: Merge conflicts detected while merging pr/task#025 into main
 cause: undefined,

      at sessionApprove (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/commands/approve-command.ts:93:13)
(fail) Session Approve Workflow > successfully approves and merges a PR branch with task ID [11.10ms]
Auto-detected session: task#276
102 |           taskService: mockTaskService as unknown,
103 |           sessionDB: mockSessionDB as unknown,
104 |           workspaceUtils: WorkspaceUtils,
105 |         }
106 |       )
107 |     ).rejects.toThrow("No session detected");
                    ^
error: expect(received).toThrow(expected)

Expected substring: "No session detected"
Received message: "Merge conflicts detected while merging pr/task#025 into main"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git-pr-workflow.test.ts:107:15)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git-pr-workflow.test.ts:96:68)
(fail) Session Approve Workflow > throws ValidationError when session parameter is missing [7.50ms]
{"level":"warn","message":"Storage backend created with warnings","timestamp":"2025-07-17T22:49:02.703Z","warnings":["No sessions array found in JSON data"]}
125 |           taskService: mockTaskService as unknown,
126 |           sessionDB: mockSessionDBWithNull as unknown,
127 |           workspaceUtils: WorkspaceUtils,
128 |         }
129 |       )
130 |     ).rejects.toThrow("Session \"non-existent-session\" not found");
                    ^
error: expect(received).toThrow(expected)

Expected substring: "Session \"non-existent-session\" not found"
Received message: "No session detected. Please provide a session name (--name), task ID (--task), or run this command from within a session workspace."

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git-pr-workflow.test.ts:130:15)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git-pr-workflow.test.ts:110:68)
(fail) Session Approve Workflow > throws ResourceNotFoundError when session does not exist [15.55ms]
Auto-detected session: task#276
148 |           taskService: mockTaskService as unknown,
149 |           sessionDB: mockSessionDB as unknown,
150 |           workspaceUtils: WorkspaceUtils,
151 |         }
152 |       )
153 |     ).rejects.toThrow("Failed to approve session");
                    ^
error: expect(received).toThrow(expected)

Expected substring: "Failed to approve session"
Received message: "Git command failed"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git-pr-workflow.test.ts:153:15)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git-pr-workflow.test.ts:133:53)
(fail) Session Approve Workflow > throws MinskyError when git command fails [6.66ms]

src/domain/session-lookup-bug-reproduction.test.ts:

# Unhandled error between tests
-------------------------------
1 | (function (entry, fetcher)
              ^
SyntaxError: Export named 'startSessionFromParams' not found in module '/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session.ts'.
      at loadAndEvaluateModule (1:11)
-------------------------------


src/domain/session-pr-body-path.test.ts:
(pass) sessionPrFromParams bodyPath file reading functionality > should read body content from bodyPath when provided [0.12ms]
(pass) sessionPrFromParams bodyPath file reading functionality > should handle non-existent files correctly [0.06ms]
(pass) sessionPrFromParams bodyPath file reading functionality > should detect empty files correctly [0.15ms]
(pass) sessionPrFromParams bodyPath file reading functionality > should work with relative paths correctly [0.22ms]
(pass) sessionPrFromParams bodyPath file reading functionality > should validate bodyPath parameter priority logic [0.01ms]

src/domain/session-review.test.ts:

# Unhandled error between tests
-------------------------------
1 | (function (entry, fetcher)
              ^
SyntaxError: Export named 'sessionReviewFromParams' not found in module '/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session.ts'.
      at loadAndEvaluateModule (1:11)
-------------------------------


src/domain/session-git-clone-bug-regression.test.ts:

# Unhandled error between tests
-------------------------------
SyntaxError: Export named 'startSessionFromParams' not found in module '/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session.ts'.
      at link (unknown:1:11)
      at linkAndEvaluateModule (unknown:1:11)
      at loadAndEvaluateModule (unknown:2:1)
      at processTicksAndRejections (unknown:7:39)
-------------------------------


src/domain/git-default-branch.test.ts:
(pass) GitService Default Branch Detection > should detect default branch from origin HEAD ref [0.49ms]
(pass) GitService Default Branch Detection > should properly remove origin prefix from branch name
{"error":"Git command failed","level":"error","message":"Could not determine default branch, falling back to 'main'","repoPath":"/test/repo","timestamp":"2025-07-17T22:49:02.719Z"}
(pass) GitService Default Branch Detection > should fall back to 'main' when command fails [0.14ms]

src/domain/gitServiceTaskStatusUpdate.test.ts:
(pass) GitService Task Status Update > should be able to update task status after PR creation [0.03ms]

src/domain/rules-format.test.ts:
(pass) RuleService Format Compatibility > should get a rule in its original format when requested [0.42ms]
(pass) RuleService Format Compatibility > should get a rule in any format if no format specified [0.26ms]
(pass) RuleService Format Compatibility > should return rule with format note when requested in different format [0.28ms]
(pass) RuleService Format Compatibility > should prioritize the requested format for dual-format rules [0.30ms]
(pass) RuleService Format Compatibility > should throw specific error messages for non-existent rules [0.10ms]

src/domain/session-approve.test.ts:
68 | 
69 |     // Get session working directory
70 |     const workdir = await deps.sessionDB.getSessionWorkdir(resolvedContext.sessionName);
71 | 
72 |     // Get current branch (should be the PR branch)
73 |     const currentBranch = await deps.gitService.getCurrentBranch(workdir);
                                                     ^
TypeError: deps.gitService.getCurrentBranch is not a function. (In 'deps.gitService.getCurrentBranch(workdir)', 'deps.gitService.getCurrentBranch' is undefined)
      at sessionApprove (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/commands/approve-command.ts:73:49)
(fail) Session Approve > branch cleanup after successful merge > should delete local PR branch and task branch after successful merge [0.08ms]
68 | 
69 |     // Get session working directory
70 |     const workdir = await deps.sessionDB.getSessionWorkdir(resolvedContext.sessionName);
71 | 
72 |     // Get current branch (should be the PR branch)
73 |     const currentBranch = await deps.gitService.getCurrentBranch(workdir);
                                                     ^
TypeError: deps.gitService.getCurrentBranch is not a function. (In 'deps.gitService.getCurrentBranch(workdir)', 'deps.gitService.getCurrentBranch' is undefined)
      at sessionApprove (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/commands/approve-command.ts:73:49)
(fail) Session Approve > branch cleanup after successful merge > should handle branch cleanup failures gracefully without failing the operation [0.09ms]
68 | 
69 |     // Get session working directory
70 |     const workdir = await deps.sessionDB.getSessionWorkdir(resolvedContext.sessionName);
71 | 
72 |     // Get current branch (should be the PR branch)
73 |     const currentBranch = await deps.gitService.getCurrentBranch(workdir);
                                                     ^
TypeError: deps.gitService.getCurrentBranch is not a function. (In 'deps.gitService.getCurrentBranch(workdir)', 'deps.gitService.getCurrentBranch' is undefined)
      at sessionApprove (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/commands/approve-command.ts:73:49)
(fail) Session Approve > branch cleanup after successful merge > should not attempt branch cleanup for already approved sessions [0.10ms]
68 | 
69 |     // Get session working directory
70 |     const workdir = await deps.sessionDB.getSessionWorkdir(resolvedContext.sessionName);
71 | 
72 |     // Get current branch (should be the PR branch)
73 |     const currentBranch = await deps.gitService.getCurrentBranch(workdir);
                                                     ^
TypeError: deps.gitService.getCurrentBranch is not a function. (In 'deps.gitService.getCurrentBranch(workdir)', 'deps.gitService.getCurrentBranch' is undefined)
      at sessionApprove (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/commands/approve-command.ts:73:49)
(fail) Session Approve > branch cleanup after successful merge > should handle case where task branch doesn't exist but PR branch does [0.06ms]
88 | 
89 |     // Merge the PR branch
90 |     const mergeResult = await deps.gitService.mergeBranch(workdir, currentBranch);
91 | 
92 |     if (mergeResult.conflicts) {
93 |       throw new MinskyError(`Merge conflicts detected while merging ${currentBranch} into ${baseBranch}`);
                 ^
MinskyError: Merge conflicts detected while merging pr/task#123 into main
 cause: undefined,

      at sessionApprove (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/commands/approve-command.ts:93:13)
(fail) Session Approve > successfully approves and merges a PR branch [7.54ms]
135 | 
136 |     return result;
137 |   } catch (error) {
138 |     // If error is about missing session requirements, provide better user guidance
139 |     if (error instanceof ValidationError) {
140 |       throw new ResourceNotFoundError(
                  ^
ResourceNotFoundError: No session detected. Please provide a session name (--name), task ID (--task), or run this command from within a session workspace.
      cause: undefined,
 resourceType: undefined,
 resourceId: undefined,

      at sessionApprove (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/commands/approve-command.ts:140:13)
(fail) Session Approve > detects current session when repo path is provided [0.67ms]
225 |       );
226 |       // Should not reach this point
227 |       expect(false).toBe(true);
228 |     } catch (error) {
229 |       expect(error instanceof ResourceNotFoundError).toBe(true);
230 |       expect((error as Error).message).toContain("Session \"non-existent-session\" not found");
                                             ^
error: expect(received).toContain(expected)

Expected to contain: "Session \"non-existent-session\" not found"
Received: "No session detected. Please provide a session name (--name), task ID (--task), or run this command from within a session workspace."

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-approve.test.ts:230:40)
(fail) Session Approve > throws error when session is not found [12.36ms]
260 |         testDeps
261 |       );
262 |       // Should not reach this point
263 |       expect(false).toBe(true);
264 |     } catch (error) {
265 |       expect(error instanceof ValidationError).toBe(true);
                                                     ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-approve.test.ts:265:48)
(fail) Session Approve > throws error when no session or task is provided [0.44ms]
68 | 
69 |     // Get session working directory
70 |     const workdir = await deps.sessionDB.getSessionWorkdir(resolvedContext.sessionName);
71 | 
72 |     // Get current branch (should be the PR branch)
73 |     const currentBranch = await deps.gitService.getCurrentBranch(workdir);
                                                     ^
TypeError: deps.gitService.getCurrentBranch is not a function. (In 'deps.gitService.getCurrentBranch(workdir)', 'deps.gitService.getCurrentBranch' is undefined)
      at sessionApprove (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/commands/approve-command.ts:73:49)
(fail) Session Approve > handles errors during task metadata update [8.96ms]
68 | 
69 |     // Get session working directory
70 |     const workdir = await deps.sessionDB.getSessionWorkdir(resolvedContext.sessionName);
71 | 
72 |     // Get current branch (should be the PR branch)
73 |     const currentBranch = await deps.gitService.getCurrentBranch(workdir);
                                                     ^
TypeError: deps.gitService.getCurrentBranch is not a function. (In 'deps.gitService.getCurrentBranch(workdir)', 'deps.gitService.getCurrentBranch' is undefined)
      at sessionApprove (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/commands/approve-command.ts:73:49)
(fail) Session Approve > merges from local PR branch and handles missing remote branch gracefully [8.74ms]

src/domain/session-approve-branch-cleanup.test.ts:
88 | 
89 |     // Merge the PR branch
90 |     const mergeResult = await deps.gitService.mergeBranch(workdir, currentBranch);
91 | 
92 |     if (mergeResult.conflicts) {
93 |       throw new MinskyError(`Merge conflicts detected while merging ${currentBranch} into ${baseBranch}`);
                 ^
MinskyError: Merge conflicts detected while merging pr/task#265 into main
 cause: undefined,

      at sessionApprove (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/commands/approve-command.ts:93:13)
(fail) Session Approve Branch Cleanup > should delete local PR branch and task branch after successful merge [1.12ms]
68 | 
69 |     // Get session working directory
70 |     const workdir = await deps.sessionDB.getSessionWorkdir(resolvedContext.sessionName);
71 | 
72 |     // Get current branch (should be the PR branch)
73 |     const currentBranch = await deps.gitService.getCurrentBranch(workdir);
                                                     ^
TypeError: deps.gitService.getCurrentBranch is not a function. (In 'deps.gitService.getCurrentBranch(workdir)', 'deps.gitService.getCurrentBranch' is undefined)
      at sessionApprove (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/commands/approve-command.ts:73:49)
(fail) Session Approve Branch Cleanup > should handle branch cleanup failures gracefully without failing the operation [0.16ms]
68 | 
69 |     // Get session working directory
70 |     const workdir = await deps.sessionDB.getSessionWorkdir(resolvedContext.sessionName);
71 | 
72 |     // Get current branch (should be the PR branch)
73 |     const currentBranch = await deps.gitService.getCurrentBranch(workdir);
                                                     ^
TypeError: deps.gitService.getCurrentBranch is not a function. (In 'deps.gitService.getCurrentBranch(workdir)', 'deps.gitService.getCurrentBranch' is undefined)
      at sessionApprove (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/commands/approve-command.ts:73:49)
(fail) Session Approve Branch Cleanup > should not attempt branch cleanup for already approved sessions [0.07ms]

src/domain/session-update.test.ts:
30 |  * Custom matcher to replicate Jest"s toBeInstanceOf functionality
31 |  * @param value The value to test
32 |  * @param constructor The expected constructor
33 |  */
34 | export function expectToBeInstanceOf(value: unknown, constructor: Function): void {
35 |   expect(value instanceof constructor).toBeTruthy();
                                            ^
error: expect(received).toBeTruthy()

Received: false

      at expectToBeInstanceOf (/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/assertions.ts:35:40)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-update.test.ts:61:7)
(fail) updateSessionFromParams > throws ValidationError when name is not provided [16.31ms]
(pass) updateSessionFromParams > throws ResourceNotFoundError when session does not exist [0.19ms]
82 |     log.debug("Using explicit session name", { session });
83 | 
84 |     // Validate session exists
85 |     const sessionRecord = await sessionProvider!.getSession(session);
86 |     if (!sessionRecord) {
87 |       throw new ResourceNotFoundError(
                 ^
ResourceNotFoundError: Session 'test-session' not found
      cause: undefined,
 resourceType: "session",
 resourceId: "test-session",

      at resolveSessionContext (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/session-context-resolver.ts:87:13)
(fail) updateSessionFromParams > returns session information when update is successful [0.25ms]
(pass) updateSessionFromParams > throws error when workspace is dirty and force is not set [0.13ms]
82 |     log.debug("Using explicit session name", { session });
83 | 
84 |     // Validate session exists
85 |     const sessionRecord = await sessionProvider!.getSession(session);
86 |     if (!sessionRecord) {
87 |       throw new ResourceNotFoundError(
                 ^
ResourceNotFoundError: Session 'test-session' not found
      cause: undefined,
 resourceType: "session",
 resourceId: "test-session",

      at resolveSessionContext (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/session-context-resolver.ts:87:13)
(fail) updateSessionFromParams > updates session when workspace is dirty and force is set [0.15ms]
82 |     log.debug("Using explicit session name", { session });
83 | 
84 |     // Validate session exists
85 |     const sessionRecord = await sessionProvider!.getSession(session);
86 |     if (!sessionRecord) {
87 |       throw new ResourceNotFoundError(
                 ^
ResourceNotFoundError: Session 'test-session' not found
      cause: undefined,
 resourceType: "session",
 resourceId: "test-session",

      at resolveSessionContext (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/session-context-resolver.ts:87:13)
(fail) updateSessionFromParams > skips stashing when noStash is true [0.12ms]
82 |     log.debug("Using explicit session name", { session });
83 | 
84 |     // Validate session exists
85 |     const sessionRecord = await sessionProvider!.getSession(session);
86 |     if (!sessionRecord) {
87 |       throw new ResourceNotFoundError(
                 ^
ResourceNotFoundError: Session 'test-session' not found
      cause: undefined,
 resourceType: "session",
 resourceId: "test-session",

      at resolveSessionContext (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/session-context-resolver.ts:87:13)
(fail) updateSessionFromParams > skips pushing when noPush is true [0.10ms]
(pass) updateSessionFromParams > throws error when merge conflicts are detected [0.10ms]

src/domain/session-pr-no-branch-switch.test.ts:
1466 |               );
1467 |             } catch (listError) {
1468 |               log.error(`Failed to list sessions for debugging: ${listError}`);
1469 |             }
1470 | 
1471 |             throw new MinskyError(`
                         ^
MinskyError: 
🔍 Session "task#228" Not Found in Database

The session exists in the file system but isn't registered in the session database.
This can happen when sessions are created outside of Minsky or the database gets out of sync.

💡 How to fix this:

📋 Check if session exists on disk:
   ls -la ~/.local/state/minsky/git/*/sessions/

🔄 If session exists, re-register it:
   cd /path/to/main/workspace
   minsky sessions import "task#228"

🆕 Or create a fresh session:
   minsky session start task#228

📁 Alternative - use repository path directly:
   minsky session pr --repo "/path/to/session/workspace" --title "Your PR title"

🗃️ Check registered sessions:
   minsky sessions list

⚠️  Note: Session PR commands should be run from within the session directory to enable automatic session self-repair.

Current directory: /Users/edobry/.local/state/minsky/sessions/task#276
Session requested: "task#228"

 cause: undefined,

      at preparePr (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git.ts:1471:19)
(fail) Session PR Command Branch Behavior > should never switch user to PR branch during session pr creation [1.28ms]
161 |         session: "task#228",
162 |         title: "Test PR",
163 |         body: "Test body",
164 |         baseBranch: "main",
165 |       });
166 |     }).toThrow(/Failed to switch back to session branch/);
             ^
error: expect(received).toThrow(expected)

Expected pattern: /Failed to switch back to session branch/
Received message: "\n🔍 Session \"task#228\" Not Found in Database\n\nThe session exists in the file system but isn't registered in the session database.\nThis can happen when sessions are created outside of Minsky or the database gets out of sync.\n\n💡 How to fix this:\n\n📋 Check if session exists on disk:\n   ls -la ~/.local/state/minsky/git/*/sessions/\n\n🔄 If session exists, re-register it:\n   cd /path/to/main/workspace\n   minsky sessions import \"task#228\"\n\n🆕 Or create a fresh session:\n   minsky session start task#228\n\n📁 Alternative - use repository path directly:\n   minsky session pr --repo \"/path/to/session/workspace\" --title \"Your PR title\"\n\n🗃️ Check registered sessions:\n   minsky sessions list\n\n⚠️  Note: Session PR commands should be run from within the session directory to enable automatic session self-repair.\n\nCurrent directory: /Users/edobry/.local/state/minsky/sessions/task#276\nSession requested: \"task#228\"\n"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-pr-no-branch-switch.test.ts:166:8)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session-pr-no-branch-switch.test.ts:123:70)
(fail) Session PR Command Branch Behavior > should handle branch switch-back failure as critical error [0.30ms]
(pass) Session PR Command Branch Behavior > should document the behavioral change from switch -C to branch + switch pattern [0.04ms]

src/domain/session-auto-task-creation.test.ts:

# Unhandled error between tests
-------------------------------
1 | (function (entry, fetcher)
              ^
SyntaxError: Export named 'startSessionFromParams' not found in module '/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session.ts'.
      at loadAndEvaluateModule (1:11)
-------------------------------


src/domain/repository-uri.test.ts:
(pass) Repository URI Utilities > parseRepositoryURI > parses HTTPS URLs
(pass) Repository URI Utilities > parseRepositoryURI > parses SSH URLs [0.06ms]
(pass) Repository URI Utilities > parseRepositoryURI > parses GitHub shorthand
(pass) Repository URI Utilities > parseRepositoryURI > handles invalid URLs gracefully [0.11ms]
(pass) Repository URI Utilities > normalizeRepositoryURI > normalizes HTTPS URLs [0.05ms]
(pass) Repository URI Utilities > normalizeRepositoryURI > normalizes SSH URLs [0.09ms]
(pass) Repository URI Utilities > normalizeRepositoryURI > preserves GitHub shorthand
(pass) Repository URI Utilities > validateRepositoryURI > returns true for valid HTTPS URLs [0.09ms]
(pass) Repository URI Utilities > validateRepositoryURI > returns false for invalid URIs
(pass) Repository URI Utilities > convertRepositoryURI > converts from GitHub shorthand to HTTPS URL [0.09ms]
(pass) Repository URI Utilities > convertRepositoryURI > converts from GitHub shorthand to SSH URL [0.04ms]
(pass) Repository URI Utilities > convertRepositoryURI > converts from HTTPS URL to SSH URL [0.05ms]
(pass) Repository URI Utilities > convertRepositoryURI > returns null for incompatible conversions [0.04ms]
(pass) Repository URI Utilities > isLocalRepositoryURI > returns true for local paths [0.05ms]
(pass) Repository URI Utilities > isLocalRepositoryURI > returns false for HTTPS URLs [0.02ms]
(pass) Repository URI Utilities > getRepositoryName > extracts name from HTTPS URL [0.04ms]
(pass) Repository URI Utilities > getRepositoryName > extracts name from SSH URL [0.02ms]
(pass) Repository URI Utilities > getRepositoryName > extracts name from GitHub shorthand [0.06ms]
(pass) Repository URI Utilities > expandGitHubShorthand > expands to HTTPS URL by default [0.07ms]
(pass) Repository URI Utilities > expandGitHubShorthand > expands to SSH URL when specified [0.03ms]
(pass) Repository URI Utilities > expandGitHubShorthand > returns null for invalid shorthand [0.04ms]

src/domain/uri-utils.test.ts:
(pass) URI Utilities > normalizeRepositoryUri > normalizes HTTPS URLs [0.04ms]
(pass) URI Utilities > normalizeRepositoryUri > normalizes SSH URLs [0.02ms]
(pass) URI Utilities > normalizeRepositoryUri > normalizes GitHub shorthand [0.01ms]
(pass) URI Utilities > convertRepositoryUri > converts HTTPS to SSH [0.01ms]
(pass) URI Utilities > convertRepositoryUri > converts SSH to HTTPS [0.06ms]
(pass) URI Utilities > convertRepositoryUri > converts shorthand to HTTPS [0.01ms]
(pass) URI Utilities > convertRepositoryUri > returns same URI if already in target format
(pass) URI Utilities > extractRepositoryInfo > extracts info from HTTPS URL [0.01ms]
(pass) URI Utilities > extractRepositoryInfo > extracts info from SSH URL [0.01ms]
(pass) URI Utilities > extractRepositoryInfo > extracts info from shorthand [0.02ms]

src/domain/workspace.test.ts:
16 |       access: mockAccess,
17 |     };
18 | 
19 |     const _result = await resolveWorkspacePath(_options, mockDeps);
20 | 
21 |     expect(mockAccess).toHaveBeenCalledWith(join("/test/workspace", "process"));
                            ^
error: expect(received).toHaveBeenCalledWith(expected)

Number of calls: 1

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/workspace.test.ts:21:24)
(fail) resolveWorkspacePath > uses explicitly provided workspace path [0.40ms]
(pass) resolveWorkspacePath > returns current directory when no workspace option is provided [0.04ms]
(pass) resolveWorkspacePath > returns sessionRepo when provided [0.03ms]
(pass) resolveWorkspacePath > validates that explicitly provided workspace exists [0.13ms]

src/domain/session-lookup-bug-simple.test.ts:

# Unhandled error between tests
-------------------------------
1 | (function (entry, fetcher)
              ^
SyntaxError: Export named 'startSessionFromParams' not found in module '/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session.ts'.
      at loadAndEvaluateModule (1:11)
-------------------------------


src/domain/repo-utils.test.ts:
(pass) Repo Utils > normalizeRepoName extracts repo name from URL [0.09ms]
(pass) Repo Utils > resolveRepoPath uses provided repo path [0.22ms]
(pass) Repo Utils > resolveRepoPath resolves from session [0.09ms]
(pass) Repo Utils > resolveRepoPath falls back to git directory [0.05ms]
(pass) Repo Utils > resolveRepoPath falls back to current directory when git fails [0.06ms]

src/domain/github-backend.test.ts:
(pass) GitHub Repository Backend > constructor creates repository backend with correct settings [0.03ms]
(pass) GitHub Repository Backend > getPath returns session workdir path [0.16ms]
(pass) GitHub Repository Backend > validate succeeds for a valid GitHub repository [0.09ms]
(pass) GitHub Repository Backend > getConfig returns correct configuration

src/domain/tasks.specpath.test.ts:

src/domain/task-status-variables.test.ts:
(pass) Task Status Variables Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for TODO status [0.09ms]
(pass) Task Status Variables Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for IN-PROGRESS status
(pass) Task Status Variables Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for DONE status [0.02ms]
(pass) Task Status Variables Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should not throw 'status is not defined' error [0.03ms]

src/domain/repository.test.ts:
(pass) Repository backends > placeholder test to make CI pass - RepositoryBackend [1.12ms]
(pass) Repository backends > placeholder test for LocalGitBackend [0.02ms]
(pass) Repository backends > placeholder test for RemoteGitBackend
(pass) Repository backends > placeholder test for GitHubBackend [0.01ms]

src/domain/tasks.test.ts:
70 |   try {
71 |     // Validate params with Zod schema
72 |     const validParams = taskListParamsSchema.parse(params);
73 | 
74 |     // Get the main workspace path (always resolves to main workspace, not session)
75 |     const workspacePath = await deps.resolveMainWorkspacePath();
                                          ^
TypeError: deps.resolveMainWorkspacePath is not a function. (In 'deps.resolveMainWorkspacePath()', 'deps.resolveMainWorkspacePath' is undefined)
      at listTasksFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskCommands.ts:75:38)
      at listTasksFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskCommands.ts:59:3)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks.test.ts:71:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks.test.ts:64:53)
(fail) interface-agnostic task functions > listTasksFromParams > should list tasks with valid parameters [1.05ms]
70 |   try {
71 |     // Validate params with Zod schema
72 |     const validParams = taskListParamsSchema.parse(params);
73 | 
74 |     // Get the main workspace path (always resolves to main workspace, not session)
75 |     const workspacePath = await deps.resolveMainWorkspacePath();
                                          ^
TypeError: deps.resolveMainWorkspacePath is not a function. (In 'deps.resolveMainWorkspacePath()', 'deps.resolveMainWorkspacePath' is undefined)
      at listTasksFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskCommands.ts:75:38)
      at listTasksFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskCommands.ts:59:3)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks.test.ts:95:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks.test.ts:85:60)
(fail) interface-agnostic task functions > listTasksFromParams > should filter out DONE tasks when all is false [0.09ms]
145 |       session: validParams.session,
146 |       repo: validParams.repo,
147 |     });
148 | 
149 |     // Then get the workspace path (main repo or session's main workspace)
150 |     const workspacePath = await deps.resolveMainWorkspacePath();
                                           ^
TypeError: deps.resolveMainWorkspacePath is not a function. (In 'deps.resolveMainWorkspacePath()', 'deps.resolveMainWorkspacePath' is undefined)
      at getTaskFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskCommands.ts:150:38)
(fail) interface-agnostic task functions > getTaskFromParams > should get a task with valid parameters [2.38ms]
30 |  * Custom matcher to replicate Jest"s toBeInstanceOf functionality
31 |  * @param value The value to test
32 |  * @param constructor The expected constructor
33 |  */
34 | export function expectToBeInstanceOf(value: unknown, constructor: Function): void {
35 |   expect(value instanceof constructor).toBeTruthy();
                                            ^
error: expect(received).toBeTruthy()

Received: false

      at expectToBeInstanceOf (/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/assertions.ts:35:40)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks.test.ts:125:9)
(fail) interface-agnostic task functions > getTaskFromParams > should throw ResourceNotFoundError when task is not found [1.82ms]
145 |       session: validParams.session,
146 |       repo: validParams.repo,
147 |     });
148 | 
149 |     // Then get the workspace path (main repo or session's main workspace)
150 |     const workspacePath = await deps.resolveMainWorkspacePath();
                                           ^
TypeError: deps.resolveMainWorkspacePath is not a function. (In 'deps.resolveMainWorkspacePath()', 'deps.resolveMainWorkspacePath' is undefined)
      at getTaskFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskCommands.ts:150:38)
(fail) interface-agnostic task functions > getTaskFromParams > should normalize non-canonical task IDs (e.g., 'TEST_VALUE' -> '#TEST_VALUE') [0.46ms]
145 |       session: validParams.session,
146 |       repo: validParams.repo,
147 |     });
148 | 
149 |     // Then get the workspace path (main repo or session's main workspace)
150 |     const workspacePath = await deps.resolveMainWorkspacePath();
                                           ^
TypeError: deps.resolveMainWorkspacePath is not a function. (In 'deps.resolveMainWorkspacePath()', 'deps.resolveMainWorkspacePath' is undefined)
      at getTaskFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskCommands.ts:150:38)
(fail) interface-agnostic task functions > getTaskFromParams > should handle task IDs without leading zeros [0.23ms]
216 |       session: validParams.session,
217 |       repo: validParams.repo,
218 |     });
219 | 
220 |     // Then get the workspace path (main repo or session's main workspace)
221 |     const workspacePath = await deps.resolveMainWorkspacePath();
                                           ^
TypeError: deps.resolveMainWorkspacePath is not a function. (In 'deps.resolveMainWorkspacePath()', 'deps.resolveMainWorkspacePath' is undefined)
      at getTaskStatusFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskCommands.ts:221:38)
(fail) interface-agnostic task functions > getTaskStatusFromParams > should get task status with valid parameters [0.36ms]
30 |  * Custom matcher to replicate Jest"s toBeInstanceOf functionality
31 |  * @param value The value to test
32 |  * @param constructor The expected constructor
33 |  */
34 | export function expectToBeInstanceOf(value: unknown, constructor: Function): void {
35 |   expect(value instanceof constructor).toBeTruthy();
                                            ^
error: expect(received).toBeTruthy()

Received: false

      at expectToBeInstanceOf (/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/assertions.ts:35:40)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks.test.ts:187:9)
(fail) interface-agnostic task functions > getTaskStatusFromParams > should throw ResourceNotFoundError when task status is not found [0.15ms]
290 |       session: validParams.session,
291 |       repo: validParams.repo,
292 |     });
293 | 
294 |     // Then get the workspace path (main repo or session's main workspace)
295 |     const workspacePath = await deps.resolveMainWorkspacePath();
                                           ^
TypeError: deps.resolveMainWorkspacePath is not a function. (In 'deps.resolveMainWorkspacePath()', 'deps.resolveMainWorkspacePath' is undefined)
      at setTaskStatusFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskCommands.ts:295:38)
(fail) interface-agnostic task functions > setTaskStatusFromParams > should set task status with valid parameters [0.33ms]
(pass) interface-agnostic task functions > setTaskStatusFromParams > should throw ValidationError when status is invalid [0.36ms]

src/domain/prepared-merge-commit-workflow.test.ts:

# Unhandled error between tests
-------------------------------
1 | (function (entry, fetcher)
              ^
SyntaxError: Export named 'sessionPrFromParams' not found in module '/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session.ts'.
      at loadAndEvaluateModule (1:11)
-------------------------------


src/domain/session-pr-refresh.test.ts:

# Unhandled error between tests
-------------------------------
1 | (function (entry, fetcher)
              ^
SyntaxError: Export named 'sessionPrFromParams' not found in module '/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session.ts'.
      at loadAndEvaluateModule (1:11)
-------------------------------


src/domain/git.test.ts:
(pass) GitService > should be able to create an instance
(pass) GitService > should get repository status [0.08ms]
(pass) GitService > getSessionWorkdir should return the correct path [0.03ms]
(pass) GitService > execInRepository should execute git commands in the specified repository
(pass) GitService > execInRepository should propagate errors [0.20ms]
(pass) GitService > should use session-ID-based storage in getSessionWorkdir
(pass) GitService - Core Methods with Dependency Injection > PR Workflow with Dependencies > should generate PR markdown with proper dependency injection [1.04ms]
(pass) GitService - Core Methods with Dependency Injection > PR Workflow with Dependencies > should handle missing session in PR workflow [0.20ms]
(pass) GitService - Core Methods with Dependency Injection > PR Workflow with Dependencies > should resolve taskId to session in PR workflow [0.26ms]
(pass) GitService - Core Methods with Dependency Injection > PR Workflow with Dependencies > should throw error when taskId has no associated session [0.11ms]
(pass) GitService - Core Methods with Dependency Injection > PR Workflow with Dependencies > should throw error when getSessionByTaskId dependency is not available [0.10ms]
(pass) GitService - Core Methods with Dependency Injection > PR Workflow with Dependencies > should prioritize session over taskId when both are provided [0.21ms]
(pass) GitService - Core Methods with Dependency Injection > PR Workflow with Dependencies > should handle git command failures gracefully in PR workflow [0.25ms]
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle commit operations with proper hash extraction [0.16ms]
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should extract commit hash from various git output formats [0.12ms]
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle missing commit hash in git output [0.04ms]
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle commit with amend flag [0.03ms]
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle stash operations with state management [0.12ms]
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle no changes to stash scenario [0.10ms]
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle popStash with existing stash [0.12ms]
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle popStash with no stash available [0.04ms]
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle merge conflicts with proper detection [0.18ms]
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle successful merge without conflicts [0.07ms]
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle staging operations with proper command execution [0.13ms]
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should verify staging commands are correct [0.06ms]
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle pullLatest with updates detected [0.13ms]
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle pullLatest with no updates [0.03ms]
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle pullLatest with custom remote [0.04ms]
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle clone operations with filesystem validation
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle clone with empty repository URL validation [0.06ms]
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle clone with existing non-empty directory [0.05ms]
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle clone failure during git command execution [0.14ms]
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle clone success verification failure
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle clone with local repository normalization [0.16ms]
(pass) GitService - Core Methods with Dependency Injection > Repository Operations with Dependency Injection > should handle error scenarios with proper error propagation [0.10ms]
(pass) GitService - Core Methods with Dependency Injection > Architecture Analysis - Testing Limitations > should demonstrate the core testing challenge [0.01ms]
(pass) createGitService Factory Function > should handle undefined options parameter without throwing runtime error
(pass) createGitService Factory Function > should handle null options parameter without throwing runtime error
(pass) createGitService Factory Function > should handle options with undefined baseDir property
(pass) createGitService Factory Function > should create GitService with custom baseDir when provided
(pass) createGitService Factory Function > should create GitService with default baseDir when no options provided
error: Command failed: git -C /test/repo add -A
fatal: cannot change to '/test/repo': No such file or directory

   code: 128,
 killed: false,
 signal: null,
    cmd: "git -C /test/repo add -A",
 stdout: "",
 stderr: "fatal: cannot change to '/test/repo': No such file or directory\n",

      at genericNodeError (node:child_process:946:22)
(fail) Parameter-Based Git Functions > commitChangesFromParams > should commit changes with all parameters [8.10ms]
error: Command failed: git -C /Users/edobry/.local/state/minsky/sessions/task#276 commit  -m "minimal commit"
husky - DEPRECATED

Please remove the following two lines from .husky/pre-commit:

#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

They WILL FAIL in v10.0.0

🔍 Checking for variable naming issues...
Checking 344 TypeScript files for variable naming issues...

✅ No variable naming issues found!
✅ No variable naming issues found.
🔍 Running ESLint...

> lint
> eslint .


/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/cli/cli-command-factory.ts
   70:56  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
   81:55  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  142:43  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  153:42  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  492:21  warning  Risky: 'as unknown' assertion on output may be unnecessary. Consider using proper types or type guards instead                           custom/no-excessive-as-unknown
  496:36  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                           custom/no-excessive-as-unknown
  504:36  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                           custom/no-excessive-as-unknown
  519:21  warning  Risky: 'as unknown' assertion on output may be unnecessary. Consider using proper types or type guards instead                           custom/no-excessive-as-unknown
  523:36  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                           custom/no-excessive-as-unknown
  600:26  warning  Risky: 'as unknown' assertion on creds may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown
  666:30  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects   custom/no-excessive-as-unknown
  671:45  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects   custom/no-excessive-as-unknown
  672:23  warning  Risky: 'as unknown' assertion on value may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown
  676:53  warning  Risky: 'as unknown' assertion on item may be unnecessary. Consider using proper types or type guards instead                             custom/no-excessive-as-unknown
  683:55  warning  Risky: 'as unknown' assertion on value may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown
  721:47  warning  Risky: 'as unknown' assertion on obj may be unnecessary. Consider using proper types or type guards instead                              custom/no-excessive-as-unknown
  726:62  warning  Risky: 'as unknown' assertion on value may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown
  728:32  warning  Risky: 'as unknown' assertion on value may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown
  729:32  warning  Risky: 'as unknown' assertion on value may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown
  735:38  warning  Risky: 'as unknown' assertion on item may be unnecessary. Consider using proper types or type guards instead                             custom/no-excessive-as-unknown
  768:20  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown
  776:11  warning  Risky: 'as unknown' assertion on obj may be unnecessary. Consider using proper types or type guards instead                              custom/no-excessive-as-unknown
  787:25  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects   custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/cli/core/cli-command-factory-core.ts
  38:49  warning  Risky: 'as unknown' assertion on "production" may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/cli/customizations/config-customizations.ts
   31:11  warning  Risky: 'as unknown' assertion on obj may be unnecessary. Consider using proper types or type guards instead     custom/no-excessive-as-unknown
  113:23  warning  Risky: 'as unknown' assertion on output may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  117:38  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  125:38  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  142:23  warning  Risky: 'as unknown' assertion on output may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  146:38  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/cli/utils/error-handler.ts
  136:17  warning  Risky: 'as unknown' assertion on { message: "Command result", result } may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/shared/commands/git.ts
  359:22  warning  Dangerous: 'as unknown' assertion on await commitChangesFromParams({
        message: params!.message,
        all: params!.all,
        amend: params!.amend,
        noStage: params!.noStage,
        repo: params!.repo,
        session: params!.session,
      }) object likely indicates a typing issue. Define proper interfaces for state/session objects                      custom/no-excessive-as-unknown
  368:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                   custom/no-excessive-as-unknown
  386:22  warning  Dangerous: 'as unknown' assertion on await pushFromParams({
        repo: params!.repo,
        session: params!.session,
        remote: params!.remote,
        force: params!.force,
        debug: params!.debug,
      }) object likely indicates a typing issue. Define proper interfaces for state/session objects                                                               custom/no-excessive-as-unknown
  394:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                   custom/no-excessive-as-unknown
  411:22  warning  Dangerous: 'as unknown' assertion on await cloneFromParams({
        url: params!.url,
        workdir: params!.destination || ".",
        session: params!.session,
        branch: params!.branch,
      }) object likely indicates a typing issue. Define proper interfaces for state/session objects                                                                               custom/no-excessive-as-unknown
  418:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                   custom/no-excessive-as-unknown
  436:22  warning  Dangerous: 'as unknown' assertion on await branchFromParams({
        session: params!.session,
        name: params!.name,
      }) object likely indicates a typing issue. Define proper interfaces for state/session objects                                                                                                                                                         custom/no-excessive-as-unknown
  441:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                   custom/no-excessive-as-unknown
  459:22  warning  Dangerous: 'as unknown' assertion on await createPullRequestFromParams({
        session: params!.session,
        repo: params!.repo,
        branch: params!.branch,
        taskId: params!.task,
        debug: params!.debug,
        noStatusUpdate: params!.noStatusUpdate,
      }) object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  468:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                   custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/shared/commands/session.ts
  290:24  warning  Dangerous: 'as unknown' assertion on await sessionApprove({
          session: params!.name,
          task: params!.task,
          repo: params!.repo,
          json: params!.json,
        }) object likely indicates a typing issue. Define proper interfaces for state/session objects                                                                                                                                                                                                                                                                                                                                 custom/no-excessive-as-unknown
  387:24  warning  Dangerous: 'as unknown' assertion on await sessionPr({
          title: params!.title,
          body: params!.body,
          bodyPath: params!.bodyPath,
          session: params!.name,
          task: params!.task,
          repo: params!.repo,
          noStatusUpdate: params!.noStatusUpdate,
          debug: params!.debug,
          skipUpdate: params!.skipUpdate,
          autoResolveDeleteConflicts: params!.autoResolveDeleteConflicts,
          skipConflictCheck: params!.skipConflictCheck,
        }) object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/shared/commands/tasks.ts
  171:47  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  174:31  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  200:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  204:47  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  207:31  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  216:14  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  217:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  218:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  219:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  223:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  270:14  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  271:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  272:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  273:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  296:49  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  299:33  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  493:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  495:16  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  496:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  497:14  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  498:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  499:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  515:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  520:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  520:48  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  525:10  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  525:46  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  532:15  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  533:21  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  534:25  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  535:15  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  536:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  537:14  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  538:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  539:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  596:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  599:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  599:42  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  602:18  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  603:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  604:16  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  605:21  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  606:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  613:59  warning  Risky: 'as unknown' assertion on task may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                        custom/no-excessive-as-unknown
  613:86  warning  Risky: 'as unknown' assertion on task may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                        custom/no-excessive-as-unknown
  620:20  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  625:20  warning  Dangerous: 'as unknown' assertion on await deleteTaskFromParams({
      taskId: (params as unknown)!.taskId,
      force: (params as unknown)!.force ?? false,
      backend: (params as unknown)!.backend,
      repo: (params as unknown)!.repo,
      workspace: (params as unknown)!.workspace,
      session: (params as unknown)!.session,
    }) object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  626:16  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  627:15  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  628:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  629:14  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  630:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  631:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  634:22  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  635:18  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  636:35  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  639:10  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  641:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                                                                               custom/no-excessive-as-unknown
  642:19  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  643:18  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  644:16  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/shared/legacy-command-registry.ts
  171:39  warning  Risky: 'as unknown' assertion on commandDef may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/shared/response-formatters.ts
   86:12  warning  Risky: 'as unknown' assertion on data may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                    custom/no-excessive-as-unknown
  286:23  warning  Risky: 'as unknown' assertion on this.columns
        .map((col) => {
          const value = String(row[col] || "");
          return value.padEnd(columnWidths[col]);
        })
        .join(" | ") may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/ai/config-service.ts
  46:19  warning  Risky: 'as unknown' assertion on provider may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git.ts
   613:71  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                          custom/no-excessive-as-unknown
  1783:25  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown
  1787:23  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown
  2233:7   warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  2253:7   warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git/pr-generation-operations.ts
  123:69  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/repository-uri.ts
   98:8   warning  Risky: 'as unknown' assertion on components may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  145:12  warning  Never cast return values to 'as unknown'. Return proper types instead                                               custom/no-excessive-as-unknown
  145:13  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead      custom/no-excessive-as-unknown
  183:26  warning  Risky: 'as unknown' assertion on targetType may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/repository.ts
  246:32  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  250:33  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/backends/error-handling.ts
  113:7   warning  Risky: 'as unknown' assertion on error may be unnecessary. Consider using proper types or type guards instead                                                    custom/no-excessive-as-unknown
  573:16  warning  Dangerous: 'as unknown' assertion on error.context.backend service likely indicates a typing issue. Use proper service interfaces instead of casting to unknown  custom/no-excessive-as-unknown
  574:13  warning  Risky: 'as unknown' assertion on (error).type may be unnecessary. Consider using proper types or type guards instead                                             custom/no-excessive-as-unknown
  575:17  warning  Risky: 'as unknown' assertion on (error).severity may be unnecessary. Consider using proper types or type guards instead                                         custom/no-excessive-as-unknown
  576:18  warning  Risky: 'as unknown' assertion on error.context.operation may be unnecessary. Consider using proper types or type guards instead                                  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/backends/postgres-storage.ts
  170:29  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                         custom/no-excessive-as-unknown
  187:30  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                         custom/no-excessive-as-unknown
  225:14  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                         custom/no-excessive-as-unknown
  241:29  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                         custom/no-excessive-as-unknown
  244:42  warning  Risky: 'as unknown' assertion on result.rowCount > 0 may be unnecessary. Consider using proper types or type guards instead             custom/no-excessive-as-unknown
  256:29  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                         custom/no-excessive-as-unknown
  261:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                   custom/no-excessive-as-unknown
  293:30  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/backends/sqlite-storage.ts
  119:31  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                                                            custom/no-excessive-as-unknown
  125:88  warning  Dangerous: 'as unknown' assertion on `${process.env.HOME}/.local/state/minsky` object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  200:20  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                                                            custom/no-excessive-as-unknown
  227:19  warning  Risky: 'as unknown' assertion on query.where(and(...conditions)) may be unnecessary. Consider using proper types or type guards instead                                    custom/no-excessive-as-unknown
  330:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                      custom/no-excessive-as-unknown
  358:45  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects                                     custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/database-integrity-checker.ts
  248:35  warning  Risky: 'as unknown' assertion on db.prepare("PRAGMA integrity_check").get() may be unnecessary. Consider using proper types or type guards instead                                          custom/no-excessive-as-unknown
  264:34  warning  Dangerous: 'as unknown' assertion on db.prepare("SELECT COUNT(*) as count FROM sessions").get() object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/json-file-storage.ts
  452:36  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks.ts
  531:63  warning  Risky: 'as unknown' assertion on data may be unnecessary. Consider using proper types or type guards instead                             custom/no-excessive-as-unknown
  677:65  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown
  684:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown
  684:55  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  688:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown
  692:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown
  696:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown
  700:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown
  704:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown
  704:66  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  731:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown
  731:60  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/githubBackendFactory.ts
  26:22  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  26:59  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  26:90  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  33:21  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  34:15  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  35:14  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  36:22  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/githubIssuesTaskBackend.ts
  189:25  warning  Risky: 'as unknown' assertion on JSON.stringify(issues) may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                          custom/no-excessive-as-unknown
  227:24  warning  Dangerous: 'as unknown' assertion on await this.octokit.rest.issues.listForRepo({
        owner: this.owner,
        repo: this.repo,
        labels: Object.values(this.statusLabels).join(",") as unknown,
        state: "all",
      }) object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  230:17  warning  Risky: 'as unknown' assertion on Object.values(this.statusLabels).join(",") may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                      custom/no-excessive-as-unknown
  355:27  warning  Risky: 'as unknown' assertion on metadata.githubIssue may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                            custom/no-excessive-as-unknown
  658:38  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects                                                                                                                                                                                                  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/jsonFileTaskBackend.ts
  560:34  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/markdown-task-backend.ts
  418:63  warning  Risky: 'as unknown' assertion on data may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskService.ts
  579:26  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/workspace.ts
  161:40  warning  Dangerous: 'as unknown' assertion on sessionProvider object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  162:33  warning  Dangerous: 'as unknown' assertion on sessionRecord object likely indicates a typing issue. Define proper interfaces for state/session objects    custom/no-excessive-as-unknown
  163:21  warning  Dangerous: 'as unknown' assertion on sessionRecord object likely indicates a typing issue. Define proper interfaces for state/session objects    custom/no-excessive-as-unknown
  198:47  warning  Dangerous: 'as unknown' assertion on sessionInfo object likely indicates a typing issue. Define proper interfaces for state/session objects      custom/no-excessive-as-unknown
  240:25  warning  Dangerous: 'as unknown' assertion on sessionInfo object likely indicates a typing issue. Define proper interfaces for state/session objects      custom/no-excessive-as-unknown
  272:34  warning  Dangerous: 'as unknown' assertion on sessionDb object likely indicates a typing issue. Define proper interfaces for state/session objects        custom/no-excessive-as-unknown
  280:16  warning  Dangerous: 'as unknown' assertion on sessionRecord object likely indicates a typing issue. Define proper interfaces for state/session objects    custom/no-excessive-as-unknown
  362:29  warning  Dangerous: 'as unknown' assertion on sessionInfo object likely indicates a typing issue. Define proper interfaces for state/session objects      custom/no-excessive-as-unknown
  366:29  warning  Dangerous: 'as unknown' assertion on sessionInfo object likely indicates a typing issue. Define proper interfaces for state/session objects      custom/no-excessive-as-unknown
  389:17  warning  Dangerous: 'as unknown' assertion on sessionInfo object likely indicates a typing issue. Define proper interfaces for state/session objects      custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/workspace/local-workspace-backend.ts
  110:65  warning  Risky: 'as unknown' assertion on error may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  209:65  warning  Risky: 'as unknown' assertion on error may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  276:72  warning  Risky: 'as unknown' assertion on error may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/errors/message-templates.ts
  299:13  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  300:19  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  305:44  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/mcp/inspector-launcher.ts
  169:43  warning  Risky: 'as unknown' assertion on data may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/mcp/server.ts
  254:27  warning  Risky: 'as unknown' assertion on Object.keys((this.server as any)._tools) may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  262:34  warning  Risky: 'as unknown' assertion on e may be unnecessary. Consider using proper types or type guards instead                                         custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/schemas/tasks.ts
  119:34  warning  Risky: 'as unknown' assertion on data.descriptionPath may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/logger.ts
   35:25  warning  Risky: 'as unknown' assertion on process.env.ENABLE_AGENT_LOGS may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  146:37  warning  Risky: 'as unknown' assertion on metadata may be unnecessary. Consider using proper types or type guards instead                       custom/no-excessive-as-unknown
  213:36  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown
  224:35  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown
  235:35  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown
  258:68  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown
  264:40  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown
  281:36  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown
  283:36  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown
  334:91  warning  Risky: 'as unknown' assertion on error may be unnecessary. Consider using proper types or type guards instead                          custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils.ts
  56:20  warning  Risky: 'as unknown' assertion on function () {
    return new originalDate(fixedDate);
  } may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/assertions.ts
  108:21  warning  Risky: 'as unknown' assertion on current may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  159:10  warning  Never cast return values to 'as unknown'. Return proper types instead                                            custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/compatibility/matchers.ts
  398:19  warning  Risky: 'as unknown' assertion on expectObj may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/compatibility/mock-function.ts
  318:12  warning  Never cast return values to 'as unknown'. Return proper types instead                                                           custom/no-excessive-as-unknown
  319:13  warning  Risky: 'as unknown' assertion on Promise.resolve(value) may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  326:12  warning  Never cast return values to 'as unknown'. Return proper types instead                                                           custom/no-excessive-as-unknown
  327:13  warning  Risky: 'as unknown' assertion on Promise.resolve(value) may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  334:12  warning  Never cast return values to 'as unknown'. Return proper types instead                                                           custom/no-excessive-as-unknown
  335:13  warning  Risky: 'as unknown' assertion on Promise.reject(value) may be unnecessary. Consider using proper types or type guards instead   custom/no-excessive-as-unknown
  342:12  warning  Never cast return values to 'as unknown'. Return proper types instead                                                           custom/no-excessive-as-unknown
  343:13  warning  Risky: 'as unknown' assertion on Promise.reject(value) may be unnecessary. Consider using proper types or type guards instead   custom/no-excessive-as-unknown
  421:24  warning  Risky: 'as unknown' assertion on { ...module } may be unnecessary. Consider using proper types or type guards instead           custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/index.ts
  115:24  warning  Risky: 'as unknown' assertion on (...args: any[]) => mockFn(...args) may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/mocking.ts
   48:10  warning  Risky: 'as unknown' assertion on createMock(implementation) may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  440:16  warning  Risky: 'as unknown' assertion on { ...implementations } may be unnecessary. Consider using proper types or type guards instead      custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/tests/adapters/cli/session-test-utilities.ts
   64:25  warning  Risky: 'as unknown' assertion on {
    findAll: createMock(),
    findByName: createMock(),
    findByTaskId: createMock(),
    findByRepoPath: createMock(),
    save: createMock(),
    getSessionByTaskId: createMock(),
    getSession: createMock(),
    getSessionWorkdir: createMock(),
  } may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        custom/no-excessive-as-unknown
  111:10  warning  Risky: 'as unknown' assertion on {
    getCurrentBranch: createMock().mockResolvedValue("main"),
    getRemoteUrl: createMock().mockResolvedValue("https://github.com/edobry/minsky"),
    getRepoPath: createMock().mockResolvedValue("/Users/edobry/Projects/minsky"),
    clone: createMock().mockResolvedValue(undefined),
    checkout: createMock().mockResolvedValue(undefined),
    createBranch: createMock().mockResolvedValue(undefined),
    push: createMock().mockResolvedValue(undefined),
    pull: createMock().mockResolvedValue(undefined),
    merge: createMock().mockResolvedValue(undefined),
    getStatus: createMock().mockResolvedValue({ hasChanges: false, changes: [] }),
    add: createMock().mockResolvedValue(undefined),
    commit: createMock().mockResolvedValue(undefined),
    reset: createMock().mockResolvedValue(undefined),
    stash: createMock().mockResolvedValue(undefined),
    stashPop: createMock().mockResolvedValue(undefined),
    getCommitHash: createMock().mockResolvedValue("abc123"),
  } may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

✖ 217 problems (0 errors, 217 warnings)

✅ All checks passed!
husky - DEPRECATED

Please remove the following two lines from .husky/commit-msg:

#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

They WILL FAIL in v10.0.0

❌ Invalid commit message:
Forbidden placeholder message: "minimal commit
". Please use a descriptive conventional commit message.

Commit message: "minimal commit"
husky - commit-msg script failed (code 1)

   code: 1,
 killed: false,
 signal: null,
    cmd: "git -C /Users/edobry/.local/state/minsky/sessions/task#276 commit  -m \"minimal commit\"",
 stdout: "",
 stderr: "husky - DEPRECATED\n\nPlease remove the following two lines from .husky/pre-commit:\n\n#!/usr/bin/env sh\n. \"$(dirname -- \"$0\")/_/husky.sh\"\n\nThey WILL FAIL in v10.0.0\n\n🔍 Checking for variable naming issues...\nChecking 344 TypeScript files for variable naming issues...\n\n✅ No variable naming issues found!\n✅ No variable naming issues found.\n🔍 Running ESLint...\n\n> lint\n> eslint .\n\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/cli/cli-command-factory.ts\n   70:56  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n   81:55  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  142:43  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  153:42  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  492:21  warning  Risky: 'as unknown' assertion on output may be unnecessary. Consider using proper types or type guards instead                           custom/no-excessive-as-unknown\n  496:36  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                           custom/no-excessive-as-unknown\n  504:36  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                           custom/no-excessive-as-unknown\n  519:21  warning  Risky: 'as unknown' assertion on output may be unnecessary. Consider using proper types or type guards instead                           custom/no-excessive-as-unknown\n  523:36  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                           custom/no-excessive-as-unknown\n  600:26  warning  Risky: 'as unknown' assertion on creds may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown\n  666:30  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects   custom/no-excessive-as-unknown\n  671:45  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects   custom/no-excessive-as-unknown\n  672:23  warning  Risky: 'as unknown' assertion on value may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown\n  676:53  warning  Risky: 'as unknown' assertion on item may be unnecessary. Consider using proper types or type guards instead                             custom/no-excessive-as-unknown\n  683:55  warning  Risky: 'as unknown' assertion on value may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown\n  721:47  warning  Risky: 'as unknown' assertion on obj may be unnecessary. Consider using proper types or type guards instead                              custom/no-excessive-as-unknown\n  726:62  warning  Risky: 'as unknown' assertion on value may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown\n  728:32  warning  Risky: 'as unknown' assertion on value may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown\n  729:32  warning  Risky: 'as unknown' assertion on value may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown\n  735:38  warning  Risky: 'as unknown' assertion on item may be unnecessary. Consider using proper types or type guards instead                             custom/no-excessive-as-unknown\n  768:20  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown\n  776:11  warning  Risky: 'as unknown' assertion on obj may be unnecessary. Consider using proper types or type guards instead                              custom/no-excessive-as-unknown\n  787:25  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects   custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/cli/core/cli-command-factory-core.ts\n  38:49  warning  Risky: 'as unknown' assertion on \"production\" may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/cli/customizations/config-customizations.ts\n   31:11  warning  Risky: 'as unknown' assertion on obj may be unnecessary. Consider using proper types or type guards instead     custom/no-excessive-as-unknown\n  113:23  warning  Risky: 'as unknown' assertion on output may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  117:38  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  125:38  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  142:23  warning  Risky: 'as unknown' assertion on output may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  146:38  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/cli/utils/error-handler.ts\n  136:17  warning  Risky: 'as unknown' assertion on { message: \"Command result\", result } may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/shared/commands/git.ts\n  359:22  warning  Dangerous: 'as unknown' assertion on await commitChangesFromParams({\n        message: params!.message,\n        all: params!.all,\n        amend: params!.amend,\n        noStage: params!.noStage,\n        repo: params!.repo,\n        session: params!.session,\n      }) object likely indicates a typing issue. Define proper interfaces for state/session objects                      custom/no-excessive-as-unknown\n  368:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                   custom/no-excessive-as-unknown\n  386:22  warning  Dangerous: 'as unknown' assertion on await pushFromParams({\n        repo: params!.repo,\n        session: params!.session,\n        remote: params!.remote,\n        force: params!.force,\n        debug: params!.debug,\n      }) object likely indicates a typing issue. Define proper interfaces for state/session objects                                                               custom/no-excessive-as-unknown\n  394:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                   custom/no-excessive-as-unknown\n  411:22  warning  Dangerous: 'as unknown' assertion on await cloneFromParams({\n        url: params!.url,\n        workdir: params!.destination || \".\",\n        session: params!.session,\n        branch: params!.branch,\n      }) object likely indicates a typing issue. Define proper interfaces for state/session objects                                                                               custom/no-excessive-as-unknown\n  418:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                   custom/no-excessive-as-unknown\n  436:22  warning  Dangerous: 'as unknown' assertion on await branchFromParams({\n        session: params!.session,\n        name: params!.name,\n      }) object likely indicates a typing issue. Define proper interfaces for state/session objects                                                                                                                                                         custom/no-excessive-as-unknown\n  441:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                   custom/no-excessive-as-unknown\n  459:22  warning  Dangerous: 'as unknown' assertion on await createPullRequestFromParams({\n        session: params!.session,\n        repo: params!.repo,\n        branch: params!.branch,\n        taskId: params!.task,\n        debug: params!.debug,\n        noStatusUpdate: params!.noStatusUpdate,\n      }) object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  468:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                   custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/shared/commands/session.ts\n  290:24  warning  Dangerous: 'as unknown' assertion on await sessionApprove({\n          session: params!.name,\n          task: params!.task,\n          repo: params!.repo,\n          json: params!.json,\n        }) object likely indicates a typing issue. Define proper interfaces for state/session objects                                                                                                                                                                                                                                                                                                                                 custom/no-excessive-as-unknown\n  387:24  warning  Dangerous: 'as unknown' assertion on await sessionPr({\n          title: params!.title,\n          body: params!.body,\n          bodyPath: params!.bodyPath,\n          session: params!.name,\n          task: params!.task,\n          repo: params!.repo,\n          noStatusUpdate: params!.noStatusUpdate,\n          debug: params!.debug,\n          skipUpdate: params!.skipUpdate,\n          autoResolveDeleteConflicts: params!.autoResolveDeleteConflicts,\n          skipConflictCheck: params!.skipConflictCheck,\n        }) object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/shared/commands/tasks.ts\n  171:47  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  174:31  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  200:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  204:47  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  207:31  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  216:14  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  217:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  218:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  219:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  223:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  270:14  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  271:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  272:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  273:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  296:49  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  299:33  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  493:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  495:16  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  496:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  497:14  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  498:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  499:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  515:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  520:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  520:48  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  525:10  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  525:46  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  532:15  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  533:21  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  534:25  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  535:15  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  536:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  537:14  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  538:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  539:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  596:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  599:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  599:42  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  602:18  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  603:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  604:16  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  605:21  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  606:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  613:59  warning  Risky: 'as unknown' assertion on task may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                        custom/no-excessive-as-unknown\n  613:86  warning  Risky: 'as unknown' assertion on task may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                        custom/no-excessive-as-unknown\n  620:20  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  625:20  warning  Dangerous: 'as unknown' assertion on await deleteTaskFromParams({\n      taskId: (params as unknown)!.taskId,\n      force: (params as unknown)!.force ?? false,\n      backend: (params as unknown)!.backend,\n      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,\n    }) object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  626:16  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  627:15  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  628:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  629:14  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  630:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  631:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  634:22  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  635:18  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  636:35  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  639:10  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  641:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                                                                               custom/no-excessive-as-unknown\n  642:19  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  643:18  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  644:16  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/shared/legacy-command-registry.ts\n  171:39  warning  Risky: 'as unknown' assertion on commandDef may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/shared/response-formatters.ts\n   86:12  warning  Risky: 'as unknown' assertion on data may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                    custom/no-excessive-as-unknown\n  286:23  warning  Risky: 'as unknown' assertion on this.columns\n        .map((col) => {\n          const value = String(row[col] || \"\");\n          return value.padEnd(columnWidths[col]);\n        })\n        .join(\" | \") may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/ai/config-service.ts\n  46:19  warning  Risky: 'as unknown' assertion on provider may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git.ts\n   613:71  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                          custom/no-excessive-as-unknown\n  1783:25  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown\n  1787:23  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown\n  2233:7   warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  2253:7   warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git/pr-generation-operations.ts\n  123:69  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/repository-uri.ts\n   98:8   warning  Risky: 'as unknown' assertion on components may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  145:12  warning  Never cast return values to 'as unknown'. Return proper types instead                                               custom/no-excessive-as-unknown\n  145:13  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead      custom/no-excessive-as-unknown\n  183:26  warning  Risky: 'as unknown' assertion on targetType may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/repository.ts\n  246:32  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  250:33  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/backends/error-handling.ts\n  113:7   warning  Risky: 'as unknown' assertion on error may be unnecessary. Consider using proper types or type guards instead                                                    custom/no-excessive-as-unknown\n  573:16  warning  Dangerous: 'as unknown' assertion on error.context.backend service likely indicates a typing issue. Use proper service interfaces instead of casting to unknown  custom/no-excessive-as-unknown\n  574:13  warning  Risky: 'as unknown' assertion on (error).type may be unnecessary. Consider using proper types or type guards instead                                             custom/no-excessive-as-unknown\n  575:17  warning  Risky: 'as unknown' assertion on (error).severity may be unnecessary. Consider using proper types or type guards instead                                         custom/no-excessive-as-unknown\n  576:18  warning  Risky: 'as unknown' assertion on error.context.operation may be unnecessary. Consider using proper types or type guards instead                                  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/backends/postgres-storage.ts\n  170:29  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                         custom/no-excessive-as-unknown\n  187:30  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                         custom/no-excessive-as-unknown\n  225:14  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                         custom/no-excessive-as-unknown\n  241:29  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                         custom/no-excessive-as-unknown\n  244:42  warning  Risky: 'as unknown' assertion on result.rowCount > 0 may be unnecessary. Consider using proper types or type guards instead             custom/no-excessive-as-unknown\n  256:29  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                         custom/no-excessive-as-unknown\n  261:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                   custom/no-excessive-as-unknown\n  293:30  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/backends/sqlite-storage.ts\n  119:31  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                                                            custom/no-excessive-as-unknown\n  125:88  warning  Dangerous: 'as unknown' assertion on `${process.env.HOME}/.local/state/minsky` object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  200:20  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                                                            custom/no-excessive-as-unknown\n  227:19  warning  Risky: 'as unknown' assertion on query.where(and(...conditions)) may be unnecessary. Consider using proper types or type guards instead                                    custom/no-excessive-as-unknown\n  330:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                      custom/no-excessive-as-unknown\n  358:45  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects                                     custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/database-integrity-checker.ts\n  248:35  warning  Risky: 'as unknown' assertion on db.prepare(\"PRAGMA integrity_check\").get() may be unnecessary. Consider using proper types or type guards instead                                          custom/no-excessive-as-unknown\n  264:34  warning  Dangerous: 'as unknown' assertion on db.prepare(\"SELECT COUNT(*) as count FROM sessions\").get() object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/json-file-storage.ts\n  452:36  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks.ts\n  531:63  warning  Risky: 'as unknown' assertion on data may be unnecessary. Consider using proper types or type guards instead                             custom/no-excessive-as-unknown\n  677:65  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown\n  684:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown\n  684:55  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  688:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown\n  692:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown\n  696:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown\n  700:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown\n  704:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown\n  704:66  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  731:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown\n  731:60  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/githubBackendFactory.ts\n  26:22  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  26:59  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  26:90  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  33:21  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  34:15  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  35:14  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  36:22  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/githubIssuesTaskBackend.ts\n  189:25  warning  Risky: 'as unknown' assertion on JSON.stringify(issues) may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                          custom/no-excessive-as-unknown\n  227:24  warning  Dangerous: 'as unknown' assertion on await this.octokit.rest.issues.listForRepo({\n        owner: this.owner,\n        repo: this.repo,\n        labels: Object.values(this.statusLabels).join(\",\") as unknown,\n        state: \"all\",\n      }) object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  230:17  warning  Risky: 'as unknown' assertion on Object.values(this.statusLabels).join(\",\") may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                      custom/no-excessive-as-unknown\n  355:27  warning  Risky: 'as unknown' assertion on metadata.githubIssue may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                            custom/no-excessive-as-unknown\n  658:38  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects                                                                                                                                                                                                  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/jsonFileTaskBackend.ts\n  560:34  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/markdown-task-backend.ts\n  418:63  warning  Risky: 'as unknown' assertion on data may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskService.ts\n  579:26  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/workspace.ts\n  161:40  warning  Dangerous: 'as unknown' assertion on sessionProvider object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  162:33  warning  Dangerous: 'as unknown' assertion on sessionRecord object likely indicates a typing issue. Define proper interfaces for state/session objects    custom/no-excessive-as-unknown\n  163:21  warning  Dangerous: 'as unknown' assertion on sessionRecord object likely indicates a typing issue. Define proper interfaces for state/session objects    custom/no-excessive-as-unknown\n  198:47  warning  Dangerous: 'as unknown' assertion on sessionInfo object likely indicates a typing issue. Define proper interfaces for state/session objects      custom/no-excessive-as-unknown\n  240:25  warning  Dangerous: 'as unknown' assertion on sessionInfo object likely indicates a typing issue. Define proper interfaces for state/session objects      custom/no-excessive-as-unknown\n  272:34  warning  Dangerous: 'as unknown' assertion on sessionDb object likely indicates a typing issue. Define proper interfaces for state/session objects        custom/no-excessive-as-unknown\n  280:16  warning  Dangerous: 'as unknown' assertion on sessionRecord object likely indicates a typing issue. Define proper interfaces for state/session objects    custom/no-excessive-as-unknown\n  362:29  warning  Dangerous: 'as unknown' assertion on sessionInfo object likely indicates a typing issue. Define proper interfaces for state/session objects      custom/no-excessive-as-unknown\n  366:29  warning  Dangerous: 'as unknown' assertion on sessionInfo object likely indicates a typing issue. Define proper interfaces for state/session objects      custom/no-excessive-as-unknown\n  389:17  warning  Dangerous: 'as unknown' assertion on sessionInfo object likely indicates a typing issue. Define proper interfaces for state/session objects      custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/workspace/local-workspace-backend.ts\n  110:65  warning  Risky: 'as unknown' assertion on error may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  209:65  warning  Risky: 'as unknown' assertion on error may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  276:72  warning  Risky: 'as unknown' assertion on error may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/errors/message-templates.ts\n  299:13  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  300:19  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  305:44  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/mcp/inspector-launcher.ts\n  169:43  warning  Risky: 'as unknown' assertion on data may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/mcp/server.ts\n  254:27  warning  Risky: 'as unknown' assertion on Object.keys((this.server as any)._tools) may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  262:34  warning  Risky: 'as unknown' assertion on e may be unnecessary. Consider using proper types or type guards instead                                         custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/schemas/tasks.ts\n  119:34  warning  Risky: 'as unknown' assertion on data.descriptionPath may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/logger.ts\n   35:25  warning  Risky: 'as unknown' assertion on process.env.ENABLE_AGENT_LOGS may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  146:37  warning  Risky: 'as unknown' assertion on metadata may be unnecessary. Consider using proper types or type guards instead                       custom/no-excessive-as-unknown\n  213:36  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown\n  224:35  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown\n  235:35  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown\n  258:68  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown\n  264:40  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown\n  281:36  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown\n  283:36  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown\n  334:91  warning  Risky: 'as unknown' assertion on error may be unnecessary. Consider using proper types or type guards instead                          custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils.ts\n  56:20  warning  Risky: 'as unknown' assertion on function () {\n    return new originalDate(fixedDate);\n  } may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/assertions.ts\n  108:21  warning  Risky: 'as unknown' assertion on current may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  159:10  warning  Never cast return values to 'as unknown'. Return proper types instead                                            custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/compatibility/matchers.ts\n  398:19  warning  Risky: 'as unknown' assertion on expectObj may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/compatibility/mock-function.ts\n  318:12  warning  Never cast return values to 'as unknown'. Return proper types instead                                                           custom/no-excessive-as-unknown\n  319:13  warning  Risky: 'as unknown' assertion on Promise.resolve(value) may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  326:12  warning  Never cast return values to 'as unknown'. Return proper types instead                                                           custom/no-excessive-as-unknown\n  327:13  warning  Risky: 'as unknown' assertion on Promise.resolve(value) may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  334:12  warning  Never cast return values to 'as unknown'. Return proper types instead                                                           custom/no-excessive-as-unknown\n  335:13  warning  Risky: 'as unknown' assertion on Promise.reject(value) may be unnecessary. Consider using proper types or type guards instead   custom/no-excessive-as-unknown\n  342:12  warning  Never cast return values to 'as unknown'. Return proper types instead                                                           custom/no-excessive-as-unknown\n  343:13  warning  Risky: 'as unknown' assertion on Promise.reject(value) may be unnecessary. Consider using proper types or type guards instead   custom/no-excessive-as-unknown\n  421:24  warning  Risky: 'as unknown' assertion on { ...module } may be unnecessary. Consider using proper types or type guards instead           custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/index.ts\n  115:24  warning  Risky: 'as unknown' assertion on (...args: any[]) => mockFn(...args) may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/mocking.ts\n   48:10  warning  Risky: 'as unknown' assertion on createMock(implementation) may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  440:16  warning  Risky: 'as unknown' assertion on { ...implementations } may be unnecessary. Consider using proper types or type guards instead      custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/tests/adapters/cli/session-test-utilities.ts\n   64:25  warning  Risky: 'as unknown' assertion on {\n    findAll: createMock(),\n    findByName: createMock(),\n    findByTaskId: createMock(),\n    findByRepoPath: createMock(),\n    save: createMock(),\n    getSessionByTaskId: createMock(),\n    getSession: createMock(),\n    getSessionWorkdir: createMock(),\n  } may be unnecessary. Consider using proper types or type guards insteadcustom/no-excessive-as-unknown\n  111:10  warning  Risky: 'as unknown' assertion on {\n    getCurrentBranch: createMock().mockResolvedValue(\"main\"),\n    getRemoteUrl: createMock().mockResolvedValue(\"https://github.com/edobry/minsky\"),\n    getRepoPath: createMock().mockResolvedValue(\"/Users/edobry/Projects/minsky\"),\n    clone: createMock().mockResolvedValue(undefined),\n    checkout: createMock().mockResolvedValue(undefined),\n    createBranch: createMock().mockResolvedValue(undefined),\n    push: createMock().mockResolvedValue(undefined),\n    pull: createMock().mockResolvedValue(undefined),\n    merge: createMock().mockResolvedValue(undefined),\n    getStatus: createMock().mockResolvedValue({ hasChanges: false, changes: [] }),\n    add: createMock().mockResolvedValue(undefined),\n    commit: createMock().mockResolvedValue(undefined),\n    reset: createMock().mockResolvedValue(undefined),\n    stash: createMock().mockResolvedValue(undefined),\n    stashPop: createMock().mockResolvedValue(undefined),\n    getCommitHash: createMock().mockResolvedValue(\"abc123\"),\n  } may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n✖ 217 problems (0 errors, 217 warnings)\n\n✅ All checks passed!\nhusky - DEPRECATED\n\nPlease remove the following two lines from .husky/commit-msg:\n\n#!/usr/bin/env sh\n. \"$(dirname -- \"$0\")/_/husky.sh\"\n\nThey WILL FAIL in v10.0.0\n\n❌ Invalid commit message:\nForbidden placeholder message: \"minimal commit\n\". Please use a descriptive conventional commit message.\n\nCommit message: \"minimal commit\"\nhusky - commit-msg script failed (code 1)\n",

      at genericNodeError (node:child_process:946:22)
(fail) Parameter-Based Git Functions > commitChangesFromParams > should handle commit with minimal parameters [3331.03ms]
error: Command failed: git -C /Users/edobry/.local/state/minsky/sessions/task#276 commit --amend -m "amended commit"
husky - DEPRECATED

Please remove the following two lines from .husky/pre-commit:

#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

They WILL FAIL in v10.0.0

🔍 Checking for variable naming issues...
Checking 344 TypeScript files for variable naming issues...

✅ No variable naming issues found!
✅ No variable naming issues found.
🔍 Running ESLint...

> lint
> eslint .


/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/cli/cli-command-factory.ts
   70:56  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
   81:55  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  142:43  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  153:42  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  492:21  warning  Risky: 'as unknown' assertion on output may be unnecessary. Consider using proper types or type guards instead                           custom/no-excessive-as-unknown
  496:36  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                           custom/no-excessive-as-unknown
  504:36  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                           custom/no-excessive-as-unknown
  519:21  warning  Risky: 'as unknown' assertion on output may be unnecessary. Consider using proper types or type guards instead                           custom/no-excessive-as-unknown
  523:36  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                           custom/no-excessive-as-unknown
  600:26  warning  Risky: 'as unknown' assertion on creds may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown
  666:30  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects   custom/no-excessive-as-unknown
  671:45  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects   custom/no-excessive-as-unknown
  672:23  warning  Risky: 'as unknown' assertion on value may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown
  676:53  warning  Risky: 'as unknown' assertion on item may be unnecessary. Consider using proper types or type guards instead                             custom/no-excessive-as-unknown
  683:55  warning  Risky: 'as unknown' assertion on value may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown
  721:47  warning  Risky: 'as unknown' assertion on obj may be unnecessary. Consider using proper types or type guards instead                              custom/no-excessive-as-unknown
  726:62  warning  Risky: 'as unknown' assertion on value may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown
  728:32  warning  Risky: 'as unknown' assertion on value may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown
  729:32  warning  Risky: 'as unknown' assertion on value may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown
  735:38  warning  Risky: 'as unknown' assertion on item may be unnecessary. Consider using proper types or type guards instead                             custom/no-excessive-as-unknown
  768:20  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown
  776:11  warning  Risky: 'as unknown' assertion on obj may be unnecessary. Consider using proper types or type guards instead                              custom/no-excessive-as-unknown
  787:25  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects   custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/cli/core/cli-command-factory-core.ts
  38:49  warning  Risky: 'as unknown' assertion on "production" may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/cli/customizations/config-customizations.ts
   31:11  warning  Risky: 'as unknown' assertion on obj may be unnecessary. Consider using proper types or type guards instead     custom/no-excessive-as-unknown
  113:23  warning  Risky: 'as unknown' assertion on output may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  117:38  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  125:38  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  142:23  warning  Risky: 'as unknown' assertion on output may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  146:38  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/cli/utils/error-handler.ts
  136:17  warning  Risky: 'as unknown' assertion on { message: "Command result", result } may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/shared/commands/git.ts
  359:22  warning  Dangerous: 'as unknown' assertion on await commitChangesFromParams({
        message: params!.message,
        all: params!.all,
        amend: params!.amend,
        noStage: params!.noStage,
        repo: params!.repo,
        session: params!.session,
      }) object likely indicates a typing issue. Define proper interfaces for state/session objects                      custom/no-excessive-as-unknown
  368:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                   custom/no-excessive-as-unknown
  386:22  warning  Dangerous: 'as unknown' assertion on await pushFromParams({
        repo: params!.repo,
        session: params!.session,
        remote: params!.remote,
        force: params!.force,
        debug: params!.debug,
      }) object likely indicates a typing issue. Define proper interfaces for state/session objects                                                               custom/no-excessive-as-unknown
  394:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                   custom/no-excessive-as-unknown
  411:22  warning  Dangerous: 'as unknown' assertion on await cloneFromParams({
        url: params!.url,
        workdir: params!.destination || ".",
        session: params!.session,
        branch: params!.branch,
      }) object likely indicates a typing issue. Define proper interfaces for state/session objects                                                                               custom/no-excessive-as-unknown
  418:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                   custom/no-excessive-as-unknown
  436:22  warning  Dangerous: 'as unknown' assertion on await branchFromParams({
        session: params!.session,
        name: params!.name,
      }) object likely indicates a typing issue. Define proper interfaces for state/session objects                                                                                                                                                         custom/no-excessive-as-unknown
  441:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                   custom/no-excessive-as-unknown
  459:22  warning  Dangerous: 'as unknown' assertion on await createPullRequestFromParams({
        session: params!.session,
        repo: params!.repo,
        branch: params!.branch,
        taskId: params!.task,
        debug: params!.debug,
        noStatusUpdate: params!.noStatusUpdate,
      }) object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  468:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                   custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/shared/commands/session.ts
  290:24  warning  Dangerous: 'as unknown' assertion on await sessionApprove({
          session: params!.name,
          task: params!.task,
          repo: params!.repo,
          json: params!.json,
        }) object likely indicates a typing issue. Define proper interfaces for state/session objects                                                                                                                                                                                                                                                                                                                                 custom/no-excessive-as-unknown
  387:24  warning  Dangerous: 'as unknown' assertion on await sessionPr({
          title: params!.title,
          body: params!.body,
          bodyPath: params!.bodyPath,
          session: params!.name,
          task: params!.task,
          repo: params!.repo,
          noStatusUpdate: params!.noStatusUpdate,
          debug: params!.debug,
          skipUpdate: params!.skipUpdate,
          autoResolveDeleteConflicts: params!.autoResolveDeleteConflicts,
          skipConflictCheck: params!.skipConflictCheck,
        }) object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/shared/commands/tasks.ts
  171:47  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  174:31  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  200:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  204:47  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  207:31  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  216:14  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  217:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  218:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  219:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  223:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  270:14  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  271:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  272:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  273:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  296:49  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  299:33  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  493:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  495:16  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  496:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  497:14  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  498:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  499:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  515:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  520:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  520:48  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  525:10  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  525:46  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  532:15  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  533:21  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  534:25  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  535:15  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  536:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  537:14  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  538:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  539:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  596:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  599:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  599:42  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  602:18  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  603:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  604:16  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  605:21  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  606:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  613:59  warning  Risky: 'as unknown' assertion on task may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                        custom/no-excessive-as-unknown
  613:86  warning  Risky: 'as unknown' assertion on task may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                        custom/no-excessive-as-unknown
  620:20  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  625:20  warning  Dangerous: 'as unknown' assertion on await deleteTaskFromParams({
      taskId: (params as unknown)!.taskId,
      force: (params as unknown)!.force ?? false,
      backend: (params as unknown)!.backend,
      repo: (params as unknown)!.repo,
      workspace: (params as unknown)!.workspace,
      session: (params as unknown)!.session,
    }) object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  626:16  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  627:15  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  628:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  629:14  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  630:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  631:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  634:22  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  635:18  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  636:35  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  639:10  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  641:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                                                                               custom/no-excessive-as-unknown
  642:19  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  643:18  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  644:16  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/shared/legacy-command-registry.ts
  171:39  warning  Risky: 'as unknown' assertion on commandDef may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/shared/response-formatters.ts
   86:12  warning  Risky: 'as unknown' assertion on data may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                    custom/no-excessive-as-unknown
  286:23  warning  Risky: 'as unknown' assertion on this.columns
        .map((col) => {
          const value = String(row[col] || "");
          return value.padEnd(columnWidths[col]);
        })
        .join(" | ") may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/ai/config-service.ts
  46:19  warning  Risky: 'as unknown' assertion on provider may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git.ts
   613:71  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                          custom/no-excessive-as-unknown
  1783:25  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown
  1787:23  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown
  2233:7   warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  2253:7   warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git/pr-generation-operations.ts
  123:69  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/repository-uri.ts
   98:8   warning  Risky: 'as unknown' assertion on components may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  145:12  warning  Never cast return values to 'as unknown'. Return proper types instead                                               custom/no-excessive-as-unknown
  145:13  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead      custom/no-excessive-as-unknown
  183:26  warning  Risky: 'as unknown' assertion on targetType may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/repository.ts
  246:32  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  250:33  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/backends/error-handling.ts
  113:7   warning  Risky: 'as unknown' assertion on error may be unnecessary. Consider using proper types or type guards instead                                                    custom/no-excessive-as-unknown
  573:16  warning  Dangerous: 'as unknown' assertion on error.context.backend service likely indicates a typing issue. Use proper service interfaces instead of casting to unknown  custom/no-excessive-as-unknown
  574:13  warning  Risky: 'as unknown' assertion on (error).type may be unnecessary. Consider using proper types or type guards instead                                             custom/no-excessive-as-unknown
  575:17  warning  Risky: 'as unknown' assertion on (error).severity may be unnecessary. Consider using proper types or type guards instead                                         custom/no-excessive-as-unknown
  576:18  warning  Risky: 'as unknown' assertion on error.context.operation may be unnecessary. Consider using proper types or type guards instead                                  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/backends/postgres-storage.ts
  170:29  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                         custom/no-excessive-as-unknown
  187:30  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                         custom/no-excessive-as-unknown
  225:14  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                         custom/no-excessive-as-unknown
  241:29  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                         custom/no-excessive-as-unknown
  244:42  warning  Risky: 'as unknown' assertion on result.rowCount > 0 may be unnecessary. Consider using proper types or type guards instead             custom/no-excessive-as-unknown
  256:29  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                         custom/no-excessive-as-unknown
  261:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                   custom/no-excessive-as-unknown
  293:30  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/backends/sqlite-storage.ts
  119:31  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                                                            custom/no-excessive-as-unknown
  125:88  warning  Dangerous: 'as unknown' assertion on `${process.env.HOME}/.local/state/minsky` object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  200:20  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                                                            custom/no-excessive-as-unknown
  227:19  warning  Risky: 'as unknown' assertion on query.where(and(...conditions)) may be unnecessary. Consider using proper types or type guards instead                                    custom/no-excessive-as-unknown
  330:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                      custom/no-excessive-as-unknown
  358:45  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects                                     custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/database-integrity-checker.ts
  248:35  warning  Risky: 'as unknown' assertion on db.prepare("PRAGMA integrity_check").get() may be unnecessary. Consider using proper types or type guards instead                                          custom/no-excessive-as-unknown
  264:34  warning  Dangerous: 'as unknown' assertion on db.prepare("SELECT COUNT(*) as count FROM sessions").get() object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/json-file-storage.ts
  452:36  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks.ts
  531:63  warning  Risky: 'as unknown' assertion on data may be unnecessary. Consider using proper types or type guards instead                             custom/no-excessive-as-unknown
  677:65  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown
  684:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown
  684:55  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  688:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown
  692:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown
  696:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown
  700:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown
  704:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown
  704:66  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  731:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown
  731:60  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/githubBackendFactory.ts
  26:22  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  26:59  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  26:90  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  33:21  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  34:15  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  35:14  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  36:22  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/githubIssuesTaskBackend.ts
  189:25  warning  Risky: 'as unknown' assertion on JSON.stringify(issues) may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                          custom/no-excessive-as-unknown
  227:24  warning  Dangerous: 'as unknown' assertion on await this.octokit.rest.issues.listForRepo({
        owner: this.owner,
        repo: this.repo,
        labels: Object.values(this.statusLabels).join(",") as unknown,
        state: "all",
      }) object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  230:17  warning  Risky: 'as unknown' assertion on Object.values(this.statusLabels).join(",") may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                      custom/no-excessive-as-unknown
  355:27  warning  Risky: 'as unknown' assertion on metadata.githubIssue may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                            custom/no-excessive-as-unknown
  658:38  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects                                                                                                                                                                                                  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/jsonFileTaskBackend.ts
  560:34  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/markdown-task-backend.ts
  418:63  warning  Risky: 'as unknown' assertion on data may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskService.ts
  579:26  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/workspace.ts
  161:40  warning  Dangerous: 'as unknown' assertion on sessionProvider object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  162:33  warning  Dangerous: 'as unknown' assertion on sessionRecord object likely indicates a typing issue. Define proper interfaces for state/session objects    custom/no-excessive-as-unknown
  163:21  warning  Dangerous: 'as unknown' assertion on sessionRecord object likely indicates a typing issue. Define proper interfaces for state/session objects    custom/no-excessive-as-unknown
  198:47  warning  Dangerous: 'as unknown' assertion on sessionInfo object likely indicates a typing issue. Define proper interfaces for state/session objects      custom/no-excessive-as-unknown
  240:25  warning  Dangerous: 'as unknown' assertion on sessionInfo object likely indicates a typing issue. Define proper interfaces for state/session objects      custom/no-excessive-as-unknown
  272:34  warning  Dangerous: 'as unknown' assertion on sessionDb object likely indicates a typing issue. Define proper interfaces for state/session objects        custom/no-excessive-as-unknown
  280:16  warning  Dangerous: 'as unknown' assertion on sessionRecord object likely indicates a typing issue. Define proper interfaces for state/session objects    custom/no-excessive-as-unknown
  362:29  warning  Dangerous: 'as unknown' assertion on sessionInfo object likely indicates a typing issue. Define proper interfaces for state/session objects      custom/no-excessive-as-unknown
  366:29  warning  Dangerous: 'as unknown' assertion on sessionInfo object likely indicates a typing issue. Define proper interfaces for state/session objects      custom/no-excessive-as-unknown
  389:17  warning  Dangerous: 'as unknown' assertion on sessionInfo object likely indicates a typing issue. Define proper interfaces for state/session objects      custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/workspace/local-workspace-backend.ts
  110:65  warning  Risky: 'as unknown' assertion on error may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  209:65  warning  Risky: 'as unknown' assertion on error may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  276:72  warning  Risky: 'as unknown' assertion on error may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/errors/message-templates.ts
  299:13  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  300:19  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  305:44  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/mcp/inspector-launcher.ts
  169:43  warning  Risky: 'as unknown' assertion on data may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/mcp/server.ts
  254:27  warning  Risky: 'as unknown' assertion on Object.keys((this.server as any)._tools) may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  262:34  warning  Risky: 'as unknown' assertion on e may be unnecessary. Consider using proper types or type guards instead                                         custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/schemas/tasks.ts
  119:34  warning  Risky: 'as unknown' assertion on data.descriptionPath may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/logger.ts
   35:25  warning  Risky: 'as unknown' assertion on process.env.ENABLE_AGENT_LOGS may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  146:37  warning  Risky: 'as unknown' assertion on metadata may be unnecessary. Consider using proper types or type guards instead                       custom/no-excessive-as-unknown
  213:36  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown
  224:35  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown
  235:35  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown
  258:68  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown
  264:40  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown
  281:36  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown
  283:36  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown
  334:91  warning  Risky: 'as unknown' assertion on error may be unnecessary. Consider using proper types or type guards instead                          custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils.ts
  56:20  warning  Risky: 'as unknown' assertion on function () {
    return new originalDate(fixedDate);
  } may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/assertions.ts
  108:21  warning  Risky: 'as unknown' assertion on current may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  159:10  warning  Never cast return values to 'as unknown'. Return proper types instead                                            custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/compatibility/matchers.ts
  398:19  warning  Risky: 'as unknown' assertion on expectObj may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/compatibility/mock-function.ts
  318:12  warning  Never cast return values to 'as unknown'. Return proper types instead                                                           custom/no-excessive-as-unknown
  319:13  warning  Risky: 'as unknown' assertion on Promise.resolve(value) may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  326:12  warning  Never cast return values to 'as unknown'. Return proper types instead                                                           custom/no-excessive-as-unknown
  327:13  warning  Risky: 'as unknown' assertion on Promise.resolve(value) may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  334:12  warning  Never cast return values to 'as unknown'. Return proper types instead                                                           custom/no-excessive-as-unknown
  335:13  warning  Risky: 'as unknown' assertion on Promise.reject(value) may be unnecessary. Consider using proper types or type guards instead   custom/no-excessive-as-unknown
  342:12  warning  Never cast return values to 'as unknown'. Return proper types instead                                                           custom/no-excessive-as-unknown
  343:13  warning  Risky: 'as unknown' assertion on Promise.reject(value) may be unnecessary. Consider using proper types or type guards instead   custom/no-excessive-as-unknown
  421:24  warning  Risky: 'as unknown' assertion on { ...module } may be unnecessary. Consider using proper types or type guards instead           custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/index.ts
  115:24  warning  Risky: 'as unknown' assertion on (...args: any[]) => mockFn(...args) may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/mocking.ts
   48:10  warning  Risky: 'as unknown' assertion on createMock(implementation) may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  440:16  warning  Risky: 'as unknown' assertion on { ...implementations } may be unnecessary. Consider using proper types or type guards instead      custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/tests/adapters/cli/session-test-utilities.ts
   64:25  warning  Risky: 'as unknown' assertion on {
    findAll: createMock(),
    findByName: createMock(),
    findByTaskId: createMock(),
    findByRepoPath: createMock(),
    save: createMock(),
    getSessionByTaskId: createMock(),
    getSession: createMock(),
    getSessionWorkdir: createMock(),
  } may be unnecessary. Consider using proper types or type guards insteadcustom/no-excessive-as-unknown
  111:10  warning  Risky: 'as unknown' assertion on {
    getCurrentBranch: createMock().mockResolvedValue("main"),
    getRemoteUrl: createMock().mockResolvedValue("https://github.com/edobry/minsky"),
    getRepoPath: createMock().mockResolvedValue("/Users/edobry/Projects/minsky"),
    clone: createMock().mockResolvedValue(undefined),
    checkout: createMock().mockResolvedValue(undefined),
    createBranch: createMock().mockResolvedValue(undefined),
    push: createMock().mockResolvedValue(undefined),
    pull: createMock().mockResolvedValue(undefined),
    merge: createMock().mockResolvedValue(undefined),
    getStatus: createMock().mockResolvedValue({ hasChanges: false, changes: [] }),
    add: createMock().mockResolvedValue(undefined),
    commit: createMock().mockResolvedValue(undefined),
    reset: createMock().mockResolvedValue(undefined),
    stash: createMock().mockResolvedValue(undefined),
    stashPop: createMock().mockResolvedValue(undefined),
    getCommitHash: createMock().mockResolvedValue("abc123"),
  } may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

✖ 217 problems (0 errors, 217 warnings)

✅ All checks passed!
husky - DEPRECATED

Please remove the following two lines from .husky/commit-msg:

#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

They WILL FAIL in v10.0.0

❌ Invalid commit message:
Forbidden placeholder message: "amended commit
". Please use a descriptive conventional commit message.

Commit message: "amended commit"
husky - commit-msg script failed (code 1)

   code: 1,
 killed: false,
 signal: null,
    cmd: "git -C /Users/edobry/.local/state/minsky/sessions/task#276 commit --amend -m \"amended commit\"",
 stdout: "",
 stderr: "husky - DEPRECATED\n\nPlease remove the following two lines from .husky/pre-commit:\n\n#!/usr/bin/env sh\n. \"$(dirname -- \"$0\")/_/husky.sh\"\n\nThey WILL FAIL in v10.0.0\n\n🔍 Checking for variable naming issues...\nChecking 344 TypeScript files for variable naming issues...\n\n✅ No variable naming issues found!\n✅ No variable naming issues found.\n🔍 Running ESLint...\n\n> lint\n> eslint .\n\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/cli/cli-command-factory.ts\n   70:56  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n   81:55  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  142:43  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  153:42  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  492:21  warning  Risky: 'as unknown' assertion on output may be unnecessary. Consider using proper types or type guards instead                           custom/no-excessive-as-unknown\n  496:36  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                           custom/no-excessive-as-unknown\n  504:36  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                           custom/no-excessive-as-unknown\n  519:21  warning  Risky: 'as unknown' assertion on output may be unnecessary. Consider using proper types or type guards instead                           custom/no-excessive-as-unknown\n  523:36  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                           custom/no-excessive-as-unknown\n  600:26  warning  Risky: 'as unknown' assertion on creds may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown\n  666:30  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects   custom/no-excessive-as-unknown\n  671:45  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects   custom/no-excessive-as-unknown\n  672:23  warning  Risky: 'as unknown' assertion on value may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown\n  676:53  warning  Risky: 'as unknown' assertion on item may be unnecessary. Consider using proper types or type guards instead                             custom/no-excessive-as-unknown\n  683:55  warning  Risky: 'as unknown' assertion on value may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown\n  721:47  warning  Risky: 'as unknown' assertion on obj may be unnecessary. Consider using proper types or type guards instead                              custom/no-excessive-as-unknown\n  726:62  warning  Risky: 'as unknown' assertion on value may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown\n  728:32  warning  Risky: 'as unknown' assertion on value may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown\n  729:32  warning  Risky: 'as unknown' assertion on value may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown\n  735:38  warning  Risky: 'as unknown' assertion on item may be unnecessary. Consider using proper types or type guards instead                             custom/no-excessive-as-unknown\n  768:20  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown\n  776:11  warning  Risky: 'as unknown' assertion on obj may be unnecessary. Consider using proper types or type guards instead                              custom/no-excessive-as-unknown\n  787:25  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects   custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/cli/core/cli-command-factory-core.ts\n  38:49  warning  Risky: 'as unknown' assertion on \"production\" may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/cli/customizations/config-customizations.ts\n   31:11  warning  Risky: 'as unknown' assertion on obj may be unnecessary. Consider using proper types or type guards instead     custom/no-excessive-as-unknown\n  113:23  warning  Risky: 'as unknown' assertion on output may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  117:38  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  125:38  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  142:23  warning  Risky: 'as unknown' assertion on output may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  146:38  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/cli/utils/error-handler.ts\n  136:17  warning  Risky: 'as unknown' assertion on { message: \"Command result\", result } may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/shared/commands/git.ts\n  359:22  warning  Dangerous: 'as unknown' assertion on await commitChangesFromParams({\n        message: params!.message,\n        all: params!.all,\n        amend: params!.amend,\n        noStage: params!.noStage,\n        repo: params!.repo,\n        session: params!.session,\n      }) object likely indicates a typing issue. Define proper interfaces for state/session objects                      custom/no-excessive-as-unknown\n  368:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                   custom/no-excessive-as-unknown\n  386:22  warning  Dangerous: 'as unknown' assertion on await pushFromParams({\n        repo: params!.repo,\n        session: params!.session,\n        remote: params!.remote,\n        force: params!.force,\n        debug: params!.debug,\n      }) object likely indicates a typing issue. Define proper interfaces for state/session objects                                                               custom/no-excessive-as-unknown\n  394:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                   custom/no-excessive-as-unknown\n  411:22  warning  Dangerous: 'as unknown' assertion on await cloneFromParams({\n        url: params!.url,\n        workdir: params!.destination || \".\",\n        session: params!.session,\n        branch: params!.branch,\n      }) object likely indicates a typing issue. Define proper interfaces for state/session objects                                                                               custom/no-excessive-as-unknown\n  418:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                   custom/no-excessive-as-unknown\n  436:22  warning  Dangerous: 'as unknown' assertion on await branchFromParams({\n        session: params!.session,\n        name: params!.name,\n      }) object likely indicates a typing issue. Define proper interfaces for state/session objects                                                                                                                                                         custom/no-excessive-as-unknown\n  441:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                   custom/no-excessive-as-unknown\n  459:22  warning  Dangerous: 'as unknown' assertion on await createPullRequestFromParams({\n        session: params!.session,\n        repo: params!.repo,\n        branch: params!.branch,\n        taskId: params!.task,\n        debug: params!.debug,\n        noStatusUpdate: params!.noStatusUpdate,\n      }) object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  468:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                   custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/shared/commands/session.ts\n  290:24  warning  Dangerous: 'as unknown' assertion on await sessionApprove({\n          session: params!.name,\n          task: params!.task,\n          repo: params!.repo,\n          json: params!.json,\n        }) object likely indicates a typing issue. Define proper interfaces for state/session objects                                                                                                                                                                                                                                                                                                                                 custom/no-excessive-as-unknown\n  387:24  warning  Dangerous: 'as unknown' assertion on await sessionPr({\n          title: params!.title,\n          body: params!.body,\n          bodyPath: params!.bodyPath,\n          session: params!.name,\n          task: params!.task,\n          repo: params!.repo,\n          noStatusUpdate: params!.noStatusUpdate,\n          debug: params!.debug,\n          skipUpdate: params!.skipUpdate,\n          autoResolveDeleteConflicts: params!.autoResolveDeleteConflicts,\n          skipConflictCheck: params!.skipConflictCheck,\n        }) object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/shared/commands/tasks.ts\n  171:47  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  174:31  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  200:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  204:47  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  207:31  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  216:14  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  217:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  218:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  219:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  223:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  270:14  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  271:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  272:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  273:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  296:49  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  299:33  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  493:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  495:16  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  496:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  497:14  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  498:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  499:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  515:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  520:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  520:48  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  525:10  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  525:46  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  532:15  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  533:21  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  534:25  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  535:15  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  536:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  537:14  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  538:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  539:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  596:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  599:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  599:42  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  602:18  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  603:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  604:16  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  605:21  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  606:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  613:59  warning  Risky: 'as unknown' assertion on task may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                        custom/no-excessive-as-unknown\n  613:86  warning  Risky: 'as unknown' assertion on task may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                        custom/no-excessive-as-unknown\n  620:20  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  625:20  warning  Dangerous: 'as unknown' assertion on await deleteTaskFromParams({\n      taskId: (params as unknown)!.taskId,\n      force: (params as unknown)!.force ?? false,\n      backend: (params as unknown)!.backend,\n      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,\n    }) object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  626:16  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  627:15  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  628:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  629:14  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  630:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  631:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  634:22  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  635:18  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  636:35  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  639:10  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  641:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                                                                               custom/no-excessive-as-unknown\n  642:19  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  643:18  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  644:16  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/shared/legacy-command-registry.ts\n  171:39  warning  Risky: 'as unknown' assertion on commandDef may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/shared/response-formatters.ts\n   86:12  warning  Risky: 'as unknown' assertion on data may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                    custom/no-excessive-as-unknown\n  286:23  warning  Risky: 'as unknown' assertion on this.columns\n        .map((col) => {\n          const value = String(row[col] || \"\");\n          return value.padEnd(columnWidths[col]);\n        })\n        .join(\" | \") may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/ai/config-service.ts\n  46:19  warning  Risky: 'as unknown' assertion on provider may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git.ts\n   613:71  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                          custom/no-excessive-as-unknown\n  1783:25  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown\n  1787:23  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown\n  2233:7   warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  2253:7   warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git/pr-generation-operations.ts\n  123:69  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/repository-uri.ts\n   98:8   warning  Risky: 'as unknown' assertion on components may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  145:12  warning  Never cast return values to 'as unknown'. Return proper types instead                                               custom/no-excessive-as-unknown\n  145:13  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead      custom/no-excessive-as-unknown\n  183:26  warning  Risky: 'as unknown' assertion on targetType may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/repository.ts\n  246:32  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  250:33  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/backends/error-handling.ts\n  113:7   warning  Risky: 'as unknown' assertion on error may be unnecessary. Consider using proper types or type guards instead                                                    custom/no-excessive-as-unknown\n  573:16  warning  Dangerous: 'as unknown' assertion on error.context.backend service likely indicates a typing issue. Use proper service interfaces instead of casting to unknown  custom/no-excessive-as-unknown\n  574:13  warning  Risky: 'as unknown' assertion on (error).type may be unnecessary. Consider using proper types or type guards instead                                             custom/no-excessive-as-unknown\n  575:17  warning  Risky: 'as unknown' assertion on (error).severity may be unnecessary. Consider using proper types or type guards instead                                         custom/no-excessive-as-unknown\n  576:18  warning  Risky: 'as unknown' assertion on error.context.operation may be unnecessary. Consider using proper types or type guards instead                                  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/backends/postgres-storage.ts\n  170:29  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                         custom/no-excessive-as-unknown\n  187:30  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                         custom/no-excessive-as-unknown\n  225:14  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                         custom/no-excessive-as-unknown\n  241:29  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                         custom/no-excessive-as-unknown\n  244:42  warning  Risky: 'as unknown' assertion on result.rowCount > 0 may be unnecessary. Consider using proper types or type guards instead             custom/no-excessive-as-unknown\n  256:29  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                         custom/no-excessive-as-unknown\n  261:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                   custom/no-excessive-as-unknown\n  293:30  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/backends/sqlite-storage.ts\n  119:31  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                                                            custom/no-excessive-as-unknown\n  125:88  warning  Dangerous: 'as unknown' assertion on `${process.env.HOME}/.local/state/minsky` object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  200:20  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                                                            custom/no-excessive-as-unknown\n  227:19  warning  Risky: 'as unknown' assertion on query.where(and(...conditions)) may be unnecessary. Consider using proper types or type guards instead                                    custom/no-excessive-as-unknown\n  330:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                      custom/no-excessive-as-unknown\n  358:45  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects                                     custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/database-integrity-checker.ts\n  248:35  warning  Risky: 'as unknown' assertion on db.prepare(\"PRAGMA integrity_check\").get() may be unnecessary. Consider using proper types or type guards instead                                          custom/no-excessive-as-unknown\n  264:34  warning  Dangerous: 'as unknown' assertion on db.prepare(\"SELECT COUNT(*) as count FROM sessions\").get() object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/json-file-storage.ts\n  452:36  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks.ts\n  531:63  warning  Risky: 'as unknown' assertion on data may be unnecessary. Consider using proper types or type guards instead                             custom/no-excessive-as-unknown\n  677:65  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown\n  684:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown\n  684:55  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  688:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown\n  692:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown\n  696:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown\n  700:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown\n  704:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown\n  704:66  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  731:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown\n  731:60  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/githubBackendFactory.ts\n  26:22  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  26:59  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  26:90  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  33:21  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  34:15  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  35:14  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  36:22  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/githubIssuesTaskBackend.ts\n  189:25  warning  Risky: 'as unknown' assertion on JSON.stringify(issues) may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                          custom/no-excessive-as-unknown\n  227:24  warning  Dangerous: 'as unknown' assertion on await this.octokit.rest.issues.listForRepo({\n        owner: this.owner,\n        repo: this.repo,\n        labels: Object.values(this.statusLabels).join(\",\") as unknown,\n        state: \"all\",\n      }) object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  230:17  warning  Risky: 'as unknown' assertion on Object.values(this.statusLabels).join(\",\") may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                      custom/no-excessive-as-unknown\n  355:27  warning  Risky: 'as unknown' assertion on metadata.githubIssue may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                            custom/no-excessive-as-unknown\n  658:38  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects                                                                                                                                                                                                  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/jsonFileTaskBackend.ts\n  560:34  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/markdown-task-backend.ts\n  418:63  warning  Risky: 'as unknown' assertion on data may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskService.ts\n  579:26  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/workspace.ts\n  161:40  warning  Dangerous: 'as unknown' assertion on sessionProvider object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  162:33  warning  Dangerous: 'as unknown' assertion on sessionRecord object likely indicates a typing issue. Define proper interfaces for state/session objects    custom/no-excessive-as-unknown\n  163:21  warning  Dangerous: 'as unknown' assertion on sessionRecord object likely indicates a typing issue. Define proper interfaces for state/session objects    custom/no-excessive-as-unknown\n  198:47  warning  Dangerous: 'as unknown' assertion on sessionInfo object likely indicates a typing issue. Define proper interfaces for state/session objects      custom/no-excessive-as-unknown\n  240:25  warning  Dangerous: 'as unknown' assertion on sessionInfo object likely indicates a typing issue. Define proper interfaces for state/session objects      custom/no-excessive-as-unknown\n  272:34  warning  Dangerous: 'as unknown' assertion on sessionDb object likely indicates a typing issue. Define proper interfaces for state/session objects        custom/no-excessive-as-unknown\n  280:16  warning  Dangerous: 'as unknown' assertion on sessionRecord object likely indicates a typing issue. Define proper interfaces for state/session objects    custom/no-excessive-as-unknown\n  362:29  warning  Dangerous: 'as unknown' assertion on sessionInfo object likely indicates a typing issue. Define proper interfaces for state/session objects      custom/no-excessive-as-unknown\n  366:29  warning  Dangerous: 'as unknown' assertion on sessionInfo object likely indicates a typing issue. Define proper interfaces for state/session objects      custom/no-excessive-as-unknown\n  389:17  warning  Dangerous: 'as unknown' assertion on sessionInfo object likely indicates a typing issue. Define proper interfaces for state/session objects      custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/workspace/local-workspace-backend.ts\n  110:65  warning  Risky: 'as unknown' assertion on error may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  209:65  warning  Risky: 'as unknown' assertion on error may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  276:72  warning  Risky: 'as unknown' assertion on error may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/errors/message-templates.ts\n  299:13  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  300:19  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  305:44  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/mcp/inspector-launcher.ts\n  169:43  warning  Risky: 'as unknown' assertion on data may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/mcp/server.ts\n  254:27  warning  Risky: 'as unknown' assertion on Object.keys((this.server as any)._tools) may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  262:34  warning  Risky: 'as unknown' assertion on e may be unnecessary. Consider using proper types or type guards instead                                         custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/schemas/tasks.ts\n  119:34  warning  Risky: 'as unknown' assertion on data.descriptionPath may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/logger.ts\n   35:25  warning  Risky: 'as unknown' assertion on process.env.ENABLE_AGENT_LOGS may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  146:37  warning  Risky: 'as unknown' assertion on metadata may be unnecessary. Consider using proper types or type guards instead                       custom/no-excessive-as-unknown\n  213:36  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown\n  224:35  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown\n  235:35  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown\n  258:68  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown\n  264:40  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown\n  281:36  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown\n  283:36  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown\n  334:91  warning  Risky: 'as unknown' assertion on error may be unnecessary. Consider using proper types or type guards instead                          custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils.ts\n  56:20  warning  Risky: 'as unknown' assertion on function () {\n    return new originalDate(fixedDate);\n  } may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/assertions.ts\n  108:21  warning  Risky: 'as unknown' assertion on current may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  159:10  warning  Never cast return values to 'as unknown'. Return proper types instead                                            custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/compatibility/matchers.ts\n  398:19  warning  Risky: 'as unknown' assertion on expectObj may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/compatibility/mock-function.ts\n  318:12  warning  Never cast return values to 'as unknown'. Return proper types instead                                                           custom/no-excessive-as-unknown\n  319:13  warning  Risky: 'as unknown' assertion on Promise.resolve(value) may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  326:12  warning  Never cast return values to 'as unknown'. Return proper types instead                                                           custom/no-excessive-as-unknown\n  327:13  warning  Risky: 'as unknown' assertion on Promise.resolve(value) may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  334:12  warning  Never cast return values to 'as unknown'. Return proper types instead                                                           custom/no-excessive-as-unknown\n  335:13  warning  Risky: 'as unknown' assertion on Promise.reject(value) may be unnecessary. Consider using proper types or type guards instead   custom/no-excessive-as-unknown\n  342:12  warning  Never cast return values to 'as unknown'. Return proper types instead                                                           custom/no-excessive-as-unknown\n  343:13  warning  Risky: 'as unknown' assertion on Promise.reject(value) may be unnecessary. Consider using proper types or type guards instead   custom/no-excessive-as-unknown\n  421:24  warning  Risky: 'as unknown' assertion on { ...module } may be unnecessary. Consider using proper types or type guards instead           custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/index.ts\n  115:24  warning  Risky: 'as unknown' assertion on (...args: any[]) => mockFn(...args) may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/mocking.ts\n   48:10  warning  Risky: 'as unknown' assertion on createMock(implementation) may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  440:16  warning  Risky: 'as unknown' assertion on { ...implementations } may be unnecessary. Consider using proper types or type guards instead      custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/tests/adapters/cli/session-test-utilities.ts\n   64:25  warning  Risky: 'as unknown' assertion on {\n    findAll: createMock(),\n    findByName: createMock(),\n    findByTaskId: createMock(),\n    findByRepoPath: createMock(),\n    save: createMock(),\n    getSessionByTaskId: createMock(),\n    getSession: createMock(),\n    getSessionWorkdir: createMock(),\n  } may be unnecessary. Consider using proper types or type guards insteadcustom/no-excessive-as-unknown\n  111:10  warning  Risky: 'as unknown' assertion on {\n    getCurrentBranch: createMock().mockResolvedValue(\"main\"),\n    getRemoteUrl: createMock().mockResolvedValue(\"https://github.com/edobry/minsky\"),\n    getRepoPath: createMock().mockResolvedValue(\"/Users/edobry/Projects/minsky\"),\n    clone: createMock().mockResolvedValue(undefined),\n    checkout: createMock().mockResolvedValue(undefined),\n    createBranch: createMock().mockResolvedValue(undefined),\n    push: createMock().mockResolvedValue(undefined),\n    pull: createMock().mockResolvedValue(undefined),\n    merge: createMock().mockResolvedValue(undefined),\n    getStatus: createMock().mockResolvedValue({ hasChanges: false, changes: [] }),\n    add: createMock().mockResolvedValue(undefined),\n    commit: createMock().mockResolvedValue(undefined),\n    reset: createMock().mockResolvedValue(undefined),\n    stash: createMock().mockResolvedValue(undefined),\n    stashPop: createMock().mockResolvedValue(undefined),\n    getCommitHash: createMock().mockResolvedValue(\"abc123\"),\n  } may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n✖ 217 problems (0 errors, 217 warnings)\n\n✅ All checks passed!\nhusky - DEPRECATED\n\nPlease remove the following two lines from .husky/commit-msg:\n\n#!/usr/bin/env sh\n. \"$(dirname -- \"$0\")/_/husky.sh\"\n\nThey WILL FAIL in v10.0.0\n\n❌ Invalid commit message:\nForbidden placeholder message: \"amended commit\n\". Please use a descriptive conventional commit message.\n\nCommit message: \"amended commit\"\nhusky - commit-msg script failed (code 1)\n",

      at genericNodeError (node:child_process:946:22)
(fail) Parameter-Based Git Functions > commitChangesFromParams > should handle commit with amend option [2751.75ms]
error: Command failed: git -C /Users/edobry/.local/state/minsky/sessions/task#276 commit  -m "no stage commit"
husky - DEPRECATED

Please remove the following two lines from .husky/pre-commit:

#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

They WILL FAIL in v10.0.0

🔍 Checking for variable naming issues...
Checking 344 TypeScript files for variable naming issues...

✅ No variable naming issues found!
✅ No variable naming issues found.
🔍 Running ESLint...

> lint
> eslint .


/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/cli/cli-command-factory.ts
   70:56  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
   81:55  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  142:43  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  153:42  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  492:21  warning  Risky: 'as unknown' assertion on output may be unnecessary. Consider using proper types or type guards instead                           custom/no-excessive-as-unknown
  496:36  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                           custom/no-excessive-as-unknown
  504:36  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                           custom/no-excessive-as-unknown
  519:21  warning  Risky: 'as unknown' assertion on output may be unnecessary. Consider using proper types or type guards instead                           custom/no-excessive-as-unknown
  523:36  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                           custom/no-excessive-as-unknown
  600:26  warning  Risky: 'as unknown' assertion on creds may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown
  666:30  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects   custom/no-excessive-as-unknown
  671:45  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects   custom/no-excessive-as-unknown
  672:23  warning  Risky: 'as unknown' assertion on value may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown
  676:53  warning  Risky: 'as unknown' assertion on item may be unnecessary. Consider using proper types or type guards instead                             custom/no-excessive-as-unknown
  683:55  warning  Risky: 'as unknown' assertion on value may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown
  721:47  warning  Risky: 'as unknown' assertion on obj may be unnecessary. Consider using proper types or type guards instead                              custom/no-excessive-as-unknown
  726:62  warning  Risky: 'as unknown' assertion on value may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown
  728:32  warning  Risky: 'as unknown' assertion on value may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown
  729:32  warning  Risky: 'as unknown' assertion on value may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown
  735:38  warning  Risky: 'as unknown' assertion on item may be unnecessary. Consider using proper types or type guards instead                             custom/no-excessive-as-unknown
  768:20  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown
  776:11  warning  Risky: 'as unknown' assertion on obj may be unnecessary. Consider using proper types or type guards instead                              custom/no-excessive-as-unknown
  787:25  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects   custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/cli/core/cli-command-factory-core.ts
  38:49  warning  Risky: 'as unknown' assertion on "production" may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/cli/customizations/config-customizations.ts
   31:11  warning  Risky: 'as unknown' assertion on obj may be unnecessary. Consider using proper types or type guards instead     custom/no-excessive-as-unknown
  113:23  warning  Risky: 'as unknown' assertion on output may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  117:38  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  125:38  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  142:23  warning  Risky: 'as unknown' assertion on output may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  146:38  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/cli/utils/error-handler.ts
  136:17  warning  Risky: 'as unknown' assertion on { message: "Command result", result } may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/shared/commands/git.ts
  359:22  warning  Dangerous: 'as unknown' assertion on await commitChangesFromParams({
        message: params!.message,
        all: params!.all,
        amend: params!.amend,
        noStage: params!.noStage,
        repo: params!.repo,
        session: params!.session,
      }) object likely indicates a typing issue. Define proper interfaces for state/session objects                      custom/no-excessive-as-unknown
  368:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                   custom/no-excessive-as-unknown
  386:22  warning  Dangerous: 'as unknown' assertion on await pushFromParams({
        repo: params!.repo,
        session: params!.session,
        remote: params!.remote,
        force: params!.force,
        debug: params!.debug,
      }) object likely indicates a typing issue. Define proper interfaces for state/session objects                                                               custom/no-excessive-as-unknown
  394:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                   custom/no-excessive-as-unknown
  411:22  warning  Dangerous: 'as unknown' assertion on await cloneFromParams({
        url: params!.url,
        workdir: params!.destination || ".",
        session: params!.session,
        branch: params!.branch,
      }) object likely indicates a typing issue. Define proper interfaces for state/session objects                                                                               custom/no-excessive-as-unknown
  418:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                   custom/no-excessive-as-unknown
  436:22  warning  Dangerous: 'as unknown' assertion on await branchFromParams({
        session: params!.session,
        name: params!.name,
      }) object likely indicates a typing issue. Define proper interfaces for state/session objects                                                                                                                                                         custom/no-excessive-as-unknown
  441:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                   custom/no-excessive-as-unknown
  459:22  warning  Dangerous: 'as unknown' assertion on await createPullRequestFromParams({
        session: params!.session,
        repo: params!.repo,
        branch: params!.branch,
        taskId: params!.task,
        debug: params!.debug,
        noStatusUpdate: params!.noStatusUpdate,
      }) object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  468:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                   custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/shared/commands/session.ts
  290:24  warning  Dangerous: 'as unknown' assertion on await sessionApprove({
          session: params!.name,
          task: params!.task,
          repo: params!.repo,
          json: params!.json,
        }) object likely indicates a typing issue. Define proper interfaces for state/session objects                                                                                                                                                                                                                                                                                                                                 custom/no-excessive-as-unknown
  387:24  warning  Dangerous: 'as unknown' assertion on await sessionPr({
          title: params!.title,
          body: params!.body,
          bodyPath: params!.bodyPath,
          session: params!.name,
          task: params!.task,
          repo: params!.repo,
          noStatusUpdate: params!.noStatusUpdate,
          debug: params!.debug,
          skipUpdate: params!.skipUpdate,
          autoResolveDeleteConflicts: params!.autoResolveDeleteConflicts,
          skipConflictCheck: params!.skipConflictCheck,
        }) object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/shared/commands/tasks.ts
  171:47  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  174:31  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  200:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  204:47  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  207:31  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  216:14  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  217:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  218:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  219:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  223:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  270:14  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  271:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  272:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  273:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  296:49  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  299:33  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  493:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  495:16  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  496:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  497:14  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  498:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  499:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  515:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  520:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  520:48  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  525:10  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  525:46  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  532:15  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  533:21  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  534:25  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  535:15  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  536:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  537:14  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  538:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  539:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  596:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  599:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  599:42  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  602:18  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  603:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  604:16  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  605:21  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  606:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  613:59  warning  Risky: 'as unknown' assertion on task may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                        custom/no-excessive-as-unknown
  613:86  warning  Risky: 'as unknown' assertion on task may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                        custom/no-excessive-as-unknown
  620:20  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  625:20  warning  Dangerous: 'as unknown' assertion on await deleteTaskFromParams({
      taskId: (params as unknown)!.taskId,
      force: (params as unknown)!.force ?? false,
      backend: (params as unknown)!.backend,
      repo: (params as unknown)!.repo,
      workspace: (params as unknown)!.workspace,
      session: (params as unknown)!.session,
    }) object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  626:16  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  627:15  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  628:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  629:14  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  630:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  631:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  634:22  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  635:18  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  636:35  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  639:10  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  641:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                                                                               custom/no-excessive-as-unknown
  642:19  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  643:18  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown
  644:16  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/shared/legacy-command-registry.ts
  171:39  warning  Risky: 'as unknown' assertion on commandDef may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/shared/response-formatters.ts
   86:12  warning  Risky: 'as unknown' assertion on data may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                    custom/no-excessive-as-unknown
  286:23  warning  Risky: 'as unknown' assertion on this.columns
        .map((col) => {
          const value = String(row[col] || "");
          return value.padEnd(columnWidths[col]);
        })
        .join(" | ") may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/ai/config-service.ts
  46:19  warning  Risky: 'as unknown' assertion on provider may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git.ts
   613:71  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                          custom/no-excessive-as-unknown
  1783:25  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown
  1787:23  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown
  2233:7   warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  2253:7   warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git/pr-generation-operations.ts
  123:69  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/repository-uri.ts
   98:8   warning  Risky: 'as unknown' assertion on components may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  145:12  warning  Never cast return values to 'as unknown'. Return proper types instead                                               custom/no-excessive-as-unknown
  145:13  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead      custom/no-excessive-as-unknown
  183:26  warning  Risky: 'as unknown' assertion on targetType may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/repository.ts
  246:32  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  250:33  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/backends/error-handling.ts
  113:7   warning  Risky: 'as unknown' assertion on error may be unnecessary. Consider using proper types or type guards instead                                                    custom/no-excessive-as-unknown
  573:16  warning  Dangerous: 'as unknown' assertion on error.context.backend service likely indicates a typing issue. Use proper service interfaces instead of casting to unknown  custom/no-excessive-as-unknown
  574:13  warning  Risky: 'as unknown' assertion on (error).type may be unnecessary. Consider using proper types or type guards instead                                             custom/no-excessive-as-unknown
  575:17  warning  Risky: 'as unknown' assertion on (error).severity may be unnecessary. Consider using proper types or type guards instead                                         custom/no-excessive-as-unknown
  576:18  warning  Risky: 'as unknown' assertion on error.context.operation may be unnecessary. Consider using proper types or type guards instead                                  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/backends/postgres-storage.ts
  170:29  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                         custom/no-excessive-as-unknown
  187:30  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                         custom/no-excessive-as-unknown
  225:14  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                         custom/no-excessive-as-unknown
  241:29  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                         custom/no-excessive-as-unknown
  244:42  warning  Risky: 'as unknown' assertion on result.rowCount > 0 may be unnecessary. Consider using proper types or type guards instead             custom/no-excessive-as-unknown
  256:29  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                         custom/no-excessive-as-unknown
  261:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                   custom/no-excessive-as-unknown
  293:30  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/backends/sqlite-storage.ts
  119:31  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                                                            custom/no-excessive-as-unknown
  125:88  warning  Dangerous: 'as unknown' assertion on `${process.env.HOME}/.local/state/minsky` object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  200:20  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                                                            custom/no-excessive-as-unknown
  227:19  warning  Risky: 'as unknown' assertion on query.where(and(...conditions)) may be unnecessary. Consider using proper types or type guards instead                                    custom/no-excessive-as-unknown
  330:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                      custom/no-excessive-as-unknown
  358:45  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects                                     custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/database-integrity-checker.ts
  248:35  warning  Risky: 'as unknown' assertion on db.prepare("PRAGMA integrity_check").get() may be unnecessary. Consider using proper types or type guards instead                                          custom/no-excessive-as-unknown
  264:34  warning  Dangerous: 'as unknown' assertion on db.prepare("SELECT COUNT(*) as count FROM sessions").get() object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/json-file-storage.ts
  452:36  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks.ts
  531:63  warning  Risky: 'as unknown' assertion on data may be unnecessary. Consider using proper types or type guards instead                             custom/no-excessive-as-unknown
  677:65  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown
  684:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown
  684:55  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  688:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown
  692:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown
  696:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown
  700:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown
  704:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown
  704:66  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  731:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown
  731:60  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/githubBackendFactory.ts
  26:22  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  26:59  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  26:90  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  33:21  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  34:15  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  35:14  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  36:22  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/githubIssuesTaskBackend.ts
  189:25  warning  Risky: 'as unknown' assertion on JSON.stringify(issues) may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                          custom/no-excessive-as-unknown
  227:24  warning  Dangerous: 'as unknown' assertion on await this.octokit.rest.issues.listForRepo({
        owner: this.owner,
        repo: this.repo,
        labels: Object.values(this.statusLabels).join(",") as unknown,
        state: "all",
      }) object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  230:17  warning  Risky: 'as unknown' assertion on Object.values(this.statusLabels).join(",") may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                      custom/no-excessive-as-unknown
  355:27  warning  Risky: 'as unknown' assertion on metadata.githubIssue may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                            custom/no-excessive-as-unknown
  658:38  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects                                                                                                                                                                                                  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/jsonFileTaskBackend.ts
  560:34  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/markdown-task-backend.ts
  418:63  warning  Risky: 'as unknown' assertion on data may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskService.ts
  579:26  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/workspace.ts
  161:40  warning  Dangerous: 'as unknown' assertion on sessionProvider object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  162:33  warning  Dangerous: 'as unknown' assertion on sessionRecord object likely indicates a typing issue. Define proper interfaces for state/session objects    custom/no-excessive-as-unknown
  163:21  warning  Dangerous: 'as unknown' assertion on sessionRecord object likely indicates a typing issue. Define proper interfaces for state/session objects    custom/no-excessive-as-unknown
  198:47  warning  Dangerous: 'as unknown' assertion on sessionInfo object likely indicates a typing issue. Define proper interfaces for state/session objects      custom/no-excessive-as-unknown
  240:25  warning  Dangerous: 'as unknown' assertion on sessionInfo object likely indicates a typing issue. Define proper interfaces for state/session objects      custom/no-excessive-as-unknown
  272:34  warning  Dangerous: 'as unknown' assertion on sessionDb object likely indicates a typing issue. Define proper interfaces for state/session objects        custom/no-excessive-as-unknown
  280:16  warning  Dangerous: 'as unknown' assertion on sessionRecord object likely indicates a typing issue. Define proper interfaces for state/session objects    custom/no-excessive-as-unknown
  362:29  warning  Dangerous: 'as unknown' assertion on sessionInfo object likely indicates a typing issue. Define proper interfaces for state/session objects      custom/no-excessive-as-unknown
  366:29  warning  Dangerous: 'as unknown' assertion on sessionInfo object likely indicates a typing issue. Define proper interfaces for state/session objects      custom/no-excessive-as-unknown
  389:17  warning  Dangerous: 'as unknown' assertion on sessionInfo object likely indicates a typing issue. Define proper interfaces for state/session objects      custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/workspace/local-workspace-backend.ts
  110:65  warning  Risky: 'as unknown' assertion on error may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  209:65  warning  Risky: 'as unknown' assertion on error may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  276:72  warning  Risky: 'as unknown' assertion on error may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/errors/message-templates.ts
  299:13  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  300:19  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown
  305:44  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/mcp/inspector-launcher.ts
  169:43  warning  Risky: 'as unknown' assertion on data may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/mcp/server.ts
  254:27  warning  Risky: 'as unknown' assertion on Object.keys((this.server as any)._tools) may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  262:34  warning  Risky: 'as unknown' assertion on e may be unnecessary. Consider using proper types or type guards instead                                         custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/schemas/tasks.ts
  119:34  warning  Risky: 'as unknown' assertion on data.descriptionPath may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/logger.ts
   35:25  warning  Risky: 'as unknown' assertion on process.env.ENABLE_AGENT_LOGS may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  146:37  warning  Risky: 'as unknown' assertion on metadata may be unnecessary. Consider using proper types or type guards instead                       custom/no-excessive-as-unknown
  213:36  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown
  224:35  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown
  235:35  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown
  258:68  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown
  264:40  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown
  281:36  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown
  283:36  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown
  334:91  warning  Risky: 'as unknown' assertion on error may be unnecessary. Consider using proper types or type guards instead                          custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils.ts
  56:20  warning  Risky: 'as unknown' assertion on function () {
    return new originalDate(fixedDate);
  } may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/assertions.ts
  108:21  warning  Risky: 'as unknown' assertion on current may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  159:10  warning  Never cast return values to 'as unknown'. Return proper types instead                                            custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/compatibility/matchers.ts
  398:19  warning  Risky: 'as unknown' assertion on expectObj may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/compatibility/mock-function.ts
  318:12  warning  Never cast return values to 'as unknown'. Return proper types instead                                                           custom/no-excessive-as-unknown
  319:13  warning  Risky: 'as unknown' assertion on Promise.resolve(value) may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  326:12  warning  Never cast return values to 'as unknown'. Return proper types instead                                                           custom/no-excessive-as-unknown
  327:13  warning  Risky: 'as unknown' assertion on Promise.resolve(value) may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  334:12  warning  Never cast return values to 'as unknown'. Return proper types instead                                                           custom/no-excessive-as-unknown
  335:13  warning  Risky: 'as unknown' assertion on Promise.reject(value) may be unnecessary. Consider using proper types or type guards instead   custom/no-excessive-as-unknown
  342:12  warning  Never cast return values to 'as unknown'. Return proper types instead                                                           custom/no-excessive-as-unknown
  343:13  warning  Risky: 'as unknown' assertion on Promise.reject(value) may be unnecessary. Consider using proper types or type guards instead   custom/no-excessive-as-unknown
  421:24  warning  Risky: 'as unknown' assertion on { ...module } may be unnecessary. Consider using proper types or type guards instead           custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/index.ts
  115:24  warning  Risky: 'as unknown' assertion on (...args: any[]) => mockFn(...args) may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/mocking.ts
   48:10  warning  Risky: 'as unknown' assertion on createMock(implementation) may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown
  440:16  warning  Risky: 'as unknown' assertion on { ...implementations } may be unnecessary. Consider using proper types or type guards instead      custom/no-excessive-as-unknown

/Users/edobry/.local/state/minsky/sessions/task#276/tests/adapters/cli/session-test-utilities.ts
   64:25  warning  Risky: 'as unknown' assertion on {
    findAll: createMock(),
    findByName: createMock(),
    findByTaskId: createMock(),
    findByRepoPath: createMock(),
    save: createMock(),
    getSessionByTaskId: createMock(),
    getSession: createMock(),
    getSessionWorkdir: createMock(),
  } may be unnecessary. Consider using proper types or type guards insteadcustom/no-excessive-as-unknown
  111:10  warning  Risky: 'as unknown' assertion on {
    getCurrentBranch: createMock().mockResolvedValue("main"),
    getRemoteUrl: createMock().mockResolvedValue("https://github.com/edobry/minsky"),
    getRepoPath: createMock().mockResolvedValue("/Users/edobry/Projects/minsky"),
    clone: createMock().mockResolvedValue(undefined),
    checkout: createMock().mockResolvedValue(undefined),
    createBranch: createMock().mockResolvedValue(undefined),
    push: createMock().mockResolvedValue(undefined),
    pull: createMock().mockResolvedValue(undefined),
    merge: createMock().mockResolvedValue(undefined),
    getStatus: createMock().mockResolvedValue({ hasChanges: false, changes: [] }),
    add: createMock().mockResolvedValue(undefined),
    commit: createMock().mockResolvedValue(undefined),
    reset: createMock().mockResolvedValue(undefined),
    stash: createMock().mockResolvedValue(undefined),
    stashPop: createMock().mockResolvedValue(undefined),
    getCommitHash: createMock().mockResolvedValue("abc123"),
  } may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown

✖ 217 problems (0 errors, 217 warnings)

✅ All checks passed!
husky - DEPRECATED

Please remove the following two lines from .husky/commit-msg:

#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

They WILL FAIL in v10.0.0

❌ Invalid commit message:
Invalid commit message format. Please use conventional commits format: "type(scope): description"
Examples:
  feat(auth): add user authentication
  fix(#123): resolve login validation issue
  docs: update README with new features

Commit message: "no stage commit"
husky - commit-msg script failed (code 1)

   code: 1,
 killed: false,
 signal: null,
    cmd: "git -C /Users/edobry/.local/state/minsky/sessions/task#276 commit  -m \"no stage commit\"",
 stdout: "",
 stderr: "husky - DEPRECATED\n\nPlease remove the following two lines from .husky/pre-commit:\n\n#!/usr/bin/env sh\n. \"$(dirname -- \"$0\")/_/husky.sh\"\n\nThey WILL FAIL in v10.0.0\n\n🔍 Checking for variable naming issues...\nChecking 344 TypeScript files for variable naming issues...\n\n✅ No variable naming issues found!\n✅ No variable naming issues found.\n🔍 Running ESLint...\n\n> lint\n> eslint .\n\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/cli/cli-command-factory.ts\n   70:56  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n   81:55  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  142:43  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  153:42  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  492:21  warning  Risky: 'as unknown' assertion on output may be unnecessary. Consider using proper types or type guards instead                           custom/no-excessive-as-unknown\n  496:36  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                           custom/no-excessive-as-unknown\n  504:36  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                           custom/no-excessive-as-unknown\n  519:21  warning  Risky: 'as unknown' assertion on output may be unnecessary. Consider using proper types or type guards instead                           custom/no-excessive-as-unknown\n  523:36  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                           custom/no-excessive-as-unknown\n  600:26  warning  Risky: 'as unknown' assertion on creds may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown\n  666:30  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects   custom/no-excessive-as-unknown\n  671:45  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects   custom/no-excessive-as-unknown\n  672:23  warning  Risky: 'as unknown' assertion on value may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown\n  676:53  warning  Risky: 'as unknown' assertion on item may be unnecessary. Consider using proper types or type guards instead                             custom/no-excessive-as-unknown\n  683:55  warning  Risky: 'as unknown' assertion on value may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown\n  721:47  warning  Risky: 'as unknown' assertion on obj may be unnecessary. Consider using proper types or type guards instead                              custom/no-excessive-as-unknown\n  726:62  warning  Risky: 'as unknown' assertion on value may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown\n  728:32  warning  Risky: 'as unknown' assertion on value may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown\n  729:32  warning  Risky: 'as unknown' assertion on value may be unnecessary. Consider using proper types or type guards instead                            custom/no-excessive-as-unknown\n  735:38  warning  Risky: 'as unknown' assertion on item may be unnecessary. Consider using proper types or type guards instead                             custom/no-excessive-as-unknown\n  768:20  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown\n  776:11  warning  Risky: 'as unknown' assertion on obj may be unnecessary. Consider using proper types or type guards instead                              custom/no-excessive-as-unknown\n  787:25  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects   custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/cli/core/cli-command-factory-core.ts\n  38:49  warning  Risky: 'as unknown' assertion on \"production\" may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/cli/customizations/config-customizations.ts\n   31:11  warning  Risky: 'as unknown' assertion on obj may be unnecessary. Consider using proper types or type guards instead     custom/no-excessive-as-unknown\n  113:23  warning  Risky: 'as unknown' assertion on output may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  117:38  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  125:38  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  142:23  warning  Risky: 'as unknown' assertion on output may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  146:38  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/cli/utils/error-handler.ts\n  136:17  warning  Risky: 'as unknown' assertion on { message: \"Command result\", result } may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/shared/commands/git.ts\n  359:22  warning  Dangerous: 'as unknown' assertion on await commitChangesFromParams({\n        message: params!.message,\n        all: params!.all,\n        amend: params!.amend,\n        noStage: params!.noStage,\n        repo: params!.repo,\n        session: params!.session,\n      }) object likely indicates a typing issue. Define proper interfaces for state/session objects                      custom/no-excessive-as-unknown\n  368:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                   custom/no-excessive-as-unknown\n  386:22  warning  Dangerous: 'as unknown' assertion on await pushFromParams({\n        repo: params!.repo,\n        session: params!.session,\n        remote: params!.remote,\n        force: params!.force,\n        debug: params!.debug,\n      }) object likely indicates a typing issue. Define proper interfaces for state/session objects                                                               custom/no-excessive-as-unknown\n  394:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                   custom/no-excessive-as-unknown\n  411:22  warning  Dangerous: 'as unknown' assertion on await cloneFromParams({\n        url: params!.url,\n        workdir: params!.destination || \".\",\n        session: params!.session,\n        branch: params!.branch,\n      }) object likely indicates a typing issue. Define proper interfaces for state/session objects                                                                               custom/no-excessive-as-unknown\n  418:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                   custom/no-excessive-as-unknown\n  436:22  warning  Dangerous: 'as unknown' assertion on await branchFromParams({\n        session: params!.session,\n        name: params!.name,\n      }) object likely indicates a typing issue. Define proper interfaces for state/session objects                                                                                                                                                         custom/no-excessive-as-unknown\n  441:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                   custom/no-excessive-as-unknown\n  459:22  warning  Dangerous: 'as unknown' assertion on await createPullRequestFromParams({\n        session: params!.session,\n        repo: params!.repo,\n        branch: params!.branch,\n        taskId: params!.task,\n        debug: params!.debug,\n        noStatusUpdate: params!.noStatusUpdate,\n      }) object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  468:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                   custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/shared/commands/session.ts\n  290:24  warning  Dangerous: 'as unknown' assertion on await sessionApprove({\n          session: params!.name,\n          task: params!.task,\n          repo: params!.repo,\n          json: params!.json,\n        }) object likely indicates a typing issue. Define proper interfaces for state/session objects                                                                                                                                                                                                                                                                                                                                 custom/no-excessive-as-unknown\n  387:24  warning  Dangerous: 'as unknown' assertion on await sessionPr({\n          title: params!.title,\n          body: params!.body,\n          bodyPath: params!.bodyPath,\n          session: params!.name,\n          task: params!.task,\n          repo: params!.repo,\n          noStatusUpdate: params!.noStatusUpdate,\n          debug: params!.debug,\n          skipUpdate: params!.skipUpdate,\n          autoResolveDeleteConflicts: params!.autoResolveDeleteConflicts,\n          skipConflictCheck: params!.skipConflictCheck,\n        }) object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/shared/commands/tasks.ts\n  171:47  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  174:31  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  200:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  204:47  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  207:31  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  216:14  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  217:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  218:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  219:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  223:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  270:14  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  271:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  272:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  273:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  296:49  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  299:33  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  493:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  495:16  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  496:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  497:14  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  498:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  499:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  515:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  520:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  520:48  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  525:10  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  525:46  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  532:15  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  533:21  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  534:25  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  535:15  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  536:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  537:14  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  538:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  539:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  596:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  599:11  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  599:42  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  602:18  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  603:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  604:16  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  605:21  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  606:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  613:59  warning  Risky: 'as unknown' assertion on task may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                        custom/no-excessive-as-unknown\n  613:86  warning  Risky: 'as unknown' assertion on task may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                        custom/no-excessive-as-unknown\n  620:20  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  625:20  warning  Dangerous: 'as unknown' assertion on await deleteTaskFromParams({\n      taskId: (params as unknown)!.taskId,\n      force: (params as unknown)!.force ?? false,\n      backend: (params as unknown)!.backend,\n      repo: (params as unknown)!.repo,\n      workspace: (params as unknown)!.workspace,\n      session: (params as unknown)!.session,\n    }) object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  626:16  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  627:15  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  628:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  629:14  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  630:19  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  631:17  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  634:22  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  635:18  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  636:35  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  639:10  warning  Risky: 'as unknown' assertion on params may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  641:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                                                                                                                                                                                                                                                                                               custom/no-excessive-as-unknown\n  642:19  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  643:18  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n  644:16  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                                                                                                                                                      custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/shared/legacy-command-registry.ts\n  171:39  warning  Risky: 'as unknown' assertion on commandDef may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/adapters/shared/response-formatters.ts\n   86:12  warning  Risky: 'as unknown' assertion on data may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                    custom/no-excessive-as-unknown\n  286:23  warning  Risky: 'as unknown' assertion on this.columns\n        .map((col) => {\n          const value = String(row[col] || \"\");\n          return value.padEnd(columnWidths[col]);\n        })\n        .join(\" | \") may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/ai/config-service.ts\n  46:19  warning  Risky: 'as unknown' assertion on provider may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git.ts\n   613:71  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                          custom/no-excessive-as-unknown\n  1783:25  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown\n  1787:23  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown\n  2233:7   warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  2253:7   warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git/pr-generation-operations.ts\n  123:69  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/repository-uri.ts\n   98:8   warning  Risky: 'as unknown' assertion on components may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  145:12  warning  Never cast return values to 'as unknown'. Return proper types instead                                               custom/no-excessive-as-unknown\n  145:13  warning  Risky: 'as unknown' assertion on result may be unnecessary. Consider using proper types or type guards instead      custom/no-excessive-as-unknown\n  183:26  warning  Risky: 'as unknown' assertion on targetType may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/repository.ts\n  246:32  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  250:33  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/backends/error-handling.ts\n  113:7   warning  Risky: 'as unknown' assertion on error may be unnecessary. Consider using proper types or type guards instead                                                    custom/no-excessive-as-unknown\n  573:16  warning  Dangerous: 'as unknown' assertion on error.context.backend service likely indicates a typing issue. Use proper service interfaces instead of casting to unknown  custom/no-excessive-as-unknown\n  574:13  warning  Risky: 'as unknown' assertion on (error).type may be unnecessary. Consider using proper types or type guards instead                                             custom/no-excessive-as-unknown\n  575:17  warning  Risky: 'as unknown' assertion on (error).severity may be unnecessary. Consider using proper types or type guards instead                                         custom/no-excessive-as-unknown\n  576:18  warning  Risky: 'as unknown' assertion on error.context.operation may be unnecessary. Consider using proper types or type guards instead                                  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/backends/postgres-storage.ts\n  170:29  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                         custom/no-excessive-as-unknown\n  187:30  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                         custom/no-excessive-as-unknown\n  225:14  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                         custom/no-excessive-as-unknown\n  241:29  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                         custom/no-excessive-as-unknown\n  244:42  warning  Risky: 'as unknown' assertion on result.rowCount > 0 may be unnecessary. Consider using proper types or type guards instead             custom/no-excessive-as-unknown\n  256:29  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                         custom/no-excessive-as-unknown\n  261:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                   custom/no-excessive-as-unknown\n  293:30  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/backends/sqlite-storage.ts\n  119:31  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                                                            custom/no-excessive-as-unknown\n  125:88  warning  Dangerous: 'as unknown' assertion on `${process.env.HOME}/.local/state/minsky` object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  200:20  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                                                            custom/no-excessive-as-unknown\n  227:19  warning  Risky: 'as unknown' assertion on query.where(and(...conditions)) may be unnecessary. Consider using proper types or type guards instead                                    custom/no-excessive-as-unknown\n  330:14  warning  Never cast return values to 'as unknown'. Return proper types instead                                                                                                      custom/no-excessive-as-unknown\n  358:45  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects                                     custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/database-integrity-checker.ts\n  248:35  warning  Risky: 'as unknown' assertion on db.prepare(\"PRAGMA integrity_check\").get() may be unnecessary. Consider using proper types or type guards instead                                          custom/no-excessive-as-unknown\n  264:34  warning  Dangerous: 'as unknown' assertion on db.prepare(\"SELECT COUNT(*) as count FROM sessions\").get() object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/json-file-storage.ts\n  452:36  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks.ts\n  531:63  warning  Risky: 'as unknown' assertion on data may be unnecessary. Consider using proper types or type guards instead                             custom/no-excessive-as-unknown\n  677:65  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown\n  684:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown\n  684:55  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  688:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown\n  692:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown\n  696:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown\n  700:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown\n  704:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown\n  704:66  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  731:13  warning  Don't cast property access to 'as unknown'. Use proper type definitions instead                                                          custom/no-excessive-as-unknown\n  731:60  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/githubBackendFactory.ts\n  26:22  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  26:59  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  26:90  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  33:21  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  34:15  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  35:14  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  36:22  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/githubIssuesTaskBackend.ts\n  189:25  warning  Risky: 'as unknown' assertion on JSON.stringify(issues) may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                          custom/no-excessive-as-unknown\n  227:24  warning  Dangerous: 'as unknown' assertion on await this.octokit.rest.issues.listForRepo({\n        owner: this.owner,\n        repo: this.repo,\n        labels: Object.values(this.statusLabels).join(\",\") as unknown,\n        state: \"all\",\n      }) object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  230:17  warning  Risky: 'as unknown' assertion on Object.values(this.statusLabels).join(\",\") may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                      custom/no-excessive-as-unknown\n  355:27  warning  Risky: 'as unknown' assertion on metadata.githubIssue may be unnecessary. Consider using proper types or type guards instead                                                                                                                                                                                                            custom/no-excessive-as-unknown\n  658:38  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects                                                                                                                                                                                                  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/jsonFileTaskBackend.ts\n  560:34  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/markdown-task-backend.ts\n  418:63  warning  Risky: 'as unknown' assertion on data may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskService.ts\n  579:26  warning  Dangerous: 'as unknown' assertion on options object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/workspace.ts\n  161:40  warning  Dangerous: 'as unknown' assertion on sessionProvider object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  162:33  warning  Dangerous: 'as unknown' assertion on sessionRecord object likely indicates a typing issue. Define proper interfaces for state/session objects    custom/no-excessive-as-unknown\n  163:21  warning  Dangerous: 'as unknown' assertion on sessionRecord object likely indicates a typing issue. Define proper interfaces for state/session objects    custom/no-excessive-as-unknown\n  198:47  warning  Dangerous: 'as unknown' assertion on sessionInfo object likely indicates a typing issue. Define proper interfaces for state/session objects      custom/no-excessive-as-unknown\n  240:25  warning  Dangerous: 'as unknown' assertion on sessionInfo object likely indicates a typing issue. Define proper interfaces for state/session objects      custom/no-excessive-as-unknown\n  272:34  warning  Dangerous: 'as unknown' assertion on sessionDb object likely indicates a typing issue. Define proper interfaces for state/session objects        custom/no-excessive-as-unknown\n  280:16  warning  Dangerous: 'as unknown' assertion on sessionRecord object likely indicates a typing issue. Define proper interfaces for state/session objects    custom/no-excessive-as-unknown\n  362:29  warning  Dangerous: 'as unknown' assertion on sessionInfo object likely indicates a typing issue. Define proper interfaces for state/session objects      custom/no-excessive-as-unknown\n  366:29  warning  Dangerous: 'as unknown' assertion on sessionInfo object likely indicates a typing issue. Define proper interfaces for state/session objects      custom/no-excessive-as-unknown\n  389:17  warning  Dangerous: 'as unknown' assertion on sessionInfo object likely indicates a typing issue. Define proper interfaces for state/session objects      custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/workspace/local-workspace-backend.ts\n  110:65  warning  Risky: 'as unknown' assertion on error may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  209:65  warning  Risky: 'as unknown' assertion on error may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  276:72  warning  Risky: 'as unknown' assertion on error may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/errors/message-templates.ts\n  299:13  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  300:19  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n  305:44  warning  Dangerous: 'as unknown' assertion on config object likely indicates a typing issue. Define proper interfaces for state/session objects  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/mcp/inspector-launcher.ts\n  169:43  warning  Risky: 'as unknown' assertion on data may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/mcp/server.ts\n  254:27  warning  Risky: 'as unknown' assertion on Object.keys((this.server as any)._tools) may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  262:34  warning  Risky: 'as unknown' assertion on e may be unnecessary. Consider using proper types or type guards instead                                         custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/schemas/tasks.ts\n  119:34  warning  Risky: 'as unknown' assertion on data.descriptionPath may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/logger.ts\n   35:25  warning  Risky: 'as unknown' assertion on process.env.ENABLE_AGENT_LOGS may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  146:37  warning  Risky: 'as unknown' assertion on metadata may be unnecessary. Consider using proper types or type guards instead                       custom/no-excessive-as-unknown\n  213:36  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown\n  224:35  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown\n  235:35  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown\n  258:68  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown\n  264:40  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown\n  281:36  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown\n  283:36  warning  Risky: 'as unknown' assertion on context may be unnecessary. Consider using proper types or type guards instead                        custom/no-excessive-as-unknown\n  334:91  warning  Risky: 'as unknown' assertion on error may be unnecessary. Consider using proper types or type guards instead                          custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils.ts\n  56:20  warning  Risky: 'as unknown' assertion on function () {\n    return new originalDate(fixedDate);\n  } may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/assertions.ts\n  108:21  warning  Risky: 'as unknown' assertion on current may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  159:10  warning  Never cast return values to 'as unknown'. Return proper types instead                                            custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/compatibility/matchers.ts\n  398:19  warning  Risky: 'as unknown' assertion on expectObj may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/compatibility/mock-function.ts\n  318:12  warning  Never cast return values to 'as unknown'. Return proper types instead                                                           custom/no-excessive-as-unknown\n  319:13  warning  Risky: 'as unknown' assertion on Promise.resolve(value) may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  326:12  warning  Never cast return values to 'as unknown'. Return proper types instead                                                           custom/no-excessive-as-unknown\n  327:13  warning  Risky: 'as unknown' assertion on Promise.resolve(value) may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  334:12  warning  Never cast return values to 'as unknown'. Return proper types instead                                                           custom/no-excessive-as-unknown\n  335:13  warning  Risky: 'as unknown' assertion on Promise.reject(value) may be unnecessary. Consider using proper types or type guards instead   custom/no-excessive-as-unknown\n  342:12  warning  Never cast return values to 'as unknown'. Return proper types instead                                                           custom/no-excessive-as-unknown\n  343:13  warning  Risky: 'as unknown' assertion on Promise.reject(value) may be unnecessary. Consider using proper types or type guards instead   custom/no-excessive-as-unknown\n  421:24  warning  Risky: 'as unknown' assertion on { ...module } may be unnecessary. Consider using proper types or type guards instead           custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/index.ts\n  115:24  warning  Risky: 'as unknown' assertion on (...args: any[]) => mockFn(...args) may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/src/utils/test-utils/mocking.ts\n   48:10  warning  Risky: 'as unknown' assertion on createMock(implementation) may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n  440:16  warning  Risky: 'as unknown' assertion on { ...implementations } may be unnecessary. Consider using proper types or type guards instead      custom/no-excessive-as-unknown\n\n/Users/edobry/.local/state/minsky/sessions/task#276/tests/adapters/cli/session-test-utilities.ts\n   64:25  warning  Risky: 'as unknown' assertion on {\n    findAll: createMock(),\n    findByName: createMock(),\n    findByTaskId: createMock(),\n    findByRepoPath: createMock(),\n    save: createMock(),\n    getSessionByTaskId: createMock(),\n    getSession: createMock(),\n    getSessionWorkdir: createMock(),\n  } may be unnecessary. Consider using proper types or type guards insteadcustom/no-excessive-as-unknown\n  111:10  warning  Risky: 'as unknown' assertion on {\n    getCurrentBranch: createMock().mockResolvedValue(\"main\"),\n    getRemoteUrl: createMock().mockResolvedValue(\"https://github.com/edobry/minsky\"),\n    getRepoPath: createMock().mockResolvedValue(\"/Users/edobry/Projects/minsky\"),\n    clone: createMock().mockResolvedValue(undefined),\n    checkout: createMock().mockResolvedValue(undefined),\n    createBranch: createMock().mockResolvedValue(undefined),\n    push: createMock().mockResolvedValue(undefined),\n    pull: createMock().mockResolvedValue(undefined),\n    merge: createMock().mockResolvedValue(undefined),\n    getStatus: createMock().mockResolvedValue({ hasChanges: false, changes: [] }),\n    add: createMock().mockResolvedValue(undefined),\n    commit: createMock().mockResolvedValue(undefined),\n    reset: createMock().mockResolvedValue(undefined),\n    stash: createMock().mockResolvedValue(undefined),\n    stashPop: createMock().mockResolvedValue(undefined),\n    getCommitHash: createMock().mockResolvedValue(\"abc123\"),\n  } may be unnecessary. Consider using proper types or type guards instead  custom/no-excessive-as-unknown\n\n✖ 217 problems (0 errors, 217 warnings)\n\n✅ All checks passed!\nhusky - DEPRECATED\n\nPlease remove the following two lines from .husky/commit-msg:\n\n#!/usr/bin/env sh\n. \"$(dirname -- \"$0\")/_/husky.sh\"\n\nThey WILL FAIL in v10.0.0\n\n❌ Invalid commit message:\nInvalid commit message format. Please use conventional commits format: \"type(scope): description\"\nExamples:\n  feat(auth): add user authentication\n  fix(#123): resolve login validation issue\n  docs: update README with new features\n\nCommit message: \"no stage commit\"\nhusky - commit-msg script failed (code 1)\n",

      at genericNodeError (node:child_process:946:22)
(fail) Parameter-Based Git Functions > commitChangesFromParams > should handle commit with noStage option [2846.34ms]
1227 | 
1228 |     // 1. Resolve workdir
1229 |     if (options.session) {
1230 |       const record = await this.sessionDb.getSession(options.session);
1231 |       if (!record) {
1232 |         throw new Error(`Session '${options.session}' not found.`);
                         ^
error: Session 'test-session' not found.
      at push (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git.ts:1232:19)
(fail) Parameter-Based Git Functions > pushFromParams > should push changes with all parameters [0.47ms]
(pass) Parameter-Based Git Functions > pushFromParams > should handle push with minimal parameters [112.71ms]
(pass) Parameter-Based Git Functions > pushFromParams > should handle push with force option [43.77ms]
1253 | 
1254 |     // 2. Validate remote exists
1255 |     const { stdout: remotesOut } = await execAsync(`git -C ${workdir} remote`);
1256 |     const remotes = remotesOut.split("\n").map((r) => r.trim()).filter(Boolean);
1257 |     if (!remotes.includes(remote)) {
1258 |       throw new Error(`Remote '${remote}' does not exist in repository at ${workdir}`);
                       ^
error: Remote 'upstream' does not exist in repository at /Users/edobry/.local/state/minsky/sessions/task#276
      at push (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git.ts:1258:17)
(fail) Parameter-Based Git Functions > pushFromParams > should handle push with custom remote [14.41ms]
error: Command failed: git -C /test/repo add -A
fatal: cannot change to '/test/repo': No such file or directory

   code: 128,
 killed: false,
 signal: null,
    cmd: "git -C /test/repo add -A",
 stdout: "",
 stderr: "fatal: cannot change to '/test/repo': No such file or directory\n",

      at genericNodeError (node:child_process:946:22)
(fail) commitChangesFromParams > should commit changes with message and all flag [6.12ms]
error: Command failed: git -C /test/repo add .
fatal: cannot change to '/test/repo': No such file or directory

   code: 128,
 killed: false,
 signal: null,
    cmd: "git -C /test/repo add .",
 stdout: "",
 stderr: "fatal: cannot change to '/test/repo': No such file or directory\n",

      at genericNodeError (node:child_process:946:22)
(fail) commitChangesFromParams > should commit changes with just message [5.86ms]
error: Command failed: git -C /custom/repo/path add .
fatal: cannot change to '/custom/repo/path': No such file or directory

   code: 128,
 killed: false,
 signal: null,
    cmd: "git -C /custom/repo/path add .",
 stdout: "",
 stderr: "fatal: cannot change to '/custom/repo/path': No such file or directory\n",

      at genericNodeError (node:child_process:946:22)
(fail) commitChangesFromParams > should handle commit with custom repo path [6.80ms]
1111 |     expect(result.commitHash).toBe("ghi789");
1112 |   });
1113 | 
1114 |   test("should handle commit errors gracefully", async () => {
1115 |     // Mock git commit command failure
1116 |     mockExecAsync.mockRejectedValueOnce(new Error("Git command failed"));
                                               ^
error: Git command failed
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git.test.ts:1116:41)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git.test.ts:1114:50)
(fail) commitChangesFromParams > should handle commit errors gracefully [0.82ms]

# Unhandled error between tests
-------------------------------
1119 |       message: "failing commit",
1120 |       repo: "/nonexistent/repo",
1121 |     };
1122 | 
1123 |     // Should not throw, should handle error gracefully
1124 |     await expect(commitChangesFromParams(params)).rejects.toThrow("Git command failed");
                                                                 ^
error: expect(received).toThrow(expected)

Expected substring: "Git command failed"
Received message: "Command failed: git -C /nonexistent/repo add .\nfatal: cannot change to '/nonexistent/repo': No such file or directory\n"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git.test.ts:1124:59)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git.test.ts:1114:50)
-------------------------------

error: Command failed: git -C /test/repo rev-parse --abbrev-ref HEAD
fatal: cannot change to '/test/repo': No such file or directory

   code: 128,
 killed: false,
 signal: null,
    cmd: "git -C /test/repo rev-parse --abbrev-ref HEAD",
 stdout: "",
 stderr: "fatal: cannot change to '/test/repo': No such file or directory\n",

      at genericNodeError (node:child_process:946:22)
(fail) pushFromParams > should push changes successfully [8.06ms]
error: Command failed: git -C /test/repo rev-parse --abbrev-ref HEAD
fatal: cannot change to '/test/repo': No such file or directory

   code: 128,
 killed: false,
 signal: null,
    cmd: "git -C /test/repo rev-parse --abbrev-ref HEAD",
 stdout: "",
 stderr: "fatal: cannot change to '/test/repo': No such file or directory\n",

      at genericNodeError (node:child_process:946:22)
(fail) pushFromParams > should handle push with custom remote [7.14ms]
error: Command failed: git -C /test/repo rev-parse --abbrev-ref HEAD
fatal: cannot change to '/test/repo': No such file or directory

   code: 128,
 killed: false,
 signal: null,
    cmd: "git -C /test/repo rev-parse --abbrev-ref HEAD",
 stdout: "",
 stderr: "fatal: cannot change to '/test/repo': No such file or directory\n",

      at genericNodeError (node:child_process:946:22)
(fail) pushFromParams > should handle push with branch specification [6.40ms]
1181 |     expect(result.pushed).toBe(true);
1182 |   });
1183 | 
1184 |   test("should handle push errors gracefully", async () => {
1185 |     // Mock git push command failure
1186 |     mockExecAsync.mockRejectedValueOnce(new Error("Git push failed"));
                                               ^
error: Git push failed
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git.test.ts:1186:41)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git.test.ts:1184:48)
(fail) pushFromParams > should handle push errors gracefully [0.08ms]

# Unhandled error between tests
-------------------------------
1188 |     const params = {
1189 |       repo: "/nonexistent/repo",
1190 |     };
1191 | 
1192 |     // Should not throw, should handle error gracefully
1193 |     await expect(pushFromParams(params)).rejects.toThrow("Git push failed");
                                                        ^
error: expect(received).toThrow(expected)

Expected substring: "Git push failed"
Received message: "Command failed: git -C /nonexistent/repo rev-parse --abbrev-ref HEAD\nfatal: cannot change to '/nonexistent/repo': No such file or directory\n"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git.test.ts:1193:50)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git.test.ts:1184:48)
-------------------------------


src/domain/session-pr-state-optimization.test.ts:

# Unhandled error between tests
-------------------------------
1 | (function (entry, fetcher)
              ^
SyntaxError: Export named 'updatePrStateOnMerge' not found in module '/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session.ts'.
      at loadAndEvaluateModule (1:11)
-------------------------------


src/domain/session-pr-branch-reference-bug.test.ts:
(pass) Session PR Branch Reference Bug Regression > should normalize branch references to prevent origin/origin/main [0.11ms]
(pass) Session PR Branch Reference Bug Regression > should detect origin/origin/main patterns in git commands [0.05ms]
(pass) Session PR Branch Reference Bug Regression > should validate git command construction prevents double-prefixing [0.04ms]
(pass) Session PR Branch Reference Bug Regression > should document the specific bug that was fixed [0.04ms]

src/domain/github-basic.test.ts:
(pass) GitHub Basic Functionality > initializes with correct repository URL
(pass) GitHub Basic Functionality > properly uses provided owner and repo values [0.17ms]
(pass) GitHub Basic Functionality > correctly identifies backend type [0.02ms]

src/domain/git.pr.test.ts:
(pass) GitService PR Functionality > isGitHubRepo should identify GitHub URLs correctly
(pass) GitService PR Functionality > should create a PR description

src/domain/session-start-consistency.test.ts:

# Unhandled error between tests
-------------------------------
1 | (function (entry, fetcher)
              ^
SyntaxError: Export named 'startSessionFromParams' not found in module '/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session.ts'.
      at loadAndEvaluateModule (1:11)
-------------------------------


src/domain/task-status-bug-regression.test.ts:
(pass) Task Status Bug Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for TODO status [0.01ms]
(pass) Task Status Bug Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for IN-PROGRESS status [0.01ms]
(pass) Task Status Bug Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for IN-REVIEW status [0.01ms]
(pass) Task Status Bug Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for DONE status
(pass) Task Status Bug Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for BLOCKED status [0.01ms]
(pass) Task Status Bug Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should not throw 'status is not defined' error [0.01ms]
(pass) Task Status Bug Regression Tests > Integration test with task status functionality > should handle all status transitions without variable naming errors [0.04ms]

codemods/tests/fix-import-paths.test.ts:
65 | 
66 |       const sourceFile = project.addSourceFileAtPath(filePath);
67 |       fixer.fixImportPathsInFile(sourceFile);
68 | 
69 |       const result = sourceFile.getFullText();
70 |       expect(result).toContain(`import { ValidationError } from "../../../errors";`);
                          ^
error: expect(received).toContain(expected)

Expected to contain: "import { ValidationError } from \"../../../errors\";"
Received: "import { ValidationError } from \"../../../errors/index\";\nimport { ResourceNotFoundError } from \"../../../errors\";\n\nexport function test() {\n  throw new ValidationError(\"test\");\n}"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/codemods/tests/fix-import-paths.test.ts:70:22)
(fail) GlobalImportPathFixer > Session Commands Directory (3 levels deep) > should fix ../../errors to ../../../errors [0.98ms]
(pass) GlobalImportPathFixer > Session Commands Directory (3 levels deep) > should fix ../../schemas to ../../../schemas [0.28ms]
(pass) GlobalImportPathFixer > Session Commands Directory (3 levels deep) > should fix ../../utils to ../../../utils [0.37ms]
120 | 
121 |       const sourceFile = project.addSourceFileAtPath(filePath);
122 |       fixer.fixImportPathsInFile(sourceFile);
123 | 
124 |       const result = sourceFile.getFullText();
125 |       expect(result).toContain(`import { ValidationError } from "../../../errors";`);
                           ^
error: expect(received).toContain(expected)

Expected to contain: "import { ValidationError } from \"../../../errors\";"
Received: "import { ValidationError } from \"../../../errors/index\";\nimport { getErrorMessage } from \"../../../errors\";\n\nexport function test() {\n  throw new ValidationError(\"test\");\n}"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/codemods/tests/fix-import-paths.test.ts:125:22)
(fail) GlobalImportPathFixer > Session Directory (2 levels deep) > should fix ../../errors to ../../../errors [0.62ms]
(pass) GlobalImportPathFixer > Session Directory (2 levels deep) > should fix ../../utils to ../../../utils [0.52ms]
160 | 
161 |       const sourceFile = project.addSourceFileAtPath(filePath);
162 |       fixer.fixImportPathsInFile(sourceFile);
163 | 
164 |       const result = sourceFile.getFullText();
165 |       expect(result).toContain(`import { getErrorMessage } from "../../../errors";`);
                           ^
error: expect(received).toContain(expected)

Expected to contain: "import { getErrorMessage } from \"../../../errors\";"
Received: "import { getErrorMessage } from \"../../../errors/index\";\nimport { log } from \"../../../utils/logger\";\n\nexport function test() {\n  log(\"test\");\n}"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/codemods/tests/fix-import-paths.test.ts:165:22)
(fail) GlobalImportPathFixer > Other Domain Subdirectories > should fix git operations imports [0.63ms]
180 | 
181 |       const sourceFile = project.addSourceFileAtPath(filePath);
182 |       fixer.fixImportPathsInFile(sourceFile);
183 | 
184 |       const result = sourceFile.getFullText();
185 |       expect(result).toContain(`import { getErrorMessage } from "../../../errors";`);
                           ^
error: expect(received).toContain(expected)

Expected to contain: "import { getErrorMessage } from \"../../../errors\";"
Received: "import { getErrorMessage } from \"../../../errors/index\";\nimport { validateTaskState } from \"../../../schemas/storage\";\nimport { log } from \"../../../utils/logger\";\n\nexport function test() {\n  log(\"test\");\n}"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/codemods/tests/fix-import-paths.test.ts:185:22)
(fail) GlobalImportPathFixer > Other Domain Subdirectories > should fix storage operations imports [0.63ms]
201 | 
202 |       const sourceFile = project.addSourceFileAtPath(filePath);
203 |       fixer.fixImportPathsInFile(sourceFile);
204 | 
205 |       const result = sourceFile.getFullText();
206 |       expect(result).toContain(`import { getErrorMessage } from "../../../errors";`);
                           ^
error: expect(received).toContain(expected)

Expected to contain: "import { getErrorMessage } from \"../../../errors\";"
Received: "import { getErrorMessage } from \"../../../errors/index\";\nimport { ValidationError } from \"../../../errors/index\";\nimport { log } from \"../../../utils/logger\";\n\nexport function test() {\n  log(\"test\");\n}"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/codemods/tests/fix-import-paths.test.ts:206:22)
(fail) GlobalImportPathFixer > Other Domain Subdirectories > should fix tasks operations imports [0.78ms]
223 | 
224 |       const sourceFile = project.addSourceFileAtPath(filePath);
225 |       fixer.fixImportPathsInFile(sourceFile);
226 | 
227 |       const result = sourceFile.getFullText();
228 |       expect(result).toContain(`import { getErrorMessage } from "../../../errors";`);
                           ^
error: expect(received).toContain(expected)

Expected to contain: "import { getErrorMessage } from \"../../../errors\";"
Received: "import { getErrorMessage } from \"../../../errors/index\";\nimport { log } from \"../../../utils/logger\";\n\nexport function test() {\n  log(\"test\");\n}"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/codemods/tests/fix-import-paths.test.ts:228:22)
(fail) GlobalImportPathFixer > Adapters Directory > should fix MCP adapter imports [0.66ms]
242 | 
243 |       const sourceFile = project.addSourceFileAtPath(filePath);
244 |       fixer.fixImportPathsInFile(sourceFile);
245 | 
246 |       const result = sourceFile.getFullText();
247 |       expect(result).toContain(`import { MinskyError } from "../../../errors";`);
                           ^
error: expect(received).toContain(expected)

Expected to contain: "import { MinskyError } from \"../../../errors\";"
Received: "import { MinskyError } from \"../../../errors/index\";\nimport { log } from \"../../../utils/logger\";\n\nexport function test() {\n  log(\"test\");\n}"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/codemods/tests/fix-import-paths.test.ts:247:22)
(fail) GlobalImportPathFixer > Adapters Directory > should fix shared adapter imports [0.61ms]
274 |       expect(originalIssues).toHaveLength(6); // Should find 6 issues
275 | 
276 |       fixer.fixImportPathsInFile(sourceFile);
277 | 
278 |       const result = sourceFile.getFullText();
279 |       expect(result).toContain(`import { ValidationError } from "../../../errors";`);
                           ^
error: expect(received).toContain(expected)

Expected to contain: "import { ValidationError } from \"../../../errors\";"
Received: "import { ValidationError } from \"../../../errors/index\";\nimport { ResourceNotFoundError } from \"../../../errors\";\nimport { taskIdSchema } from \"../../../schemas/common\";\nimport type { SessionParams } from \"../../../schemas/session\";\nimport { log } from \"../../../utils/logger\";\nimport { execAsync } from \"../../../utils/exec\";\n\n// This should not be changed\nimport { someFunction } from \"../types\";\nimport { anotherFunction } from \"./local-file\";\nimport { externalLib } from \"external-library\";\n\nexport function test() {}"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/codemods/tests/fix-import-paths.test.ts:279:22)
(fail) GlobalImportPathFixer > Import Path Detection Logic > should detect all incorrect import patterns [1.12ms]
303 | 
304 |       const sourceFile = project.addSourceFileAtPath(filePath);
305 |       fixer.fixImportPathsInFile(sourceFile);
306 | 
307 |       const result = sourceFile.getFullText();
308 |       expect(result).toContain(`import { ValidationError, ResourceNotFoundError } from "../../../errors";`);
                           ^
error: expect(received).toContain(expected)

Expected to contain: "import { ValidationError, ResourceNotFoundError } from \"../../../errors\";"
Received: "import { ValidationError, ResourceNotFoundError } from \"../../../errors/index\";\nimport type { Session } from \"../types\";\nimport { log } from \"../../../utils/logger\";\n\nexport function test() {}"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/codemods/tests/fix-import-paths.test.ts:308:22)
(fail) GlobalImportPathFixer > Edge Cases > should handle mixed import types correctly [0.39ms]
(pass) GlobalImportPathFixer > Edge Cases > should handle files with no import issues [0.33ms]
🚀 Starting codemod execution...
📁 Adding source files...
Found 3 files to process
✅ Added 3 source files
🔍 Analyzing import declarations throughout the codebase...
Found 6 import path issues to fix
🔧 Applying import path fixes...
✅ Fixed 6/6 import path issues
💾 Saving changes...
✅ Saved 3 modified files

📊 Codemod Execution Report
==================================================
Files Processed: 3
Issues Found: 6
Issues Fixed: 6
Success Rate: 100.0%
Processing Time: 3ms

📈 Issues by Type:
incorrect-import-path: 6

📝 File Changes:
/Users/edobry/.local/state/minsky/sessions/task#276/codemods/tests/temp-S8tp4D/src/domain/git/test2.ts: 2 changes
/Users/edobry/.local/state/minsky/sessions/task#276/codemods/tests/temp-S8tp4D/src/domain/tasks/test3.ts: 2 changes
/Users/edobry/.local/state/minsky/sessions/task#276/codemods/tests/temp-S8tp4D/src/domain/session/commands/test1.ts: 2 changes
368 |       // Verify the fixes were applied
369 |       files.forEach(file => {
370 |         const fullPath = path.join(tempDir, file.path);
371 |         const result = fs.readFileSync(fullPath, 'utf-8');
372 | 
373 |         expect(result).not.toContain('../../errors');
                                 ^
error: expect(received).not.toContain(expected)

Expected to not contain: "../../errors"
Received: "import { ValidationError } from \"../../../errors/index\";\nimport { log } from \"../../../utils/logger\";"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/codemods/tests/fix-import-paths.test.ts:373:28)
      at forEach (1:11)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/codemods/tests/fix-import-paths.test.ts:369:13)
(fail) GlobalImportPathFixer > Full Integration Test > should process multiple files and generate comprehensive report [9.31ms]

codemods/tests/directory-aware-import-fixer.test.ts:
(pass) Directory-Aware Import Path Calculation > calculateRelativePath function > should calculate correct paths for commands directory (2 levels deep) [0.04ms]
(pass) Directory-Aware Import Path Calculation > calculateRelativePath function > should calculate correct paths for domain session commands (3 levels deep)
(pass) Directory-Aware Import Path Calculation > calculateRelativePath function > should calculate correct paths for domain subdirectories (2 levels deep) [0.02ms]
(pass) Directory-Aware Import Path Calculation > calculateRelativePath function > should calculate correct paths for adapters directory (2 levels deep) [0.02ms]
(pass) Directory-Aware Import Path Calculation > Import path detection and correction > should detect incorrect import paths and suggest corrections [0.16ms]
(pass) Directory-Aware Import Path Calculation > Import path detection and correction > should not suggest changes for already correct paths
(pass) Directory-Aware Import Path Calculation > Import path detection and correction > should not suggest changes for non-target imports
(pass) Directory-Aware Import Path Calculation > Real-world example verification > should correctly fix the problematic files from our codebase [0.09ms]

tests/consolidated-utilities/variable-naming-fixer.test.ts:
🏷️  Processing 1 TypeScript files for variable naming fixes...
✅ Fixed 1 naming issues in /var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-yfjZq1/test.ts

🎯 Variable Naming Fix Results:
   Files processed: 1/1
   Total fixes applied: 1
   Success rate: 100.0%

📊 Fix type breakdown:
   underscore-prefix-mismatch: 1 fixes
(pass) Variable Naming Fixer Consolidated > Underscore Prefix Mismatches > should fix parameter definitions with underscores when usage has no underscore [3.31ms]
🏷️  Processing 1 TypeScript files for variable naming fixes...
✅ Fixed 1 naming issues in /var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-HZnQNc/test.ts

🎯 Variable Naming Fix Results:
   Files processed: 1/1
   Total fixes applied: 1
   Success rate: 100.0%

📊 Fix type breakdown:
   underscore-prefix-mismatch: 1 fixes
(pass) Variable Naming Fixer Consolidated > Underscore Prefix Mismatches > should fix variable declarations with underscores when usage has no underscore [1.28ms]
🏷️  Processing 1 TypeScript files for variable naming fixes...
✅ Fixed 2 naming issues in /var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-2iRVhk/test.ts

🎯 Variable Naming Fix Results:
   Files processed: 1/1
   Total fixes applied: 2
   Success rate: 100.0%

📊 Fix type breakdown:
   underscore-prefix-mismatch: 2 fixes
(pass) Variable Naming Fixer Consolidated > Underscore Prefix Mismatches > should handle destructuring with underscore mismatches [1.49ms]
🏷️  Processing 1 TypeScript files for variable naming fixes...

🎯 Variable Naming Fix Results:
   Files processed: 0/1
   Total fixes applied: 0
   Success rate: 0.0%
(pass) Variable Naming Fixer Consolidated > Boundary Validation - Should NOT Change > should NOT change intentionally unused parameters with underscores [0.87ms]
🏷️  Processing 1 TypeScript files for variable naming fixes...

🎯 Variable Naming Fix Results:
   Files processed: 0/1
   Total fixes applied: 0
   Success rate: 0.0%
(pass) Variable Naming Fixer Consolidated > Boundary Validation - Should NOT Change > should NOT change variables that are used with underscores consistently [0.75ms]
🏷️  Processing 1 TypeScript files for variable naming fixes...

🎯 Variable Naming Fix Results:
   Files processed: 0/1
   Total fixes applied: 0
   Success rate: 0.0%
(pass) Variable Naming Fixer Consolidated > Boundary Validation - Should NOT Change > should NOT change underscore patterns in strings or comments [1.01ms]
🏷️  Processing 1 TypeScript files for variable naming fixes...
(pass) Variable Naming Fixer Consolidated > Boundary Validation - Should NOT Change > should handle scope correctly - same variable names in different scopes [1.09ms]
🏷️  Processing 1 TypeScript files for variable naming fixes...
(pass) Variable Naming Fixer Consolidated > Error Handling > should handle files with syntax errors gracefully [0.90ms]
Error saving /var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-7hWjTv/test.ts: ENOENT: no such file or directory, open '/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-7hWjTv/test.ts'
    path: "/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-7hWjTv/test.ts",
 syscall: "open",
   errno: -2,
    code: "ENOENT"



🎯 Variable Naming Fix Results:
   Files processed: 0/1
   Total fixes applied: 0
   Success rate: 0.0%

📊 Fix type breakdown:
   underscore-prefix-mismatch: 1 fixes
🏷️  Processing 1 TypeScript files for variable naming fixes...

🎯 Variable Naming Fix Results:
   Files processed: 0/1
   Total fixes applied: 0
   Success rate: 0.0%
(pass) Variable Naming Fixer Consolidated > Error Handling > should handle non-existent patterns gracefully [0.61ms]
Error saving /var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-2e3Yk4/broken.ts: ENOENT: no such file or directory, open '/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-2e3Yk4/broken.ts'
    path: "/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-2e3Yk4/broken.ts",
 syscall: "open",
   errno: -2,
    code: "ENOENT"



🎯 Variable Naming Fix Results:
   Files processed: 0/1
   Total fixes applied: 0
   Success rate: 0.0%

📊 Fix type breakdown:
   underscore-prefix-mismatch: 1 fixes
🏷️  Processing 1 TypeScript files for variable naming fixes...
✅ Fixed 2 naming issues in /var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-WXJvqn/mixed.ts

🎯 Variable Naming Fix Results:
   Files processed: 1/1
   Total fixes applied: 2
   Success rate: 100.0%

📊 Fix type breakdown:
   underscore-prefix-mismatch: 2 fixes
(pass) Variable Naming Fixer Consolidated > Complex Scenarios > should handle mixed scenarios correctly [1.90ms]
(pass) Variable Naming Fixer Consolidated > Performance and Metrics > should provide accurate metrics [1.42ms]
🏷️  Processing 1 TypeScript files for variable naming fixes...
✅ Fixed 1 naming issues in /var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-Ybya6l/complex-syntax.ts

🎯 Variable Naming Fix Results:
   Files processed: 1/1
   Total fixes applied: 1
   Success rate: 100.0%

📊 Fix type breakdown:
   underscore-prefix-mismatch: 1 fixes
(pass) Variable Naming Fixer Consolidated > Integration with AST Analysis > should properly parse TypeScript files with complex syntax [3.74ms]

src/utils/test-utils/assertions.test.ts:
(pass) Custom Assertion Helpers > expectToMatch > should match a string against a regex pattern
(pass) Custom Assertion Helpers > expectToHaveLength > should verify array length
(pass) Custom Assertion Helpers > expectToHaveLength > should verify string length [0.04ms]
(pass) Custom Assertion Helpers > expectToBeInstanceOf > should verify object instanceof [0.02ms]
(pass) Custom Assertion Helpers > expectToHaveProperty > should verify object has property [0.08ms]
(pass) Custom Assertion Helpers > expectToBeCloseTo > should compare floating point numbers with precision [0.04ms]
(pass) Custom Assertion Helpers > expectToContainEqual > should check if array contains an item with deep equality [0.07ms]

src/utils/test-utils/enhanced-utils.test.ts:
(pass) Enhanced Test Utilities > mockFunction > should create a type-safe mock function
(pass) Enhanced Test Utilities > mockFunction > should allow changing implementation [0.02ms]
(pass) Enhanced Test Utilities > createPartialMock > should create a mock with provided implementations [0.08ms]
(pass) Enhanced Test Utilities > mockReadonlyProperty > should mock readonly properties [0.04ms]
(pass) Enhanced Test Utilities > createTestDeps > should create default test dependencies [0.05ms]
(pass) Enhanced Test Utilities > createTestDeps > should allow overriding specific methods [0.03ms]
(pass) Enhanced Test Utilities > withMockedDeps > should temporarily override dependencies [0.04ms]
(pass) Enhanced Test Utilities > Factory Functions > should create task data with defaults [0.05ms]
(pass) Enhanced Test Utilities > Factory Functions > should create task data with overrides [0.02ms]
(pass) Enhanced Test Utilities > Factory Functions > should create an array of task data [0.08ms]
(pass) Enhanced Test Utilities > Factory Functions > should create session data [0.30ms]
(pass) Enhanced Test Utilities > Integration Example > should demonstrate a complex test scenario [0.22ms]

src/utils/test-utils/compatibility.test.ts:

# Unhandled error between tests
-------------------------------
1 | (function (entry, fetcher)
              ^
SyntaxError: export 'compat' not found in './test-utils/index'
      at loadAndEvaluateModule (1:11)
-------------------------------


src/utils/test-utils/mocking.test.ts:
(pass) Mocking Utilities > createMock creates a proper mock function [0.03ms]
(pass) Mocking Utilities > createMock without implementation returns a mock that returns undefined [0.02ms]
(pass) Mocking Utilities > createSpyOn spies on object methods [0.05ms]
(pass) Mocking Utilities > createSpyOn throws error when trying to spy on non-function property [0.10ms]

src/domain/configuration/sessiondb-config.test.ts:
(pass) SessionDB Configuration Loading > Default Configuration > should provide sensible defaults [0.07ms]
(pass) SessionDB Configuration Loading > Configuration Structure > should return proper configuration structure [0.18ms]
(pass) SessionDB Configuration Loading > SessionDB Configuration > should have proper sessiondb configuration fields
(pass) SessionDB Configuration Loading > SessionDB Configuration > should validate sessiondb configuration with Zod [0.11ms]
(pass) SessionDB Configuration Loading > Configuration Validation > should validate repository config [0.17ms]
(pass) SessionDB Configuration Loading > Configuration Validation > should validate global user config [0.05ms]
(pass) SessionDB Configuration Loading > Configuration Validation > should handle invalid repository config [0.11ms]
(pass) SessionDB Configuration Loading > Configuration Validation > should handle invalid global user config [0.01ms]
(pass) SessionDB Configuration Loading > Direct Config Access > should access configuration values directly
(pass) SessionDB Configuration Loading > Direct Config Access > should handle missing configuration values

src/domain/tasks/task-service-interface.test.ts:
(pass) TaskService Interface Compatibility > should provide setTaskStatus method [1.06ms]
(pass) TaskService Interface Compatibility > should have getTaskStatus method (ensures interface completeness) [0.06ms]
(pass) TaskService Interface Compatibility > should validate task status in setTaskStatus method [0.37ms]
(pass) TaskService Interface Compatibility > should maintain interface compatibility with existing commands [0.07ms]

src/domain/tasks/utils.test.ts:
(pass) normalizeTaskId > should normalize "#064" to "#064" (with # and leading zero) [0.63ms]
(pass) normalizeTaskId > should normalize "#64" to "#64" (with #, no leading zero)
(pass) normalizeTaskId > should normalize "064" to "#064" (no #, with leading zero)
(pass) normalizeTaskId > should normalize "64" to "#64" (no #, no leading zero)
(pass) normalizeTaskId > should normalize "task#064" to "#064" (with task# and leading zero)
(pass) normalizeTaskId > should normalize "task#64" to "#64" (with task#, no leading zero)
(pass) normalizeTaskId > should normalize "TASK#64" to "#64" (with TASK# (uppercase), no leading zero)
(pass) normalizeTaskId > should normalize "  #64  " to "#64" (with whitespace)
(pass) normalizeTaskId > should normalize "task#0" to "#0" (task ID zero)
(pass) normalizeTaskId > should normalize "0" to "#0" (task ID zero numeric)
(pass) normalizeTaskId > should return null for invalid input "abc" (non-numeric) [0.02ms]
(pass) normalizeTaskId > should return null for invalid input "#abc" (# with non-numeric)
(pass) normalizeTaskId > should return null for invalid input "task#abc" (task# with non-numeric)
(pass) normalizeTaskId > should return null for invalid input "64a" (numeric followed by alpha)
(pass) normalizeTaskId > should return null for invalid input "a64" (alpha followed by numeric)
(pass) normalizeTaskId > should return null for invalid input "#" (only #)
(pass) normalizeTaskId > should return null for invalid input "task#" (only task#)
(pass) normalizeTaskId > should return null for invalid input "" (empty string)
(pass) normalizeTaskId > should return null for invalid input "   " (whitespace only)
(pass) normalizeTaskId > should return null for invalid input "null" (null input)
(pass) normalizeTaskId > should return null for invalid input "undefined" (undefined input)
(pass) normalizeTaskId > should return null for invalid input "123" (number input type)

src/domain/tasks/taskService-jsonFile-integration.test.ts:
(pass) TaskService JsonFile Integration (Enhanced) > Basic Task Operations > should create and retrieve tasks [1.14ms]
(pass) TaskService JsonFile Integration (Enhanced) > Basic Task Operations > should handle multiple tasks [0.40ms]
(pass) TaskService JsonFile Integration (Enhanced) > Basic Task Operations > should update task status [0.34ms]
154 | 
155 |       const task = await taskServiceInstance.getTask(invalidId);
156 |       expect(task).toBe(null);
157 | 
158 |       const status = await taskServiceInstance.getTaskStatus(invalidId);
159 |       expect(status).toBeUndefined();
                           ^
error: expect(received).toBeUndefined()

Received: null

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskService-jsonFile-integration.test.ts:159:22)
(fail) TaskService JsonFile Integration (Enhanced) > Error Handling > should handle invalid task IDs gracefully [0.12ms]
(pass) TaskService JsonFile Integration (Enhanced) > Error Handling > should validate task status values [0.09ms]
(pass) TaskService JsonFile Integration (Enhanced) > Data Persistence > should persist changes across service instances [0.17ms]
(pass) TaskService JsonFile Integration (Enhanced) > Test Isolation Validation > should maintain proper test isolation
(pass) TaskService JsonFile Integration (Enhanced) > Test Isolation Validation > should cleanup properly after each test [0.05ms]

src/domain/tasks/jsonFileTaskBackend.test.ts:
(pass) JsonFileTaskBackend > storage operations > should initialize storage correctly [0.08ms]
(pass) JsonFileTaskBackend > storage operations > should store and retrieve tasks [0.38ms]
(pass) JsonFileTaskBackend > storage operations > should update tasks [0.21ms]
(pass) JsonFileTaskBackend > storage operations > should delete tasks [0.20ms]
(pass) JsonFileTaskBackend > TaskBackend interface compliance > should implement getTasksData [0.05ms]
(pass) JsonFileTaskBackend > TaskBackend interface compliance > should implement saveTasksData [0.25ms]
(pass) JsonFileTaskBackend > TaskBackend interface compliance > should implement parseTasks [0.14ms]
(pass) JsonFileTaskBackend > TaskBackend interface compliance > should implement formatTasks
(pass) JsonFileTaskBackend > TaskBackend interface compliance > should handle task spec operations [0.26ms]
(pass) JsonFileTaskBackend > markdown compatibility > should parse markdown task format [0.21ms]
(pass) JsonFileTaskBackend > helper methods > should generate correct task spec paths [0.07ms]
(pass) JsonFileTaskBackend > helper methods > should return correct workspace path [0.04ms]

src/domain/tasks/special-workspace-integration.test.ts:
(pass) Special Workspace Integration > TaskService with Backend Routing > should create TaskService with external backends [0.12ms]
(pass) Special Workspace Integration > TaskService with Backend Routing > should route JSON backend correctly based on file location [0.13ms]
(pass) Special Workspace Integration > Backend Router Factory Methods > should create external-only router [0.02ms]
(pass) Special Workspace Integration > Backend Router Factory Methods > should create router with repository URL [0.05ms]
(pass) Special Workspace Integration > Backend Configuration Priority > should use explicit dbFilePath when provided [0.06ms]
(pass) Special Workspace Integration > Backend Configuration Priority > should detect team-shareable location correctly [0.06ms]
(pass) Special Workspace Integration > Error Recovery > should handle backend creation errors gracefully [0.06ms]
(pass) Special Workspace Integration > Error Recovery > should handle missing repository URL for in-tree operations [0.14ms]
(pass) Special Workspace Integration > Team Collaboration Benefits > should demonstrate centralized storage advantage [0.07ms]

src/domain/tasks/real-world-workflow.test.ts:
(pass) Real-World Workflow Testing > JSON Backend Real Storage > should actually create and store data in the correct location [0.51ms]
(pass) Real-World Workflow Testing > JSON Backend Real Storage > should default to process/tasks.json when no explicit path provided [0.05ms]
(pass) Real-World Workflow Testing > TaskService Integration > should work with JSON backend for complete task operations [0.37ms]
(pass) Real-World Workflow Testing > Error Handling > should handle missing process directory gracefully [0.06ms]

src/domain/tasks/taskService.test.ts:
(pass) TaskService > listTasks > should get tasks data and parse it [0.06ms]
(pass) TaskService > listTasks > should filter tasks by status if provided [0.03ms]
(pass) TaskService > listTasks > should return empty array if data retrieval fails [0.05ms]
(pass) TaskService > getTask > should find a task by ID [0.04ms]
(pass) TaskService > getTask > should find a task by ID without # prefix [0.04ms]
(pass) TaskService > getTask > should return null if task not found [0.03ms]
(pass) TaskService > getTaskStatus > should get a task's status [0.04ms]
(pass) TaskService > getTaskStatus > should return null if task not found
(pass) TaskService > setTaskStatus > should update a task's status [0.11ms]
(pass) TaskService > setTaskStatus > should throw error for invalid status [0.05ms]
(pass) TaskService > setTaskStatus > should throw error if task not found [0.04ms]
(pass) TaskService > createTask > should create a new task from spec file [0.06ms]
(pass) TaskService > createTask > should throw error if spec file read fails [0.09ms]
(pass) TaskService > backend handling > should throw error for non-existent backend [0.09ms]
(pass) TaskService > backend handling > should use markdown backend by default [0.04ms]

src/domain/tasks/task-backend-router.test.ts:
(pass) TaskBackendRouter > Manual Override (isInTreeBackend method) > should use manual override for MarkdownTaskBackend (which has isInTreeBackend)
52 |       const routingInfo = router.getBackendRoutingInfo(jsonBackend);
53 | 
54 |       expect(routingInfo.category).toBe("in-tree");
55 |       expect(routingInfo.requiresSpecialWorkspace).toBe(true);
56 |       // Should use manual override description since backend has isInTreeBackend method
57 |       expect(routingInfo.description).toContain("Manually configured as in-tree");
                                           ^
error: expect(received).toContain(expected)

Expected to contain: "Manually configured as in-tree"
Received: "JSON file stored in repository process directory"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/task-backend-router.test.ts:57:39)
(fail) TaskBackendRouter > Manual Override (isInTreeBackend method) > should use manual override for JsonFileTaskBackend (which has isInTreeBackend) [0.15ms]
(pass) TaskBackendRouter > Auto-Detection Logic (without isInTreeBackend method) > should auto-detect MarkdownTaskBackend as in-tree when isInTreeBackend is removed [0.07ms]
(pass) TaskBackendRouter > Auto-Detection Logic (without isInTreeBackend method) > should auto-detect JsonFileTaskBackend as in-tree when using process directory [0.03ms]
(pass) TaskBackendRouter > Auto-Detection Logic (without isInTreeBackend method) > should auto-detect JsonFileTaskBackend as in-tree when using .minsky directory [0.03ms]
(pass) TaskBackendRouter > Auto-Detection Logic (without isInTreeBackend method) > should auto-detect JsonFileTaskBackend as external when using external path [0.03ms]
(pass) TaskBackendRouter > Manual Override Support > should respect isInTreeBackend() manual override when true [0.05ms]
(pass) TaskBackendRouter > Manual Override Support > should respect isInTreeBackend() manual override when false [0.04ms]
(pass) TaskBackendRouter > Router Creation > should create external-only router successfully [0.01ms]
(pass) TaskBackendRouter > Router Creation > should create router with repository URL [0.05ms]
(pass) TaskBackendRouter > Backend Operation Routing > should route external backends to current directory [0.07ms]
(pass) TaskBackendRouter > Backend Operation Routing > should throw error for in-tree backend without repository URL [0.05ms]
(pass) TaskBackendRouter > Helper Methods > should detect SQLite backends correctly [0.06ms]
(pass) TaskBackendRouter > Helper Methods > should detect PostgreSQL backends correctly [0.04ms]
(pass) TaskBackendRouter > Helper Methods > should default to external for unknown backends [0.02ms]
(pass) TaskBackendRouter > Error Handling > should handle errors in JSON backend file path extraction gracefully [0.04ms]

src/domain/tasks/taskFunctions.test.ts:
(pass) Task Functions > normalizeTaskId > should return canonical form for valid IDs [0.04ms]
(pass) Task Functions > normalizeTaskId > should handle various prefix patterns [0.04ms]
(pass) Task Functions > normalizeTaskId > should return null for non-numeric input
(pass) Task Functions > normalizeTaskId > should extract numeric portion from mixed formats [0.02ms]
(pass) Task Functions > normalizeTaskId > should handle alphanumeric task IDs [0.02ms]
(pass) Task Functions > parseTasksFromMarkdown > should return empty array for empty content [0.12ms]
(pass) Task Functions > parseTasksFromMarkdown > should parse tasks from markdown content [0.09ms]
(pass) Task Functions > parseTasksFromMarkdown > should ignore tasks in code blocks [0.11ms]
(pass) Task Functions > formatTasksToMarkdown > should return empty string for empty array [0.06ms]
(pass) Task Functions > formatTasksToMarkdown > should format tasks to markdown with one-liner format only [0.06ms]
(pass) Task Functions > formatTasksToMarkdown > should use task specPath if available [0.03ms]
(pass) Task Functions > getTaskById > should return null for empty input [0.06ms]
(pass) Task Functions > getTaskById > should find task by exact ID match [0.05ms]
(pass) Task Functions > getTaskById > should find task by ID without # prefix [0.02ms]
(pass) Task Functions > getTaskById > should handle numeric equivalence [0.03ms]
(pass) Task Functions > getNextTaskId > should return #001 for empty tasks array [0.04ms]
(pass) Task Functions > getNextTaskId > should find the maximum ID and increment it [0.03ms]
(pass) Task Functions > getNextTaskId > should handle non-sequential IDs [0.01ms]
(pass) Task Functions > getNextTaskId > should pad with zeros [0.08ms]
(pass) Task Functions > setTaskStatus > should update a task's status [0.06ms]
(pass) Task Functions > setTaskStatus > should work with task ID variations [0.01ms]
(pass) Task Functions > setTaskStatus > should return original array if task not found [0.01ms]
(pass) Task Functions > setTaskStatus > should return original array if status is invalid [0.01ms]
(pass) Task Functions > addTask > should add a new task to the array [0.04ms]
(pass) Task Functions > addTask > should replace an existing task with the same ID [0.02ms]
(pass) Task Functions > addTask > should generate an ID if not provided [0.02ms]
(pass) Task Functions > filterTasks > should return all tasks if no filter provided [0.04ms]
(pass) Task Functions > filterTasks > should filter by status [0.06ms]
(pass) Task Functions > filterTasks > should filter by ID [0.05ms]
(pass) Task Functions > filterTasks > should filter by title (string match) [0.01ms]
(pass) Task Functions > filterTasks > should filter by title (regex match) [0.03ms]
(pass) Task Functions > filterTasks > should filter by specPath existence [0.02ms]
(pass) Task Functions > filterTasks > should combine multiple filter criteria [0.04ms]
(pass) Task Functions > parseTaskSpecFromMarkdown > should parse task spec from markdown [0.11ms]
(pass) Task Functions > parseTaskSpecFromMarkdown > should handle specs without task ID [0.06ms]
(pass) Task Functions > parseTaskSpecFromMarkdown > should handle general heading format [0.01ms]
(pass) Task Functions > parseTaskSpecFromMarkdown > should return empty values for invalid input [0.02ms]
(pass) Task Functions > formatTaskSpecToMarkdown > should format task spec to markdown with ID [0.03ms]
(pass) Task Functions > formatTaskSpecToMarkdown > should format task spec without ID [0.01ms]
(pass) Task Functions > isValidTaskStatus > should validate correct statuses [0.02ms]
(pass) Task Functions > isValidTaskStatus > should reject invalid statuses [0.01ms]

src/domain/tasks/configuration-integration.test.ts:
(pass) Configuration Integration > createConfiguredTaskService should use configuration to resolve backend [1.88ms]
(pass) Configuration Integration > createConfiguredTaskService should fall back to default when configuration fails [0.08ms]
(pass) Configuration Integration > createConfiguredTaskService should respect explicit backend parameter [0.58ms]

src/domain/tasks/githubIssuesTaskBackend.test.ts:
(pass) GitHubIssuesTaskBackend > configuration > should create instance with correct configuration
(pass) GitHubIssuesTaskBackend > configuration > should initialize with custom status labels [0.19ms]
(pass) GitHubIssuesTaskBackend > parseTasks > should parse GitHub issues into TaskData objects [0.38ms]
(pass) GitHubIssuesTaskBackend > parseTasks > should handle invalid JSON gracefully [0.06ms]
(pass) GitHubIssuesTaskBackend > formatTasks > should format TaskData objects for GitHub API [0.05ms]
(pass) GitHubIssuesTaskBackend > parseTaskSpec > should parse task specification content [0.08ms]
(pass) GitHubIssuesTaskBackend > formatTaskSpec > should format task specification data [0.01ms]
(pass) GitHubIssuesTaskBackend > getTaskSpecPath > should generate correct spec path
(pass) GitHubIssuesTaskBackend > getTaskSpecPath > should handle task ID without # prefix
(pass) GitHubIssuesTaskBackend > getTaskSpecPath > should normalize title for filename

src/domain/tasks/taskConstants.test.ts:
(pass) Task Constants and Utilities > Basic Constants > should have all required task statuses [0.94ms]
(pass) Task Constants and Utilities > Basic Constants > should have bidirectional mapping between status and checkbox [0.06ms]
(pass) Task Constants and Utilities > Regex Patterns > should match valid task lines [0.07ms]
(pass) Task Constants and Utilities > Regex Patterns > should not match invalid task lines [0.03ms]
(pass) Task Constants and Utilities > Parsing Utilities > should parse valid task lines correctly [0.05ms]
(pass) Task Constants and Utilities > Parsing Utilities > should return null for invalid task lines [0.03ms]
(pass) Task Constants and Utilities > Parsing Utilities > should replace checkbox status correctly [0.05ms]
(pass) Task Constants and Utilities > Parsing Utilities > should get status from checkbox correctly [0.03ms]
(pass) Task Constants and Utilities > Parsing Utilities > should get checkbox from status correctly [0.01ms]
(pass) Task Constants and Utilities > Parsing Utilities > should validate task-like lines correctly [0.01ms]
(pass) Task Constants and Utilities > Status Validation > should validate valid statuses [0.02ms]
(pass) Task Constants and Utilities > Status Validation > should reject invalid statuses [0.02ms]
(pass) Task Constants and Utilities > Dynamic Pattern Generation > should generate patterns that include all status characters [0.01ms]
(pass) Task Constants and Utilities > Dynamic Pattern Generation > should handle new status additions gracefully [0.02ms]

src/domain/tasks/taskCommands.test.ts:
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should return BLOCKED status for task 155 with [~] checkbox [0.21ms]
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should return TODO status for task 156 with [ ] checkbox [0.11ms]
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should return IN_PROGRESS status for task 157 with [+] checkbox [0.10ms]
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should return DONE status for task 158 with [x] checkbox [0.14ms]
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should throw error when task not found [0.18ms]
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should handle task ID normalization [0.07ms]
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should handle custom repo path [0.08ms]
(pass) Interface-Agnostic Task Command Functions > getTaskFromParams > should get task by ID [0.15ms]
(pass) Interface-Agnostic Task Command Functions > getTaskFromParams > should throw error when task not found [0.10ms]
(pass) Interface-Agnostic Task Command Functions > getTaskFromParams > should handle task ID normalization [0.12ms]
(pass) Interface-Agnostic Task Command Functions > getTaskFromParams > should handle custom repo path [0.13ms]
(pass) Interface-Agnostic Task Command Functions > listTasksFromParams > should list all tasks when no filter is provided [0.11ms]
(pass) Interface-Agnostic Task Command Functions > listTasksFromParams > should filter tasks by status [0.12ms]
(pass) Interface-Agnostic Task Command Functions > listTasksFromParams > should filter out DONE tasks when all is false [0.10ms]
(pass) Interface-Agnostic Task Command Functions > setTaskStatusFromParams > should set task status [0.07ms]
(pass) Interface-Agnostic Task Command Functions > setTaskStatusFromParams > should throw error when task not found [0.01ms]
(pass) Interface-Agnostic Task Command Functions > setTaskStatusFromParams > should handle task ID normalization [0.02ms]
(pass) Interface-Agnostic Task Command Functions > Parameter Validation > should validate task ID format [0.03ms]
(pass) Interface-Agnostic Task Command Functions > Parameter Validation > should handle empty task ID [0.06ms]
(pass) Interface-Agnostic Task Command Functions > Parameter Validation > should handle backend parameter [0.13ms]

src/domain/workspace/session-path-resolver.test.ts:
(pass) SessionPathResolver > validateAndResolvePath > should resolve relative paths within session [0.04ms]
(pass) SessionPathResolver > validateAndResolvePath > should resolve current directory reference
(pass) SessionPathResolver > validateAndResolvePath > should throw error for path traversal outside session [0.08ms]
(pass) SessionPathResolver > validateAndResolvePath > should throw error for absolute paths outside session [0.01ms]
(pass) SessionPathResolver > validateAndResolvePath > should handle complex path traversal attempts [0.02ms]
(pass) SessionPathResolver > validateAndResolvePath > should allow absolute paths within session
(pass) SessionPathResolver > isPathWithinSession > should return true for paths within session [0.03ms]
(pass) SessionPathResolver > isPathWithinSession > should return false for paths outside session
(pass) SessionPathResolver > isPathWithinSession > should return true for session root
(pass) SessionPathResolver > absoluteToRelative > should convert absolute path to relative [0.01ms]
(pass) SessionPathResolver > absoluteToRelative > should return null for paths outside session
(pass) SessionPathResolver > absoluteToRelative > should return '.' for session root
(pass) SessionPathResolver > getRelativePathFromSession > should get relative path from user input [0.01ms]
(pass) SessionPathResolver > getRelativePathFromSession > should normalize relative path from user input
(pass) SessionPathResolver > getRelativePathFromSession > should return '.' for session root reference [0.01ms]
(pass) SessionPathResolver > validateMultiplePaths > should validate multiple valid paths [0.04ms]
(pass) SessionPathResolver > validateMultiplePaths > should throw error if any path is invalid [0.07ms]
(pass) SessionPathResolver > createSafePath > should create safe path from components [0.02ms]
(pass) SessionPathResolver > createSafePath > should throw error for unsafe path components [0.01ms]

src/domain/storage/database-integrity-checker.test.ts:
75 |   });
76 | 
77 |   describe("File Format Detection", () => {
78 |     test("should detect valid SQLite format", async () => {
79 |       // Create a valid SQLite file
80 |       const db = new Database(testDbPath);
                      ^
SQLiteError: unable to open database file
      errno: 14,
 byteOffset: -1,
       code: "SQLITE_CANTOPEN"

      at new Database (bun:sqlite:240:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/database-integrity-checker.test.ts:80:18)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/database-integrity-checker.test.ts:78:47)
(fail) DatabaseIntegrityChecker > File Format Detection > should detect valid SQLite format [1.72ms]
(pass) DatabaseIntegrityChecker > File Format Detection > should detect valid JSON format [0.23ms]
(pass) DatabaseIntegrityChecker > File Format Detection > should detect corrupted JSON format [0.49ms]
(pass) DatabaseIntegrityChecker > File Format Detection > should detect empty file [0.10ms]
(pass) DatabaseIntegrityChecker > File Format Detection > should detect missing file
(pass) DatabaseIntegrityChecker > Format Mismatch Detection > should detect JSON file when SQLite expected [0.24ms]
153 |       expect(migrationAction?.priority).toBe("high");
154 |     });
155 | 
156 |     test("should detect SQLite file when JSON expected", async () => {
157 |       const sqlitePath = join(testDirPath, "fake-json.json");
158 |       const db = new Database(sqlitePath);
                       ^
SQLiteError: unable to open database file
      errno: 14,
 byteOffset: -1,
       code: "SQLITE_CANTOPEN"

      at new Database (bun:sqlite:240:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/database-integrity-checker.test.ts:158:18)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/database-integrity-checker.test.ts:156:58)
(fail) DatabaseIntegrityChecker > Format Mismatch Detection > should detect SQLite file when JSON expected [1.47ms]
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id F2E2:238EA2:448E989:89773CF:68797DE8 in 97ms
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id F2DC:3E711A:459170F:8B7D2FE:68797DE8 in 96ms
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id F2E5:28748D:4741F2C:8EC03DC:68797DE8 in 99ms
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id F2E6:15AF1A:4189CDE:8392D4F:68797DE8 in 103ms
GET /repos/test-owner/test-repo/labels/custom%3Atodo - 401 with id F2E4:A7C21:451A651:8A95AAE:68797DE8 in 101ms
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id F2E0:238EA2:448E989:89773CE:68797DE8 in 100ms
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id F2DE:56DAB:454A40B:8AE0713:68797DE8 in 100ms
(pass) DatabaseIntegrityChecker > Backup File Detection > should find backup files with standard patterns [0.35ms]
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id F2DF:1CF5B4:47A5F8C:8F639A0:68797DE8 in 104ms
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id F2E3:19B12E:588ED66:B1794B5:68797DE8 in 105ms
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id F2DD:3E711A:4591719:8B7D30A:68797DE8 in 104ms
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id F2E1:232A9D:43C1A5F:880798F:68797DE8 in 115ms
(pass) DatabaseIntegrityChecker > Backup File Detection > should detect session count in JSON backups [0.16ms]
213 |   });
214 | 
215 |   describe("SQLite Integrity Validation", () => {
216 |     test("should validate SQLite database integrity", async () => {
217 |       // Create valid SQLite database
218 |       const db = new Database(testDbPath);
                       ^
SQLiteError: unable to open database file
      errno: 14,
 byteOffset: -1,
       code: "SQLITE_CANTOPEN"

      at new Database (bun:sqlite:240:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/database-integrity-checker.test.ts:218:18)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/database-integrity-checker.test.ts:216:55)
(fail) DatabaseIntegrityChecker > SQLite Integrity Validation > should validate SQLite database integrity [0.27ms]
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id F2DC:3E711A:4591738:8B7D342:68797DE8 in 34ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id F2E5:28748D:4741F4D:8EC0432:68797DE8 in 34ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id F2E2:238EA2:448E9A7:897741D:68797DE8 in 39ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id F2E0:238EA2:448E9AC:897742D:68797DE8 in 35ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id F2DE:56DAB:454A425:8AE075A:68797DE8 in 36ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id F2E6:15AF1A:4189D03:8392DA7:68797DE8 in 36ms
241 |       expect(result.issues).toHaveLength(0);
242 |     });
243 | 
244 |     test("should detect SQLite database without sessions table", async () => {
245 |       // Create SQLite database without sessions table
246 |       const db = new Database(testDbPath);
                       ^
SQLiteError: unable to open database file
      errno: 14,
 byteOffset: -1,
       code: "SQLITE_CANTOPEN"

      at new Database (bun:sqlite:240:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/database-integrity-checker.test.ts:246:18)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/database-integrity-checker.test.ts:244:66)
(fail) DatabaseIntegrityChecker > SQLite Integrity Validation > should detect SQLite database without sessions table [0.55ms]
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id F2E3:19B12E:588EDB0:B17956E:68797DE8 in 38ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id F2DF:1CF5B4:47A5FBA:8F63A03:68797DE8 in 41ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id F2DD:3E711A:459173E:8B7D35E:68797DE8 in 42ms
255 |       );
256 |     });
257 | 
258 |     test("should detect empty SQLite database", async () => {
259 |       // Create empty SQLite database
260 |       const db = new Database(testDbPath);
                       ^
SQLiteError: unable to open database file
      errno: 14,
 byteOffset: -1,
       code: "SQLITE_CANTOPEN"

      at new Database (bun:sqlite:240:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/database-integrity-checker.test.ts:260:18)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/database-integrity-checker.test.ts:258:49)
(fail) DatabaseIntegrityChecker > SQLite Integrity Validation > should detect empty SQLite database [0.38ms]
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id F2E1:232A9D:43C1A88:8807A1A:68797DE8 in 44ms
(pass) DatabaseIntegrityChecker > JSON Validation > should validate JSON structure [0.17ms]
GET /repos/test-owner/test-repo/labels/custom%3Ain-progress - 401 with id F2E4:A7C21:451A678:8A95AFF:68797DE8 in 63ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id F2E5:28748D:4741F6E:8EC0467:68797DE8 in 34ms
(pass) DatabaseIntegrityChecker > JSON Validation > should detect JSON without sessions array [0.10ms]
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id F2DC:3E711A:4591754:8B7D3A1:68797DE8 in 41ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id F2DE:56DAB:454A44B:8AE07B3:68797DE8 in 40ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id F2DF:1CF5B4:47A5FDA:8F63A4A:68797DE8 in 33ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id F2E2:238EA2:448E9CB:897747F:68797DE8 in 43ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id F2E0:238EA2:448E9CB:897747D:68797DE8 in 42ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id F2E6:15AF1A:4189D21:8392E0C:68797DE8 in 44ms
(pass) DatabaseIntegrityChecker > JSON Validation > should detect empty JSON sessions array [0.09ms]
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id F2E3:19B12E:588EDFA:B1795F3:68797DE8 in 41ms
(pass) DatabaseIntegrityChecker > Suggested Actions > should suggest repair for corrupted database [0.33ms]
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id F2DD:3E711A:459175E:8B7D3BD:68797DE8 in 48ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id F2E1:232A9D:43C1ABB:8807A7D:68797DE8 in 40ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id F2E5:28748D:4741F95:8EC04A1:68797DE8 in 35ms
(pass) DatabaseIntegrityChecker > Suggested Actions > should suggest initialization for missing database [0.18ms]
GET /repos/test-owner/test-repo/labels/custom%3Ain-review - 401 with id F2E4:A7C21:451A6B1:8A95B7C:68797DE8 in 41ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id F2DC:3E711A:459177B:8B7D3F5:68797DE8 in 35ms
(pass) DatabaseIntegrityChecker > Suggested Actions > should prioritize high-priority actions [0.21ms]
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id F2E6:15AF1A:4189D53:8392E6C:68797DE8 in 33ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id F2E2:238EA2:448E9F6:89774CC:68797DE8 in 36ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id F2E0:238EA2:448E9F6:89774CD:68797DE8 in 36ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id F2DE:56DAB:454A479:8AE07EB:68797DE8 in 39ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id F2DF:1CF5B4:47A6005:8F63AAA:68797DE8 in 39ms
(pass) DatabaseIntegrityChecker > Integrity Report Formatting > should format comprehensive integrity report [3.27ms]
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id F2E3:19B12E:588EE61:B1796A1:68797DE8 in 46ms
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id F2E5:28748D:4741FBE:8EC04EE:68797DE8 in 31ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id F2DD:3E711A:459179B:8B7D432:68797DE8 in 40ms
366 |       expect(report).toContain("BACKUP FILES FOUND:");
367 |       expect(report).toContain("SUGGESTED ACTIONS:");
368 |     });
369 | 
370 |     test("should format report for valid database", async () => {
371 |       const db = new Database(testDbPath);
                       ^
SQLiteError: unable to open database file
      errno: 14,
 byteOffset: -1,
       code: "SQLITE_CANTOPEN"

      at new Database (bun:sqlite:240:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/database-integrity-checker.test.ts:371:18)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/storage/database-integrity-checker.test.ts:370:53)
(fail) DatabaseIntegrityChecker > Integrity Report Formatting > should format report for valid database [1.25ms]
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id F2E1:232A9D:43C1AE9:8807ADA:68797DE8 in 44ms
(pass) DatabaseIntegrityChecker > Error Handling > should handle permission errors gracefully
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id F2E6:15AF1A:4189D86:8392EAF:68797DE8 in 37ms
GET /repos/test-owner/test-repo/labels/custom%3Adone - 401 with id F2E4:A7C21:451A6E3:8A95BBC:68797DE8 in 46ms
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id F2DE:56DAB:454A4A4:8AE0832:68797DE8 in 37ms
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id F2DF:1CF5B4:47A6032:8F63B01:68797DE8 in 36ms
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id F2E2:238EA2:448EA20:8977506:68797DE8 in 41ms
(pass) DatabaseIntegrityChecker > Error Handling > should handle invalid file paths gracefully [0.62ms]
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id F2E0:238EA2:448EA20:8977505:68797DE8 in 48ms
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id F2E3:19B12E:588EEC7:B179765:68797DE8 in 41ms
(pass) DatabaseIntegrityChecker > Edge Cases > should handle extremely large backup directories [2.22ms]
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id F2DC:3E711A:45917A8:8B7D457:68797DE8 in 68ms
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id F2DD:3E711A:45917C6:8B7D47F:68797DE8 in 40ms
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id F2E5:28748D:4741FD9:8EC0530:68797DE8 in 43ms
GET /repos/test-owner/test-repo/labels/custom%3Ablocked - 401 with id F2E4:A7C21:451A70F:8A95C13:68797DE8 in 32ms
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id F2E6:15AF1A:4189DB4:8392F13:68797DE8 in 34ms
(pass) DatabaseIntegrityChecker > Edge Cases > should handle backup files with different extensions [0.34ms]
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id F2DF:1CF5B4:47A6063:8F63B4B:68797DE8 in 37ms
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id F2E1:232A9D:43C1B24:8807B42:68797DE8 in 48ms
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id F2E2:238EA2:448EA46:897754A:68797DE8 in 37ms

src/domain/storage/json-file-storage.test.ts:
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id F2E0:238EA2:448EA4C:8977552:68797DE8 in 36ms
(pass) JsonFileStorage Core Tests > Core CRUD Operations > should create and retrieve entities [0.38ms]
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id F2DE:56DAB:454A4C7:8AE087E:68797DE8 in 52ms
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id F2E3:19B12E:588EF1A:B1797EA:68797DE8 in 39ms
(pass) JsonFileStorage Core Tests > Core CRUD Operations > should update entities [0.15ms]
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id F2DD:3E711A:45917F3:8B7D4CA:68797DE8 in 37ms
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id F2DC:3E711A:45917F2:8B7D4C8:68797DE8 in 39ms
(pass) JsonFileStorage Core Tests > Core CRUD Operations > should delete entities [0.66ms]
GET /repos/test-owner/test-repo/labels/custom%3Aclosed - 401 with id F2E4:A7C21:451A735:8A95C5F:68797DE8 in 40ms
(pass) JsonFileStorage Core Tests > Core CRUD Operations > should get all entities [0.63ms]
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id F2E6:15AF1A:4189DEF:8392F7B:68797DE8 in 51ms
(pass) JsonFileStorage Core Tests > State Management > should read and write state
(pass) JsonFileStorage Core Tests > Error Handling > should handle non-existent entities gracefully
(pass) JsonFileStorage Core Tests > Persistence > should persist data across storage instances [0.28ms]
(pass) JsonFileStorage Core Tests > Persistence > should handle storage location correctly

src/domain/__tests__/git-pr-workflow.test.ts:
(pass) PR Workflow with Dependencies > should generate PR markdown with proper dependency injection [1.03ms]
(pass) PR Workflow with Dependencies > should handle missing session in PR workflow [0.34ms]
(pass) PR Workflow with Dependencies > should resolve taskId to session in PR workflow [0.42ms]
(pass) PR Workflow with Dependencies > should throw error when taskId has no associated session [0.15ms]
(pass) PR Workflow with Dependencies > should throw error when getSessionByTaskId dependency is not available [0.07ms]
(pass) PR Workflow with Dependencies > should prioritize session over taskId when both are provided [0.29ms]
(pass) PR Workflow with Dependencies > should handle git command failures gracefully in PR workflow [0.32ms]

src/domain/__tests__/git-service.test.ts:
(pass) GitService > should be able to create an instance
(pass) GitService > should get repository status
(pass) GitService > getSessionWorkdir should return the correct path [0.08ms]
(pass) GitService > execInRepository should execute git commands in the specified repository
(pass) GitService > execInRepository should propagate errors
(pass) GitService > should use session-ID-based storage in getSessionWorkdir

src/domain/__tests__/tasks.test.ts:
(pass) interface-agnostic task functions > listTasksFromParams > should list tasks with valid parameters [0.27ms]
(pass) interface-agnostic task functions > listTasksFromParams > should filter out DONE tasks when all is false [0.14ms]
(pass) interface-agnostic task functions > getTaskFromParams > should get a task with valid parameters [0.09ms]
(pass) interface-agnostic task functions > getTaskFromParams > should throw ResourceNotFoundError when task is not found [0.08ms]
(pass) interface-agnostic task functions > getTaskFromParams > should normalize non-canonical task IDs (e.g., 'TEST_VALUE' -> '#TEST_VALUE') [0.03ms]
(pass) interface-agnostic task functions > getTaskFromParams > should handle task IDs without leading zeros [0.11ms]
228 | 
229 |     // Get the task
230 |     const task = await taskService.getTask(validParams.taskId);
231 | 
232 |     if (!task) {
233 |       throw new ResourceNotFoundError(
                  ^
ResourceNotFoundError: Task #TEST_VALUE not found or has no status
      cause: undefined,
 resourceType: "task",
 resourceId: "#TEST_VALUE",

      at getTaskStatusFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/tasks/taskCommands.ts:233:13)
(fail) interface-agnostic task functions > getTaskStatusFromParams > should get task status with valid parameters [0.47ms]
(pass) interface-agnostic task functions > getTaskStatusFromParams > should throw ResourceNotFoundError when task status is not found [0.17ms]
(pass) interface-agnostic task functions > setTaskStatusFromParams > should set task status with valid parameters [0.07ms]
(pass) interface-agnostic task functions > setTaskStatusFromParams > should throw ValidationError when status is invalid [0.19ms]

src/domain/git/clone-operations.test.ts:
(pass) Clone Operations > should handle clone operations with filesystem validation [0.61ms]
(pass) Clone Operations > should handle clone with empty repository URL validation [0.09ms]
(pass) Clone Operations > should handle clone with existing non-empty directory [0.13ms]
(pass) Clone Operations > should handle clone failure during git command execution [0.17ms]
(pass) Clone Operations > should handle clone success verification failure [0.13ms]
(pass) Clone Operations > should handle clone with local repository normalization [0.13ms]
(pass) Clone Operations > should handle clone error scenarios with proper error propagation [0.08ms]

src/domain/git/repository-operations.test.ts:
(pass) Repository Operations with Dependency Injection > should have commitWithDependencies method available
(pass) Repository Operations with Dependency Injection > should have stashChangesWithDependencies method available [0.21ms]
(pass) Repository Operations with Dependency Injection > should have popStashWithDependencies method available [0.01ms]
(pass) Repository Operations with Dependency Injection > should have mergeBranchWithDependencies method available [0.01ms]
(pass) Repository Operations with Dependency Injection > should have stageAllWithDependencies method available [0.01ms]
(pass) Repository Operations with Dependency Injection > should have stageModifiedWithDependencies method available [0.01ms]
(pass) Repository Operations with Dependency Injection > should have pullLatestWithDependencies method available [0.01ms]
(pass) Repository Operations with Dependency Injection > should have cloneWithDependencies method available
(pass) Repository Operations with Dependency Injection > should create GitService with base directory [0.02ms]

src/domain/git/conflict-detection.test.ts:
(pass) ConflictDetectionService > analyzeBranchDivergence > should detect when session is ahead of base [0.55ms]
(pass) ConflictDetectionService > analyzeBranchDivergence > should detect when session changes are already in base [0.09ms]
(pass) ConflictDetectionService > analyzeBranchDivergence > should detect when session is behind base [0.06ms]
117 | 
118 |       const result = await ConflictDetectionService.analyzeBranchDivergence(
119 |         testRepoPath, sessionBranch, baseBranch
120 |       );
121 | 
122 |       expect(result.divergenceType).toBe("diverged");
                                          ^
error: expect(received).toBe(expected)

Expected: "diverged"
Received: "none"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git/conflict-detection.test.ts:122:37)
(fail) ConflictDetectionService > analyzeBranchDivergence > should detect when branches have diverged [0.16ms]
138 |       const result = await ConflictDetectionService.predictConflicts(
139 |         testRepoPath, sessionBranch, baseBranch
140 |       );
141 | 
142 |       expect(result.hasConflicts).toBe(false);
143 |       expect(result.conflictType).toBe(ConflictType.ALREADY_MERGED);
                                        ^
error: expect(received).toBe(expected)

Expected: "already_merged"
Received: "none"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git/conflict-detection.test.ts:143:35)
(fail) ConflictDetectionService > predictConflicts > should return no conflicts when already merged [0.33ms]
(pass) ConflictDetectionService > predictConflicts > should detect delete/modify conflicts [0.83ms]
(pass) ConflictDetectionService > predictConflicts > should detect content conflicts [0.27ms]
(pass) ConflictDetectionService > predictConflicts > should return no conflicts when merge succeeds [0.08ms]
259 |       const result = await ConflictDetectionService.mergeWithConflictPrevention(
260 |         testRepoPath, sessionBranch, baseBranch, { dryRun: true }
261 |       );
262 | 
263 |       expect(result.merged).toBe(false);
264 |       expect(result.conflicts).toBe(true);
                                     ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git/conflict-detection.test.ts:264:32)
(fail) ConflictDetectionService > mergeWithConflictPrevention > should perform dry run without actual merge [0.33ms]
(pass) ConflictDetectionService > mergeWithConflictPrevention > should perform actual merge when no conflicts predicted [0.12ms]
302 |         .mockResolvedValueOnce({ stdout: "tree1", stderr: "" }) // 4. session tree
303 |         .mockResolvedValueOnce({ stdout: "tree2", stderr: "" }) // 5. base tree (different)
304 |         // simulateMerge calls:
305 |         .mockResolvedValueOnce({ stdout: "", stderr: "" }) // 6. create temp branch
306 |         .mockResolvedValueOnce({ stdout: "", stderr: "" }) // 7. checkout temp branch
307 |         .mockRejectedValueOnce(new Error("CONFLICT")) // 8. merge fails
                                     ^
error: CONFLICT
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git/conflict-detection.test.ts:307:32)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git/conflict-detection.test.ts:295:61)
(fail) ConflictDetectionService > mergeWithConflictPrevention > should auto-resolve delete conflicts when enabled [0.15ms]
365 |       );
366 | 
367 |       // Verify the update was performed correctly (fast-forward scenario)
368 |       expect(result.updated).toBe(true);
369 |       expect(result.skipped).toBe(false);
370 |       expect(result.reason).toContain("Fast-forward update completed");
                                  ^
error: expect(received).toContain(expected)

Expected to contain: "Fast-forward update completed"
Received: "Merge update completed"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git/conflict-detection.test.ts:370:29)
(fail) ConflictDetectionService > smartSessionUpdate > should compare against origin/baseBranch instead of local baseBranch [0.39ms]
383 |         testRepoPath, sessionBranch, baseBranch, { skipIfAlreadyMerged: true }
384 |       );
385 | 
386 |       expect(result.updated).toBe(false);
387 |       expect(result.skipped).toBe(true);
388 |       expect(result.reason).toContain("already in base branch");
                                  ^
error: expect(received).toContain(expected)

Expected to contain: "already in base branch"
Received: "No update needed - session is current or ahead"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git/conflict-detection.test.ts:388:29)
(fail) ConflictDetectionService > smartSessionUpdate > should skip update when session changes already in base [0.10ms]
403 | 
404 |       const result = await ConflictDetectionService.smartSessionUpdate(
405 |         testRepoPath, sessionBranch, baseBranch
406 |       );
407 | 
408 |       expect(result.updated).toBe(true);
                                   ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git/conflict-detection.test.ts:408:30)
(fail) ConflictDetectionService > smartSessionUpdate > should perform fast-forward when session is behind [0.06ms]
(pass) ConflictDetectionService > smartSessionUpdate > should skip when session is ahead and no update needed [0.07ms]
428 |     });
429 |   });
430 | 
431 |   describe("error handling", () => {
432 |     it("should handle git command failures gracefully", async () => {
433 |       mockExecAsync.mockRejectedValueOnce(new Error("Git command failed"));
                                                ^
error: Git command failed
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git/conflict-detection.test.ts:433:43)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git/conflict-detection.test.ts:432:57)
(fail) ConflictDetectionService > error handling > should handle git command failures gracefully [0.08ms]

# Unhandled error between tests
-------------------------------
432 |     it("should handle git command failures gracefully", async () => {
433 |       mockExecAsync.mockRejectedValueOnce(new Error("Git command failed"));
434 | 
435 |       await expect(
436 |         ConflictDetectionService.analyzeBranchDivergence(testRepoPath, sessionBranch, baseBranch)
437 |       ).rejects.toThrow("Git command failed");
                      ^
error: 

Expected promise that rejects
Received promise that resolved: Promise { <resolved> }

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git/conflict-detection.test.ts:437:17)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git/conflict-detection.test.ts:432:57)
-------------------------------

466 |         testRepoPath, sessionBranch, baseBranch
467 |       );
468 | 
469 |       // Should return successful result (no conflicts)
470 |       expect(result.hasConflicts).toBe(false);
471 |       expect(result.conflictType).toBe(ConflictType.NONE);
                                        ^
error: expect(received).toBe(expected)

Expected: "none"
Received: "already_merged"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git/conflict-detection.test.ts:471:35)
(fail) ConflictDetectionService > error handling > should handle merge simulation cleanup failures gracefully [0.07ms]

src/domain/git/git-service-core.test.ts:
(pass) GitService > should be able to create an instance [0.05ms]
(pass) GitService > should get repository status [0.21ms]
(pass) GitService > execInRepository should execute git commands in the specified repository [0.06ms]
(pass) GitService > execInRepository should propagate errors [0.12ms]

src/domain/git/parameter-based-functions.test.ts:
(pass) Parameter-Based Git Functions > commitChangesFromParams > should commit changes with all parameters
(pass) Parameter-Based Git Functions > commitChangesFromParams > should handle commit with minimal parameters [0.10ms]
(pass) Parameter-Based Git Functions > commitChangesFromParams > should handle commit with amend option
(pass) Parameter-Based Git Functions > commitChangesFromParams > should handle commit with noStage option [0.02ms]
(pass) Parameter-Based Git Functions > pushFromParams > should push changes with all parameters [0.04ms]
(pass) Parameter-Based Git Functions > pushFromParams > should handle push with minimal parameters [0.02ms]
(pass) Parameter-Based Git Functions > pushFromParams > should handle push with force option [0.02ms]
(pass) Parameter-Based Git Functions > pushFromParams > should handle push with custom remote [0.02ms]
error: Command failed: git -C /test/repo add -A
fatal: cannot change to '/test/repo': No such file or directory

   code: 128,
 killed: false,
 signal: null,
    cmd: "git -C /test/repo add -A",
 stdout: "",
 stderr: "fatal: cannot change to '/test/repo': No such file or directory\n",

      at genericNodeError (node:child_process:946:22)
(fail) commitChangesFromParams - Detailed Tests > should commit changes with message and all flag [9.27ms]
error: Command failed: git -C /test/repo add .
fatal: cannot change to '/test/repo': No such file or directory

   code: 128,
 killed: false,
 signal: null,
    cmd: "git -C /test/repo add .",
 stdout: "",
 stderr: "fatal: cannot change to '/test/repo': No such file or directory\n",

      at genericNodeError (node:child_process:946:22)
(fail) commitChangesFromParams - Detailed Tests > should commit changes with just message [7.38ms]
error: Command failed: git -C /custom/repo/path add .
fatal: cannot change to '/custom/repo/path': No such file or directory

   code: 128,
 killed: false,
 signal: null,
    cmd: "git -C /custom/repo/path add .",
 stdout: "",
 stderr: "fatal: cannot change to '/custom/repo/path': No such file or directory\n",

      at genericNodeError (node:child_process:946:22)
(fail) commitChangesFromParams - Detailed Tests > should handle commit with custom repo path [7.28ms]
227 |     expect(result.commitHash).toBe("ghi789");
228 |   });
229 | 
230 |   test("should handle commit errors gracefully", async () => {
231 |     // Mock git commit command failure
232 |     mockExecAsync.mockRejectedValueOnce(new Error("Git command failed"));
                                              ^
error: Git command failed
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git/parameter-based-functions.test.ts:232:41)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git/parameter-based-functions.test.ts:230:50)
(fail) commitChangesFromParams - Detailed Tests > should handle commit errors gracefully [0.53ms]

# Unhandled error between tests
-------------------------------
235 |       message: "failing commit",
236 |       repo: "/nonexistent/repo",
237 |     };
238 | 
239 |     // Should not throw, should handle error gracefully
240 |     await expect(commitChangesFromParams(params)).rejects.toThrow("Git command failed");
                                                                ^
error: expect(received).toThrow(expected)

Expected substring: "Git command failed"
Received message: "Command failed: git -C /nonexistent/repo add .\nfatal: cannot change to '/nonexistent/repo': No such file or directory\n"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git/parameter-based-functions.test.ts:240:59)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git/parameter-based-functions.test.ts:230:50)
-------------------------------

error: Command failed: git -C /test/repo rev-parse --abbrev-ref HEAD
fatal: cannot change to '/test/repo': No such file or directory

   code: 128,
 killed: false,
 signal: null,
    cmd: "git -C /test/repo rev-parse --abbrev-ref HEAD",
 stdout: "",
 stderr: "fatal: cannot change to '/test/repo': No such file or directory\n",

      at genericNodeError (node:child_process:946:22)
(fail) pushFromParams - Detailed Tests > should push changes successfully [6.55ms]
error: Command failed: git -C /test/repo rev-parse --abbrev-ref HEAD
fatal: cannot change to '/test/repo': No such file or directory

   code: 128,
 killed: false,
 signal: null,
    cmd: "git -C /test/repo rev-parse --abbrev-ref HEAD",
 stdout: "",
 stderr: "fatal: cannot change to '/test/repo': No such file or directory\n",

      at genericNodeError (node:child_process:946:22)
(fail) pushFromParams - Detailed Tests > should handle push with custom remote [6.17ms]
error: Command failed: git -C /test/repo rev-parse --abbrev-ref HEAD
fatal: cannot change to '/test/repo': No such file or directory

   code: 128,
 killed: false,
 signal: null,
    cmd: "git -C /test/repo rev-parse --abbrev-ref HEAD",
 stdout: "",
 stderr: "fatal: cannot change to '/test/repo': No such file or directory\n",

      at genericNodeError (node:child_process:946:22)
(fail) pushFromParams - Detailed Tests > should handle push with branch specification [5.81ms]
297 |     expect(result.pushed).toBe(true);
298 |   });
299 | 
300 |   test("should handle push errors gracefully", async () => {
301 |     // Mock git push command failure
302 |     mockExecAsync.mockRejectedValueOnce(new Error("Git push failed"));
                                              ^
error: Git push failed
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git/parameter-based-functions.test.ts:302:41)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git/parameter-based-functions.test.ts:300:48)
(fail) pushFromParams - Detailed Tests > should handle push errors gracefully [0.44ms]

# Unhandled error between tests
-------------------------------
304 |     const params = {
305 |       repo: "/nonexistent/repo",
306 |     };
307 | 
308 |     // Should not throw, should handle error gracefully
309 |     await expect(pushFromParams(params)).rejects.toThrow("Git push failed");
                                                       ^
error: expect(received).toThrow(expected)

Expected substring: "Git push failed"
Received message: "Command failed: git -C /nonexistent/repo rev-parse --abbrev-ref HEAD\nfatal: cannot change to '/nonexistent/repo': No such file or directory\n"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git/parameter-based-functions.test.ts:309:50)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git/parameter-based-functions.test.ts:300:48)
-------------------------------


src/domain/git/push-operations.test.ts:
(pass) pushImpl > should be defined [0.72ms]
(pass) pushImpl > should require dependencies [0.02ms]

src/domain/git/pr-workflow.test.ts:
(pass) PR Workflow Operations > should have prWithDependencies method available [0.04ms]
(pass) PR Workflow Operations > should have GitService constructor available [0.03ms]
(pass) PR Workflow Operations > should create GitService with base directory [0.02ms]

src/domain/git/commit-operations.test.ts:
(pass) commitChangesFromParams > should be defined [0.06ms]
(pass) commitChangesFromParams > should be a function

src/domain/git/architecture-analysis.test.ts:
(pass) GitService - Core Methods with Dependency Injection > Architecture Analysis - Testing Limitations > should demonstrate the core testing challenge

src/domain/git/session-workdir.test.ts:
(pass) GitService - Session Workdir Tests > getSessionWorkdir should return the correct path [0.03ms]
(pass) GitService - Session Workdir Tests > should use session-ID-based storage in getSessionWorkdir

src/domain/git/factory-function.test.ts:
(pass) createGitService Factory Function > should handle undefined options parameter without throwing runtime error [0.03ms]
(pass) createGitService Factory Function > should handle null options parameter without throwing runtime error [0.02ms]
(pass) createGitService Factory Function > should handle options with undefined baseDir property [0.64ms]
(pass) createGitService Factory Function > should create GitService with custom baseDir when provided [0.05ms]
(pass) createGitService Factory Function > should create GitService with default baseDir when no options provided [0.01ms]

src/domain/git/conflict-detection.integration.test.ts:
(pass) ConflictDetectionService Integration > should handle basic service instantiation and static methods [0.02ms]
(pass) ConflictDetectionService Integration > should have correct enum values defined [0.03ms]
(pass) ConflictDetectionService Integration > should provide proper interface structure for ConflictPrediction [0.06ms]
(pass) ConflictDetectionService Integration > should provide proper interface structure for BranchDivergenceAnalysis [0.02ms]
(pass) ConflictDetectionService Integration > should provide proper interface structure for enhanced results [0.02ms]
(skip) ConflictDetectionService Integration > should detect conflicts in real git repository

src/domain/session/session-context-resolver.test.ts:
(pass) resolveSessionContext > explicit session resolution > resolves existing session by name [0.11ms]
(pass) resolveSessionContext > explicit session resolution > throws error for non-existent session [0.06ms]
(pass) resolveSessionContext > task ID resolution > resolves session by task ID [0.08ms]
(pass) resolveSessionContext > task ID resolution > throws error for non-existent task [0.04ms]
(pass) resolveSessionContext > no session provided > throws error when no session detected and auto-detection disabled [0.04ms]
(pass) resolveSessionContext > precedence > explicit session takes precedence over task [0.03ms]
(pass) resolveSessionName > returns just the session name [0.06ms]
(pass) validateSessionContext > returns true for valid session [0.06ms]
(pass) validateSessionContext > returns false for invalid session [0.04ms]

src/domain/session/session-path-resolver.test.ts:
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should validate and resolve relative paths correctly [0.06ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should validate and resolve dot paths correctly [0.10ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should validate and resolve root path correctly [0.05ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should block path traversal attempts [0.05ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should block multiple path traversal attempts [0.03ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should handle absolute paths within session workspace [0.02ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should block absolute paths outside session workspace [0.04ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > getRelativePathFromSession > should return relative path from session root [0.01ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > getRelativePathFromSession > should return dot for session root [0.01ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > getRelativePathFromSession > should handle nested paths [0.01ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > createSafePath > should create safe path from components [0.04ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > createSafePath > should prevent unsafe path creation [0.02ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateMultiplePaths > should validate multiple valid paths [0.02ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > validateMultiplePaths > should throw error when any path is invalid [0.03ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > normalizeRelativePath > should normalize relative path correctly [0.05ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > normalizeRelativePath > should prevent directory traversal in relative paths [0.02ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > absoluteToRelative > should convert absolute path to relative [0.01ms]
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > absoluteToRelative > should return null for paths outside session
Skipping SessionPathResolver tests due to temp directory creation failure
Skipping test due to temp directory creation failure
(pass) SessionPathResolver Domain Logic > absoluteToRelative > should return dot for session root [0.03ms]

src/domain/session/session-adapter.test.ts:
(pass) SessionAdapter > should initialize with empty sessions [0.11ms]
(pass) SessionAdapter > should add and retrieve a session [0.24ms]
(pass) SessionAdapter > should retrieve a session by task ID [0.13ms]
(pass) SessionAdapter > should update a session [0.14ms]
(pass) SessionAdapter > should delete a session [0.05ms]
(pass) SessionAdapter > should return false when deleting a non-existent session
(pass) SessionAdapter > should get repository path for a session
(pass) SessionAdapter > should get working directory for a session [0.08ms]

src/domain/session/session-approve-task-status-commit.test.ts:
127 |       }
128 |     );
129 | 
130 |     // Verify the merge was successful
131 |     expect(result.isNewlyApproved).toBe(true);
132 |     expect(result.taskId).toBe("#123"); // Task ID includes the # prefix
                                ^
error: expect(received).toBe(expected)

Expected: "#123"
Received: "123"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/session-approve-task-status-commit.test.ts:132:27)
(fail) Session Approve Task Status Commit > should commit task status update after successful merge [0.88ms]
237 | 
238 |     // Verify the merge was successful
239 |     expect(result.isNewlyApproved).toBe(true);
240 | 
241 |     // Should check git status
242 |     expect(gitCommands).toContain("git status --porcelain");
                              ^
error: expect(received).toContain(expected)

Expected to contain: "git status --porcelain"
Received: [ "git checkout main", "git rev-parse HEAD", "git branch -d pr/task#124",
  "git push origin --delete pr/task#124"
]

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/session-approve-task-status-commit.test.ts:242:25)
(fail) Session Approve Task Status Commit > should handle case where no task status update is needed [0.21ms]
332 |         taskService: mockTaskService as any,
333 |       }
334 |     );
335 | 
336 |     // Should trigger early exit since task is DONE and PR branch doesn't exist
337 |     expect(result.isNewlyApproved).toBe(false); // Session was already approved
                                         ^
error: expect(received).toBe(expected)

Expected: false
Received: true

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/session-approve-task-status-commit.test.ts:337:36)
(fail) Session Approve Task Status Commit > should skip task status update when task is already DONE [0.07ms]
427 |         taskService: mockTaskService as any,
428 |       }
429 |     );
430 | 
431 |     // Verify early exit behavior
432 |     expect(result.isNewlyApproved).toBe(false); // Session was already approved
                                         ^
error: expect(received).toBe(expected)

Expected: false
Received: true

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/session-approve-task-status-commit.test.ts:432:36)
(fail) Session Approve Task Status Commit > should exit early when task is DONE and PR branch doesn't exist (bug reproduction) [0.26ms]

src/domain/session/session-auto-detection-integration.test.ts:
(pass) Session Command Domain Logic > sessionGet domain logic > resolves session by explicit name [0.09ms]
(pass) Session Command Domain Logic > sessionGet domain logic > resolves session by explicit task ID [0.17ms]
(pass) Session Command Domain Logic > sessionGet domain logic > throws ResourceNotFoundError for non-existent session [0.08ms]
(pass) Session Command Domain Logic > sessionGet domain logic > throws ResourceNotFoundError for non-existent task [0.03ms]
(pass) Session Command Domain Logic > deleteSessionFromParams domain logic > deletes session by explicit name [0.05ms]
(pass) Session Command Domain Logic > deleteSessionFromParams domain logic > deletes session by explicit task ID [0.05ms]
163 |           },
164 |           {
165 |             sessionDB: mockSessionProvider,
166 |           }
167 |         )
168 |       ).rejects.toThrow(ResourceNotFoundError);
                      ^
error: 

Expected promise that rejects
Received promise that resolved: Promise { <resolved> }

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/session-auto-detection-integration.test.ts:168:17)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/session-auto-detection-integration.test.ts:156:67)
(fail) Session Command Domain Logic > deleteSessionFromParams domain logic > throws ResourceNotFoundError for non-existent session [0.08ms]
(pass) Session Command Domain Logic > domain logic consistency > all commands resolve the same session by task ID [0.04ms]
(pass) Session Command Domain Logic > domain logic consistency > all commands provide consistent error messages for missing sessions [0.05ms]
(pass) Session Command Domain Logic > pure function behavior > session provider mock is used directly without global state [0.05ms]
(pass) Session Command Domain Logic > pure function behavior > session resolution is deterministic with same inputs [0.05ms]

src/domain/session/session-db.test.ts:
(pass) SessionDB Functional Implementation > initializeSessionDbState > should initialize state with default values
(pass) SessionDB Functional Implementation > initializeSessionDbState > should initialize state with custom baseDir [0.22ms]
(pass) SessionDB Functional Implementation > initializeSessionDbState > should handle undefined options parameter without throwing runtime error [0.02ms]
(pass) SessionDB Functional Implementation > initializeSessionDbState > should handle null options parameter without throwing runtime error [0.03ms]
(pass) SessionDB Functional Implementation > initializeSessionDbState > should handle options with undefined baseDir property [0.03ms]
(pass) SessionDB Functional Implementation > listSessionsFn > should return all sessions [0.04ms]
(pass) SessionDB Functional Implementation > getSessionFn > should return the session by name [0.01ms]
(pass) SessionDB Functional Implementation > getSessionFn > should return null if session not found [0.01ms]
(pass) SessionDB Functional Implementation > getSessionByTaskIdFn > should return the session by task ID [0.02ms]
(pass) SessionDB Functional Implementation > getSessionByTaskIdFn > should return the session when task ID includes #
(pass) SessionDB Functional Implementation > getSessionByTaskIdFn > should return null if no session exists for the task ID
(pass) SessionDB Functional Implementation > addSessionFn > should add a new session to the state [0.02ms]
(pass) SessionDB Functional Implementation > updateSessionFn > should update an existing session [0.02ms]
(pass) SessionDB Functional Implementation > updateSessionFn > should not modify state if session not found [0.01ms]
(pass) SessionDB Functional Implementation > updateSessionFn > should ignore session property in updates [0.03ms]
(pass) SessionDB Functional Implementation > deleteSessionFn > should delete an existing session [0.02ms]
(pass) SessionDB Functional Implementation > deleteSessionFn > should not modify state if session not found [0.01ms]
(pass) SessionDB Functional Implementation > getRepoPathFn > should return the repository path for a session record [0.01ms]
(pass) SessionDB Functional Implementation > getRepoPathFn > should handle session records with repoPath already set [0.01ms]
(pass) SessionDB Functional Implementation > getRepoPathFn > should throw error for invalid input [0.02ms]
(pass) SessionDB Functional Implementation > getSessionWorkdirFn > should return the working directory for a session [0.01ms]
(pass) SessionDB Functional Implementation > getSessionWorkdirFn > should return null if session not found

src/domain/session/session-db-io.test.ts:
(pass) Session DB I/O Functions > readSessionDbFile > should read existing session database file [0.51ms]
(pass) Session DB I/O Functions > readSessionDbFile > should return initialized state when database file doesn't exist [0.03ms]
(pass) Session DB I/O Functions > readSessionDbFile > should handle undefined options parameter without throwing runtime error
(pass) Session DB I/O Functions > readSessionDbFile > should handle null options parameter without throwing runtime error [0.03ms]
(pass) Session DB I/O Functions > readSessionDbFile > should handle options with undefined dbPath and baseDir properties
(pass) Session DB I/O Functions > writeSessionsToFile > should write session database file successfully [0.04ms]
(pass) Session DB I/O Functions > writeSessionsToFile > should handle undefined options parameter without throwing runtime error [0.02ms]
(pass) Session DB I/O Functions > writeSessionsToFile > should handle null options parameter without throwing runtime error [0.02ms]
(pass) Session DB I/O Functions > writeSessionsToFile > should handle options with undefined dbPath property [0.03ms]

tests/adapters/mcp/session-edit-tools.test.ts:
(pass) Session Edit Tools > session_edit_file > should be registered with correct schema [0.06ms]
(pass) Session Edit Tools > session_edit_file > should create new file when it doesn't exist [0.01ms]
(skip) Session Edit Tools > session_edit_file > should apply edit pattern with existing code markers
108 |         instructions: "Bad edit",
109 |         content: "malicious content",
110 |         createDirs: false,
111 |       });
112 | 
113 |       expect(result.success).toBe(false);
                                   ^
error: expect(received).toBe(expected)

Expected: false
Received: true

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/tests/adapters/mcp/session-edit-tools.test.ts:113:30)
(fail) Session Edit Tools > session_edit_file > should handle errors gracefully [0.28ms]

# Unhandled error between tests
-------------------------------
 98 |     test("should handle errors gracefully", async () => {
 99 |       const handler = registeredTools["session_edit_file"].handler;
100 | 
101 |       // Mock path resolver error
102 |       const mockPathResolver = new SessionPathResolver() as unknown;
103 |       mockPathResolver.resolvePath.mockRejectedValue(new Error("Invalid path"));
                                                           ^
error: Invalid path
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/tests/adapters/mcp/session-edit-tools.test.ts:103:54)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/tests/adapters/mcp/session-edit-tools.test.ts:98:45)
-------------------------------


# Unhandled error between tests
-------------------------------
108 |         instructions: "Bad edit",
109 |         content: "malicious content",
110 |         createDirs: false,
111 |       });
112 | 
113 |       expect(result.success).toBe(false);
                                   ^
error: expect(received).toBe(expected)

Expected: false
Received: true

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/tests/adapters/mcp/session-edit-tools.test.ts:113:30)
-------------------------------

(pass) Session Edit Tools > session_search_replace > should be registered with correct schema [0.03ms]
159 |         replace: "newText",
160 |       });
161 | 
162 |       expect(result.success).toBe(true);
163 |       expect(result.replaced).toBe(true);
164 |       expect(mockWriteFile).toHaveBeenCalledWith(
                                  ^
error: expect(received).toHaveBeenCalledWith(expected)

Number of calls: 2

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/tests/adapters/mcp/session-edit-tools.test.ts:164:29)
(fail) Session Edit Tools > session_search_replace > should replace single occurrence successfully [0.18ms]
(pass) Session Edit Tools > session_search_replace > should error when text not found [0.08ms]
(pass) Session Edit Tools > session_search_replace > should error when multiple occurrences found [0.04ms]

tests/adapters/cli/rules.test.ts:
(pass) Rules CLI Core Functionality > readContentFromFileIfExists function > returns input string when path doesn't exist [0.78ms]
(pass) Rules CLI Core Functionality > parseGlobs function > handles comma-separated glob patterns [0.09ms]
(pass) Rules CLI Core Functionality > parseGlobs function > handles JSON array glob patterns [0.03ms]
(pass) Rules CLI Core Functionality > parseGlobs function > returns undefined for undefined input
(pass) Rules CLI Core Functionality > parseGlobs function > returns undefined for empty string [0.01ms]

tests/adapters/cli/cli-rules-integration.test.ts:
(pass) Rules CLI Helper Functions Integration > parseGlobs handles different format patterns [0.04ms]
(pass) Rules CLI Helper Functions Integration > readContentFromFileIfExists returns input when not a file [0.02ms]

tests/adapters/cli/session-remaining.test.ts:
(pass) session workspace detection > TASK #168 FIX: should correctly parse session name from path structure
(pass) session workspace detection > TASK #168 FIX: should handle various session name formats [0.02ms]
(pass) session inspect command > placeholder test for inspect command
(pass) session list operations > placeholder test for list operations
(skip) session pr command > REAL TEST: preparePr should execute switch back command
(pass) session pr command > CORRECT BEHAVIOR: session pr should return to session branch after creating PR [0.03ms]

tests/adapters/cli/session-directory.test.ts:
24 |   test("should return correct session directory for task ID", async () => {
25 |     // Arrange: Mock correct behavior
26 |     const correctSession = testData.mockSessions[1]; // task#160 session
27 |     testData.mockSessionDB.getSessionByTaskId.mockReturnValue(Promise.resolve(correctSession));
28 |     testData.mockSessionDB.getSession.mockReturnValue(Promise.resolve(correctSession));
29 |     testData.mockSessionDB.getRepoPath.mockReturnValue(Promise.resolve("/Users/edobry/.local/state/minsky/sessions/task#160"));
                                ^
TypeError: undefined is not an object (evaluating 'testData.mockSessionDB.getRepoPath.mockReturnValue')
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/tests/adapters/cli/session-directory.test.ts:29:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/tests/adapters/cli/session-directory.test.ts:24:63)
(fail) session dir command > should return correct session directory for task ID [0.08ms]
(pass) session dir command > should normalize task IDs correctly (with and without # prefix) [0.04ms]
(pass) session dir command > should handle null taskId sessions correctly [0.03ms]
(pass) session dir command > BUG REGRESSION: SQLite filtering implementation [0.06ms]
(pass) session dir command > EDGE CASE: multiple sessions with same task ID but different formats [0.04ms]

tests/adapters/cli/session-update.test.ts:
82 |       throw new MinskyError(`Failed to update session: ${getErrorMessage(error)}`);
83 |     }
84 |   } catch (error) {
85 |     // If error is about missing session requirements, provide better user guidance
86 |     if (error instanceof ValidationError) {
87 |       throw new ResourceNotFoundError(
                 ^
ResourceNotFoundError: No session detected. Please provide a session name (--name), task ID (--task), or run this command from within a session workspace.
      cause: undefined,
 resourceType: undefined,
 resourceId: undefined,

      at updateSessionFromParams (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/commands/update-command.ts:87:13)
(fail) session update command > TASK #168 FIX: should auto-detect session name from current directory when not provided [15.49ms]
82 |     log.debug("Using explicit session name", { session });
83 | 
84 |     // Validate session exists
85 |     const sessionRecord = await sessionProvider!.getSession(session);
86 |     if (!sessionRecord) {
87 |       throw new ResourceNotFoundError(
                 ^
ResourceNotFoundError: Session 'test-existing-session' not found
      cause: undefined,
 resourceType: "session",
 resourceId: "test-existing-session",

      at resolveSessionContext (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/session-context-resolver.ts:87:13)
(fail) session update command > TASK #168 FIX: should automatically register orphaned session when directory exists but not in database [0.33ms]
(pass) session update command > TASK #168 FIX: should handle self-repair failure gracefully [0.21ms]
82 |     log.debug("Using explicit session name", { session });
83 | 
84 |     // Validate session exists
85 |     const sessionRecord = await sessionProvider!.getSession(session);
86 |     if (!sessionRecord) {
87 |       throw new ResourceNotFoundError(
                 ^
ResourceNotFoundError: Session 'task#42' not found
      cause: undefined,
 resourceType: "session",
 resourceId: "task#42",

      at resolveSessionContext (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/session-context-resolver.ts:87:13)
(fail) session update command > TASK #168 FIX: should extract task ID from session name during self-repair [0.10ms]
82 |     log.debug("Using explicit session name", { session });
83 | 
84 |     // Validate session exists
85 |     const sessionRecord = await sessionProvider!.getSession(session);
86 |     if (!sessionRecord) {
87 |       throw new ResourceNotFoundError(
                 ^
ResourceNotFoundError: Session 'missing-workspace-session' not found
      cause: undefined,
 resourceType: "session",
 resourceId: "missing-workspace-session",

      at resolveSessionContext (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/session-context-resolver.ts:87:13)
(fail) session update command > TASK #168 FIX: should provide clear error message when session workspace directory is missing [0.08ms]
82 |     log.debug("Using explicit session name", { session });
83 | 
84 |     // Validate session exists
85 |     const sessionRecord = await sessionProvider!.getSession(session);
86 |     if (!sessionRecord) {
87 |       throw new ResourceNotFoundError(
                 ^
ResourceNotFoundError: Session 'dirty-session' not found
      cause: undefined,
 resourceType: "session",
 resourceId: "dirty-session",

      at resolveSessionContext (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/session-context-resolver.ts:87:13)
(fail) session update command > TASK #168 FIX: should provide clear error message for uncommitted changes [0.05ms]

tests/adapters/cli/rules-helpers.test.ts:
(pass) Rules CLI Helper Functions > parseGlobs > returns undefined for undefined input
(pass) Rules CLI Helper Functions > parseGlobs > parses comma-separated string into array [0.07ms]
(pass) Rules CLI Helper Functions > parseGlobs > trims whitespace in comma-separated strings [0.02ms]
(pass) Rules CLI Helper Functions > parseGlobs > parses JSON array string format [0.01ms]
(pass) Rules CLI Helper Functions > parseGlobs > falls back to comma handling if JSON parsing fails [0.01ms]
(pass) Rules CLI Helper Functions > parseGlobs > returns undefined for empty string

tests/adapters/cli/session.test.ts:
91 |         }
92 |       );
93 | 
94 |       // Assert
95 |       expect(mockSessionDB.getSessionByTaskId).toHaveBeenCalledWith("#160");
96 |       expect(typeof result).toBe("string");
                                 ^
error: expect(received).toBe(expected)

Expected: "string"
Received: "undefined"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/tests/adapters/cli/session.test.ts:96:29)
(fail) Session CLI Commands > session dir command > should return correct session directory for task ID [0.31ms]
(pass) Session CLI Commands > session dir command > should normalize task IDs correctly (with and without # prefix) [0.03ms]
(pass) Session CLI Commands > session dir command > should handle null taskId sessions correctly
(pass) Session CLI Commands > session dir command > BUG REGRESSION: SQLite filtering implementation
(pass) Session CLI Commands > session dir command > EDGE CASE: multiple sessions with same task ID but different formats
105 | 
106 |     const normalizedTaskId = taskIdSchema!.parse(task);
107 |     const sessionRecord = await sessionProvider!.getSessionByTaskId(normalizedTaskId);
108 | 
109 |     if (!sessionRecord) {
110 |       throw new ResourceNotFoundError(
                  ^
ResourceNotFoundError: No session found for task #236
      cause: undefined,
 resourceType: "task",
 resourceId: "#236",

      at resolveSessionContext (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/session-context-resolver.ts:110:13)
(fail) Session CLI Commands > session update command > TASK #168 FIX: should auto-detect session name from current directory when not provided
82 |     log.debug("Using explicit session name", { session });
83 | 
84 |     // Validate session exists
85 |     const sessionRecord = await sessionProvider!.getSession(session);
86 |     if (!sessionRecord) {
87 |       throw new ResourceNotFoundError(
                 ^
ResourceNotFoundError: Session 'test-existing-session' not found
      cause: undefined,
 resourceType: "session",
 resourceId: "test-existing-session",

      at resolveSessionContext (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/session-context-resolver.ts:87:13)
(fail) Session CLI Commands > session update command > TASK #168 FIX: should automatically register orphaned session when directory exists but not in database [0.07ms]
(pass) Session CLI Commands > session update command > TASK #168 FIX: should handle self-repair failure gracefully
82 |     log.debug("Using explicit session name", { session });
83 | 
84 |     // Validate session exists
85 |     const sessionRecord = await sessionProvider!.getSession(session);
86 |     if (!sessionRecord) {
87 |       throw new ResourceNotFoundError(
                 ^
ResourceNotFoundError: Session 'task#42' not found
      cause: undefined,
 resourceType: "session",
 resourceId: "task#42",

      at resolveSessionContext (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/session-context-resolver.ts:87:13)
(fail) Session CLI Commands > session update command > TASK #168 FIX: should extract task ID from session name during self-repair [0.10ms]
82 |     log.debug("Using explicit session name", { session });
83 | 
84 |     // Validate session exists
85 |     const sessionRecord = await sessionProvider!.getSession(session);
86 |     if (!sessionRecord) {
87 |       throw new ResourceNotFoundError(
                 ^
ResourceNotFoundError: Session 'missing-workspace-session' not found
      cause: undefined,
 resourceType: "session",
 resourceId: "missing-workspace-session",

      at resolveSessionContext (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/session-context-resolver.ts:87:13)
(fail) Session CLI Commands > session update command > TASK #168 FIX: should provide clear error message when session workspace directory is missing [0.08ms]
82 |     log.debug("Using explicit session name", { session });
83 | 
84 |     // Validate session exists
85 |     const sessionRecord = await sessionProvider!.getSession(session);
86 |     if (!sessionRecord) {
87 |       throw new ResourceNotFoundError(
                 ^
ResourceNotFoundError: Session 'dirty-session' not found
      cause: undefined,
 resourceType: "session",
 resourceId: "dirty-session",

      at resolveSessionContext (/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/session/session-context-resolver.ts:87:13)
(fail) Session CLI Commands > session update command > TASK #168 FIX: should provide clear error message for uncommitted changes [0.09ms]
(pass) Session CLI Commands > session workspace detection > TASK #168 FIX: should correctly parse session name from path structure
(pass) Session CLI Commands > session workspace detection > TASK #168 FIX: should handle various session name formats
(pass) Session CLI Commands > session inspect command > placeholder test for inspect command
(pass) Session CLI Commands > session list operations > placeholder test for list operations
(skip) Session CLI Commands > session pr command > REAL TEST: preparePr should execute switch back command
(pass) Session CLI Commands > session pr command > CORRECT BEHAVIOR: session pr should return to session branch after creating PR [0.05ms]

tests/domain/commands/workspace.commands.test.ts:
(pass) Workspace Domain Methods > isSessionRepository (async workspace checking) > returns true for a path in a session repository
(pass) Workspace Domain Methods > isSessionRepository (async workspace checking) > returns false for a path not in a session repository [0.41ms]
(pass) Workspace Domain Methods > isSessionRepository (async workspace checking) > returns false when an error occurs during check [0.06ms]
(pass) Workspace Domain Methods > isSessionRepository (async workspace checking) > verifies isSessionRepository consistency [0.05ms]
(pass) Workspace Domain Methods > getSessionFromWorkspace (getSessionFromRepo) > gets session information for a valid session repository [0.05ms]
(pass) Workspace Domain Methods > getSessionFromWorkspace (getSessionFromRepo) > returns null for a non-session repository [0.06ms]
(pass) Workspace Domain Methods > getSessionFromWorkspace (getSessionFromRepo) > returns null when session record is not found [0.04ms]
(pass) Workspace Domain Methods > getSessionFromWorkspace (getSessionFromRepo) > verifies getSessionFromRepo is an alias for getSessionFromWorkspace [0.06ms]
(pass) Workspace Domain Methods > getCurrentSession > returns session name when in a session directory [0.08ms]
(pass) Workspace Domain Methods > getCurrentSession > returns null when not in a session directory [0.02ms]
(pass) Workspace Domain Methods > resolveWorkspacePath > returns explicitly provided workspace path [0.04ms]
(pass) Workspace Domain Methods > resolveWorkspacePath > throws error for invalid workspace path [0.07ms]
(pass) Workspace Domain Methods > resolveWorkspacePath > uses sessionRepo if provided (backwards compatibility) [0.03ms]
(pass) Workspace Domain Methods > resolveWorkspacePath > falls back to current directory when no options provided [0.02ms]
(pass) Workspace Domain Methods > resolveWorkspacePath > uses provided sessionWorkspace path [0.03ms]
322 |   });
323 | 
324 |   describe("isSessionWorkspace returns true for session workspace", () => {
325 |     test("returns true for session workspace", () => {
326 |       const sessionRepoPath = "/Users/test/.local/state/minsky/sessions/some-session";
327 |       expect(isSessionWorkspace(sessionRepoPath)).toBe(true);
                                                        ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task#276/tests/domain/commands/workspace.commands.test.ts:327:51)
(fail) Workspace Domain Methods > isSessionWorkspace returns true for session workspace > returns true for session workspace [0.05ms]
(pass) Workspace Domain Methods > isSessionWorkspace returns true for session workspace > returns false for non-session workspace [0.02ms]

src/domain/git/commands/__tests__/simple-function.test.ts:
(pass) Git Commands Function Tests > should be able to define simple git command functions [0.03ms]
(pass) Git Commands Function Tests > should be able to call git command functions [0.77ms]

src/domain/git/commands/__tests__/integration.test.ts:

# Unhandled error between tests
-------------------------------
1 | (function (entry, fetcher)
              ^
SyntaxError: Export named 'cloneRepository' not found in module '/Users/edobry/.local/state/minsky/sessions/task#276/src/domain/git/commands/index.ts'.
      at loadAndEvaluateModule (1:11)
-------------------------------


src/domain/git/commands/__tests__/basic-imports.test.ts:
(pass) Git Commands Import Tests > should be able to import git command index [1.71ms]
(pass) Git Commands Import Tests > should be able to import git types [0.27ms]
(pass) Git Commands Import Tests > should be able to import individual command files [0.08ms]
(pass) Git Commands Import Tests > should be able to import subcommands [1.22ms]

4 tests skipped:
(skip) ConflictDetectionService Integration > should detect conflicts in real git repository
(skip) Session Edit Tools > session_edit_file > should apply edit pattern with existing code markers
(skip) session pr command > REAL TEST: preparePr should execute switch back command
(skip) Session CLI Commands > session pr command > REAL TEST: preparePr should execute switch back command


115 tests failed:
(fail) Session Approve Workflow > successfully approves and merges a PR branch with task ID [11.10ms]
(fail) Session Approve Workflow > throws ValidationError when session parameter is missing [7.50ms]
(fail) Session Approve Workflow > throws ResourceNotFoundError when session does not exist [15.55ms]
(fail) Session Approve Workflow > throws MinskyError when git command fails [6.66ms]
(fail) Session Approve > branch cleanup after successful merge > should delete local PR branch and task branch after successful merge [0.08ms]
(fail) Session Approve > branch cleanup after successful merge > should handle branch cleanup failures gracefully without failing the operation [0.09ms]
(fail) Session Approve > branch cleanup after successful merge > should not attempt branch cleanup for already approved sessions [0.10ms]
(fail) Session Approve > branch cleanup after successful merge > should handle case where task branch doesn't exist but PR branch does [0.06ms]
(fail) Session Approve > successfully approves and merges a PR branch [7.54ms]
(fail) Session Approve > detects current session when repo path is provided [0.67ms]
(fail) Session Approve > throws error when session is not found [12.36ms]
(fail) Session Approve > throws error when no session or task is provided [0.44ms]
(fail) Session Approve > handles errors during task metadata update [8.96ms]
(fail) Session Approve > merges from local PR branch and handles missing remote branch gracefully [8.74ms]
(fail) Session Approve Branch Cleanup > should delete local PR branch and task branch after successful merge [1.12ms]
(fail) Session Approve Branch Cleanup > should handle branch cleanup failures gracefully without failing the operation [0.16ms]
(fail) Session Approve Branch Cleanup > should not attempt branch cleanup for already approved sessions [0.07ms]
(fail) updateSessionFromParams > throws ValidationError when name is not provided [16.31ms]
(fail) updateSessionFromParams > returns session information when update is successful [0.25ms]
(fail) updateSessionFromParams > updates session when workspace is dirty and force is set [0.15ms]
(fail) updateSessionFromParams > skips stashing when noStash is true [0.12ms]
(fail) updateSessionFromParams > skips pushing when noPush is true [0.10ms]
(fail) Session PR Command Branch Behavior > should never switch user to PR branch during session pr creation [1.28ms]
(fail) Session PR Command Branch Behavior > should handle branch switch-back failure as critical error [0.30ms]
(fail) resolveWorkspacePath > uses explicitly provided workspace path [0.40ms]
(fail) interface-agnostic task functions > listTasksFromParams > should list tasks with valid parameters [1.05ms]
(fail) interface-agnostic task functions > listTasksFromParams > should filter out DONE tasks when all is false [0.09ms]
(fail) interface-agnostic task functions > getTaskFromParams > should get a task with valid parameters [2.38ms]
(fail) interface-agnostic task functions > getTaskFromParams > should throw ResourceNotFoundError when task is not found [1.82ms]
(fail) interface-agnostic task functions > getTaskFromParams > should normalize non-canonical task IDs (e.g., 'TEST_VALUE' -> '#TEST_VALUE') [0.46ms]
(fail) interface-agnostic task functions > getTaskFromParams > should handle task IDs without leading zeros [0.23ms]
(fail) interface-agnostic task functions > getTaskStatusFromParams > should get task status with valid parameters [0.36ms]
(fail) interface-agnostic task functions > getTaskStatusFromParams > should throw ResourceNotFoundError when task status is not found [0.15ms]
(fail) interface-agnostic task functions > setTaskStatusFromParams > should set task status with valid parameters [0.33ms]
(fail) Parameter-Based Git Functions > commitChangesFromParams > should commit changes with all parameters [8.10ms]
(fail) Parameter-Based Git Functions > commitChangesFromParams > should handle commit with minimal parameters [3331.03ms]
(fail) Parameter-Based Git Functions > commitChangesFromParams > should handle commit with amend option [2751.75ms]
(fail) Parameter-Based Git Functions > commitChangesFromParams > should handle commit with noStage option [2846.34ms]
(fail) Parameter-Based Git Functions > pushFromParams > should push changes with all parameters [0.47ms]
(fail) Parameter-Based Git Functions > pushFromParams > should handle push with custom remote [14.41ms]
(fail) commitChangesFromParams > should commit changes with message and all flag [6.12ms]
(fail) commitChangesFromParams > should commit changes with just message [5.86ms]
(fail) commitChangesFromParams > should handle commit with custom repo path [6.80ms]
(fail) commitChangesFromParams > should handle commit errors gracefully [0.82ms]
(fail) pushFromParams > should push changes successfully [8.06ms]
(fail) pushFromParams > should handle push with custom remote [7.14ms]
(fail) pushFromParams > should handle push with branch specification [6.40ms]
(fail) pushFromParams > should handle push errors gracefully [0.08ms]
(fail) GlobalImportPathFixer > Session Commands Directory (3 levels deep) > should fix ../../errors to ../../../errors [0.98ms]
(fail) GlobalImportPathFixer > Session Directory (2 levels deep) > should fix ../../errors to ../../../errors [0.62ms]
(fail) GlobalImportPathFixer > Other Domain Subdirectories > should fix git operations imports [0.63ms]
(fail) GlobalImportPathFixer > Other Domain Subdirectories > should fix storage operations imports [0.63ms]
(fail) GlobalImportPathFixer > Other Domain Subdirectories > should fix tasks operations imports [0.78ms]
(fail) GlobalImportPathFixer > Adapters Directory > should fix MCP adapter imports [0.66ms]
(fail) GlobalImportPathFixer > Adapters Directory > should fix shared adapter imports [0.61ms]
(fail) GlobalImportPathFixer > Import Path Detection Logic > should detect all incorrect import patterns [1.12ms]
(fail) GlobalImportPathFixer > Edge Cases > should handle mixed import types correctly [0.39ms]
(fail) GlobalImportPathFixer > Full Integration Test > should process multiple files and generate comprehensive report [9.31ms]
(fail) TaskService JsonFile Integration (Enhanced) > Error Handling > should handle invalid task IDs gracefully [0.12ms]
(fail) TaskBackendRouter > Manual Override (isInTreeBackend method) > should use manual override for JsonFileTaskBackend (which has isInTreeBackend) [0.15ms]
(fail) DatabaseIntegrityChecker > File Format Detection > should detect valid SQLite format [1.72ms]
(fail) DatabaseIntegrityChecker > Format Mismatch Detection > should detect SQLite file when JSON expected [1.47ms]
(fail) DatabaseIntegrityChecker > SQLite Integrity Validation > should validate SQLite database integrity [0.27ms]
(fail) DatabaseIntegrityChecker > SQLite Integrity Validation > should detect SQLite database without sessions table [0.55ms]
(fail) DatabaseIntegrityChecker > SQLite Integrity Validation > should detect empty SQLite database [0.38ms]
(fail) DatabaseIntegrityChecker > Integrity Report Formatting > should format report for valid database [1.25ms]
(fail) interface-agnostic task functions > getTaskStatusFromParams > should get task status with valid parameters [0.47ms]
(fail) ConflictDetectionService > analyzeBranchDivergence > should detect when branches have diverged [0.16ms]
(fail) ConflictDetectionService > predictConflicts > should return no conflicts when already merged [0.33ms]
(fail) ConflictDetectionService > mergeWithConflictPrevention > should perform dry run without actual merge [0.33ms]
(fail) ConflictDetectionService > mergeWithConflictPrevention > should auto-resolve delete conflicts when enabled [0.15ms]
(fail) ConflictDetectionService > smartSessionUpdate > should compare against origin/baseBranch instead of local baseBranch [0.39ms]
(fail) ConflictDetectionService > smartSessionUpdate > should skip update when session changes already in base [0.10ms]
(fail) ConflictDetectionService > smartSessionUpdate > should perform fast-forward when session is behind [0.06ms]
(fail) ConflictDetectionService > error handling > should handle git command failures gracefully [0.08ms]
(fail) ConflictDetectionService > error handling > should handle merge simulation cleanup failures gracefully [0.07ms]
(fail) commitChangesFromParams - Detailed Tests > should commit changes with message and all flag [9.27ms]
(fail) commitChangesFromParams - Detailed Tests > should commit changes with just message [7.38ms]
(fail) commitChangesFromParams - Detailed Tests > should handle commit with custom repo path [7.28ms]
(fail) commitChangesFromParams - Detailed Tests > should handle commit errors gracefully [0.53ms]
(fail) pushFromParams - Detailed Tests > should push changes successfully [6.55ms]
(fail) pushFromParams - Detailed Tests > should handle push with custom remote [6.17ms]
(fail) pushFromParams - Detailed Tests > should handle push with branch specification [5.81ms]
(fail) pushFromParams - Detailed Tests > should handle push errors gracefully [0.44ms]
(fail) Session Approve Task Status Commit > should commit task status update after successful merge [0.88ms]
(fail) Session Approve Task Status Commit > should handle case where no task status update is needed [0.21ms]
(fail) Session Approve Task Status Commit > should skip task status update when task is already DONE [0.07ms]
(fail) Session Approve Task Status Commit > should exit early when task is DONE and PR branch doesn't exist (bug reproduction) [0.26ms]
(fail) Session Command Domain Logic > deleteSessionFromParams domain logic > throws ResourceNotFoundError for non-existent session [0.08ms]
(fail) Session Edit Tools > session_edit_file > should handle errors gracefully [0.28ms]
(fail) Session Edit Tools > session_search_replace > should replace single occurrence successfully [0.18ms]
(fail) session dir command > should return correct session directory for task ID [0.08ms]
(fail) session update command > TASK #168 FIX: should auto-detect session name from current directory when not provided [15.49ms]
(fail) session update command > TASK #168 FIX: should automatically register orphaned session when directory exists but not in database [0.33ms]
(fail) session update command > TASK #168 FIX: should extract task ID from session name during self-repair [0.10ms]
(fail) session update command > TASK #168 FIX: should provide clear error message when session workspace directory is missing [0.08ms]
(fail) session update command > TASK #168 FIX: should provide clear error message for uncommitted changes [0.05ms]
(fail) Session CLI Commands > session dir command > should return correct session directory for task ID [0.31ms]
(fail) Session CLI Commands > session update command > TASK #168 FIX: should auto-detect session name from current directory when not provided
(fail) Session CLI Commands > session update command > TASK #168 FIX: should automatically register orphaned session when directory exists but not in database [0.07ms]
(fail) Session CLI Commands > session update command > TASK #168 FIX: should extract task ID from session name during self-repair [0.10ms]
(fail) Session CLI Commands > session update command > TASK #168 FIX: should provide clear error message when session workspace directory is missing [0.08ms]
(fail) Session CLI Commands > session update command > TASK #168 FIX: should provide clear error message for uncommitted changes [0.09ms]
(fail) Workspace Domain Methods > isSessionWorkspace returns true for session workspace > returns true for session workspace [0.05ms]

 814 pass
 4 skip
 115 fail
 18 errors
 2333 expect() calls
Ran 933 tests across 108 files. [14.47s]
