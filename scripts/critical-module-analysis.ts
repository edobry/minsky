#!/usr/bin/env bun\n\nimport { readFileSync, readdirSync, statSync } from 'fs';\nimport { join, extname } from 'path';\n\ninterface ModuleAnalysis {\n  file: string;\n  criticalityScore: number;\n  runtimeErrorRisk: 'HIGH' | 'MEDIUM' | 'LOW';\n  issueCount: number;\n  issueTypes: string[];\n  moduleType: 'CORE' | 'ADAPTER' | 'UTIL' | 'TEST';\n  dependencies: string[];\n}\n\nfunction getAllTsFiles(dir: string): string[] {\n  const files: string[] = [];\n  \n  function traverse(currentDir: string) {\n    const items = readdirSync(currentDir);\n    \n    for (const item of items) {\n      const fullPath = join(currentDir, item);\n      const stat = statSync(fullPath);\n      \n      if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules') {\n        traverse(fullPath);\n      } else if (stat.isFile() && extname(item) === '.ts') {\n        files.push(fullPath);\n      }\n    }\n  }\n  \n  traverse(dir);\n  return files;\n}\n\nfunction analyzeModule(filePath: string): ModuleAnalysis {\n  const content = readFileSync(filePath, 'utf8');\n  const relativePath = filePath.replace(process.cwd() + '/', '');\n  \n  // Determine module type\n  let moduleType: 'CORE' | 'ADAPTER' | 'UTIL' | 'TEST' = 'UTIL';\n  if (relativePath.includes('/domain/')) moduleType = 'CORE';\n  else if (relativePath.includes('/adapters/')) moduleType = 'ADAPTER';\n  else if (relativePath.includes('test') || relativePath.includes('spec')) moduleType = 'TEST';\n  \n  // Count different types of variable naming issues\n  const issues = {\n    catchBlockErrors: 0,\n    parameterErrors: 0,\n    variableErrors: 0,\n    destructuringErrors: 0\n  };\n  \n  // Catch block issues (highest runtime risk)\n  const catchMatches = content.match(/catch\\s*\\(\\s*_\\w+\\s*\\)[^}]*\\b\\w+\\b/g);\n  if (catchMatches) {\n    issues.catchBlockErrors = catchMatches.length;\n  }\n  \n  // Function parameter issues\n  const paramMatches = content.match(/function[^{]*_\\w+[^{]*\\{[^}]*\\b\\w+\\b/g);\n  if (paramMatches) {\n    issues.parameterErrors = paramMatches.length;\n  }\n  \n  // Variable declaration issues\n  const varMatches = content.match(/(?:const|let|var)\\s+_\\w+[^=]*=[^;]*;[^}]*\\b\\w+\\b/g);\n  if (varMatches) {\n    issues.variableErrors = varMatches.length;\n  }\n  \n  // Destructuring issues\n  const destructMatches = content.match(/\\{[^}]*_\\w+[^}]*\\}[^=]*=[^;]*;[^}]*\\b\\w+\\b/g);\n  if (destructMatches) {\n    issues.destructuringErrors = destructMatches.length;\n  }\n  \n  const totalIssues = Object.values(issues).reduce((sum, count) => sum + count, 0);\n  \n  // Calculate criticality score\n  let criticalityScore = 0;\n  \n  // Module type weighting\n  if (moduleType === 'CORE') criticalityScore += 50;\n  else if (moduleType === 'ADAPTER') criticalityScore += 30;\n  else if (moduleType === 'UTIL') criticalityScore += 20;\n  else if (moduleType === 'TEST') criticalityScore += 5;\n  \n  // Issue type weighting (catch blocks are most critical)\n  criticalityScore += issues.catchBlockErrors * 10;\n  criticalityScore += issues.parameterErrors * 5;\n  criticalityScore += issues.variableErrors * 3;\n  criticalityScore += issues.destructuringErrors * 2;\n  \n  // High-impact module patterns\n  if (relativePath.includes('error') || relativePath.includes('Error')) criticalityScore += 25;\n  if (relativePath.includes('task') || relativePath.includes('Task')) criticalityScore += 20;\n  if (relativePath.includes('git') || relativePath.includes('Git')) criticalityScore += 15;\n  if (relativePath.includes('session') || relativePath.includes('Session')) criticalityScore += 15;\n  if (relativePath.includes('repository') || relativePath.includes('Repository')) criticalityScore += 15;\n  \n  // Determine runtime error risk\n  let runtimeErrorRisk: 'HIGH' | 'MEDIUM' | 'LOW' = 'LOW';\n  if (issues.catchBlockErrors > 0) runtimeErrorRisk = 'HIGH';\n  else if (issues.parameterErrors > 2 || totalIssues > 5) runtimeErrorRisk = 'MEDIUM';\n  else if (totalIssues > 0) runtimeErrorRisk = 'LOW';\n  \n  // Extract dependencies (simplified)\n  const importMatches = content.match(/import[^;]*from\\s*['\"]([^'\"]*)['\"];?/g) || [];\n  const dependencies = importMatches.map(imp => {\n    const match = imp.match(/from\\s*['\"]([^'\"]*)['\"]/);\n    return match ? match[1] : '';\n  }).filter(Boolean);\n  \n  const issueTypes: string[] = [];\n  if (issues.catchBlockErrors > 0) issueTypes.push('catch-blocks');\n  if (issues.parameterErrors > 0) issueTypes.push('function-parameters');\n  if (issues.variableErrors > 0) issueTypes.push('variable-declarations');\n  if (issues.destructuringErrors > 0) issueTypes.push('destructuring');\n  \n  return {\n    file: relativePath,\n    criticalityScore,\n    runtimeErrorRisk,\n    issueCount: totalIssues,\n    issueTypes,\n    moduleType,\n    dependencies\n  };\n}\n\nfunction main() {\n  console.log('🔍 Analyzing all modules for variable naming issues...\\n');\n  \n  const files = getAllTsFiles('src');\n  const analyses: ModuleAnalysis[] = [];\n  \n  for (const file of files) {\n    try {\n      const analysis = analyzeModule(file);\n      if (analysis.issueCount > 0) {\n        analyses.push(analysis);\n      }\n    } catch (error) {\n      console.error(`❌ Error analyzing ${file}:`, error);\n    }\n  }\n  \n  // Sort by criticality score (highest first)\n  analyses.sort((a, b) => b.criticalityScore - a.criticalityScore);\n  \n  console.log('📊 MODULE CRITICALITY ANALYSIS\\n');\n  \n  // High-risk modules (immediate attention required)\n  const highRisk = analyses.filter(a => a.runtimeErrorRisk === 'HIGH');\n  if (highRisk.length > 0) {\n    console.log('🚨 HIGH RISK MODULES (Immediate Fix Required):');\n    console.log('=' .repeat(60));\n    \n    for (const module of highRisk.slice(0, 10)) {\n      console.log(`📁 ${module.file}`);\n      console.log(`   Score: ${module.criticalityScore} | Type: ${module.moduleType} | Issues: ${module.issueCount}`);\n      console.log(`   Issue Types: ${module.issueTypes.join(', ')}`);\n      console.log();\n    }\n    \n    if (highRisk.length > 10) {\n      console.log(`   ... and ${highRisk.length - 10} more high-risk modules\\n`);\n    }\n  }\n  \n  // Medium-risk modules\n  const mediumRisk = analyses.filter(a => a.runtimeErrorRisk === 'MEDIUM');\n  if (mediumRisk.length > 0) {\n    console.log('⚠️  MEDIUM RISK MODULES (Fix Soon):');\n    console.log('=' .repeat(50));\n    \n    for (const module of mediumRisk.slice(0, 5)) {\n      console.log(`📁 ${module.file}`);\n      console.log(`   Score: ${module.criticalityScore} | Type: ${module.moduleType} | Issues: ${module.issueCount}`);\n      console.log();\n    }\n    \n    if (mediumRisk.length > 5) {\n      console.log(`   ... and ${mediumRisk.length - 5} more medium-risk modules\\n`);\n    }\n  }\n  \n  // Summary by module type\n  console.log('📈 SUMMARY BY MODULE TYPE:');\n  console.log('=' .repeat(40));\n  \n  const byType = analyses.reduce((acc, module) => {\n    if (!acc[module.moduleType]) {\n      acc[module.moduleType] = { count: 0, issues: 0, highRisk: 0 };\n    }\n    acc[module.moduleType].count++;\n    acc[module.moduleType].issues += module.issueCount;\n    if (module.runtimeErrorRisk === 'HIGH') acc[module.moduleType].highRisk++;\n    return acc;\n  }, {} as Record<string, { count: number; issues: number; highRisk: number }>);\n  \n  for (const [type, stats] of Object.entries(byType)) {\n    console.log(`${type}: ${stats.count} files, ${stats.issues} issues, ${stats.highRisk} high-risk`);\n  }\n  \n  console.log('\\n🎯 RECOMMENDED FIX ORDER:');\n  console.log('=' .repeat(35));\n  console.log('1. HIGH RISK modules (catch block errors)');\n  console.log('2. CORE domain modules with parameter errors');\n  console.log('3. ADAPTER modules with multiple issues');\n  console.log('4. UTIL modules with variable errors');\n  console.log('5. TEST modules (lowest priority)');\n  \n  console.log('\\n📋 NEXT STEPS:');\n  console.log('=' .repeat(20));\n  console.log('1. Run: bun run scripts/comprehensive-variable-naming-fix.ts');\n  console.log('2. Focus on high-risk modules first');\n  console.log('3. Test critical paths after each batch of fixes');\n  console.log('4. Run: bun run scripts/check-variable-naming.ts to verify');\n  \n  const totalFiles = analyses.length;\n  const totalIssues = analyses.reduce((sum, a) => sum + a.issueCount, 0);\n  \n  console.log('\\n📊 OVERALL STATISTICS:');\n  console.log('=' .repeat(30));\n  console.log(`Files with issues: ${totalFiles}`);\n  console.log(`Total issues: ${totalIssues}`);\n  console.log(`High-risk files: ${highRisk.length}`);\n  console.log(`Medium-risk files: ${mediumRisk.length}`);\n  console.log(`Low-risk files: ${analyses.filter(a => a.runtimeErrorRisk === 'LOW').length}`);\n}\n\nif (import.meta.main) {\n  main();\n}"
