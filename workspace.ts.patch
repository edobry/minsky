diff --git a/src/domain/workspace.ts b/src/domain/workspace.ts
index 6ba04f1..2e11a9b 100644
--- a/src/domain/workspace.ts
+++ b/src/domain/workspace.ts
@@ -1,8 +1,8 @@
-import { promises as fs } from 'fs';
-import { join, dirname } from 'path';
-import { exec } from 'child_process';
-import { promisify } from 'util';
-import { SessionDB } from './session';
+import { promises as fs } from "fs";
+import { join, dirname } from "path";
+import { exec } from "child_process";
+import { promisify } from "util";
+import { SessionDB } from "./session";
 
 const execAsync = promisify(exec);
 
@@ -35,28 +35,20 @@ export async function isSessionRepository(
     const xdgStateHome = process.env.XDG_STATE_HOME || join(process.env.HOME || "", ".local/state");
     const minskyPath = join(xdgStateHome, "minsky", "git");
     
+    // Check both patterns:
+    // - Legacy: /minsky/git/<repoName>/<session>
+    // - New: /minsky/git/<repoName>/sessions/<session>
     if (gitRoot.startsWith(minskyPath)) {
       // Extract the relative path from the minsky git directory
       const relativePath = gitRoot.substring(minskyPath.length + 1);
       const pathParts = relativePath.split("/");
       
-      // Check for the sessions directory in the path parts
-      // This handles both legacy format (repoName/session)
-      // and nested directories with a sessions folder
-      if (pathParts.length >= 2) {
-        // Legacy format: repoName/session
-        if (pathParts.length === 2) {
-          return true;
-        }
-        
-        // Check if any part of the path is a "sessions" directory
-        // This handles nested directory structures like local/minsky/sessions/task#027
-        for (let i = 1; i < pathParts.length - 1; i++) {
-          if (pathParts[i] === "sessions") {
-            return true;
-          }
-        }
-      }
+      // Should have at least 2 parts for legacy format (repoName/session)
+      // or 3 parts for new format (repoName/sessions/session)
+      return pathParts.length >= 2 && (
+        pathParts.length === 2 || 
+        (pathParts.length >= 3 && pathParts[1] === "sessions")
+      );
     }
     
     return false;
@@ -67,54 +59,56 @@ export async function isSessionRepository(
 
 /**
  * Get session information from a repository path
- * @param repoPath The path to check
- * @returns Information about the session if found, null otherwise
+ * @param repoPath Path to the repository
+ * @returns Session information if in a session repo, null otherwise
  */
 export async function getSessionFromRepo(
-  repoPath: string, 
+  repoPath: string,
   execAsyncFn: typeof execAsync = execAsync,
   sessionDbOverride?: { getSession: SessionDB["getSession"] }
 ): Promise<{ 
-  session: string;
-  mainWorkspace: string;
-  path: string;
+  session: string, 
+  mainWorkspace: string 
 } | null> {
   try {
-    const isSession = await isSessionRepository(repoPath, execAsyncFn);
-    if (!isSession) {
-      return null;
-    }
-
     // Get the git root of the provided path
     const { stdout } = await execAsyncFn("git rev-parse --show-toplevel", { cwd: repoPath });
     const gitRoot = stdout.trim();
-
-    // Parse the path to extract the session name
+    
+    // Check if this is in the minsky sessions directory structure
     const xdgStateHome = process.env.XDG_STATE_HOME || join(process.env.HOME || "", ".local/state");
     const minskyPath = join(xdgStateHome, "minsky", "git");
+    
+    if (!gitRoot.startsWith(minskyPath)) {
+      return null;
+    }
+    
+    // Extract session name from the path
+    // Pattern could be either:
+    // - Legacy: <minsky_path>/<repo_name>/<session_name>
+    // - New: <minsky_path>/<repo_name>/sessions/<session_name>
     const relativePath = gitRoot.substring(minskyPath.length + 1);
     const pathParts = relativePath.split("/");
-
-    let sessionName: string | undefined;
-
-    if (pathParts.length === 2) {
-      // Legacy format: repoName/session
-      sessionName = pathParts[1];
+    
+    if (pathParts.length < 2) {
+      return null;
+    }
+    
+    // Get the session name from the path parts
+    let sessionName;
+    if (pathParts.length >= 3 && pathParts[1] === "sessions") {
+      // New path format: <repo_name>/sessions/<session_name>
+      sessionName = pathParts[2];
     } else {
-      // Look for a "sessions" directory in the path
-      for (let i = 1; i < pathParts.length - 1; i++) {
-        if (pathParts[i] === "sessions") {
-          // The session name is the directory after "sessions"
-          sessionName = pathParts[i + 1];
-          break;
-        }
-      }
+      // Legacy path format: <repo_name>/<session_name>
+      sessionName = pathParts[1];
     }
-
-    if (!sessionName) {
+    
+    // Type check to ensure sessionName is a string (for the compiler)
+    if (typeof sessionName !== "string") {
       return null;
     }
-
+    
     const db = sessionDbOverride || new SessionDB();
     const sessionRecord = await db.getSession(sessionName);
     
@@ -124,8 +118,7 @@ export async function getSessionFromRepo(
     
     return {
       session: sessionName,
-      mainWorkspace: sessionRecord.repoUrl,
-      path: gitRoot
+      mainWorkspace: sessionRecord.repoUrl
     };
   } catch (error) {
     return null;
@@ -155,7 +148,7 @@ export async function resolveWorkspacePath(
   if (options?.workspace) {
     // Validate if it's a valid workspace
     try {
-      const processDir = join(options.workspace, 'process');
+      const processDir = join(options.workspace, "process");
       await access(processDir);
       return options.workspace;
     } catch (error) {
@@ -169,34 +162,13 @@ export async function resolveWorkspacePath(
   
   if (sessionInfo) {
     // Strip file:// protocol if present
-    let mainWorkspace = sessionInfo.path;
-    if (mainWorkspace.startsWith('file://')) {
-      mainWorkspace = mainWorkspace.replace(/^file:\/\//, '');
+    let mainWorkspace = sessionInfo.mainWorkspace;
+    if (mainWorkspace.startsWith("file://")) {
+      mainWorkspace = mainWorkspace.replace(/^file:\/\//, "");
     }
     return mainWorkspace;
   }
   
   // If not in a session repo, use current directory
   return checkPath;
-}
-
-/**
- * Get the current session name from the working directory
- * @returns The session name if in a session workspace, null otherwise
- */
-export async function getCurrentSession(
-  workingDir: string = process.cwd(),
-  execAsyncFn: typeof execAsync = execAsync
-): Promise<string | null> {
-  try {
-    const sessionInfo = await getSessionFromRepo(workingDir, execAsyncFn);
-    
-    if (sessionInfo) {
-      return sessionInfo.session;
-    }
-    
-    return null;
-  } catch (error) {
-    return null;
-  }
 } 
