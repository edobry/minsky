bun test v1.2.15 (df017990)

syntax-test.test.ts:
(pass) Session Approve > should approve

session-approve.test.ts:
(pass) Session Approve > should approve session

test.test.ts:

test-verification/quoting.test.ts:
(pass) Rule description quoting fix > createRule should use double quotes for descriptions with special characters [5.33ms]
(pass) Rule description quoting fix > updateRule should use double quotes for descriptions with special characters [4.29ms]
(pass) Rule description quoting fix > createRule should not add quotes to simple descriptions [0.60ms]

codemods/session-approve-log-mock-fixer.test.ts:
(pass) Session Approve Log Mock Fixer > fixLogMockInFile > should skip non-test files for safety [10.18ms]
(pass) Session Approve Log Mock Fixer > fixLogMockInFile > should skip files that already have log.cli mock [1.22ms]
(pass) Session Approve Log Mock Fixer > fixLogMockInFile > should add cli method to existing log mock [8.41ms]
(pass) Session Approve Log Mock Fixer > fixLogMockInFile > should add complete log mock for session approve tests without existing mock [3.91ms]
(pass) Session Approve Log Mock Fixer > fixLogMockInFile > should not modify files that don't need log mocks [0.58ms]
(pass) Session Approve Log Mock Fixer > fixSessionApproveLogMocks > should process multiple files and return results [0.17ms]
‚ùå Error processing /nonexistent/file.test.ts: 331 | (function (errors) {
332 |     class BaseError extends Error {
333 |         constructor(message, node) {
334 |             const nodeLocation = node && getPrettyNodeLocation(node);
335 |             const messageWithLocation = nodeLocation ? `${message}\n\n${nodeLocation}` : message;
336 |             super(messageWithLocation);
                  ^
error: File not found: /nonexistent/file.test.ts
 path: "/nonexistent/file.test.ts",
 code: "ENOENT"

      at new BaseError (/Users/edobry/.local/state/minsky/sessions/task176/node_modules/@ts-morph/common/dist/ts-morph-common.js:336:13)
      at new PathNotFoundError (/Users/edobry/.local/state/minsky/sessions/task176/node_modules/@ts-morph/common/dist/ts-morph-common.js:368:13)
      at new FileNotFoundError (/Users/edobry/.local/state/minsky/sessions/task176/node_modules/@ts-morph/common/dist/ts-morph-common.js:382:13)
      at addSourceFileAtPath (/Users/edobry/.local/state/minsky/sessions/task176/node_modules/ts-morph/dist/ts-morph.js:19291:19)
      at fixSessionApproveLogMocks (/Users/edobry/.local/state/minsky/sessions/task176/codemods/session-approve-log-mock-fixer.ts:227:34)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/codemods/session-approve-log-mock-fixer.test.ts:121:23)

(pass) Session Approve Log Mock Fixer > fixSessionApproveLogMocks > should handle file processing errors gracefully [3.68ms]
(pass) Session Approve Log Mock Fixer > boundary validation tests > should never modify production code files [0.72ms]
(pass) Session Approve Log Mock Fixer > boundary validation tests > should preserve existing complete log mocks without changes [0.34ms]
(pass) Session Approve Log Mock Fixer > boundary validation tests > should maintain valid TypeScript syntax after modifications [1.84ms]

codemods/fix-import-extensions.test.ts:
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 3
Export statements fixed: 0
Total transformations: 3
Processing time: 11ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753810034556-qhx2c850c/src/test.ts: 3 imports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Unit Tests - Individual Transformations > should remove .js extension from local imports [12.40ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 2
Export statements fixed: 0
Total transformations: 2
Processing time: 2ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753810034574-wx2aupruh/src/test.ts: 2 imports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Unit Tests - Individual Transformations > should remove .ts extension from local imports [2.78ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 0
Export statements fixed: 3
Total transformations: 3
Processing time: 3ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753810034578-8y80cp10r/src/test.ts: 3 exports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Unit Tests - Individual Transformations > should remove extensions from export statements [3.45ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 1ms
Success rate: 100.0%

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Unit Tests - Individual Transformations > should preserve external npm package imports [2.00ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 2ms
Success rate: 100.0%

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Unit Tests - Individual Transformations > should preserve non-.js/.ts extensions [2.07ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 2
Export statements fixed: 0
Total transformations: 2
Processing time: 3ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753810034590-eksf4ivxk/src/test.ts: 2 imports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Unit Tests - Individual Transformations > should handle mixed import types correctly [4.48ms]
üöÄ Starting import extension fixer...
üìÅ Found 3 files to process
üíæ Saving changes...
‚úÖ Saved 3 files

üìä Import Extension Fixer Report
================================
Files processed: 3
Files modified: 3
Import statements fixed: 2
Export statements fixed: 1
Total transformations: 3
Processing time: 12ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753810034596-19rpiq4xz/src/app.ts: 1 imports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753810034596-19rpiq4xz/src/components/Button.ts: 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753810034596-19rpiq4xz/src/utils/index.ts: 1 imports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Integration Tests - Full Codemod Execution > should process multiple files correctly [12.21ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 2
Export statements fixed: 1
Total transformations: 3
Processing time: 3ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753810034610-rbhs51e5z/src/test.ts: 2 imports, 1 exports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Integration Tests - Full Codemod Execution > should generate accurate metrics [3.59ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 1
Export statements fixed: 1
Total transformations: 2
Processing time: 2ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753810034615-ts1iqydxd/src/test.ts: 1 imports, 1 exports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Integration Tests - Full Codemod Execution > should provide detailed results per file [1.79ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 1ms
Success rate: 100.0%

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Integration Tests - Full Codemod Execution > should handle files with no changes [1.43ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 2ms
Success rate: 100.0%

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Edge Cases and Error Handling > should handle empty files [1.56ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 2ms
Success rate: 100.0%

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Edge Cases and Error Handling > should handle files with only comments [1.87ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 1ms
Success rate: 100.0%

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Edge Cases and Error Handling > should handle imports without extensions [1.58ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 3
Export statements fixed: 3
Total transformations: 6
Processing time: 11ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753810034632-ys3j72tyh/src/complex.ts: 3 imports, 3 exports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Edge Cases and Error Handling > should handle complex import/export patterns [11.27ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 4ms
Success rate: 100.0%

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Edge Cases and Error Handling > should handle exports without module specifiers [4.52ms]
üöÄ Starting import extension fixer...
üìÅ Found 0 files to process
üíæ Saving changes...
‚úÖ Saved 0 files

üìä Import Extension Fixer Report
================================
Files processed: 0
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 1ms
Success rate: 100.0%

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Edge Cases and Error Handling > should exclude test files from processing [1.24ms]
üöÄ Starting import extension fixer...
üìÅ Found 0 files to process
üíæ Saving changes...
‚úÖ Saved 0 files

üìä Import Extension Fixer Report
================================
Files processed: 0
Files modified: 0
Import statements fixed: 0
Export statements fixed: 0
Total transformations: 0
Processing time: 1ms
Success rate: 100.0%

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Edge Cases and Error Handling > should exclude spec files from processing [0.99ms]
üöÄ Starting import extension fixer...
üìÅ Found 10 files to process
üíæ Saving changes...
‚úÖ Saved 10 files

üìä Import Extension Fixer Report
================================
Files processed: 10
Files modified: 10
Import statements fixed: 10
Export statements fixed: 10
Total transformations: 20
Processing time: 8ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753810034657-rnrsbzxyg/src/file0.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753810034657-rnrsbzxyg/src/file1.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753810034657-rnrsbzxyg/src/file2.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753810034657-rnrsbzxyg/src/file3.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753810034657-rnrsbzxyg/src/file4.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753810034657-rnrsbzxyg/src/file5.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753810034657-rnrsbzxyg/src/file6.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753810034657-rnrsbzxyg/src/file7.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753810034657-rnrsbzxyg/src/file8.ts: 1 imports, 1 exports
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753810034657-rnrsbzxyg/src/file9.ts: 1 imports, 1 exports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Performance Benchmarks > should process files efficiently [9.21ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 2
Export statements fixed: 0
Total transformations: 2
Processing time: 2ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753810034668-dwe4cl0mb/src/test.ts: 2 imports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Performance Benchmarks > should maintain high success rate [1.89ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 3
Export statements fixed: 0
Total transformations: 3
Processing time: 1ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753810034672-l2zn3grvd/src/typescript.ts: 3 imports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > TypeScript Support > should handle TypeScript-specific imports [2.38ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 2
Export statements fixed: 0
Total transformations: 2
Processing time: 1ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753810034676-mqkfng7jz/src/component.tsx: 2 imports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > TypeScript Support > should handle JSX/TSX files [2.30ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 2
Export statements fixed: 0
Total transformations: 2
Processing time: 1ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753810034680-5wrb10vnf/src/bun-example.ts: 2 imports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Real-world Scenarios > should handle Bun-style imports correctly [2.13ms]
üöÄ Starting import extension fixer...
üìÅ Found 1 files to process
üíæ Saving changes...
‚úÖ Saved 1 files

üìä Import Extension Fixer Report
================================
Files processed: 1
Files modified: 1
Import statements fixed: 3
Export statements fixed: 0
Total transformations: 3
Processing time: 3ms
Success rate: 100.0%

üîß Files with changes:
  /private/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/import-fixer-test-1753810034684-oilp6db8s/src/nested/deep/component.ts: 3 imports

‚úÖ Import extension fixing completed!
(pass) ImportExtensionFixer > Real-world Scenarios > should handle nested directory imports [4.40ms]

codemods/bun-test-mocking-consistency-fixer.test.ts:

# Unhandled error between tests
-------------------------------
1 | (function (entry, fetcher)
              ^
SyntaxError: Export named 'fixBunTestMockingInFiles' not found in module '/Users/edobry/.local/state/minsky/sessions/task176/codemods/bun-test-mocking-consistency-fixer.ts'.
      at loadAndEvaluateModule (1:11)
-------------------------------


codemods/fix-indentation.test.ts:
(pass) ESLint auto-fix codemod runs ONLY the correct ESLint command [0.05ms]
(pass) ESLint auto-fix uses only safe ESLint flags [0.02ms]
(pass) ESLint auto-fix handles error cases properly [0.03ms]
(pass) ESLint auto-fix uses project configuration [0.01ms]
(pass) ESLint auto-fix does NOT modify files directly [0.02ms]
(pass) ESLint auto-fix provides appropriate logging [0.03ms]
(pass) ESLint auto-fix has proper imports and dependencies [0.11ms]

codemods/comprehensive-as-unknown-fixer.test.ts:
(pass) ComprehensiveAsUnknownFixer > Session Object Property Access Patterns > should remove sessionProvider cast with non-null assertion [4.19ms]
(pass) ComprehensiveAsUnknownFixer > Session Object Property Access Patterns > should remove sessionRecord cast with non-null assertion [1.49ms]
(pass) ComprehensiveAsUnknownFixer > Session Object Property Access Patterns > should remove sessionInfo cast with non-null assertion [1.24ms]
(pass) ComprehensiveAsUnknownFixer > Dynamic Import Patterns > should fix relative import patterns [0.56ms]
(pass) ComprehensiveAsUnknownFixer > Dynamic Import Patterns > should NOT fix absolute import patterns (keep them safe) [0.22ms]
(pass) ComprehensiveAsUnknownFixer > Config Object Patterns > should remove config object casts [1.02ms]
(pass) ComprehensiveAsUnknownFixer > Config Object Patterns > should remove options object casts [0.87ms]
(pass) ComprehensiveAsUnknownFixer > Error Handling Patterns > should remove error object casts [0.96ms]
(pass) ComprehensiveAsUnknownFixer > Provider/Service Patterns > should remove provider/service/backend casts [1.00ms]
(pass) ComprehensiveAsUnknownFixer > Redundant Cast Patterns > should remove redundant double casts [0.16ms]
(pass) ComprehensiveAsUnknownFixer > Promise Return Patterns > should remove unnecessary Promise casts [1.94ms]
(pass) ComprehensiveAsUnknownFixer > Simple Variable Patterns > should remove simple variable casts [1.47ms]
(pass) ComprehensiveAsUnknownFixer > Edge Cases and Safety > should NOT transform complex expressions [0.74ms]
(pass) ComprehensiveAsUnknownFixer > Edge Cases and Safety > should handle mixed patterns in single file [1.52ms]
(pass) ComprehensiveAsUnknownFixer > Real Codebase Scenarios > should handle actual workspace.ts patterns [1.58ms]
(pass) ComprehensiveAsUnknownFixer > Real Codebase Scenarios > should handle actual repository.ts dynamic import patterns [0.95ms]

tests/verification-protocol.test.ts:
(pass) Verification Protocol > should prevent claiming resources don't exist without verification [0.03ms]
(pass) Verification Protocol > should document the self-improvement rule verification failure [1.89ms]
(pass) Verification Protocol > should enforce verification checklist for all negative existence claims [0.07ms]

src/types/project.test.ts:
(pass) ProjectContext > validateRepositoryPath > returns false for clearly invalid paths
(pass) ProjectContext > validateRepositoryPath > returns true for current working directory [0.03ms]
(pass) ProjectContext > createProjectContext > creates a ProjectContext for current working directory [0.08ms]
{"level":"error","message":"Invalid repository path: /definitely/does/not/exist/path/12345","timestamp":"2025-07-29T17:27:14.724Z"}
(pass) ProjectContext > createProjectContext > throws an error for clearly invalid path [1.11ms]
(pass) ProjectContext > createProjectContextFromCwd > creates a ProjectContext from current working directory [0.04ms]

src/utils/task-workspace-commit.test.ts:

# Unhandled error between tests
-------------------------------
error: Cannot find module '../task-workspace-commit' from '/Users/edobry/.local/state/minsky/sessions/task176/src/utils/task-workspace-commit.test.ts'
-------------------------------


src/utils/auto-commit.test.ts:
(pass) autoCommitTaskChanges > should be a function [0.02ms]
(pass) autoCommitTaskChanges > should accept workspacePath and message parameters
(pass) autoCommitTaskChanges > should return a Promise<boolean> [5.16ms]

src/utils/semantic-error-classifier-integration.test.ts:

# Unhandled error between tests
-------------------------------
error: Cannot find module '../semantic-error-classifier' from '/Users/edobry/.local/state/minsky/sessions/task176/src/utils/semantic-error-classifier-integration.test.ts'
-------------------------------


src/utils/param-schemas.test.ts:
(pass) Parameter Schemas > Schema Helpers > optionalString should create an optional string schema with description [0.08ms]
(pass) Parameter Schemas > Schema Helpers > requiredString should create a required string schema with description [0.04ms]
(pass) Parameter Schemas > Schema Helpers > optionalBoolean should create an optional boolean schema with description [0.04ms]
(pass) Parameter Schemas > Common Parameters > all common parameter schemas should have descriptions [0.10ms]

src/utils/filter-messages.test.ts:
{"error":"Git check-status failed: Command failed: git -C /tmp status --porcelain\nfatal: not a git repository (or any of the parent directories): .git\n\n\nCommand: git -C /tmp status --porcelain\nWorking directory: /tmp\nExecution time: 14ms","level":"error","message":"Auto-commit: Failed to commit task changes test commit","timestamp":"2025-07-29T17:27:14.744Z","workspacePath":"/tmp"}
(pass) Filter Messages Utility > getStatusFilterMessage > returns correct message for a given status
(pass) Filter Messages Utility > getStatusFilterMessage > includes the status in single quotes
(pass) Filter Messages Utility > getActiveTasksMessage > returns message about active tasks [0.02ms]
(pass) Filter Messages Utility > getActiveTasksMessage > includes instruction about --all flag
(pass) Filter Messages Utility > generateFilterMessages > returns status filter message when status is provided [0.03ms]
(pass) Filter Messages Utility > generateFilterMessages > returns active tasks message when not showing all tasks [0.01ms]
(pass) Filter Messages Utility > generateFilterMessages > returns no messages when all is true
(pass) Filter Messages Utility > generateFilterMessages > prioritizes status filter over active tasks message [0.01ms]
(pass) Filter Messages Utility > generateFilterMessages > returns empty array when no filter options provided

src/utils/option-descriptions.test.ts:
(pass) Option Descriptions > all exported descriptions should be non-empty strings [0.13ms]
(pass) Option Descriptions > all descriptions should follow consistent naming pattern (UPPERCASE_WITH_DESCRIPTION suffix) [0.03ms]
(pass) Option Descriptions > all descriptions should end with proper punctuation [0.05ms]
(pass) Option Descriptions > repository resolution descriptions should be consistent
(pass) Option Descriptions > output format descriptions should be consistent
(pass) Option Descriptions > task descriptions should be consistent
(pass) Option Descriptions > backend descriptions should be consistent
(pass) Option Descriptions > force option descriptions should be consistent
(pass) Option Descriptions > git option descriptions should be consistent
(pass) Option Descriptions > rules option descriptions should be consistent

src/utils/logger.test.ts:
(pass) Logger > getLogMode > should return HUMAN when configuration mode is set to HUMAN
(pass) Logger > getLogMode > should return STRUCTURED when configuration mode is set to STRUCTURED
(pass) Logger > getLogMode > should default to HUMAN when mode is auto and TTY is available [0.02ms]
(pass) Logger > getLogMode > should default to STRUCTURED when mode is auto and TTY is not available
(pass) Logger > createConfigurableLogger > should create logger with configuration [0.78ms]
(pass) Logger > createConfigurableLogger > should create logger with STRUCTURED mode [0.28ms]
(pass) Logger > createConfigurableLogger > should expose logger methods [0.15ms]
(pass) Logger > createConfigurableLogger > should support dependency injection for testing [0.09ms]
(pass) Logger > createConfigurableLogger > should handle different log levels [0.24ms]
(pass) Logger > createConfigurableLogger > should isolate logger instances [0.29ms]
(pass) Logger > configuration integration > should maintain backward compatibility [0.23ms]
(pass) Logger > configuration integration > should support enableAgentLogs configuration [0.20ms]

src/utils/semantic-error-classifier.test.ts:

# Unhandled error between tests
-------------------------------
error: Cannot find module '../semantic-error-classifier' from '/Users/edobry/.local/state/minsky/sessions/task176/src/utils/semantic-error-classifier.test.ts'
-------------------------------


src/mcp/command-mapper.test.ts:
(pass) CommandMapper > Schema Conversion > should convert simple object schema to flat JSON schema without $ref [1.33ms]
(pass) CommandMapper > Schema Conversion > should handle empty object schema [0.07ms]
(pass) CommandMapper > Schema Conversion > should handle complex nested schemas [0.46ms]
(pass) CommandMapper > Schema Conversion > should handle schema with validation rules [0.25ms]
(pass) CommandMapper > Schema Conversion > should ensure schema is MCP-compatible [0.05ms]
(pass) CommandMapper > Schema Conversion > should produce schema that passes MCP server validation [0.12ms]
(pass) CommandMapper > should initialize with server and project context [0.02ms]
(pass) CommandMapper > should add tool to server when addCommand is called [0.12ms]

src/mcp/server.test.ts:
(pass) MCP Server > should import official MCP SDK module successfully [25.78ms]
(pass) MCP Server > should import stdio transport successfully [2.19ms]
(pass) MCP Server > should be able to import our server modules [10.66ms]
(pass) MCP Server > should create MinskyMCPServer instance [0.48ms]

src/adapters/session-context-resolver.test.ts:

# Unhandled error between tests
-------------------------------
error: Cannot find module '../session-context-resolver' from '/Users/edobry/.local/state/minsky/sessions/task176/src/adapters/session-context-resolver.test.ts'
-------------------------------


src/errors/network-errors.test.ts:
(pass) Network Error handling > NetworkError class > should create a NetworkError with the correct properties
(pass) Network Error handling > PortInUseError class > should create a PortInUseError with the correct message [0.05ms]
(pass) Network Error handling > PortInUseError class > should provide helpful suggestions [0.05ms]
(pass) Network Error handling > NetworkPermissionError class > should create a NetworkPermissionError with the correct message [0.03ms]
(pass) Network Error handling > NetworkPermissionError class > should provide helpful suggestions [0.02ms]
(pass) Network Error handling > isNetworkError function > should identify common network errors [0.04ms]
(pass) Network Error handling > createNetworkError function > should create a PortInUseError for EADDRINUSE errors [0.04ms]
(pass) Network Error handling > createNetworkError function > should create a NetworkPermissionError for EACCES errors [0.02ms]
(pass) Network Error handling > createNetworkError function > should create a generic NetworkError for other errors [0.03ms]
(pass) Network Error handling > formatNetworkErrorMessage function > should format a PortInUseError with suggestions [0.04ms]
(pass) Network Error handling > formatNetworkErrorMessage function > should not include the debug hint when debug is true [0.02ms]

src/errors/enhanced-error-templates.test.ts:
(pass) Task 223 Enhanced Error Messages > createSessionPrBranchErrorMessage > should create helpful error message for PR branch restriction [0.29ms]
(pass) Task 223 Enhanced Error Messages > createSessionPrBranchErrorMessage > should handle undefined session name gracefully [0.02ms]
(pass) Task 223 Enhanced Error Messages > createSessionPrBranchErrorMessage > should include context information when provided
(pass) Task 223 Enhanced Error Messages > createTaskIdParsingErrorMessage > should show supported task ID formats [0.07ms]
(pass) Task 223 Enhanced Error Messages > createTaskIdParsingErrorMessage > should include operation context [0.02ms]
(pass) Task 223 Enhanced Error Messages > createVariableNamingErrorMessage > should identify underscore prefix mismatch (declaration has underscore, usage doesn't) [0.06ms]
(pass) Task 223 Enhanced Error Messages > createVariableNamingErrorMessage > should identify reverse underscore mismatch (declaration without underscore, usage has underscore) [0.02ms]
(pass) Task 223 Enhanced Error Messages > createVariableNamingErrorMessage > should include file path and line numbers when provided [0.02ms]
(pass) Task 223 Enhanced Error Messages > createGitTimeoutErrorMessage > should provide troubleshooting steps for git timeouts [0.04ms]
(pass) Task 223 Enhanced Error Messages > createGitTimeoutErrorMessage > should include timeout duration in context [0.02ms]
(pass) Task 223 Enhanced Error Messages > createMergeConflictErrorMessage > should identify conflicting files with conflict types [0.04ms]
(pass) Task 223 Enhanced Error Messages > createMergeConflictErrorMessage > should provide resolution strategies
(pass) Task 223 Enhanced Error Messages > createBackendDetectionErrorMessage > should show available backends and their requirements [0.09ms]
(pass) Task 223 Enhanced Error Messages > createBackendDetectionErrorMessage > should provide default backend list when no backends provided [0.04ms]
(pass) Task 223 Enhanced Error Messages > createBackendDetectionErrorMessage > should include workspace path in context [0.02ms]
(pass) Task 223 Enhanced Error Messages > Error Message Quality > should use consistent emoji patterns across all error types [0.25ms]
(pass) Task 223 Enhanced Error Messages > Error Message Quality > should provide actionable command suggestions [0.04ms]
(pass) Task 223 Enhanced Error Messages > Error Message Quality > should include context information when provided [0.02ms]

src/errors/message-templates.test.ts:
(pass) Error Message Templates > getErrorMessage > extracts message from Error object [0.42ms]
(pass) Error Message Templates > getErrorMessage > converts non-Error to string
(pass) Error Message Templates > formatCommandSuggestions > formats single suggestion [0.04ms]
(pass) Error Message Templates > formatCommandSuggestions > formats multiple suggestions [0.02ms]
(pass) Error Message Templates > formatContextInfo > returns empty string for no context
(pass) Error Message Templates > formatContextInfo > formats single context info
(pass) Error Message Templates > formatContextInfo > formats multiple context info
(pass) Error Message Templates > buildErrorMessage > builds basic error message
(pass) Error Message Templates > buildErrorMessage > builds error message with description
(pass) Error Message Templates > buildErrorMessage > builds error message with sections and emojis [0.02ms]
(pass) Error Message Templates > buildErrorMessage > includes context information
(pass) Error Message Templates > createResourceNotFoundMessage > creates session not found message [0.04ms]
(pass) Error Message Templates > createMissingInfoMessage > creates missing information message [0.02ms]
(pass) Error Message Templates > createValidationErrorMessage > creates validation error message [0.04ms]
(pass) Error Message Templates > createCommandFailureMessage > creates command failure message [0.03ms]
(pass) Error Message Templates > createSessionErrorMessage > creates not found session error [0.06ms]
(pass) Error Message Templates > createSessionErrorMessage > creates session exists error [0.01ms]
(pass) Error Message Templates > createSessionErrorMessage > creates invalid session error [0.02ms]
(pass) Error Message Templates > createGitErrorMessage > creates git conflict error [0.08ms]
(pass) Error Message Templates > createGitErrorMessage > creates general git error [0.02ms]
(pass) Error Message Templates > createConfigErrorMessage > creates configuration error message [0.03ms]
(pass) Error Message Templates > ErrorContextBuilder > builds empty context [0.05ms]
(pass) Error Message Templates > ErrorContextBuilder > adds current directory [0.03ms]
(pass) Error Message Templates > ErrorContextBuilder > adds session information [0.02ms]
(pass) Error Message Templates > ErrorContextBuilder > adds repository information [0.01ms]
(pass) Error Message Templates > ErrorContextBuilder > adds task information [0.02ms]
(pass) Error Message Templates > ErrorContextBuilder > adds command information [0.04ms]
(pass) Error Message Templates > ErrorContextBuilder > adds custom information [0.01ms]
(pass) Error Message Templates > ErrorContextBuilder > chains multiple context additions [0.02ms]
(pass) Error Message Templates > Error message consistency > all templates use consistent emoji patterns [0.05ms]
(pass) Error Message Templates > Error message consistency > all templates have consistent structure [0.05ms]

src/domain/session-lookup-bug-integration.test.ts:
{"error":"The \"path\" property must be of type string, got undefined","level":"error","message":"Error during git clone","repoUrl":"https://github.com/nonexistent/invalid-repo-12345.git","stack":"TypeError: The \"path\" property must be of type string, got undefined\n    at dirname (unknown)\n    at cloneImpl (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/git/clone-operations.ts:64:22)\n    at cloneImpl (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/git/clone-operations.ts:40:3)\n    at processTicksAndRejections (native:7:39)","timestamp":"2025-07-29T17:27:14.846Z"}
(pass) Session Lookup Bug Integration Test > should NOT create session directories when git clone fails [1.47ms]
(pass) Session Lookup Bug Integration Test > should create session directories when git clone succeeds [0.03ms]

src/domain/rules.test.ts:
(pass) RuleService > listRules > lists rules from both formats when no format specified [1.44ms]
(pass) RuleService > listRules > filters rules by format [0.89ms]
(pass) RuleService > listRules > filters rules by tag [1.11ms]
(pass) RuleService > getRule > gets a rule by ID [0.82ms]
(pass) RuleService > getRule > throws error for non-existent rule [0.53ms]
(pass) RuleService > getRule > finds rule in specified format [0.74ms]
(pass) RuleService > createRule > creates a new rule with metadata [0.63ms]
(pass) RuleService > createRule > handles undefined metadata fields correctly [0.42ms]
(pass) RuleService > createRule > throws error if rule exists and overwrite is false [0.28ms]
(pass) RuleService > createRule > overwrites existing rule when overwrite is true [0.49ms]
(pass) RuleService > updateRule > updates metadata only [0.63ms]
(pass) RuleService > updateRule > updates content only [0.74ms]
(pass) RuleService > updateRule > updates both metadata and content [2.33ms]
(pass) RuleService > searchRules > searches for rules by content [0.81ms]
(pass) RuleService > searchRules > searches for rules by metadata [1.86ms]
(pass) RuleService > searchRules > filters search results by format and tag [1.56ms]

src/domain/session-lookup-bug-reproduction.test.ts:
BUG CONFIRMED: Orphaned session directory exists at /Users/edobry/.local/state/minsky/sessions/task176/test-tmp/session-lookup-bug-test/local-minsky/sessions/test-orphan-session
(pass) Session Lookup Bug Reproduction (Task #168) > Scenario 1: Git clone creates directory but fails before completion > should not leave orphaned session directories when git clone fails after mkdir [1.37ms]
BUG CONFIRMED: Orphaned session after branch failure at /Users/edobry/.local/state/minsky/sessions/task176/test-tmp/session-lookup-bug-test/local-minsky/sessions/test-branch-failure
(pass) Session Lookup Bug Reproduction (Task #168) > Scenario 2: Git branch creation fails after clone succeeds > should not leave orphaned sessions when branch creation fails [0.23ms]
BUG CONFIRMED: Orphaned session directory at /Users/edobry/.local/state/minsky/sessions/task176/test-tmp/session-lookup-bug-test/local-minsky/sessions/existing-orphan-session not in database
(pass) Session Lookup Bug Reproduction (Task #168) > Scenario 3: Partial cleanup leaves inconsistent state > should handle the case where session directories exist but sessions are not in database [0.11ms]
(pass) Session Lookup Bug Reproduction (Task #168) > Expected behavior after fix > should either succeed completely or fail cleanly with no orphaned directories [0.17ms]

src/domain/session-pr-body-path.test.ts:
(pass) sessionPrFromParams bodyPath file reading functionality > should read body content from bodyPath when provided [0.15ms]
(pass) sessionPrFromParams bodyPath file reading functionality > should handle non-existent files correctly [0.09ms]
(pass) sessionPrFromParams bodyPath file reading functionality > should detect empty files correctly [0.18ms]
(pass) sessionPrFromParams bodyPath file reading functionality > should work with relative paths correctly [0.33ms]
(pass) sessionPrFromParams bodyPath file reading functionality > should validate bodyPath parameter priority logic [0.02ms]

src/domain/session-review.test.ts:
(pass) sessionReviewFromParams > reviews session by name [0.97ms]
(pass) sessionReviewFromParams > reviews session by task ID [0.39ms]
(pass) sessionReviewFromParams > throws ValidationError when no session detected [0.17ms]
(pass) sessionReviewFromParams > throws ResourceNotFoundError when session not found [0.07ms]

src/domain/session-git-clone-bug-regression.test.ts:
(pass) Session Git Clone Bug Regression Test > should not leave orphaned session records when git clone fails [0.31ms]
171 |       repoUrl: "local/minsky",
172 |     });
173 | 
174 |     // Verify proper order: git operations first, then session record
175 |     expect(cloneSpy).toHaveBeenCalledTimes(1);
176 |     expect(branchSpy).toHaveBeenCalledTimes(1);
                            ^
error: expect(received).toHaveBeenCalledTimes(expected)

Expected number of calls: 1
Received number of calls: 0

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-git-clone-bug-regression.test.ts:176:23)
(fail) Session Git Clone Bug Regression Test > should successfully create session after fixing git directory issues [0.38ms]

src/domain/git-default-branch.test.ts:
(pass) GitService Default Branch Detection > should detect default branch from origin HEAD ref [0.09ms]
(pass) GitService Default Branch Detection > should properly remove origin prefix from branch name
{"error":"Command failed","level":"error","message":"Could not determine default branch, falling back to 'main'","repoPath":"/test/repo","timestamp":"2025-07-29T17:27:14.899Z"}
(pass) GitService Default Branch Detection > should fall back to 'main' when command fails [0.13ms]

src/domain/gitServiceTaskStatusUpdate.test.ts:
(pass) GitService Task Status Update > should be able to update task status after PR creation

src/domain/rules-format.test.ts:
(pass) RuleService Format Compatibility > should get a rule in its original format when requested [0.51ms]
(pass) RuleService Format Compatibility > should get a rule in any format if no format specified [0.31ms]
(pass) RuleService Format Compatibility > should return rule with format note when requested in different format [0.29ms]
(pass) RuleService Format Compatibility > should prioritize the requested format for dual-format rules [0.25ms]
(pass) RuleService Format Compatibility > should throw specific error messages for non-existent rules [0.09ms]

src/domain/session-approve.test.ts:
(pass) Session Approve > branch cleanup after successful merge > should delete local PR branch and task branch after successful merge [1.74ms]
703 |       expect(result.session).toBe("task#265");
704 |       expect(result.isNewlyApproved).toBe(true);
705 | 
706 |       // Verify cleanup was attempted
707 |       expect(gitCommands).toContain("git branch -d pr/task#265");
708 |       expect(gitCommands).toContain("git branch -d task#265");
                                ^
error: expect(received).toContain(expected)

Expected to contain: "git branch -d task#265"
Received: [
  "git checkout main", "git fetch origin", "git show-ref --verify --quiet refs/heads/pr/task#265",
  "git rev-parse pr/task#265", "git merge --ff-only pr/task#265", "git rev-parse HEAD",
  "git config user.name", "git push origin main", "git show-ref --verify --quiet refs/remotes/origin/pr/task#265",
  "git push origin --delete pr/task#265", "git branch -d pr/task#265", "git branch --format=\"%(refname:short)\"",
  "git status --porcelain"
]

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-approve.test.ts:708:27)
(fail) Session Approve > branch cleanup after successful merge > should handle branch cleanup failures gracefully without failing the operation [1.14ms]
(pass) Session Approve > branch cleanup after successful merge > should not attempt branch cleanup for already approved sessions [0.81ms]
(pass) Session Approve > branch cleanup after successful merge > should handle case where task branch doesn't exist but PR branch does [0.16ms]
(pass) Session Approve > successfully approves and merges a PR branch [0.20ms]
(pass) Session Approve > detects current session when repo path is provided [0.13ms]
(pass) Session Approve > throws error when session is not found [0.05ms]
(pass) Session Approve > throws error when no session or task is provided [0.61ms]
(pass) Session Approve > handles errors during task metadata update [0.12ms]
(pass) Session Approve > merges from local PR branch and handles missing remote branch gracefully [0.12ms]

src/domain/session-approve-branch-cleanup.test.ts:
(pass) Session Approve Branch Cleanup > should delete local PR branch and task branch after successful merge [0.69ms]
(pass) Session Approve Branch Cleanup > should handle branch cleanup failures gracefully without failing the operation [0.13ms]
(pass) Session Approve Branch Cleanup > should not attempt branch cleanup for already approved sessions [0.09ms]

src/domain/session-update.test.ts:
(pass) updateSessionFromParams > throws ValidationError when name is not provided [19.78ms]
65 |       expectToBeInstanceOf(error, ValidationError);
66 |     }
67 |   });
68 | 
69 |   test("throws ResourceNotFoundError when session does not exist", async () => {
70 |     mockSessionProvider.getSession = mock(() => Promise.resolve(null));
                                          ^
ReferenceError: mock is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-update.test.ts:70:38)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-update.test.ts:69:68)
(fail) updateSessionFromParams > throws ResourceNotFoundError when session does not exist [0.16ms]
931 |       name: sessionName,
932 |     });
933 |     if (error instanceof MinskyError) {
934 |       throw error;
935 |     } else {
936 |       throw new MinskyError(`Failed to update session: ${getErrorMessage(error)}`, error);
                  ^
MinskyError: Failed to update session: Command failed: git -C /mock/session/workdir rev-list --left-right --count origin/main...main
fatal: cannot change to '/mock/session/workdir': No such file or directory

      at updateSessionFromParams (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session.ts:936:13)

941 |   if (!isURLInstance(fileURLOrPath))
942 |     return fileURLOrPath;
943 |   return Bun.fileURLToPath(fileURLOrPath);
944 | }
945 | var { Error, TypeError } = globalThis;
946 |   let err = new Error(message);
                  ^
error: Command failed: git -C /mock/session/workdir rev-list --left-right --count origin/main...main
fatal: cannot change to '/mock/session/workdir': No such file or directory

   code: 128,
 killed: false,
 signal: null,
    cmd: "git -C /mock/session/workdir rev-list --left-right --count origin/main...main",
 stdout: "",
 stderr: "fatal: cannot change to '/mock/session/workdir': No such file or directory\n",

      at genericNodeError (node:child_process:946:13)
      at exitHandler (node:child_process:102:28)
      at emit (node:events:96:22)
      at #maybeClose (node:child_process:737:16)
      at #handleOnExit (node:child_process:511:72)
(fail) updateSessionFromParams > returns session information when update is successful [8.30ms]
110 |     expectToHaveBeenCalled(mockGitService.popStash);
111 |   });
112 | 
113 |   test("throws error when workspace is dirty and force is not set", async () => {
114 |     // Mock dirty workspace
115 |     mockGitService.execInRepository = mock(() => Promise.resolve("M file.txt"));
                                            ^
ReferenceError: mock is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-update.test.ts:115:39)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-update.test.ts:113:69)
(fail) updateSessionFromParams > throws error when workspace is dirty and force is not set [0.07ms]
129 |     }
130 |   });
131 | 
132 |   test("updates session when workspace is dirty and force is set", async () => {
133 |     // Mock dirty workspace
134 |     mockGitService.execInRepository = mock(() => Promise.resolve("M file.txt"));
                                            ^
ReferenceError: mock is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-update.test.ts:134:39)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-update.test.ts:132:68)
(fail) updateSessionFromParams > updates session when workspace is dirty and force is set
931 |       name: sessionName,
932 |     });
933 |     if (error instanceof MinskyError) {
934 |       throw error;
935 |     } else {
936 |       throw new MinskyError(`Failed to update session: ${getErrorMessage(error)}`, error);
                  ^
MinskyError: Failed to update session: Command failed: git -C /mock/session/workdir rev-list --left-right --count origin/main...main
fatal: cannot change to '/mock/session/workdir': No such file or directory

      at updateSessionFromParams (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session.ts:936:13)

941 |   if (!isURLInstance(fileURLOrPath))
942 |     return fileURLOrPath;
943 |   return Bun.fileURLToPath(fileURLOrPath);
944 | }
945 | var { Error, TypeError } = globalThis;
946 |   let err = new Error(message);
                  ^
error: Command failed: git -C /mock/session/workdir rev-list --left-right --count origin/main...main
fatal: cannot change to '/mock/session/workdir': No such file or directory

   code: 128,
 killed: false,
 signal: null,
    cmd: "git -C /mock/session/workdir rev-list --left-right --count origin/main...main",
 stdout: "",
 stderr: "fatal: cannot change to '/mock/session/workdir': No such file or directory\n",

      at genericNodeError (node:child_process:946:13)
      at exitHandler (node:child_process:102:28)
      at emit (node:events:96:22)
      at #maybeClose (node:child_process:737:16)
      at #handleOnExit (node:child_process:511:72)
(fail) updateSessionFromParams > skips stashing when noStash is true [8.51ms]
931 |       name: sessionName,
932 |     });
933 |     if (error instanceof MinskyError) {
934 |       throw error;
935 |     } else {
936 |       throw new MinskyError(`Failed to update session: ${getErrorMessage(error)}`, error);
                  ^
MinskyError: Failed to update session: Command failed: git -C /mock/session/workdir rev-list --left-right --count origin/main...main
fatal: cannot change to '/mock/session/workdir': No such file or directory

      at updateSessionFromParams (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session.ts:936:13)

941 |   if (!isURLInstance(fileURLOrPath))
942 |     return fileURLOrPath;
943 |   return Bun.fileURLToPath(fileURLOrPath);
944 | }
945 | var { Error, TypeError } = globalThis;
946 |   let err = new Error(message);
                  ^
error: Command failed: git -C /mock/session/workdir rev-list --left-right --count origin/main...main
fatal: cannot change to '/mock/session/workdir': No such file or directory

   code: 128,
 killed: false,
 signal: null,
    cmd: "git -C /mock/session/workdir rev-list --left-right --count origin/main...main",
 stdout: "",
 stderr: "fatal: cannot change to '/mock/session/workdir': No such file or directory\n",

      at genericNodeError (node:child_process:946:13)
      at exitHandler (node:child_process:102:28)
      at emit (node:events:96:22)
      at #maybeClose (node:child_process:737:16)
      at #handleOnExit (node:child_process:511:72)
(fail) updateSessionFromParams > skips pushing when noPush is true [7.96ms]
192 |     expect(mockGitService.push.mock.calls.length).toBe(0);
193 |     expectToHaveBeenCalled(mockGitService.popStash);
194 |   });
195 | 
196 |   test("throws error when merge conflicts are detected", async () => {
197 |     mockGitService.mergeBranch = mock(() => Promise.resolve({ conflicts: true }));
                                       ^
ReferenceError: mock is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-update.test.ts:197:34)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-update.test.ts:196:58)
(fail) updateSessionFromParams > throws error when merge conflicts are detected [0.17ms]

src/domain/session-pr-no-branch-switch.test.ts:
226 |             );
227 |           } catch (listError) {
228 |             log.error(`Failed to list sessions for debugging: ${listError}`);
229 |           }
230 | 
231 |           throw new MinskyError(`
                          ^
MinskyError: 
üîç Session "task#228" Not Found in Database

The session exists in the file system but isn't registered in the session database.
This can happen when sessions are created outside of Minsky or the database gets out of sync.

üí° How to fix this:

üìã Check if session exists on disk:
   ls -la ~/.local/state/minsky/git/*/sessions/

üîÑ If session exists, re-register it:
   cd /path/to/main/workspace
   minsky sessions import "task#228"

üÜï Or create a fresh session:
   minsky session start task#228

üìÅ Alternative - use repository path directly:
   minsky session pr --repo "/path/to/session/workspace" --title "Your PR title"

üóÉÔ∏è Check registered sessions:
   minsky sessions list

‚ö†Ô∏è  Note: Session PR commands should be run from within the session directory to enable automatic session self-repair.

Current directory: /Users/edobry/.local/state/minsky/sessions/task176
Session requested: "task#228"

 cause: undefined,

      at preparePrImpl (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/git/prepare-pr-operations.ts:231:21)
(fail) Session PR Command Branch Behavior > should never switch user to PR branch during session pr creation [4.01ms]
156 |         session: "task#228",
157 |         title: "Test PR",
158 |         body: "Test body",
159 |         baseBranch: "main",
160 |       });
161 |     }).toThrow(/Failed to switch back to session branch/);
             ^
error: expect(received).toThrow(expected)

Expected pattern: /Failed to switch back to session branch/
Received message: "\nüîç Session \"task#228\" Not Found in Database\n\nThe session exists in the file system but isn't registered in the session database.\nThis can happen when sessions are created outside of Minsky or the database gets out of sync.\n\nüí° How to fix this:\n\nüìã Check if session exists on disk:\n   ls -la ~/.local/state/minsky/git/*/sessions/\n\nüîÑ If session exists, re-register it:\n   cd /path/to/main/workspace\n   minsky sessions import \"task#228\"\n\nüÜï Or create a fresh session:\n   minsky session start task#228\n\nüìÅ Alternative - use repository path directly:\n   minsky session pr --repo \"/path/to/session/workspace\" --title \"Your PR title\"\n\nüóÉÔ∏è Check registered sessions:\n   minsky sessions list\n\n‚ö†Ô∏è  Note: Session PR commands should be run from within the session directory to enable automatic session self-repair.\n\nCurrent directory: /Users/edobry/.local/state/minsky/sessions/task176\nSession requested: \"task#228\"\n"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-pr-no-branch-switch.test.ts:161:8)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-pr-no-branch-switch.test.ts:118:70)
(fail) Session PR Command Branch Behavior > should handle branch switch-back failure as critical error [0.58ms]
(pass) Session PR Command Branch Behavior > should document the behavioral change from switch -C to branch + switch pattern [0.05ms]

src/domain/tasks-core-functions.test.ts:

# Unhandled error between tests
-------------------------------
error: Cannot find module '../tasks' from '/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks-core-functions.test.ts'
-------------------------------


src/domain/session-auto-task-creation.test.ts:
(pass) Session Auto-Task Creation > should auto-create task when description is provided [0.36ms]
(pass) Session Auto-Task Creation > should not auto-create task when task ID is provided [0.11ms]
(pass) Session Auto-Task Creation > should use session name when provided with description [0.07ms]

src/domain/repository-uri.test.ts:

# Unhandled error between tests
-------------------------------
1 | (function (entry, fetcher)
              ^
SyntaxError: Export named 'expandGitHubShorthand' not found in module '/Users/edobry/.local/state/minsky/sessions/task176/src/domain/repository-uri.ts'.
      at loadAndEvaluateModule (1:11)
-------------------------------


src/domain/uri-utils.test.ts:
(pass) URI Utilities > normalizeRepositoryUri > normalizes HTTPS URLs [0.06ms]
(pass) URI Utilities > normalizeRepositoryUri > normalizes SSH URLs [0.03ms]
(pass) URI Utilities > normalizeRepositoryUri > normalizes GitHub shorthand [0.01ms]
(pass) URI Utilities > convertRepositoryUri > converts HTTPS to SSH [0.04ms]
(pass) URI Utilities > convertRepositoryUri > converts SSH to HTTPS
(pass) URI Utilities > convertRepositoryUri > converts shorthand to HTTPS
(pass) URI Utilities > convertRepositoryUri > returns same URI if already in target format
(pass) URI Utilities > extractRepositoryInfo > extracts info from HTTPS URL [0.01ms]
(pass) URI Utilities > extractRepositoryInfo > extracts info from SSH URL
(pass) URI Utilities > extractRepositoryInfo > extracts info from shorthand [0.01ms]

src/domain/workspace.test.ts:
 7 |   it("uses explicitly provided workspace path", async () => {
 8 |     const _options: WorkspaceResolutionOptions = {
 9 |       workspace: "/test/workspace",
10 |     };
11 | 
12 |     let mockAccess = mockFunction(fs.access);
                          ^
ReferenceError: mockFunction is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/workspace.test.ts:12:22)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/workspace.test.ts:7:49)
(fail) resolveWorkspacePath > uses explicitly provided workspace path [0.14ms]
(pass) resolveWorkspacePath > returns current directory when no workspace option is provided [0.12ms]
(pass) resolveWorkspacePath > returns sessionRepo when provided [0.02ms]
48 |   it("validates that explicitly provided workspace exists", async () => {
49 |     const _options: WorkspaceResolutionOptions = {
50 |       workspace: "/invalid/workspace",
51 |     };
52 | 
53 |     let mockAccess = mockFunction(fs.access);
                          ^
ReferenceError: mockFunction is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/workspace.test.ts:53:22)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/workspace.test.ts:48:61)
(fail) resolveWorkspacePath > validates that explicitly provided workspace exists [0.04ms]

src/domain/tasks-interface-commands.test.ts:
101 |       // Mock call expectation updated - function may not call resolveRepoPath in all scenarios
102 |       // expect(mockResolveRepoPath.mock.calls.length > 0).toBe(true);
103 |       // Mock call expectation updated - function may not call resolveWorkspacePath in all scenarios
104 |       // expect(mockResolveWorkspacePath.mock.calls.length > 0).toBe(true);
105 |       expect(mockCreateTaskService).toHaveBeenCalled();
106 |       expect(mockTaskService.listTasks).toHaveBeenCalledWith({
                                              ^
error: expect(received).toHaveBeenCalledWith(expected)

Number of calls: 1

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks-interface-commands.test.ts:106:41)
(fail) interface-agnostic task functions > listTasksFromParams > should list tasks with valid parameters [0.48ms]
(pass) interface-agnostic task functions > listTasksFromParams > should filter out DONE tasks when all is false [0.12ms]
165 | 
166 |     // Get the task
167 |     const task = await taskService.getTask(validParams.taskId);
168 | 
169 |     if (!task) {
170 |       throw new ResourceNotFoundError(
                  ^
ResourceNotFoundError: Task 123 not found
      cause: undefined,
 resourceType: "task",
 resourceId: "123",

      at getTaskFromParams (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/taskCommands.ts:170:13)
(fail) interface-agnostic task functions > getTaskFromParams > should get a task with valid parameters [0.33ms]
(pass) interface-agnostic task functions > getTaskFromParams > should throw ResourceNotFoundError when task is not found [0.09ms]
165 | 
166 |     // Get the task
167 |     const task = await taskService.getTask(validParams.taskId);
168 | 
169 |     if (!task) {
170 |       throw new ResourceNotFoundError(
                  ^
ResourceNotFoundError: Task 123 not found
      cause: undefined,
 resourceType: "task",
 resourceId: "123",

      at getTaskFromParams (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/taskCommands.ts:170:13)
(fail) interface-agnostic task functions > getTaskFromParams > should normalize non-canonical task IDs (e.g., '123' -> '#123') [0.08ms]
165 | 
166 |     // Get the task
167 |     const task = await taskService.getTask(validParams.taskId);
168 | 
169 |     if (!task) {
170 |       throw new ResourceNotFoundError(
                  ^
ResourceNotFoundError: Task 23 not found
      cause: undefined,
 resourceType: "task",
 resourceId: "23",

      at getTaskFromParams (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/taskCommands.ts:170:13)
(fail) interface-agnostic task functions > getTaskFromParams > should handle task IDs without leading zeros [0.09ms]
240 | 
241 |     // Get the task
242 |     const task = await taskService.getTask(validParams.taskId);
243 | 
244 |     if (!task) {
245 |       throw new ResourceNotFoundError(
                  ^
ResourceNotFoundError: Task 123 not found or has no status
      cause: undefined,
 resourceType: "task",
 resourceId: "123",

      at getTaskStatusFromParams (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/taskCommands.ts:245:13)
(fail) interface-agnostic task functions > getTaskStatusFromParams > should get task status with valid parameters [0.17ms]
(pass) interface-agnostic task functions > getTaskStatusFromParams > should throw ResourceNotFoundError when task status is not found [0.07ms]
314 | 
315 |     // Verify the task exists before setting status and get old status for commit message
316 |     const task = await taskService.getTask(validParams.taskId);
317 | 
318 |     if (!task || !task.id) {
319 |       throw new ResourceNotFoundError(
                  ^
ResourceNotFoundError: Task 123 not found
      cause: undefined,
 resourceType: "task",
 resourceId: "123",

      at setTaskStatusFromParams (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/taskCommands.ts:319:13)
(fail) interface-agnostic task functions > setTaskStatusFromParams > should set task status with valid parameters [0.33ms]
(pass) interface-agnostic task functions > setTaskStatusFromParams > should throw ValidationError when status is invalid [0.13ms]

src/domain/session-lookup-bug-simple.test.ts:
102 |     expect(sessionStartFailed)!.toBe(true); // Session creation should fail
103 | 
104 |     // CRITICAL: This assertion should PASS after fix but FAILS before fix
105 |     // Currently fails because git.clone creates directories before failing
106 |     const sessionDirPath = join(tempDir, "local-minsky", "sessions", "test-session");
107 |     expect(existsSync(sessionDirPath))!.toBe(false); // No orphaned directories should exist
                                              ^
error: expect(received).toBe(expected)

Expected: false
Received: true

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-lookup-bug-simple.test.ts:107:41)
(fail) Session Creation Bug Fix (TDD) > should NOT create session directory if git operations fail [0.93ms]

src/domain/repo-utils.test.ts:
(pass) Repo Utils > normalizeRepoName extracts repo name from URL [0.02ms]
(pass) Repo Utils > resolveRepoPath uses provided repo path [0.19ms]
(pass) Repo Utils > resolveRepoPath resolves from session [0.10ms]
(pass) Repo Utils > resolveRepoPath falls back to git directory [0.05ms]
(pass) Repo Utils > resolveRepoPath falls back to current directory when git fails [0.08ms]

src/domain/github-backend.test.ts:
(pass) GitHub Repository Backend > constructor creates repository backend with correct settings
(pass) GitHub Repository Backend > getPath returns session workdir path [0.11ms]
(pass) GitHub Repository Backend > validate succeeds for a valid GitHub repository
(pass) GitHub Repository Backend > getConfig returns correct configuration

src/domain/tasks.specpath.test.ts:

src/domain/task-status-variables.test.ts:
(pass) Task Status Variables Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for TODO status
(pass) Task Status Variables Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for IN-PROGRESS status
(pass) Task Status Variables Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for DONE status
(pass) Task Status Variables Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should not throw 'status is not defined' error [0.02ms]

src/domain/session-pr-title-duplication.test.ts:
(pass) Session PR Title Duplication Bug Tests > should reproduce title duplication in commit message parsing [0.13ms]
(pass) Session PR Title Duplication Bug Tests > should reproduce title duplication when body accidentally contains title
(pass) Session PR Title Duplication Bug Tests > should fix title duplication with improved parsing [0.15ms]
(pass) Session PR Title Duplication Bug Tests > should handle empty body without duplication [0.08ms]
(pass) Session PR Title Duplication Bug Tests > should handle multiline body with potential title duplication [0.11ms]

src/domain/git-service.test.ts:

# Unhandled error between tests
-------------------------------
error: Cannot find module '../git' from '/Users/edobry/.local/state/minsky/sessions/task176/src/domain/git-service.test.ts'
-------------------------------


src/domain/repository.test.ts:
(pass) Repository backends > placeholder test to make CI pass - RepositoryBackend [0.01ms]
(pass) Repository backends > placeholder test for LocalGitBackend
(pass) Repository backends > placeholder test for RemoteGitBackend
(pass) Repository backends > placeholder test for GitHubBackend

src/domain/prepared-merge-commit-workflow.test.ts:
(pass) Prepared Merge Commit Workflow (Task #144) > Current Broken Behavior - preparePr method > SHOULD FAIL: preparePr creates PR branch from feature branch instead of base branch [0.17ms]
158 | 
159 |       // 2. Should create PR branch FROM base branch (not feature branch)
160 |       expect(gitCommands).toContain("git -C /test/repo switch -C pr/feature-branch origin/main");
161 | 
162 |       // 3. Should create PR title/body file
163 |       expect(gitCommands).toContain('echo "Test PR" > /test/repo/.pr_title');
                                ^
error: expect(received).toContain(expected)

Expected to contain: "echo \"Test PR\" > /test/repo/.pr_title"
Received: [ "git -C /test/repo fetch origin main", "git -C /test/repo switch -C pr/feature-branch origin/main",
  "echo \"undefined\" > /test/repo/.pr_title", "echo \"Test PR body\" >> /test/repo/.pr_title",
  "git -C /test/repo merge --no-ff feature-branch -F .pr_title", "git -C /test/repo push origin pr/feature-branch"
]

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/prepared-merge-commit-workflow.test.ts:163:27)
(fail) Prepared Merge Commit Workflow (Task #144) > Expected Correct Behavior - What SHOULD happen per Task #025 > preparePr SHOULD create PR branch from base branch and merge feature branch with --no-ff [0.20ms]
207 |           body: params.body,
208 |         };
209 |       });
210 | 
211 |       // Replace the preparePrFromParams function
212 |       const originalPreparePr = require("./git").preparePrFromParams;
                                                       ^
TypeError: Attempted to assign to readonly property.
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/prepared-merge-commit-workflow.test.ts:212:50)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/prepared-merge-commit-workflow.test.ts:181:79)
(fail) Prepared Merge Commit Workflow (Task #144) > Expected Correct Behavior - What SHOULD happen per Task #025 > sessionPrFromParams SHOULD call preparePr with correct parameters [0.11ms]
(pass) Prepared Merge Commit Workflow (Task #144) > Fast-Forward Merge Verification > Prepared merge commit SHOULD be fast-forward mergeable [0.08ms]
(pass) Prepared Merge Commit Workflow (Task #144) > Error Handling > SHOULD handle merge conflicts during prepared merge commit creation [0.11ms]

src/domain/session-pr-refresh.test.ts:

# Unhandled error between tests
-------------------------------
114 |       mockGitService.execInRepository = mock(() => Promise.resolve("not-exists")) = mock(() =>
                                              ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-pr-refresh.test.ts:114:41

144 |       mockGitService.execInRepository = mock(() => Promise.resolve("not-exists")) = mock(() =>
                                              ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-pr-refresh.test.ts:144:41

166 |       mockGitService.execInRepository = mock(() =>
                                              ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-pr-refresh.test.ts:166:41

187 |       mockGitService.execInRepository = mock(() =>
                                              ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-pr-refresh.test.ts:187:41

217 |       mockGitService.execInRepository = mock(() =>
                                              ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-pr-refresh.test.ts:217:41

245 |       mockGitService.execInRepository
            ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-pr-refresh.test.ts:245:7
-------------------------------


src/domain/git.test.ts:

# Unhandled error between tests
-------------------------------
1140 |     mockExecAsync = mockFunction(() => Promise.resolve({ stdout: "main", stderr: "" })) = mock(() =>
                           ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/domain/git.test.ts:1140:21
-------------------------------


src/domain/session-pr-state-optimization.test.ts:
(pass) PR State Optimization (Task #275) > checkPrBranchExistsOptimized > should use cached PR state when available and not stale [0.29ms]
(pass) PR State Optimization (Task #275) > checkPrBranchExistsOptimized > should refresh stale PR state [0.18ms]
(pass) PR State Optimization (Task #275) > checkPrBranchExistsOptimized > should fall back to git operations when no session record exists [0.03ms]
(pass) PR State Optimization (Task #275) > checkPrBranchExistsOptimized > should provide significant performance improvement [0.06ms]
(pass) PR State Optimization (Task #275) > updatePrStateOnCreation > should create PR state when PR branch is created [0.05ms]
(pass) PR State Optimization (Task #275) > updatePrStateOnMerge > should update PR state when PR is merged [0.05ms]
(pass) PR State Optimization (Task #275) > updatePrStateOnMerge > should handle missing PR state gracefully [0.04ms]
(pass) PR State Optimization (Task #275) > Integration with existing workflow > should maintain backward compatibility [0.03ms]

src/domain/session-pr-branch-reference-bug.test.ts:
(pass) Session PR Branch Reference Bug Regression > should normalize branch references to prevent origin/origin/main [0.63ms]
(pass) Session PR Branch Reference Bug Regression > should detect origin/origin/main patterns in git commands [0.02ms]
(pass) Session PR Branch Reference Bug Regression > should validate git command construction prevents double-prefixing [0.04ms]
(pass) Session PR Branch Reference Bug Regression > should document the specific bug that was fixed

src/domain/session-approve-workflow.test.ts:
56 |   let mockTaskService: any;
57 |   let mockWorkspaceUtils: any;
58 | 
59 |   beforeEach(() => {
60 |     // Create fresh spies for each test
61 |     getSessionSpy = mockFunction(() => {});
                         ^
ReferenceError: mockFunction is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-approve-workflow.test.ts:61:21)
(fail) Session Approve Workflow > successfully approves and merges a PR branch with task ID [1542585923.28ms]
(fail) Session Approve Workflow > successfully approves and merges a PR branch with task ID
56 |   let mockTaskService: any;
57 |   let mockWorkspaceUtils: any;
58 | 
59 |   beforeEach(() => {
60 |     // Create fresh spies for each test
61 |     getSessionSpy = mockFunction(() => {});
                         ^
ReferenceError: mockFunction is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-approve-workflow.test.ts:61:21)
(fail) Session Approve Workflow > throws ValidationError when session parameter is missing [1542585923.39ms]
(fail) Session Approve Workflow > throws ValidationError when session parameter is missing
56 |   let mockTaskService: any;
57 |   let mockWorkspaceUtils: any;
58 | 
59 |   beforeEach(() => {
60 |     // Create fresh spies for each test
61 |     getSessionSpy = mockFunction(() => {});
                         ^
ReferenceError: mockFunction is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-approve-workflow.test.ts:61:21)
(fail) Session Approve Workflow > handles git command failures gracefully [1542585923.47ms]
(fail) s4Õ  git command failures gracefully

src/domain/github-basic.test.ts:
(pass) GitHub Basic Functionality > initializes with correct repository URL [0.36ms]
(pass) GitHub Basic Functionality > properly uses provided owner and repo values [0.01ms]
(pass) GitHub Basic Functionality > correctly identifies backend type [0.02ms]

src/domain/git.pr.test.ts:
(pass) GitService PR Functionality > isGitHubRepo should identify GitHub URLs correctly
(pass) GitService PR Functionality > should create a PR description [0.04ms]

src/domain/session-start-consistency.test.ts:
58 |       getCurrentSession: mock(() => Promise.resolve(undefined)),
59 |       getSessionFromWorkspace: mock(() => Promise.resolve(undefined)),
60 |       resolveWorkspacePath: mock(() => Promise.resolve("/mock/workspace/path")),
61 |     };
62 | 
63 |     mockResolveRepoPath = mockFunction(() => Promise.resolve("local/minsky"));
                               ^
ReferenceError: mockFunction is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-start-consistency.test.ts:63:27)
(fail) Session Start Consistency Tests > Successful session creation > should only add session to database after git operations succeed [1542585927.10ms]
(fail) Session Start Consistency Tests >         nly add session to database after git operations succeed
58 |       getCurrentSession: mock(() => Promise.resolve(undefined)),
59 |       getSessionFromWorkspace: mock(() => Promise.resolve(undefined)),
60 |       resolveWorkspacePath: mock(() => Promise.resolve("/mock/workspace/path")),
61 |     };
62 | 
63 |     mockResolveRepoPath = mockFunction(() => Promise.resolve("local/minsky"));
                               ^
ReferenceError: mockFunction is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-start-consistency.test.ts:63:27)
(fail) Session Start Consistency Tests > Git clone failure scenarios > should not add session to database when git clone fails [1542585927.14ms]
(fail) Session Start Consistency Tests > Git clone failure scenarios > should not add session to database when git clone fails
58 |       getCurrentSession: mock(() => Promise.resolve(undefined)),
59 |       getSessionFromWorkspace: mock(() => Promise.resolve(undefined)),
60 |       resolveWorkspacePath: mock(() => Promise.resolve("/mock/workspace/path")),
61 |     };
62 | 
63 |     mockResolveRepoPath = mockFunction(() => Promise.resolve("local/minsky"));
                               ^
ReferenceError: mockFunction is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-start-consistency.test.ts:63:27)
(fail) Session Start Consistency Tests > Git clone failure scenarios > should not add session to database when git branch creation fails [1542585927.17ms]
(fail) Session Start Consistency Tests > Git clone failure scenarios > should not add session to database when git branch creation fails
58 |       getCurrentSession: mock(() => Promise.resolve(undefined)),
59 |       getSessionFromWorkspace: mock(() => Promise.resolve(undefined)),
60 |       resolveWorkspacePath: mock(() => Promise.resolve("/mock/workspace/path")),
61 |     };
62 | 
63 |     mockResolveRepoPath = mockFunction(() => Promise.resolve("local/minsky"));
                               ^
ReferenceError: mockFunction is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-start-consistency.test.ts:63:27)
(fail) Session Start Consistency Tests > Git clone failure scenarios > should propagate git errors without modification [1542585927.20ms]
(fail) Session Start Consistency Tests >  s4Õ  ropagate git errors without modification
58 |       getCurrentSession: mock(() => Promise.resolve(undefined)),
59 |       getSessionFromWorkspace: mock(() => Promise.resolve(undefined)),
60 |       resolveWorkspacePath: mock(() => Promise.resolve("/mock/workspace/path")),
61 |     };
62 | 
63 |     mockResolveRepoPath = mockFunction(() => Promise.resolve("local/minsky"));
                               ^
ReferenceError: mockFunction is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-start-consistency.test.ts:63:27)
(fail) Session Start Consistency Tests > Error handling edge cases > should prevent session creation when session already exists [1542585927.23ms]
(fail) Session Start Consistency Tests > Error handling edge cases > should prevent session creation when session already exists
58 |       getCurrentSession: mock(() => Promise.resolve(undefined)),
59 |       getSessionFromWorkspace: mock(() => Promise.resolve(undefined)),
60 |       resolveWorkspacePath: mock(() => Promise.resolve("/mock/workspace/path")),
61 |     };
62 | 
63 |     mockResolveRepoPath = mockFunction(() => Promise.resolve("local/minsky"));
                               ^
ReferenceError: mockFunction is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-start-consistency.test.ts:63:27)
(fail) Session Start Consistency Tests > Error handling edge cases > should prevent session creation when another session exists for same task [1542585927.27ms]
(fail) Session Start Consistency Tests > Error handling edge cases > should prevent session creation when another session exists for same task
58 |       getCurrentSession: mock(() => Promise.resolve(undefined)),
59 |       getSessionFromWorkspace: mock(() => Promise.resolve(undefined)),
60 |       resolveWorkspacePath: mock(() => Promise.resolve("/mock/workspace/path")),
61 |     };
62 | 
63 |     mockResolveRepoPath = mockFunction(() => Promise.resolve("local/minsky"));
                               ^
ReferenceError: mockFunction is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-start-consistency.test.ts:63:27)
(fail) Session Start Consistency Tests > Error handling edge cases > should prevent session creation when task does not exist [1542585927.29ms]
(fail) Session Start Consistency Tests >  ë4Õ  revent session creation when task does not exist
58 |       getCurrentSession: mock(() => Promise.resolve(undefined)),
59 |       getSessionFromWorkspace: mock(() => Promise.resolve(undefined)),
60 |       resolveWorkspacePath: mock(() => Promise.resolve("/mock/workspace/path")),
61 |     };
62 | 
63 |     mockResolveRepoPath = mockFunction(() => Promise.resolve("local/minsky"));
                               ^
ReferenceError: mockFunction is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-start-consistency.test.ts:63:27)
(fail) Session Start Consistency Tests > Critical consistency verification > should never add session record before all git operations complete successfully [1542585927.31ms]
(fail) Session Start Consistency Tests > Critical consistency verification > should never add session record before all git operations complete successfully
58 |       getCurrentSession: mock(() => Promise.resolve(undefined)),
59 |       getSessionFromWorkspace: mock(() => Promise.resolve(undefined)),
60 |       resolveWorkspacePath: mock(() => Promise.resolve("/mock/workspace/path")),
61 |     };
62 | 
63 |     mockResolveRepoPath = mockFunction(() => Promise.resolve("local/minsky"));
                               ^
ReferenceError: mockFunction is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session-start-consistency.test.ts:63:27)
(fail) Session Start Consistency Tests > Critical consistency verification > should successfully add session record only after all operations complete [1542585927.32ms]
(fail) Session Start Consistency Tests > @U4Õ  uccessfully add session record only after all operations complete

src/domain/git-service-pr-workflow.test.ts:

# Unhandled error between tests
-------------------------------
error: Cannot find module '../git' from '/Users/edobry/.local/state/minsky/sessions/task176/src/domain/git-service-pr-workflow.test.ts'
-------------------------------


src/domain/task-status-bug-regression.test.ts:
(pass) Task Status Bug Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for TODO status [0.02ms]
(pass) Task Status Bug Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for IN-PROGRESS status
(pass) Task Status Bug Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for IN-REVIEW status
(pass) Task Status Bug Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for DONE status
(pass) Task Status Bug Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should return correct checkbox for BLOCKED status
(pass) Task Status Bug Regression Tests > TASK_PARSING_UTILS.getCheckboxFromStatus > should not throw 'status is not defined' error [0.01ms]
(pass) Task Status Bug Regression Tests > Integration test with task status functionality > should handle all status transitions without variable naming errors [0.05ms]

src/eslint-rules/no-unsafe-git-network-operations.test.js:
(pass) no-unsafe-git-network-operations > valid > await gitPushWithTimeout("origin", "main", { workdir: "/path" }); [15.32ms]
(pass) no-unsafe-git-network-operations > valid > await gitPullWithTimeout("origin", "main", { workdir: "/path" }); [1.73ms]
(pass) no-unsafe-git-network-operations > valid > await gitFetchWithTimeout("origin", "main", { workdir: "/path" }); [0.96ms]
(pass) no-unsafe-git-network-operations > valid > await gitCloneWithTimeout("repo", "/path"); [0.59ms]
(pass) no-unsafe-git-network-operations > valid > await execGitWithTimeout("push", "push origin main", { workdir: "/path" }); [7.73ms]
(pass) no-unsafe-git-network-operations > valid > await execAsync("git status"); [0.63ms]
(pass) no-unsafe-git-network-operations > valid > await execAsync("git branch"); [0.49ms]
(pass) no-unsafe-git-network-operations > valid > await execAsync("git log"); [0.34ms]
(pass) no-unsafe-git-network-operations > valid > await execAsync("git diff"); [0.36ms]
(pass) no-unsafe-git-network-operations > valid > await execAsync("git add ."); [0.37ms]
(pass) no-unsafe-git-network-operations > valid > await execAsync("git commit -m \"message\""); [0.50ms]
(pass) no-unsafe-git-network-operations > valid > await execAsync("npm install"); [0.39ms]
(pass) no-unsafe-git-network-operations > valid > await execAsync("echo hello"); [0.78ms]
(pass) no-unsafe-git-network-operations > valid > await execGitWithTimeout("fetch", "fetch origin", { workdir }); [1.08ms]
(pass) no-unsafe-git-network-operations > invalid > await execAsync("git push origin main"); [3.39ms]
(pass) no-unsafe-git-network-operations > invalid > await execAsync("git pull origin main"); [1.25ms]
(pass) no-unsafe-git-network-operations > invalid > await execAsync("git fetch origin"); [0.83ms]
(pass) no-unsafe-git-network-operations > invalid > await execAsync("git clone https://github.com/user/repo.git /path"); [0.93ms]
(pass) no-unsafe-git-network-operations > invalid > await execAsync("git -C /repo push origin main"); [0.63ms]
(pass) no-unsafe-git-network-operations > invalid > await execAsync("git -C /repo fetch origin"); [0.56ms]
(pass) no-unsafe-git-network-operations > invalid > await execAsync(`git push origin ${branch}`); [0.84ms]
(pass) no-unsafe-git-network-operations > invalid > await execAsync(`git -C ${workdir} fetch ${remote}`); [0.49ms]
(pass) no-unsafe-git-network-operations > invalid > gitPushWithTimeout("origin", "main", { workdir }); [0.71ms]
(pass) no-unsafe-git-network-operations > invalid > execGitWithTimeout("fetch", "fetch origin", { workdir }); [0.51ms]
(pass) no-unsafe-git-network-operations > invalid > await execAsync("git ls-remote origin"); [0.67ms]

tests/consolidated-utilities/variable-naming-fixer.test.ts:
üè∑Ô∏è  Processing 1 TypeScript files for variable naming fixes...
‚úÖ Fixed 1 naming issues in /var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-jFXVz6/test.ts

üéØ Variable Naming Fix Results:
   Files processed: 1/1
   Total fixes applied: 1
   Success rate: 100.0%

üìä Fix type breakdown:
   underscore-prefix-mismatch: 1 fixes
(pass) Variable Naming Fixer Consolidated > Underscore Prefix Mismatches > should fix parameter definitions with underscores when usage has no underscore [4.73ms]
üè∑Ô∏è  Processing 1 TypeScript files for variable naming fixes...
‚úÖ Fixed 1 naming issues in /var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-1m9Jfm/test.ts

üéØ Variable Naming Fix Results:
   Files processed: 1/1
   Total fixes applied: 1
   Success rate: 100.0%

üìä Fix type breakdown:
   underscore-prefix-mismatch: 1 fixes
(pass) Variable Naming Fixer Consolidated > Underscore Prefix Mismatches > should fix variable declarations with underscores when usage has no underscore [2.40ms]
üè∑Ô∏è  Processing 1 TypeScript files for variable naming fixes...
‚úÖ Fixed 2 naming issues in /var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-0Pp6pI/test.ts

üéØ Variable Naming Fix Results:
   Files processed: 1/1
   Total fixes applied: 2
   Success rate: 100.0%

üìä Fix type breakdown:
   underscore-prefix-mismatch: 2 fixes
(pass) Variable Naming Fixer Consolidated > Underscore Prefix Mismatches > should handle destructuring with underscore mismatches [2.44ms]
üè∑Ô∏è  Processing 1 TypeScript files for variable naming fixes...

üéØ Variable Naming Fix Results:
   Files processed: 0/1
   Total fixes applied: 0
   Success rate: 0.0%
(pass) Variable Naming Fixer Consolidated > Boundary Validation - Should NOT Change > should NOT change intentionally unused parameters with underscores [1.19ms]
üè∑Ô∏è  Processing 1 TypeScript files for variable naming fixes...

üéØ Variable Naming Fix Results:
   Files processed: 0/1
   Total fixes applied: 0
   Success rate: 0.0%
(pass) Variable Naming Fixer Consolidated > Boundary Validation - Should NOT Change > should NOT change variables that are used with underscores consistently [0.85ms]
üè∑Ô∏è  Processing 1 TypeScript files for variable naming fixes...

üéØ Variable Naming Fix Results:
   Files processed: 0/1
   Total fixes applied: 0
   Success rate: 0.0%
(pass) Variable Naming Fixer Consolidated > Boundary Validation - Should NOT Change > should NOT change underscore patterns in strings or comments [1.09ms]
üè∑Ô∏è  Processing 1 TypeScript files for variable naming fixes...
(pass) Variable Naming Fixer Consolidated > Boundary Validation - Should NOT Change > should handle scope correctly - same variable names in different scopes [1.89ms]
üè∑Ô∏è  Processing 1 TypeScript files for variable naming fixes...
(pass) Variable Naming Fixer Consolidated > Error Handling > should handle files with syntax errors gracefully [1.87ms]
Error saving /var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-puKv87/test.ts: ENOENT: no such file or directory, open '/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-puKv87/test.ts'
    path: "/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-puKv87/test.ts",
 syscall: "open",
   errno: -2,
    code: "ENOENT"



üéØ Variable Naming Fix Results:
   Files processed: 0/1
   Total fixes applied: 0
   Success rate: 0.0%

üìä Fix type breakdown:
   underscore-prefix-mismatch: 1 fixes
üè∑Ô∏è  Processing 1 TypeScript files for variable naming fixes...

üéØ Variable Naming Fix Results:
   Files processed: 0/1
   Total fixes applied: 0
   Success rate: 0.0%
(pass) Variable Naming Fixer Consolidated > Error Handling > should handle non-existent patterns gracefully [1.44ms]
Error saving /var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-jggEOR/broken.ts: ENOENT: no such file or directory, open '/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-jggEOR/broken.ts'
    path: "/var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-jggEOR/broken.ts",
 syscall: "open",
   errno: -2,
    code: "ENOENT"



üéØ Variable Naming Fix Results:
   Files processed: 0/1
   Total fixes applied: 0
   Success rate: 0.0%

üìä Fix type breakdown:
   underscore-prefix-mismatch: 1 fixes
üè∑Ô∏è  Processing 1 TypeScript files for variable naming fixes...
‚úÖ Fixed 2 naming issues in /var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-LjDt7H/mixed.ts

üéØ Variable Naming Fix Results:
   Files processed: 1/1
   Total fixes applied: 2
   Success rate: 100.0%

üìä Fix type breakdown:
   underscore-prefix-mismatch: 2 fixes
(pass) Variable Naming Fixer Consolidated > Complex Scenarios > should handle mixed scenarios correctly [6.53ms]
(pass) Variable Naming Fixer Consolidated > Performance and Metrics > should provide accurate metrics [2.96ms]
üè∑Ô∏è  Processing 1 TypeScript files for variable naming fixes...
‚úÖ Fixed 1 naming issues in /var/folders/qg/bbhkjbqd5mx5ff1qhw0sctfc0000gn/T/variable-naming-test-kIGA5a/complex-syntax.ts

üéØ Variable Naming Fix Results:
   Files processed: 1/1
   Total fixes applied: 1
   Success rate: 100.0%

üìä Fix type breakdown:
   underscore-prefix-mismatch: 1 fixes
(pass) Variable Naming Fixer Consolidated > Integration with AST Analysis > should properly parse TypeScript files with complex syntax [2.72ms]

src/utils/test-utils/assertions.test.ts:
(pass) Custom Assertion Helpers > expectToMatch > should match a string against a regex pattern
(pass) Custom Assertion Helpers > expectToHaveLength > should verify array length [0.04ms]
(pass) Custom Assertion Helpers > expectToHaveLength > should verify string length [0.05ms]
(pass) Custom Assertion Helpers > expectToBeInstanceOf > should verify object instanceof [0.03ms]
(pass) Custom Assertion Helpers > expectToHaveProperty > should verify object has property [0.82ms]
(pass) Custom Assertion Helpers > expectToBeCloseTo > should compare floating point numbers with precision [0.06ms]
(pass) Custom Assertion Helpers > expectToContainEqual > should check if array contains an item with deep equality [0.63ms]

src/utils/test-utils/enhanced-utils.test.ts:
(pass) Enhanced Test Utilities > mockFunction > should create a type-safe mock function [0.07ms]
(pass) Enhanced Test Utilities > mockFunction > should allow changing implementation [0.02ms]
(pass) Enhanced Test Utilities > createPartialMock > should create a mock with provided implementations [0.05ms]
(pass) Enhanced Test Utilities > mockReadonlyProperty > should mock readonly properties [0.04ms]
(pass) Enhanced Test Utilities > createTestDeps > should create default test dependencies [0.10ms]
(pass) Enhanced Test Utilities > createTestDeps > should allow overriding specific methods [0.05ms]
(pass) Enhanced Test Utilities > withMockedDeps > should temporarily override dependencies [0.11ms]
(pass) Enhanced Test Utilities > Factory Functions > should create task data with defaults [0.07ms]
(pass) Enhanced Test Utilities > Factory Functions > should create task data with overrides [0.02ms]
(pass) Enhanced Test Utilities > Factory Functions > should create an array of task data [0.08ms]
(pass) Enhanced Test Utilities > Factory Functions > should create session data [0.04ms]
(pass) Enhanced Test Utilities > Integration Example > should demonstrate a complex test scenario [0.14ms]

src/utils/test-utils/centralized-service-mocks.test.ts:
(pass) Centralized Service Mock Factories > createMockSessionProvider > should create a mock SessionProvider with all required methods [0.78ms]
(pass) Centralized Service Mock Factories > createMockSessionProvider > should return default mock values [0.17ms]
(pass) Centralized Service Mock Factories > createMockSessionProvider > should allow method overrides [0.07ms]
(pass) Centralized Service Mock Factories > createMockGitService > should create a mock GitService with all required methods [0.08ms]
(pass) Centralized Service Mock Factories > createMockGitService > should return default mock values [0.13ms]
(pass) Centralized Service Mock Factories > createMockGitService > should allow method overrides [0.07ms]
(pass) Centralized Service Mock Factories > createMockTaskService > should create a mock TaskService with all required methods [0.06ms]
(pass) Centralized Service Mock Factories > createMockTaskService > should return default mock values [0.07ms]
(pass) Centralized Service Mock Factories > createMockTaskService > should allow method overrides [0.11ms]

src/utils/test-utils/compatibility.test.ts:

# Unhandled error between tests
-------------------------------
220 |       foo: (compat.createCompatMock() = mock(() => "mocked foo")),
                  ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/utils/test-utils/compatibility.test.ts:220:13

221 |       bar: (compat.createCompatMock() = mock(() => "mocked bar")),
                  ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/utils/test-utils/compatibility.test.ts:221:13

236 |       baz: (compat.createCompatMock() = mock(() => "mocked baz")),
                  ^
error: Invalid assignment target
    at /Users/edobry/.local/state/minsky/sessions/task176/src/utils/test-utils/compatibility.test.ts:236:13
-------------------------------


src/utils/test-utils/mocking.test.ts:
(pass) Mocking Utilities > createMock creates a proper mock function [0.69ms]
(pass) Mocking Utilities > createMock without implementation returns a mock that returns undefined [0.02ms]
(pass) Mocking Utilities > createSpyOn spies on object methods [0.07ms]
(pass) Mocking Utilities > createSpyOn throws error when trying to spy on non-function property [0.04ms]

src/utils/test-utils/individual-service-factories.test.ts:
(pass) Individual Service Mock Factories > createMockSessionProvider > creates a mock with default behavior [0.10ms]
(pass) Individual Service Mock Factories > createMockSessionProvider > uses provided sessions array [0.07ms]
(pass) Individual Service Mock Factories > createMockSessionProvider > accepts method overrides [0.06ms]
(pass) Individual Service Mock Factories > createMockSessionProvider > supports empty options [0.02ms]
(pass) Individual Service Mock Factories > createMockGitService > creates a mock with default behavior [0.04ms]
(pass) Individual Service Mock Factories > createMockGitService > supports branch existence configuration [0.06ms]
(pass) Individual Service Mock Factories > createMockGitService > tracks git call count [0.04ms]
(pass) Individual Service Mock Factories > createMockGitService > accepts method overrides [0.04ms]
(pass) Individual Service Mock Factories > createMockGitService > handles non-PR git commands [0.01ms]
159 |       const mockService = createMockTaskService();
160 | 
161 |       expect(await mockService.getTask("123")).toBeNull();
162 |       expect(await mockService.listTasks()).toEqual([]);
163 |       expect(await mockService.getTaskStatus("123")).toBeUndefined();
164 |       expect(await mockService.deleteTask("123")).toBe(false);
                                                        ^
error: expect(received).toBe(expected)

Expected: false
Received: true

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/utils/test-utils/individual-service-factories.test.ts:164:51)
(fail) Individual Service Mock Factories > createMockTaskService > creates a mock with default behavior [0.16ms]
(pass) Individual Service Mock Factories > createMockTaskService > creates tasks with proper structure [0.04ms]
(pass) Individual Service Mock Factories > createMockTaskService > supports additional properties [0.03ms]
211 |         deleteTask: () => Promise.resolve(true),
212 |       };
213 | 
214 |       const mockService = createMockTaskService(customOptions);
215 | 
216 |       expect(await mockService.getTask("any")).toEqual(customTask);
                                                     ^
error: expect(received).toEqual(expected)

Expected: [32m{
  id: "#custom",
  title: "Custom Task",
  status: "IN_PROGRESS",
}[0m
Received: [31mnull[0m

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/utils/test-utils/individual-service-factories.test.ts:216:48)
(fail) Individual Service Mock Factories > createMockTaskService > accepts method overrides [0.32ms]
(pass) Individual Service Mock Factories > createMockTaskService > supports custom task creation [0.06ms]
(pass) Individual Service Mock Factories > createMockTaskService > handles empty options [0.04ms]
277 |       const branchResult = await mockGitService.execInRepository("/test", "show-ref pr/INT-001");
278 |       expect(branchResult).toBe("ref-exists");
279 | 
280 |       // Test task service
281 |       const task = await mockTaskService.getTask("INT-001");
282 |       expect(task?.title).toBe("Integration Task");
                                ^
error: expect(received).toBe(expected)

Expected: "Integration Task"
Received: undefined

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/utils/test-utils/individual-service-factories.test.ts:282:27)
(fail) Individual Service Mock Factories > Factory Integration > all factories work together in a test scenario [0.10ms]
(pass) Individual Service Mock Factories > Factory Integration > factories can be used independently [0.05ms]

src/domain/configuration/index.test.ts:
(pass) Custom Configuration System > CustomConfigurationProvider > should implement getConfig() method [0.02ms]
(pass) Custom Configuration System > CustomConfigurationProvider > should implement get() method with path access [0.06ms]
(pass) Custom Configuration System > CustomConfigurationProvider > should implement has() method for path checking [0.03ms]
(pass) Custom Configuration System > CustomConfigurationProvider > should implement reload() method [0.71ms]
(pass) Custom Configuration System > CustomConfigurationProvider > should implement getMetadata() method
(pass) Custom Configuration System > CustomConfigurationProvider > should implement validate() method [0.07ms]
(pass) Custom Configuration System > CustomConfigurationProvider > should provide consistent configuration structure
73 |       expect(config.ai).toBeDefined();
74 |     });
75 | 
76 |     test("should handle configuration overrides consistently", () => {
77 |       const config = provider.getConfig();
78 |       expect(config.backend).toBe("json-file"); // From overrides
                                  ^
error: expect(received).toBe(expected)

Expected: "json-file"
Received: "markdown"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/configuration/index.test.ts:78:30)
(fail) Custom Configuration System > CustomConfigurationProvider > should handle configuration overrides consistently [0.10ms]
(pass) Custom Configuration System > Configuration Initialization > should initialize with custom factory [0.64ms]
 98 |       await initializeConfiguration(factory, {
 99 |         overrides: { backend: "custom-override" },
100 |       });
101 | 
102 |       const config = getConfiguration();
103 |       expect(config.backend).toBe("custom-override");
                                   ^
error: expect(received).toBe(expected)

Expected: "custom-override"
Received: "markdown"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/configuration/index.test.ts:103:30)
(fail) Custom Configuration System > Configuration Initialization > should support configuration overrides [0.55ms]
Custom config load time: 1ms
(pass) Custom Configuration System > Performance > should load configuration within acceptable time limits [0.58ms]
Average access time: 0.001ms per operation
(pass) Custom Configuration System > Performance > should access configuration values efficiently [0.59ms]
(pass) Custom Configuration System > Error Handling > should handle missing configuration paths gracefully
(pass) Custom Configuration System > Error Handling > should validate configuration structure [0.02ms]
(pass) Custom Configuration System > Configuration Factory > should create provider with default options [0.61ms]
167 |         overrides: { backend: "test-backend" },
168 |         enableCache: false,
169 |       });
170 | 
171 |       const config = provider.getConfig();
172 |       expect(config.backend).toBe("test-backend");
                                   ^
error: expect(received).toBe(expected)

Expected: "test-backend"
Received: "markdown"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/configuration/index.test.ts:172:30)
(fail) Custom Configuration System > Configuration Factory > should create provider with custom options [0.45ms]

src/domain/tasks/task-service-interface.test.ts:
(pass) TaskService Interface Compatibility > should provide setTaskStatus method [1.42ms]
(pass) TaskService Interface Compatibility > should have getTaskStatus method (ensures interface completeness) [0.08ms]
(pass) TaskService Interface Compatibility > should validate task status in setTaskStatus method [0.37ms]
(pass) TaskService Interface Compatibility > should maintain interface compatibility with existing commands [0.16ms]

src/domain/tasks/utils.test.ts:
(pass) normalizeTaskId > should normalize "#064" to "#064" (with # and leading zero) [0.06ms]
(pass) normalizeTaskId > should normalize "#64" to "#64" (with #, no leading zero)
(pass) normalizeTaskId > should normalize "064" to "#064" (no #, with leading zero)
(pass) normalizeTaskId > should normalize "64" to "#64" (no #, no leading zero)
(pass) normalizeTaskId > should normalize "task#064" to "#064" (with task# and leading zero)
(pass) normalizeTaskId > should normalize "task#64" to "#64" (with task#, no leading zero) [0.01ms]
(pass) normalizeTaskId > should normalize "TASK#64" to "#64" (with TASK# (uppercase), no leading zero)
(pass) normalizeTaskId > should normalize "  #64  " to "#64" (with whitespace)
(pass) normalizeTaskId > should normalize "task#0" to "#0" (task ID zero)
(pass) normalizeTaskId > should normalize "0" to "#0" (task ID zero numeric)
(pass) normalizeTaskId > should return null for invalid input "abc" (non-numeric) [0.01ms]
(pass) normalizeTaskId > should return null for invalid input "#abc" (# with non-numeric)
(pass) normalizeTaskId > should return null for invalid input "task#abc" (task# with non-numeric)
(pass) normalizeTaskId > should return null for invalid input "64a" (numeric followed by alpha)
(pass) normalizeTaskId > should return null for invalid input "a64" (alpha followed by numeric)
(pass) normalizeTaskId > should return null for invalid input "#" (only #)
(pass) normalizeTaskId > should return null for invalid input "task#" (only task#)
(pass) normalizeTaskId > should return null for invalid input "" (empty string)
(pass) normalizeTaskId > should return null for invalid input "   " (whitespace only)
(pass) normalizeTaskId > should return null for invalid input "null" (null input)
(pass) normalizeTaskId > should return null for invalid input "undefined" (undefined input)
(pass) normalizeTaskId > should return null for invalid input "123" (number input type)

src/domain/tasks/cli-mcp-consistency.test.ts:
113 |     const mcpTask = await getTaskFromParams({ taskId }, mcpDeps);
114 | 
115 |     // BUG: This test should fail because CLI and MCP return different data
116 |     // Expected: Both should return identical task data from special workspace
117 |     // Actual: CLI returns local workspace data, MCP returns special workspace data
118 |     expect(cliTask.title).toBe(mcpTask.title); // This will FAIL until bug is fixed
                                ^
error: expect(received).toBe(expected)

Expected: "Special workspace task"
Received: "Local workspace task"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/cli-mcp-consistency.test.ts:118:27)
(fail) CLI-MCP Task Database Consistency Bug > BUG: CLI and MCP should return identical task data for same task ID [2.79ms]
156 |     const cliTasks = await listTasksFromParams({ all: true }, cliDeps);
157 |     const mcpTasks = await listTasksFromParams({ all: true }, mcpDeps);
158 | 
159 |     // BUG: This should fail because CLI and MCP return different task lists
160 |     expect(cliTasks.length).toBe(mcpTasks.length); // Will FAIL - different number of tasks
161 |     expect(cliTasks.map((t) => t.title)).toEqual(mcpTasks.map((t) => t.title)); // Will FAIL - different tasks
                                               ^
error: expect(received).toEqual(expected)

  [
+   "Local workspace task"
-   "Special workspace task"
  ]

- Expected  - 1
+ Received  + 1

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/cli-mcp-consistency.test.ts:161:42)
(fail) CLI-MCP Task Database Consistency Bug > BUG: Task list should be identical between CLI and MCP [0.65ms]
189 |     // This should work once the bug is fixed
190 |     const task = await getTaskFromParams(params, fixedDeps);
191 | 
192 |     // Should return special workspace task data
193 |     expect(task.title).toBe("Special workspace task");
194 |     expect(task.specPath).toContain("999-special-workspace-task.md");
                                ^
error: Received value must be an array type, or both received and expected values must be strings.
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/cli-mcp-consistency.test.ts:194:27)
(fail) CLI-MCP Task Database Consistency Bug > EXPECTED: All task operations should use special workspace path [0.41ms]
(pass) Backend Capabilities System (Task #315) > MarkdownTaskBackend capabilities > should report accurate capabilities [0.07ms]
Backend does not support dependencies - use JSON backend or implement feature
Backend requires special workspace management
(pass) Backend Capabilities System (Task #315) > MarkdownTaskBackend capabilities > should provide capabilities discovery for backend selection [0.03ms]

src/domain/tasks/taskService-jsonFile-integration.test.ts:
(pass) TaskService Integration with Dependency Injection > Task Service DI Integration > should provide comprehensive task service capabilities [0.04ms]
(pass) TaskService Integration with Dependency Injection > Task Service DI Integration > should integrate with git service for task workflows [0.07ms]
(pass) TaskService Integration with Dependency Injection > Task Service DI Integration > should integrate with session management for task workflows [0.03ms]
(pass) TaskService Integration with Dependency Injection > Task Service DI Integration > should demonstrate workspace integration capabilities
(pass) TaskService Integration with Dependency Injection > DI Architecture Verification > should demonstrate comprehensive dependency integration [0.02ms]
(pass) TaskService Integration with Dependency Injection > DI Architecture Verification > should show zero real filesystem operations in integration testing [0.01ms]
(pass) TaskService Integration with Dependency Injection > DI Architecture Verification > should demonstrate integration testing benefits with DI [0.02ms]
(pass) TaskService Integration with Dependency Injection > DI Architecture Verification > should demonstrate task service DI readiness [0.02ms]
(pass) TaskService Integration with Dependency Injection > DI Architecture Verification > should show performance benefits of DI testing approach [0.03ms]

src/domain/tasks/jsonFileTaskBackend.test.ts:
(pass) JsonFileTaskBackend > storage operations > should initialize storage correctly
(pass) JsonFileTaskBackend > storage operations > should store and retrieve tasks [1.07ms]
(pass) JsonFileTaskBackend > storage operations > should update tasks [0.86ms]
(pass) JsonFileTaskBackend > storage operations > should delete tasks [0.82ms]
(pass) JsonFileTaskBackend > TaskBackend interface compliance > should implement getTasksData [0.19ms]
(pass) JsonFileTaskBackend > TaskBackend interface compliance > should implement saveTasksData [0.73ms]
(pass) JsonFileTaskBackend > TaskBackend interface compliance > should implement parseTasks
(pass) JsonFileTaskBackend > TaskBackend interface compliance > should implement formatTasks [0.10ms]
(pass) JsonFileTaskBackend > TaskBackend interface compliance > should handle task spec operations [1.47ms]
(pass) JsonFileTaskBackend > markdown compatibility > should parse markdown task format [0.21ms]
(pass) JsonFileTaskBackend > helper methods > should generate correct task spec paths
(pass) JsonFileTaskBackend > helper methods > should return correct workspace path [0.05ms]

src/domain/tasks/special-workspace-integration.test.ts:
(pass) Enhanced Workspace Integration > Enhanced TaskService Integration > should create TaskService with workspace resolution [0.94ms]
313 |         error: getErrorMessage(error as any),
314 |         repoUrl: this!.repoUrl,
315 |         workspacePath: this!.workspacePath,
316 |       });
317 | 
318 |       throw new Error(`Failed to create special workspace: ${getErrorMessage(error as any)}`);
                  ^
error: Failed to create special workspace: ENOENT: no such file or directory, open '/Users/edobry/.local/state/minsky/task-operations/.git/info/sparse-checkout'
      at createOptimizedWorkspace (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/workspace/special-workspace-manager.ts:318:13)
(fail) Enhanced Workspace Integration > Enhanced TaskService Integration > should handle repository-based workspace creation [1.14ms]
(pass) Enhanced Workspace Integration > Enhanced TaskService Integration > should support traditional TaskService creation [0.07ms]
(pass) Enhanced Workspace Integration > Architectural Benefits > should validate elimination of complex routing patterns
313 |         error: getErrorMessage(error as any),
314 |         repoUrl: this!.repoUrl,
315 |         workspacePath: this!.workspacePath,
316 |       });
317 | 
318 |       throw new Error(`Failed to create special workspace: ${getErrorMessage(error as any)}`);
                  ^
error: Failed to create special workspace: ENOENT: no such file or directory, open '/Users/edobry/.local/state/minsky/task-operations/.git/info/sparse-checkout'
      at createOptimizedWorkspace (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/workspace/special-workspace-manager.ts:318:13)
(fail) Enhanced Workspace Integration > Architectural Benefits > should demonstrate simplified workspace resolution [0.41ms]

src/domain/tasks/task-id-utils.test.ts:
(pass) Task ID Utilities for Task 283 > normalizeTaskIdForStorage > should convert display format to storage format [0.86ms]
(pass) Task ID Utilities for Task 283 > normalizeTaskIdForStorage > should keep storage format as-is [0.02ms]
(pass) Task ID Utilities for Task 283 > normalizeTaskIdForStorage > should handle task# prefix format [0.02ms]
(pass) Task ID Utilities for Task 283 > normalizeTaskIdForStorage > should strip multiple # prefixes
(pass) Task ID Utilities for Task 283 > normalizeTaskIdForStorage > should handle whitespace
(pass) Task ID Utilities for Task 283 > normalizeTaskIdForStorage > should return null for invalid input [0.03ms]
(pass) Task ID Utilities for Task 283 > normalizeTaskIdForStorage > should handle edge cases [0.01ms]
(pass) Task ID Utilities for Task 283 > formatTaskIdForDisplay > should add # prefix to storage format [0.03ms]
(pass) Task ID Utilities for Task 283 > formatTaskIdForDisplay > should keep display format as-is
(pass) Task ID Utilities for Task 283 > formatTaskIdForDisplay > should handle invalid input
(pass) Task ID Utilities for Task 283 > formatTaskIdForDisplay > should handle edge cases
(pass) Task ID Utilities for Task 283 > isStorageFormat > should identify storage format correctly [0.02ms]
(pass) Task ID Utilities for Task 283 > isStorageFormat > should reject display format
(pass) Task ID Utilities for Task 283 > isStorageFormat > should reject invalid formats
(pass) Task ID Utilities for Task 283 > isStorageFormat > should handle whitespace
(pass) Task ID Utilities for Task 283 > isDisplayFormat > should identify display format correctly [0.02ms]
(pass) Task ID Utilities for Task 283 > isDisplayFormat > should reject storage format
(pass) Task ID Utilities for Task 283 > isDisplayFormat > should reject invalid formats [0.02ms]
(pass) Task ID Utilities for Task 283 > isDisplayFormat > should handle whitespace
(pass) Task ID Utilities for Task 283 > convertTaskIdFormat > should convert to storage format [0.03ms]
(pass) Task ID Utilities for Task 283 > convertTaskIdFormat > should convert to display format [0.02ms]
(pass) Task ID Utilities for Task 283 > convertTaskIdFormat > should return null for invalid input
(pass) Task ID Utilities for Task 283 > isValidTaskIdInput > should accept valid formats [0.02ms]
(pass) Task ID Utilities for Task 283 > isValidTaskIdInput > should reject invalid formats
(pass) Task ID Utilities for Task 283 > getTaskIdNumber > should extract numbers from valid formats [0.02ms]
(pass) Task ID Utilities for Task 283 > getTaskIdNumber > should return null for invalid formats [0.01ms]
(pass) Task ID Utilities for Task 283 > getTaskIdNumber > should handle leading zeros correctly
(pass) Task ID Utilities for Task 283 > integration scenarios > should handle full workflow: input -> storage -> display [0.04ms]
(pass) Task ID Utilities for Task 283 > integration scenarios > should maintain data consistency [0.04ms]

src/domain/tasks/json-backend.test.ts:
19 |       // Ignore cleanup errors
20 |     }
21 |   });
22 | 
23 |   test("should create backend with explicit workspace path", async () => {
24 |     const backend = await createWorkspaceResolvingJsonBackend({
                               ^
ReferenceError: createWorkspaceResolvingJsonBackend is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/json-backend.test.ts:24:27)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/json-backend.test.ts:23:62)
(fail) Enhanced JSON Backend > should create backend with explicit workspace path [0.18ms]
30 |     expect(backend.name).toBe("json-file");
31 |     expect(backend.getWorkspacePath()).toBe(testDir);
32 |   });
33 | 
34 |   test("should resolve workspace using current directory", async () => {
35 |     const backend = await createWorkspaceResolvingJsonBackend({
                               ^
ReferenceError: createWorkspaceResolvingJsonBackend is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/json-backend.test.ts:35:27)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/json-backend.test.ts:34:60)
(fail) Enhanced JSON Backend > should resolve workspace using current directory [0.06ms]
40 |     expect(typeof backend.getWorkspacePath()).toBe("string");
41 |   });
42 | 
43 |   test("should handle database file path configuration", async () => {
44 |     const customDbPath = join(testDir, "my-tasks.json");
45 |     const backend = (await createWorkspaceResolvingJsonBackend({
                                ^
ReferenceError: createWorkspaceResolvingJsonBackend is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/json-backend.test.ts:45:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/json-backend.test.ts:43:58)
(fail) Enhanced JSON Backend > should handle database file path configuration [0.06ms]
50 | 
51 |     expect(backend.getStorageLocation()).toBe(customDbPath);
52 |   });
53 | 
54 |   test("should identify as in-tree backend when using special workspace", async () => {
55 |     const backend = (await createWorkspaceResolvingJsonBackend({
                                ^
ReferenceError: createWorkspaceResolvingJsonBackend is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/json-backend.test.ts:55:28)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/json-backend.test.ts:54:75)
(fail) Enhanced JSON Backend > should identify as in-tree backend when using special workspace [0.06ms]

src/domain/tasks/real-world-workflow.test.ts:
(pass) Real-World Workflow Testing > JSON Backend Real Storage > should actually create and store data in the correct location [0.71ms]
(pass) Real-World Workflow Testing > JSON Backend Real Storage > should default to process/tasks.json when no explicit path provided [0.06ms]
(pass) Real-World Workflow Testing > TaskService Integration > should work with JSON backend for complete task operations [0.85ms]
(pass) Real-World Workflow Testing > Error Handling > should handle missing process directory gracefully [0.38ms]

src/domain/tasks/taskService.test.ts:
(pass) TaskService > listTasks > should get tasks data and parse it [0.08ms]
(pass) TaskService > listTasks > should filter tasks by status if provided [0.04ms]
(pass) TaskService > listTasks > should return empty array if data retrieval fails [0.04ms]
(pass) TaskService > getTask > should find a task by ID [0.04ms]
(pass) TaskService > getTask > should find a task by ID without # prefix [0.03ms]
(pass) TaskService > getTask > should return null if task not found [0.02ms]
(pass) TaskService > getTaskStatus > should get a task's status [0.03ms]
(pass) TaskService > getTaskStatus > should return null if task not found [0.02ms]
(pass) TaskService > setTaskStatus > should update a task's status [0.06ms]
(pass) TaskService > setTaskStatus > should throw error for invalid status [0.04ms]
(pass) TaskService > setTaskStatus > should throw error if task not found [0.05ms]
(pass) TaskService > createTask > should create a new task from spec file [0.11ms]
(pass) TaskService > createTask > should throw error if spec file read fails [0.05ms]
(pass) TaskService > createTaskFromTitleAndDescription > should store proper spec path instead of temporary path [0.08ms]
(pass) TaskService > createTaskFromTitleAndDescription > integration: should create task with proper spec path using real backend [2.76ms]
(pass) TaskService > backend handling > should throw error for non-existent backend [0.06ms]
(pass) TaskService > backend handling > should use markdown backend by default [0.03ms]

src/domain/tasks/backend-workspace-integration.test.ts:
(skip) Backend Workspace Integration - Current Behavior > Current Markdown Backend Behavior > markdown backend should use special workspace when no local tasks.md
(pass) Backend Workspace Integration - Current Behavior > Current Markdown Backend Behavior > markdown backend should work with resolved workspace [0.04ms]
(pass) Backend Workspace Integration - Current Behavior > Current Markdown Backend Behavior > TaskService should work with markdown backend and resolved workspace [0.24ms]
140 |       error: getErrorMessage(error),
141 |       duration: `${(performance.now() - startTime).toFixed(2)}ms`,
142 |     });
143 | 
144 |     // Task operations CANNOT fall back to local workspace
145 |     throw new Error(`Task operations require special workspace. ${getErrorMessage(error)}`);
                ^
error: Task operations require special workspace. No task-operations workspace exists and no repository URL provided. Task operations require special workspace initialization.
      at resolveTaskWorkspacePath (/Users/edobry/.local/state/minsky/sessions/task176/src/utils/workspace-resolver.ts:145:11)
(fail) Backend Workspace Integration - Current Behavior > Current JSON Backend Behavior > json backend should use current directory for external files [0.66ms]
(pass) Backend Workspace Integration - Current Behavior > Current JSON Backend Behavior > json backend should work with resolved workspace
(pass) Backend Workspace Integration - Current Behavior > Current TaskService Integration > should work with pre-resolved workspace for markdown [0.15ms]
(pass) Backend Workspace Integration - Current Behavior > Current TaskService Integration > should work with pre-resolved workspace for json [0.26ms]
(skip) Backend Workspace Integration - Current Behavior > Current Complex Workflow > should handle full current workflow for markdown
(skip) Backend Workspace Integration - Current Behavior > Current Complex Workflow > should handle edge case: markdown with local tasks.md file
(pass) Target Backend Architecture - Self-Contained Workspace Resolution > Enhanced Markdown Backend > should handle workspace resolution internally with explicit path [0.11ms]
313 |         error: getErrorMessage(error as any),
314 |         repoUrl: this!.repoUrl,
315 |         workspacePath: this!.workspacePath,
316 |       });
317 | 
318 |       throw new Error(`Failed to create special workspace: ${getErrorMessage(error as any)}`);
                  ^
error: Failed to create special workspace: ENOENT: no such file or directory, open '/Users/edobry/.local/state/minsky/task-operations/.git/info/sparse-checkout'
      at createOptimizedWorkspace (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/workspace/special-workspace-manager.ts:318:13)
(fail) Target Backend Architecture - Self-Contained Workspace Resolution > Enhanced Markdown Backend > should handle current directory workspace resolution [0.42ms]
(skip) Target Backend Architecture - Self-Contained Workspace Resolution > Enhanced Markdown Backend > should handle special workspace resolution with repo URL
(pass) Target Backend Architecture - Self-Contained Workspace Resolution > Enhanced Markdown Backend > should work with task operations [0.07ms]
(pass) Target Backend Architecture - Self-Contained Workspace Resolution > Simplified Workflow > should eliminate external workspace resolution for explicit paths [0.08ms]
(skip) Target Backend Architecture - Self-Contained Workspace Resolution > Simplified Workflow > should eliminate external workspace resolution for repo URLs
(pass) Target Backend Architecture - Self-Contained Workspace Resolution > Simplified Workflow > should enable complete TaskService workflow with enhanced backends [0.11ms]
(skip) Target Backend Architecture - Self-Contained Workspace Resolution > Simplified Workflow > should support repository-based TaskService creation
313 |         error: getErrorMessage(error as any),
314 |         repoUrl: this!.repoUrl,
315 |         workspacePath: this!.workspacePath,
316 |       });
317 | 
318 |       throw new Error(`Failed to create special workspace: ${getErrorMessage(error as any)}`);
                  ^
error: Failed to create special workspace: ENOENT: no such file or directory, open '/Users/edobry/.local/state/minsky/task-operations/.git/info/sparse-checkout'
      at createOptimizedWorkspace (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/workspace/special-workspace-manager.ts:318:13)
(fail) Target Backend Architecture - Self-Contained Workspace Resolution > Simplified Workflow > should support auto-detection TaskService creation [0.34ms]
(pass) Target Backend Architecture - Self-Contained Workspace Resolution > Simplified Workflow > should support full configuration pattern [0.16ms]

src/domain/tasks/taskFunctions.test.ts:
(pass) Task Functions > normalizeTaskId > should return canonical form for valid IDs [0.85ms]
(pass) Task Functions > normalizeTaskId > should handle various prefix patterns [0.09ms]
(pass) Task Functions > normalizeTaskId > should return undefined for non-numeric input [0.02ms]
(pass) Task Functions > normalizeTaskId > should extract numeric portion from mixed formats
(pass) Task Functions > normalizeTaskId > should handle alphanumeric task IDs [0.02ms]
(pass) Task Functions > parseTasksFromMarkdown > should return empty array for empty content [0.01ms]
(pass) Task Functions > parseTasksFromMarkdown > should parse tasks from markdown content [0.08ms]
(pass) Task Functions > parseTasksFromMarkdown > should ignore tasks in code blocks [0.02ms]
(pass) Task Functions > formatTasksToMarkdown > should return empty string for empty array
(pass) Task Functions > formatTasksToMarkdown > should format tasks to markdown with one-liner format only [0.03ms]
(pass) Task Functions > formatTasksToMarkdown > should use task specPath if available [0.02ms]
(pass) Task Functions > getTaskById > should return null for empty input [0.05ms]
(pass) Task Functions > getTaskById > should find task by exact ID match [0.02ms]
(pass) Task Functions > getTaskById > should find task by ID without # prefix [0.02ms]
(pass) Task Functions > getTaskById > should handle numeric equivalence [0.02ms]
(pass) Task Functions > getNextTaskId > should return 001 for empty tasks array [0.03ms]
(pass) Task Functions > getNextTaskId > should find the maximum ID and increment it [0.03ms]
(pass) Task Functions > getNextTaskId > should handle non-sequential IDs
(pass) Task Functions > getNextTaskId > should pad with zeros
(pass) Task Functions > setTaskStatus > should update a task's status [0.05ms]
(pass) Task Functions > setTaskStatus > should work with task ID variations [0.01ms]
(pass) Task Functions > setTaskStatus > should return original array if task not found
(pass) Task Functions > setTaskStatus > should return original array if status is invalid
(pass) Task Functions > addTask > should add a new task to the array [0.03ms]
(pass) Task Functions > addTask > should replace an existing task with the same ID [0.02ms]
(pass) Task Functions > addTask > should generate an ID if not provided [0.01ms]
(pass) Task Functions > filterTasks > should return all tasks if no filter provided [0.03ms]
(pass) Task Functions > filterTasks > should filter by status [0.04ms]
(pass) Task Functions > filterTasks > should filter by ID [0.03ms]
(pass) Task Functions > filterTasks > should filter by title (string match) [0.02ms]
(pass) Task Functions > filterTasks > should filter by title (regex match) [0.02ms]
(pass) Task Functions > filterTasks > should filter by specPath existence [0.02ms]
(pass) Task Functions > filterTasks > should combine multiple filter criteria [0.03ms]
(pass) Task Functions > parseTaskSpecFromMarkdown > should parse task spec from markdown [0.02ms]
(pass) Task Functions > parseTaskSpecFromMarkdown > should handle specs without task ID [0.01ms]
(pass) Task Functions > parseTaskSpecFromMarkdown > should handle general heading format [0.01ms]
(pass) Task Functions > parseTaskSpecFromMarkdown > should return empty values for invalid input
(pass) Task Functions > formatTaskSpecToMarkdown > should format task spec to markdown with ID [0.02ms]
(pass) Task Functions > formatTaskSpecToMarkdown > should format task spec without ID
(pass) Task Functions > isValidTaskStatus > should validate correct statuses
(pass) Task Functions > isValidTaskStatus > should reject invalid statuses

src/domain/tasks/configuration-integration.test.ts:
(pass) Configuration Integration > createConfiguredTaskService should use configuration to resolve backend [1.49ms]
(pass) Configuration Integration > createConfiguredTaskService should fall back to default when configuration fails [0.10ms]
(pass) Configuration Integration > createConfiguredTaskService should respect explicit backend parameter [0.53ms]

src/domain/tasks/githubIssuesTaskBackend.test.ts:
(pass) GitHubIssuesTaskBackend > configuration > should create instance with correct configuration [0.03ms]
(pass) GitHubIssuesTaskBackend > configuration > should initialize with custom status labels [0.15ms]
(pass) GitHubIssuesTaskBackend > parseTasks > should parse GitHub issues into TaskData objects [0.16ms]
(pass) GitHubIssuesTaskBackend > parseTasks > should handle invalid JSON gracefully
(pass) GitHubIssuesTaskBackend > formatTasks > should format TaskData objects for GitHub API [0.04ms]
(pass) GitHubIssuesTaskBackend > parseTaskSpec > should parse task specification content [0.07ms]
135 |         },
136 |       };
137 | 
138 |       const _result = backend.formatTaskSpec(spec);
139 | 
140 |       expect(_result).toContain("# Task #001: Test Task");
                            ^
error: expect(received).toContain(expected)

Expected to contain: "# Task #001: Test Task"
Received: "# Task 001: Test Task\n\n## Description\nTest description\n\n## GitHub Issue\n- Issue: #1\n- URL: https://github.com/test/repo/issues/1\n- State: open\n\n"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/githubIssuesTaskBackend.test.ts:140:23)
(fail) GitHubIssuesTaskBackend > formatTaskSpec > should format task specification data [0.12ms]
(pass) GitHubIssuesTaskBackend > getTaskSpecPath > should generate correct spec path
(pass) GitHubIssuesTaskBackend > getTaskSpecPath > should handle task ID without # prefix
(pass) GitHubIssuesTaskBackend > getTaskSpecPath > should normalize title for filename

src/domain/tasks/taskConstants.test.ts:
(pass) Task Constants and Utilities > Basic Constants > should have all required task statuses [0.04ms]
(pass) Task Constants and Utilities > Basic Constants > should have bidirectional mapping between status and checkbox [0.02ms]
(pass) Task Constants and Utilities > Regex Patterns > should match valid task lines [0.06ms]
(pass) Task Constants and Utilities > Regex Patterns > should not match invalid task lines [0.01ms]
(pass) Task Constants and Utilities > Parsing Utilities > should parse valid task lines correctly [0.03ms]
(pass) Task Constants and Utilities > Parsing Utilities > should return null for invalid task lines [0.01ms]
(pass) Task Constants and Utilities > Parsing Utilities > should replace checkbox status correctly [0.03ms]
(pass) Task Constants and Utilities > Parsing Utilities > should get status from checkbox correctly [0.02ms]
(pass) Task Constants and Utilities > Parsing Utilities > should get checkbox from status correctly
(pass) Task Constants and Utilities > Parsing Utilities > should validate task-like lines correctly [0.03ms]
(pass) Task Constants and Utilities > Status Validation > should validate valid statuses [0.01ms]
(pass) Task Constants and Utilities > Status Validation > should reject invalid statuses
(pass) Task Constants and Utilities > Dynamic Pattern Generation > should generate patterns that include all status characters [0.02ms]
(pass) Task Constants and Utilities > Dynamic Pattern Generation > should handle new status additions gracefully [0.02ms]

src/domain/tasks/taskCommands.test.ts:
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should return BLOCKED status for task 155 with [~] checkbox [0.26ms]
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should return TODO status for task 156 with [ ] checkbox [0.10ms]
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should return IN_PROGRESS status for task 157 with [+] checkbox [0.16ms]
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should return DONE status for task 158 with [x] checkbox [0.24ms]
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should throw error when task not found [0.13ms]
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should handle task ID normalization [0.06ms]
(pass) Interface-Agnostic Task Command Functions > getTaskStatusFromParams > should handle custom repo path [0.09ms]
(pass) Interface-Agnostic Task Command Functions > getTaskFromParams > should get task by ID [0.12ms]
(pass) Interface-Agnostic Task Command Functions > getTaskFromParams > should throw error when task not found [0.03ms]
(pass) Interface-Agnostic Task Command Functions > getTaskFromParams > should handle task ID normalization [0.09ms]
(pass) Interface-Agnostic Task Command Functions > getTaskFromParams > should handle custom repo path [0.10ms]
(pass) Interface-Agnostic Task Command Functions > listTasksFromParams > should list all tasks when no filter is provided [0.08ms]
(pass) Interface-Agnostic Task Command Functions > listTasksFromParams > should filter tasks by status [0.13ms]
(pass) Interface-Agnostic Task Command Functions > listTasksFromParams > should filter out DONE tasks when all is false [0.07ms]
(pass) Interface-Agnostic Task Command Functions > setTaskStatusFromParams > should set task status [1.23ms]
(pass) Interface-Agnostic Task Command Functions > setTaskStatusFromParams > should throw error when task not found [0.12ms]
(pass) Interface-Agnostic Task Command Functions > setTaskStatusFromParams > should handle task ID normalization [0.50ms]
(pass) Interface-Agnostic Task Command Functions > Parameter Validation > should validate task ID format [0.19ms]
(pass) Interface-Agnostic Task Command Functions > Parameter Validation > should handle empty task ID [0.06ms]
(pass) Interface-Agnostic Task Command Functions > Parameter Validation > should handle backend parameter [0.13ms]

src/domain/tasks/markdown-backend-workspace-architecture.test.ts:

# Unhandled error between tests
-------------------------------
error: Cannot find module '../markdownTaskBackend' from '/Users/edobry/.local/state/minsky/sessions/task176/src/domain/tasks/markdown-backend-workspace-architecture.test.ts'
-------------------------------


src/domain/workspace/session-path-resolver.test.ts:
(pass) SessionPathResolver > validateAndResolvePath > should resolve relative paths within session [0.93ms]
(pass) SessionPathResolver > validateAndResolvePath > should resolve current directory reference
(pass) SessionPathResolver > validateAndResolvePath > should throw error for path traversal outside session [0.31ms]
(pass) SessionPathResolver > validateAndResolvePath > should throw error for absolute paths outside session
(pass) SessionPathResolver > validateAndResolvePath > should handle complex path traversal attempts [0.01ms]
(pass) SessionPathResolver > validateAndResolvePath > should allow absolute paths within session [0.01ms]
(pass) SessionPathResolver > isPathWithinSession > should return true for paths within session [0.02ms]
(pass) SessionPathResolver > isPathWithinSession > should return false for paths outside session
(pass) SessionPathResolver > isPathWithinSession > should return true for session root
(pass) SessionPathResolver > absoluteToRelative > should convert absolute path to relative [0.01ms]
(pass) SessionPathResolver > absoluteToRelative > should return null for paths outside session
(pass) SessionPathResolver > absoluteToRelative > should return '.' for session root
(pass) SessionPathResolver > getRelativePathFromSession > should get relative path from user input [0.01ms]
(pass) SessionPathResolver > getRelativePathFromSession > should normalize relative path from user input
(pass) SessionPathResolver > getRelativePathFromSession > should return '.' for session root reference
(pass) SessionPathResolver > validateMultiplePaths > should validate multiple valid paths [0.05ms]
(pass) SessionPathResolver > validateMultiplePaths > should throw error if any path is invalid [0.04ms]
(pass) SessionPathResolver > createSafePath > should create safe path from components [0.02ms]
(pass) SessionPathResolver > createSafePath > should throw error for unsafe path components [0.01ms]

src/domain/utils/package-manager.test.ts:
(pass) Package Manager Utilities with Dependency Injection > detectPackageManager > detects bun from bun.lock [0.14ms]
(pass) Package Manager Utilities with Dependency Injection > detectPackageManager > detects yarn from yarn.lock
(pass) Package Manager Utilities with Dependency Injection > detectPackageManager > detects pnpm from pnpm-lock.yaml [0.01ms]
(pass) Package Manager Utilities with Dependency Injection > detectPackageManager > detects npm from package-lock.json [0.02ms]
(pass) Package Manager Utilities with Dependency Injection > detectPackageManager > defaults to npm if only package.json exists [0.01ms]
(pass) Package Manager Utilities with Dependency Injection > detectPackageManager > returns undefined if no package files exist [0.02ms]
(pass) Package Manager Utilities with Dependency Injection > getInstallCommand > returns correct command for bun [0.02ms]
(pass) Package Manager Utilities with Dependency Injection > getInstallCommand > returns correct command for npm
(pass) Package Manager Utilities with Dependency Injection > getInstallCommand > returns correct command for yarn
(pass) Package Manager Utilities with Dependency Injection > getInstallCommand > returns correct command for pnpm
(pass) Package Manager Utilities with Dependency Injection > getInstallCommand > returns undefined for unknown package manager
(pass) Package Manager Utilities with Dependency Injection > installDependencies > successfully installs dependencies [0.16ms]
(pass) Package Manager Utilities with Dependency Injection > installDependencies > uses provided package manager if specified [0.03ms]
(pass) Package Manager Utilities with Dependency Injection > installDependencies > handles no package manager detected [0.04ms]
(pass) Package Manager Utilities with Dependency Injection > installDependencies > handles unsupported package manager [0.02ms]
(pass) Package Manager Utilities with Dependency Injection > installDependencies > handles installation errors [0.09ms]
(pass) Package Manager Utilities with Dependency Injection > installDependencies > respects quiet option for stdio [0.04ms]
(pass) Package Manager Utilities with Dependency Injection > installDependencies > uses inherit stdio when not quiet [0.03ms]

src/domain/utils/logger.test.ts:
(pass) Logger > getLogMode > should return HUMAN when configuration mode is set to HUMAN
(pass) Logger > getLogMode > should return STRUCTURED when configuration mode is set to STRUCTURED [0.05ms]
(pass) Logger > getLogMode > should default to HUMAN when mode is auto and TTY is available [0.02ms]
(pass) Logger > getLogMode > should default to STRUCTURED when mode is auto and TTY is not available
(pass) Logger > createConfigurableLogger > should create logger with configuration [0.43ms]
(pass) Logger > createConfigurableLogger > should create logger with STRUCTURED mode [0.12ms]
(pass) Logger > createConfigurableLogger > should expose logger methods [0.06ms]
(pass) Logger > createConfigurableLogger > should support dependency injection for testing [0.10ms]
(pass) Logger > createConfigurableLogger > should handle different log levels [0.28ms]
(pass) Logger > createConfigurableLogger > should isolate logger instances [0.21ms]
(pass) Logger > configuration integration > should maintain backward compatibility [0.18ms]
(pass) Logger > configuration integration > should support enableAgentLogs configuration [0.17ms]

src/domain/storage/database-integrity-checker.test.ts:
(pass) DatabaseIntegrityChecker > File Format Detection > should detect valid SQLite format [2.98ms]
(pass) DatabaseIntegrityChecker > File Format Detection > should detect valid JSON format [0.60ms]
(pass) DatabaseIntegrityChecker > File Format Detection > should detect corrupted JSON format [0.92ms]
(pass) DatabaseIntegrityChecker > File Format Detection > should detect empty file [0.35ms]
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id F8AE:10EFFD:B312E1:1687F27:68890473 in 98ms
(pass) DatabaseIntegrityChecker > File Format Detection > should detect missing file [0.23ms]
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id F8AD:2EC978:C5783F:18D0ED6:68890473 in 100ms
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id F8A9:A715D:D16486:1A51BD0:68890473 in 102ms
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id F8B0:36EDC4:BF7F45:18192FC:68890473 in 105ms
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id F8A7:1FB0E3:C204C9:1865F1B:68890473 in 105ms
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id F8A8:174C4D:D2D8D8:1A7C329:68890473 in 109ms
(pass) DatabaseIntegrityChecker > Format Mismatch Detection > should detect JSON file when SQLite expected [0.50ms]
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id F8AA:E57A3:BEE987:17FDB5C:68890473 in 111ms
GET /repos/test-owner/test-repo/labels/custom%3Atodo - 401 with id F8AF:E00BE:C0B942:183B576:68890473 in 114ms
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id F8B1:1E671F:D59533:1AD3903:68890473 in 122ms
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id F8AB:304915:CAB648:197E19F:68890473 in 121ms
(pass) DatabaseIntegrityChecker > Format Mismatch Detection > should detect SQLite file when JSON expected [1.29ms]
(pass) DatabaseIntegrityChecker > Backup File Detection > should find backup files with standard patterns [1.25ms]
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id F8AE:10EFFD:B3130D:1687F77:68890473 in 43ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id F8AD:2EC978:C5786C:18D0F46:68890473 in 47ms
(pass) DatabaseIntegrityChecker > Backup File Detection > should detect session count in JSON backups [0.74ms]
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id F8B0:36EDC4:BF7F87:181937B:68890473 in 46ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id F8AA:E57A3:BEE9B0:17FDBB5:68890473 in 43ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id F8A8:174C4D:D2D91F:1A7C3C0:68890473 in 45ms
GET /repos/test-owner/test-repo/labels/custom%3Ain-progress - 401 with id F8AF:E00BE:C0B985:183B5F6:68890474 in 44ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id F8A7:1FB0E3:C2050A:1865F6F:68890473 in 53ms
GET /repos/test-owner/test-repo/labels/minsky%3Atodo - 401 with id F8AC:3816DB:C0CF45:184104C:68890473 in 158ms
(pass) DatabaseIntegrityChecker > SQLite Integrity Validation > should validate SQLite database integrity [1.96ms]
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id F8A9:A715D:D164C9:1A51C46:68890473 in 61ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id F8B1:1E671F:D59574:1AD3995:68890474 in 45ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id F8AB:304915:CAB694:197E211:68890474 in 46ms
(pass) DatabaseIntegrityChecker > SQLite Integrity Validation > should detect SQLite database without sessions table [1.64ms]
(pass) DatabaseIntegrityChecker > SQLite Integrity Validation > should detect empty SQLite database [1.30ms]
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id F8AE:10EFFD:B3134A:1687FD4:68890474 in 50ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id F8AA:E57A3:BEE9E5:17FDC13:68890474 in 43ms
(pass) DatabaseIntegrityChecker > JSON Validation > should validate JSON structure [0.48ms]
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id F8AD:2EC978:C578A4:18D0FAE:68890474 in 53ms
GET /repos/test-owner/test-repo/labels/custom%3Ain-review - 401 with id F8AF:E00BE:C0B9C0:183B664:68890474 in 45ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id F8B0:36EDC4:BF7FBC:18193F1:68890474 in 53ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id F8A9:A715D:D16521:1A51CFC:68890474 in 43ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id F8AB:304915:CAB6C3:197E295:68890474 in 42ms
(pass) DatabaseIntegrityChecker > JSON Validation > should detect JSON without sessions array [0.50ms]
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id F8AC:3816DB:C0CFBC:1841127:68890474 in 52ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id F8A8:174C4D:D2D95B:1A7C43D:68890474 in 56ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id F8B1:1E671F:D595BB:1AD39FD:68890474 in 50ms
(pass) DatabaseIntegrityChecker > JSON Validation > should detect empty JSON sessions array [0.61ms]
GET /repos/test-owner/test-repo/labels/minsky%3Ain-progress - 401 with id F8A7:1FB0E3:C20544:1865FCE:68890474 in 69ms
(pass) DatabaseIntegrityChecker > Suggested Actions > should suggest repair for corrupted database [0.54ms]
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id F8AE:10EFFD:B3137F:168806E:68890474 in 47ms
GET /repos/test-owner/test-repo/labels/custom%3Adone - 401 with id F8AF:E00BE:C0B9F7:183B6FA:68890474 in 40ms
(pass) DatabaseIntegrityChecker > Suggested Actions > should suggest initialization for missing database [0.26ms]
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id F8AA:E57A3:BEEA17:17FDC6C:68890474 in 49ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id F8B0:36EDC4:BF8004:1819475:68890474 in 43ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id F8A9:A715D:D16561:1A51D6B:68890474 in 43ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id F8AC:3816DB:C0CFF9:1841195:68890474 in 46ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id F8A8:174C4D:D2D9A2:1A7C4E7:68890474 in 46ms
(pass) DatabaseIntegrityChecker > Suggested Actions > should prioritize high-priority actions [0.60ms]
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id F8AB:304915:CAB6F8:197E316:68890474 in 56ms
(pass) DatabaseIntegrityChecker > Integrity Report Formatting > should format comprehensive integrity report [3.54ms]
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id F8AD:2EC978:C578E5:18D1031:68890474 in 72ms
GET /repos/test-owner/test-repo/labels/minsky%3Ain-review - 401 with id F8A7:1FB0E3:C20587:1866092:68890474 in 45ms
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id F8B1:1E671F:D595EB:1AD3A89:68890474 in 61ms
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id F8AE:10EFFD:B313B4:16880E9:68890474 in 39ms
(pass) DatabaseIntegrityChecker > Integrity Report Formatting > should format report for valid database [1.28ms]
GET /repos/test-owner/test-repo/labels/custom%3Ablocked - 401 with id F8AF:E00BE:C0BA33:183B774:68890474 in 42ms
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id F8AA:E57A3:BEEA52:17FDCD7:68890474 in 48ms
(pass) DatabaseIntegrityChecker > Error Handling > should handle permission errors gracefully [0.18ms]
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id F8AC:3816DB:C0D036:1841217:68890474 in 40ms
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id F8A9:A715D:D16596:1A51DE8:68890474 in 52ms
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id F8A8:174C4D:D2D9F1:1A7C56D:68890474 in 48ms
(pass) DatabaseIntegrityChecker > Error Handling > should handle invalid file paths gracefully [0.16ms]
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id F8AD:2EC978:C57951:18D10DA:68890474 in 42ms
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id F8AB:304915:CAB742:197E3A4:68890474 in 51ms
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id F8B0:36EDC4:BF8038:18194DE:68890474 in 70ms
(pass) DatabaseIntegrityChecker > Edge Cases > should handle extremely large backup directories [10.08ms]
GET /repos/test-owner/test-repo/labels/minsky%3Adone - 401 with id F8A7:1FB0E3:C205B6:18660FB:68890474 in 55ms
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id F8AE:10EFFD:B313E2:1688159:68890474 in 51ms
GET /repos/test-owner/test-repo/labels/custom%3Aclosed - 401 with id F8AF:E00BE:C0BA7A:183B7ED:68890474 in 43ms
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id F8AA:E57A3:BEEA82:17FDD4C:68890474 in 46ms
(pass) DatabaseIntegrityChecker > Edge Cases > should handle backup files with different extensions [0.80ms]
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id F8AC:3816DB:C0D069:184126E:68890474 in 47ms
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id F8A9:A715D:D165E2:1A51E76:68890474 in 45ms
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id F8B1:1E671F:D5964B:1AD3B10:68890474 in 74ms

src/domain/storage/json-file-storage.test.ts:
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id F8A8:174C4D:D2DA33:1A7C605:68890474 in 49ms
(pass) JsonFileStorage Core Tests > Core CRUD Operations > should create and retrieve entities [0.38ms]
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id F8AD:2EC978:C5797C:18D1151:68890474 in 41ms
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id F8B0:36EDC4:BF80AF:1819589:68890474 in 43ms
(pass) JsonFileStorage Core Tests > Core CRUD Operations > should update entities [0.56ms]
GET /repos/test-owner/test-repo/labels/minsky%3Ablocked - 401 with id F8A7:1FB0E3:C205FE:186617A:68890474 in 46ms
(pass) JsonFileStorage Core Tests > Core CRUD Operations > should delete entities [0.42ms]
(pass) JsonFileStorage Core Tests > Core CRUD Operations > should get all entities [0.62ms]
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id F8AA:E57A3:BEEAB5:17FDDCE:68890474 in 43ms
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id F8AB:304915:CAB78D:197E431:68890474 in 77ms
(pass) JsonFileStorage Core Tests > State Management > should read and write state [0.34ms]
(pass) JsonFileStorage Core Tests > Error Handling > should handle non-existent entities gracefully [0.27ms]
GET /repos/test-owner/test-repo/labels/minsky%3Aclosed - 401 with id F8A8:174C4D:D2DA93:1A7C6B6:68890474 in 46ms
(pass) JsonFileStorage Core Tests > Persistence > should persist data across storage instances [0.40ms]
(pass) JsonFileStorage Core Tests > Persistence > should handle storage location correctly [0.01ms]

src/domain/git/clone-operations.test.ts:
(pass) Clone Operations with Dependency Injection > Successful clone operations > should clone repository successfully [0.29ms]
(pass) Clone Operations with Dependency Injection > Successful clone operations > should handle clone with default target directory [0.04ms]
(pass) Clone Operations with Dependency Injection > Successful clone operations > should support various repository URL formats [0.04ms]
(pass) Clone Operations with Dependency Injection > Clone error handling > should handle nonexistent repository [0.06ms]
(pass) Clone Operations with Dependency Injection > Clone error handling > should handle local repository that doesn't exist [0.03ms]
(pass) Clone Operations with Dependency Injection > DI architecture verification > should use dependency injection for git operations [0.01ms]
(pass) Clone Operations with Dependency Injection > DI architecture verification > should provide consistent mocked behavior [0.04ms]
(pass) Clone Operations with Dependency Injection > DI architecture verification > should demonstrate zero real git operations [0.03ms]

src/domain/git/repository-operations.test.ts:
(pass) Repository Operations with Dependency Injection > should have commitWithDependencies method available
(pass) Repository Operations with Dependency Injection > should have stashChangesWithDependencies method available
(pass) Repository Operations with Dependency Injection > should have popStashWithDependencies method available
(pass) Repository Operations with Dependency Injection > should have mergeBranchWithDependencies method available
(pass) Repository Operations with Dependency Injection > should have stageAllWithDependencies method available
(pass) Repository Operations with Dependency Injection > should have stageModifiedWithDependencies method available
(pass) Repository Operations with Dependency Injection > should have pullLatestWithDependencies method available
49 |     expect(gitService.pullLatestWithDependencies).toBeDefined();
50 |     expect(typeof gitService.pullLatestWithDependencies).toBe("function");
51 |   });
52 | 
53 |   test("should have cloneWithDependencies method available", () => {
54 |     expect(gitService.cloneWithDependencies).toBeDefined();
                                                  ^
error: expect(received).toBeDefined()

Received: undefined

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/git/repository-operations.test.ts:54:46)
(fail) Repository Operations with Dependency Injection > should have cloneWithDependencies method available [0.12ms]
(pass) Repository Operations with Dependency Injection > should create GitService with base directory [0.02ms]

src/domain/git/conflict-detection.test.ts:
(pass) ConflictDetectionService with Phase 2 DI Enhancement Demonstration > Current Service Architecture Analysis > should demonstrate static service interface availability [0.05ms]
(pass) ConflictDetectionService with Phase 2 DI Enhancement Demonstration > Current Service Architecture Analysis > should demonstrate service instantiation capability
(pass) ConflictDetectionService with Phase 2 DI Enhancement Demonstration > Current Service Architecture Analysis > should identify Phase 2 enhancement opportunities [0.03ms]
(pass) ConflictDetectionService with Phase 2 DI Enhancement Demonstration > Phase 2 DI Enhancement Strategy Demonstration > should demonstrate enhanced service architecture concept [0.01ms]
(pass) ConflictDetectionService with Phase 2 DI Enhancement Demonstration > Phase 2 DI Enhancement Strategy Demonstration > should demonstrate integration with existing DI infrastructure [0.01ms]
(pass) ConflictDetectionService with Phase 2 DI Enhancement Demonstration > Phase 2 DI Enhancement Strategy Demonstration > should demonstrate testing benefits of Phase 2 enhancement [0.02ms]
(pass) ConflictDetectionService with Phase 2 DI Enhancement Demonstration > Phase 2 DI Enhancement Strategy Demonstration > should show Phase 2 implementation strategy
(pass) ConflictDetectionService with Phase 2 DI Enhancement Demonstration > Integration Readiness Verification > should demonstrate comprehensive DI infrastructure readiness
(pass) ConflictDetectionService with Phase 2 DI Enhancement Demonstration > Integration Readiness Verification > should show createPartialMock utility for Phase 2 enhancement [0.02ms]
(pass) ConflictDetectionService with Phase 2 DI Enhancement Demonstration > Integration Readiness Verification > should demonstrate Phase 2 service integration potential [0.02ms]
(pass) ConflictDetectionService with Phase 2 DI Enhancement Demonstration > Current Service Functionality > should instantiate service without errors [0.01ms]
(pass) ConflictDetectionService with Phase 2 DI Enhancement Demonstration > Current Service Functionality > should have expected ConflictType and ConflictSeverity enums [0.02ms]

src/domain/git/git-service-core.test.ts:
(pass) GitService > should be able to work with mocked git service [0.02ms]
(pass) GitService > should get repository status [0.06ms]
(pass) GitService > execInRepository should execute git commands in the specified repository [0.03ms]
(pass) GitService > should return repository root path [0.02ms]
(pass) GitService > should handle empty command responses [0.01ms]
(pass) GitService > should have dependency injection variants available [0.01ms]

src/domain/git/parameter-based-functions.test.ts:
(pass) Parameter-Based Git Functions with Dependency Injection > Legacy functions (need architectural DI support) > should note that commitChangesFromParams needs service-level DI
(pass) Parameter-Based Git Functions with Dependency Injection > Legacy functions (need architectural DI support) > should note that pushFromParams needs service-level DI
(pass) Parameter-Based Git Functions with Dependency Injection > should use dependency injection for git operations [0.01ms]
(pass) Parameter-Based Git Functions with Dependency Injection > should provide proper mock implementations [0.07ms]
(pass) Parameter-Based Git Functions with Dependency Injection > should demonstrate zero real git operations [0.04ms]
(pass) Parameter-Based Git Functions with Dependency Injection > should show improved test architecture with DI [0.02ms]

src/domain/git/conflict-detection-working.test.ts:

# Unhandled error between tests
-------------------------------
2 | import { ConflictDetectionService } from "./conflict-detection";
3 | import { ConflictType } from "./conflict-detection-types";
4 | // Note: Simplified version focusing on working tests only
5 | 
6 | // Mock git utilities (which is what the service actually uses)
7 | let mockExecGitWithTimeout = mockFunction(() => Promise.resolve({ stdout: "", stderr: "" }));
                                 ^
ReferenceError: mockFunction is not defined
      at /Users/edobry/.local/state/minsky/sessions/task176/src/domain/git/conflict-detection-working.test.ts:7:30
      at loadAndEvaluateModule (2:1)
-------------------------------


src/domain/git/push-operations.test.ts:
(pass) pushImpl > should be defined [0.85ms]
(pass) pushImpl > should require dependencies [0.01ms]

src/domain/git/pr-workflow.test.ts:
(pass) PR Workflow Operations > should have prWithDependencies method available
(pass) PR Workflow Operations > should have GitService constructor available [0.19ms]
(pass) PR Workflow Operations > should create GitService with base directory

src/domain/git/commit-operations.test.ts:
(pass) commitChangesFromParams > should be defined
(pass) commitChangesFromParams > should be a function

src/domain/git/architecture-analysis.test.ts:
(pass) GitService - Core Methods with Dependency Injection > Architecture Analysis - Testing Limitations > should demonstrate the core testing challenge [0.08ms]

src/domain/git/session-workdir.test.ts:
(pass) GitService - Session Workdir Tests with Dependency Injection > DI Architecture Verification > should demonstrate DI infrastructure availability [0.01ms]
(pass) GitService - Session Workdir Tests with Dependency Injection > DI Architecture Verification > should show getSessionWorkdir works without external dependencies [0.04ms]
(pass) GitService - Session Workdir Tests with Dependency Injection > DI Architecture Verification > should demonstrate DI readiness for enhanced session operations [0.04ms]
(pass) GitService - Session Workdir Tests with Dependency Injection > getSessionWorkdir should return session-ID-based path [0.01ms]
(pass) GitService - Session Workdir Tests with Dependency Injection > should use consistent session-ID-based storage format [0.02ms]
(pass) GitService - Session Workdir Tests with Dependency Injection > should handle special characters in session IDs [0.01ms]

src/domain/git/factory-function.test.ts:
(pass) createGitService Factory Function > should handle undefined options parameter without throwing runtime error [0.03ms]
(pass) createGitService Factory Function > should handle null options parameter without throwing runtime error
(pass) createGitService Factory Function > should handle options with undefined baseDir property [0.80ms]
(pass) createGitService Factory Function > should create GitService with custom baseDir when provided [0.09ms]
(pass) createGitService Factory Function > should create GitService with default baseDir when no options provided [0.01ms]

src/domain/git/conflict-detection.integration.test.ts:
(pass) ConflictDetectionService Integration > should handle basic service instantiation and static methods [0.01ms]
(pass) ConflictDetectionService Integration > should have correct enum values defined [0.06ms]
(pass) ConflictDetectionService Integration > should provide proper interface structure for ConflictPrediction [0.03ms]
(pass) ConflictDetectionService Integration > should provide proper interface structure for BranchDivergenceAnalysis [0.02ms]
(pass) ConflictDetectionService Integration > should provide proper interface structure for enhanced results [0.02ms]
(skip) ConflictDetectionService Integration > should detect conflicts in real git repository

src/domain/session/session-approve-bugfix-regression.test.ts:
(pass) Session Approve - Bug Regression Tests > Bug #1: Untracked Files Auto-Stash > should stash untracked files that would be overwritten by merge [1.80ms]
(pass) Session Approve - Bug Regression Tests > Bug #1: Untracked Files Auto-Stash > should include -u flag in git stash command for untracked files [0.70ms]
(pass) Session Approve - Bug Regression Tests > Bug #2: Fail-Fast on Merge Errors > should fail fast when fast-forward merge is not possible [0.73ms]
(pass) Session Approve - Bug Regression Tests > Bug #2: Fail-Fast on Merge Errors > should continue processing when PR is genuinely already merged [1.16ms]
312 |       } catch (error) {
313 |         // Expected to fail
314 |       }
315 | 
316 |       // Assert: Stash should be restored even after failure
317 |       expect(mockGitService.stashChanges).toHaveBeenCalled();
                                                ^
error: expect(received).toHaveBeenCalled()

Expected number of calls: >= 1
Received number of calls: 0

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session/session-approve-bugfix-regression.test.ts:317:43)
(fail) Session Approve - Bug Regression Tests > Bug #2: Fail-Fast on Merge Errors > should restore stash even when merge fails [3.89ms]

src/domain/session/session-context-resolver.test.ts:
(pass) resolveSessionContext > explicit session resolution > resolves existing session by name [0.17ms]
(pass) resolveSessionContext > explicit session resolution > throws error for non-existent session [0.09ms]
(pass) resolveSessionContext > task ID resolution > resolves session by task ID [0.20ms]
(pass) resolveSessionContext > task ID resolution > throws error for non-existent task [0.10ms]
(pass) resolveSessionContext > no session provided > throws error when no session detected and auto-detection disabled [0.03ms]
(pass) resolveSessionContext > precedence > explicit session takes precedence over task [0.04ms]
(pass) resolveSessionName > returns just the session name [0.06ms]
(pass) validateSessionContext > returns true for valid session [0.06ms]
(pass) validateSessionContext > returns false for invalid session [0.03ms]

src/domain/session/session-path-resolver.test.ts:
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should validate and resolve relative paths correctly
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should validate and resolve dot paths correctly [0.05ms]
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should validate and resolve root path correctly [0.01ms]
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should block path traversal attempts [0.16ms]
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should block multiple path traversal attempts [0.05ms]
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should handle absolute paths within session workspace [0.11ms]
(pass) SessionPathResolver Domain Logic > validateAndResolvePath > should block absolute paths outside session workspace [0.11ms]
(pass) SessionPathResolver Domain Logic > getRelativePathFromSession > should return relative path from session root [0.02ms]
(pass) SessionPathResolver Domain Logic > getRelativePathFromSession > should return dot for session root [0.01ms]
(pass) SessionPathResolver Domain Logic > getRelativePathFromSession > should handle nested paths [0.03ms]
(pass) SessionPathResolver Domain Logic > createSafePath > should create safe path from components [0.03ms]
(pass) SessionPathResolver Domain Logic > createSafePath > should prevent unsafe path creation [0.09ms]
(pass) SessionPathResolver Domain Logic > validateMultiplePaths > should validate multiple valid paths [0.02ms]
(pass) SessionPathResolver Domain Logic > validateMultiplePaths > should throw error when any path is invalid [0.02ms]
(pass) SessionPathResolver Domain Logic > normalizeRelativePath > should normalize relative path correctly [0.01ms]
(pass) SessionPathResolver Domain Logic > normalizeRelativePath > should prevent directory traversal in relative paths [0.05ms]
(pass) SessionPathResolver Domain Logic > absoluteToRelative > should convert absolute path to relative [0.02ms]
(pass) SessionPathResolver Domain Logic > absoluteToRelative > should return null for paths outside session [0.02ms]
(pass) SessionPathResolver Domain Logic > absoluteToRelative > should return dot for session root

src/domain/session/session-adapter.test.ts:
(pass) SessionAdapter with Dependency Injection > DI Architecture Verification > should demonstrate comprehensive session management with DI
(pass) SessionAdapter with Dependency Injection > DI Architecture Verification > should show zero real filesystem operations in session testing [0.13ms]
(pass) SessionAdapter with Dependency Injection > DI Architecture Verification > should demonstrate integration readiness with other services [0.03ms]
(pass) SessionAdapter with Dependency Injection > should initialize with empty sessions [0.04ms]
(pass) SessionAdapter with Dependency Injection > should add and retrieve a session [0.05ms]
(pass) SessionAdapter with Dependency Injection > should retrieve a session by task ID [0.05ms]
(pass) SessionAdapter with Dependency Injection > should update a session [0.06ms]
(pass) SessionAdapter with Dependency Injection > should delete a session [0.05ms]
(pass) SessionAdapter with Dependency Injection > should return false when deleting a non-existent session [0.01ms]
(pass) SessionAdapter with Dependency Injection > should handle multiple sessions correctly [0.07ms]

src/domain/session/session-approval-error-handling.test.ts:
(pass) Session Approval Error Handling Fix > should validate task existence BEFORE checking for session [67.79ms]
(pass) Session Approval Error Handling Fix > should provide different error for existing task without session [0.21ms]
(pass) Session Approval Error Handling Fix > should have proper validation order [0.16ms]
(pass) Session Approval Error Handling Fix > should provide clear error message format [19.64ms]

src/domain/session/session-approve-task-status-commit.test.ts:
(pass) Session Approve Task Status Commit > should commit task status update after successful merge [0.33ms]
(pass) Session Approve Task Status Commit > should handle case where no task status update is needed [0.25ms]
(pass) Session Approve Task Status Commit > should skip task status update when task is already DONE [0.15ms]
(pass) Session Approve Task Status Commit > should exit early when task is DONE and PR branch doesn't exist (bug reproduction) [0.12ms]

src/domain/session/session-auto-detection-integration.test.ts:
(pass) Session Command Domain Logic > sessionGet domain logic > resolves session by explicit name [0.15ms]
(pass) Session Command Domain Logic > sessionGet domain logic > resolves session by explicit task ID [0.08ms]
(pass) Session Command Domain Logic > sessionGet domain logic > throws ResourceNotFoundError for non-existent session [0.10ms]
(pass) Session Command Domain Logic > sessionGet domain logic > throws ResourceNotFoundError for non-existent task [0.18ms]
(pass) Session Command Domain Logic > sessionDelete domain logic > deletes session by explicit name [0.22ms]
(pass) Session Command Domain Logic > sessionDelete domain logic > deletes session by explicit task ID [0.05ms]
142 |           },
143 |           {
144 |             sessionDB: mockSessionProvider,
145 |           }
146 |         )
147 |       ).rejects.toThrow(ResourceNotFoundError);
                      ^
error: 

Expected promise that rejects
Received promise that resolved: Promise { <resolved> }

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session/session-auto-detection-integration.test.ts:147:17)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session/session-auto-detection-integration.test.ts:135:67)
(fail) Session Command Domain Logic > sessionDelete domain logic > throws ResourceNotFoundError for non-existent session [0.19ms]
(pass) Session Command Domain Logic > domain logic consistency > all commands resolve the same session by task ID [0.08ms]
(pass) Session Command Domain Logic > domain logic consistency > all commands provide consistent error messages for missing sessions [0.08ms]
(pass) Session Command Domain Logic > pure function behavior > session provider mock is used directly without global state [0.05ms]
(pass) Session Command Domain Logic > pure function behavior > session resolution is deterministic with same inputs [0.07ms]

src/domain/session/pr-validation.test.ts:
(pass) PR Validation Utilities > validatePrContent > should validate normal PR content without issues [1.25ms]
(pass) PR Validation Utilities > validatePrContent > should detect and remove title duplication in body [0.05ms]
(pass) PR Validation Utilities > validatePrContent > should reject empty title [0.01ms]
(pass) PR Validation Utilities > validatePrContent > should handle empty body gracefully [0.01ms]
(pass) PR Validation Utilities > isDuplicateContent > should detect identical content [0.06ms]
(pass) PR Validation Utilities > isDuplicateContent > should detect content with different whitespace
(pass) PR Validation Utilities > isDuplicateContent > should detect content with different case [0.01ms]
(pass) PR Validation Utilities > isDuplicateContent > should not match different content
(pass) PR Validation Utilities > isDuplicateContent > should handle empty strings
(pass) PR Validation Utilities > sanitizePrBody > should remove lines that duplicate the title [0.07ms]
(pass) PR Validation Utilities > sanitizePrBody > should preserve non-duplicate content
(pass) PR Validation Utilities > sanitizePrBody > should handle empty body
(pass) PR Validation Utilities > preparePrContent > should prepare normal content without changes [0.04ms]
(pass) PR Validation Utilities > preparePrContent > should sanitize content with duplication and provide warnings [0.03ms]
(pass) PR Validation Utilities > preparePrContent > should throw error for empty title [0.04ms]
(pass) PR Validation Utilities > preparePrContent > should handle undefined body [0.01ms]

src/domain/session/session-db.test.ts:
(pass) SessionDB Functional Implementation > initializeSessionDbState > should initialize state with default values [0.03ms]
(pass) SessionDB Functional Implementation > initializeSessionDbState > should initialize state with custom baseDir [0.03ms]
(pass) SessionDB Functional Implementation > initializeSessionDbState > should handle undefined options parameter without throwing runtime error [0.03ms]
(pass) SessionDB Functional Implementation > initializeSessionDbState > should handle null options parameter without throwing runtime error [0.02ms]
(pass) SessionDB Functional Implementation > initializeSessionDbState > should handle options with undefined baseDir property [0.02ms]
(pass) SessionDB Functional Implementation > listSessionsFn > should return all sessions [0.04ms]
112 |     it("should return the session by name", () => {
113 |       const state = createTestState();
114 |       const session = getSessionFn(state, "test-session-1");
115 |       expect(session).not.toBeNull();
116 |       expect(session?.session).toBe("test-session-1");
117 |       expect(session?.taskId).toBe("#101");
                                    ^
error: expect(received).toBe(expected)

Expected: "#101"
Received: "101"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session/session-db.test.ts:117:31)
(fail) SessionDB Functional Implementation > getSessionFn > should return the session by name [0.12ms]
(pass) SessionDB Functional Implementation > getSessionFn > should return null if session not found
(pass) SessionDB Functional Implementation > getSessionByTaskIdFn > should return the session by task ID [0.04ms]
(pass) SessionDB Functional Implementation > getSessionByTaskIdFn > should return the session when task ID includes # [0.02ms]
(pass) SessionDB Functional Implementation > getSessionByTaskIdFn > should return null if no session exists for the task ID
159 |       };
160 | 
161 |       const newState = addSessionFn(state, newSession);
162 |       expect(newState.sessions).toHaveLength(3);
163 |       expect(newState.sessions[2]!.session).toBe("test-session-3");
164 |       expect(newState.sessions[2]!.taskId).toBe("#103");
                                                 ^
error: expect(received).toBe(expected)

Expected: "#103"
Received: "103"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session/session-db.test.ts:164:44)
(fail) SessionDB Functional Implementation > addSessionFn > should add a new session to the state [0.05ms]
174 |       };
175 | 
176 |       const newState = updateSessionFn(state, "test-session-1", updates);
177 |       const updatedSession = getSessionFn(newState, "test-session-1");
178 |       expect(updatedSession?.branch).toBe("updated-branch");
179 |       expect(updatedSession?.taskId).toBe("#999");
                                           ^
error: expect(received).toBe(expected)

Expected: "#999"
Received: "999"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session/session-db.test.ts:179:38)
(fail) SessionDB Functional Implementation > updateSessionFn > should update an existing session [0.07ms]
(pass) SessionDB Functional Implementation > updateSessionFn > should not modify state if session not found [0.01ms]
(pass) SessionDB Functional Implementation > updateSessionFn > should ignore session property in updates [0.02ms]
(pass) SessionDB Functional Implementation > deleteSessionFn > should delete an existing session [0.04ms]
(pass) SessionDB Functional Implementation > deleteSessionFn > should not modify state if session not found
(pass) SessionDB Functional Implementation > getRepoPathFn > should return the repository path for a session record [0.02ms]
(pass) SessionDB Functional Implementation > getRepoPathFn > should handle session records with repoPath already set
(pass) SessionDB Functional Implementation > getRepoPathFn > should throw error for invalid input
(pass) SessionDB Functional Implementation > getSessionWorkdirFn > should return the working directory for a session [0.03ms]
(pass) SessionDB Functional Implementation > getSessionWorkdirFn > should return null if session not found

src/domain/session/session-db-io.test.ts:
(pass) Session DB I/O Functions > readSessionDbFile > should read existing session database file [0.24ms]
(pass) Session DB I/O Functions > readSessionDbFile > should return initialized state when database file doesn't exist [0.02ms]
(pass) Session DB I/O Functions > readSessionDbFile > should handle undefined options parameter without throwing runtime error [0.08ms]
(pass) Session DB I/O Functions > readSessionDbFile > should handle null options parameter without throwing runtime error [0.04ms]
(pass) Session DB I/O Functions > readSessionDbFile > should handle options with undefined dbPath and baseDir properties [0.05ms]
(pass) Session DB I/O Functions > writeSessionsToFile > should write session database file successfully [0.31ms]
(pass) Session DB I/O Functions > writeSessionsToFile > should handle undefined options parameter without throwing runtime error [0.09ms]
(pass) Session DB I/O Functions > writeSessionsToFile > should handle null options parameter without throwing runtime error [0.12ms]
(pass) Session DB I/O Functions > writeSessionsToFile > should handle options with undefined dbPath property [0.09ms]

src/domain/session/session-pr-body-validation.test.ts:
85 | 
86 |       // If we get here, the bug still exists (no error thrown)
87 |       throw new Error("Expected ValidationError for new PR without body, but none was thrown");
88 |     } catch (error) {
89 |       // After our fix, this should be a ValidationError about missing body
90 |       expect(error).toBeInstanceOf(ValidationError);
                         ^
error: expect(received).toBeInstanceOf(expected)

Expected constructor: [class ValidationError extends MinskyError]
Received value: 226 |             );
227 |           } catch (listError) {
228 |             log.error(`Failed to list sessions for debugging: ${listError}`);
229 |           }
230 | 
231 |           throw new MinskyError(`
                          ^
MinskyError: 
üîç Session "test-session" Not Found in Database

The session exists in the file system but isn't registered in the session database.
This can happen when sessions are created outside of Minsky or the database gets out of sync.

üí° How to fix this:

üìã Check if session exists on disk:
   ls -la ~/.local/state/minsky/git/*/sessions/

üîÑ If session exists, re-register it:
   cd /path/to/main/workspace
   minsky sessions import "test-session"

üÜï Or create a fresh session:
   minsky session start test-session

üìÅ Alternative - use repository path directly:
   minsky session pr --repo "/path/to/session/workspace" --title "Your PR title"

üóÉÔ∏è Check registered sessions:
   minsky sessions list

‚ö†Ô∏è  Note: Session PR commands should be run from within the session directory to enable automatic session self-repair.

Current directory: /Users/edobry/.local/state/minsky/sessions/task176
Session requested: "test-session"

 cause: undefined,

      at preparePrImpl (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/git/prepare-pr-operations.ts:231:21)


      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/domain/session/session-pr-body-validation.test.ts:90:21)
(fail) Session PR Body Validation Bug Fix > should throw ValidationError for new PR without body [11.28ms]

tests/adapters/mcp/session-read-file-simple.test.ts:
(pass) session_read_file line range processing > Basic line range functionality > should read entire file when no range specified [0.06ms]
(pass) session_read_file line range processing > Basic line range functionality > should read specific line range [0.10ms]
(pass) session_read_file line range processing > Basic line range functionality > should handle single line request [0.01ms]
(pass) session_read_file line range processing > Basic line range functionality > should handle should_read_entire_file flag [0.01ms]
(pass) session_read_file line range processing > Content summarization > should provide summary for partial content [0.02ms]
(pass) session_read_file line range processing > Content summarization > should handle reading from beginning [0.01ms]
(pass) session_read_file line range processing > Content summarization > should handle reading to end [0.01ms]
(pass) session_read_file line range processing > Edge cases > should handle empty file [0.01ms]
(pass) session_read_file line range processing > Edge cases > should handle single line file [0.02ms]
(pass) session_read_file line range processing > Edge cases > should handle out-of-bounds line numbers [0.01ms]
(pass) session_read_file line range processing > Edge cases > should handle invalid range (start > end)
(pass) session_read_file line range processing > Edge cases > should handle negative line numbers [0.01ms]
(pass) session_read_file line range processing > Context expansion > should expand context for small ranges in large files [0.06ms]
(pass) session_read_file line range processing > Context expansion > should not expand context for larger ranges [0.02ms]
(pass) session_read_file line range processing > Context expansion > should not expand context in small files [0.01ms]

tests/adapters/mcp/session-edit-tools.test.ts:
(pass) Session Edit Tools > session_edit_file > should be registered with correct schema [0.03ms]
(skip) Session Edit Tools > session_edit_file > should create new file when it doesn't exist
(skip) Session Edit Tools > session_edit_file > should handle edit operations with mock setup
(pass) Session Edit Tools > session_search_replace > should be registered with correct schema [0.03ms]
(skip) Session Edit Tools > session_search_replace > should replace single occurrence successfully
(skip) Session Edit Tools > session_search_replace > should error when text not found
(skip) Session Edit Tools > session_search_replace > should error when multiple occurrences found

tests/adapters/mcp/session-pr-body-path-refresh-bug.test.ts:
(pass) Session PR Body Content Bug Fix > Bug Reproduction: Body content ignored when refreshing existing PR > should use new --body-path content when refreshing existing PR [0.06ms]
(pass) Session PR Body Content Bug Fix > Bug Reproduction: Body content ignored when refreshing existing PR > should use new --body content when refreshing existing PR [0.07ms]
(pass) Session PR Body Content Bug Fix > Bug Reproduction: Body content ignored when refreshing existing PR > should reuse existing body when no new content provided (correct behavior) [0.05ms]
153 |       // Test the actual file reading logic that works with --body-path
154 |       const filePath = require("path").resolve(testBodyPath);
155 |       const { readFile } = await import("fs/promises");
156 | 
157 |       const fileContent = await readFile(filePath, "utf-8");
158 |       const content = typeof fileContent === "string" ? fileContent : fileContent.toString();
                                                                            ^
TypeError: undefined is not an object (evaluating 'fileContent.toString')
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/tests/adapters/mcp/session-pr-body-path-refresh-bug.test.ts:158:71)
(fail) Session PR Body Content Bug Fix > Real file reading integration > should correctly read body content from file path [0.17ms]
165 |       const nonExistentPath = join(testDir, "missing-file.md");
166 |       const { readFile } = await import("fs/promises");
167 | 
168 |       await expect(async () => {
169 |         await readFile(nonExistentPath, "utf-8");
170 |       }).toThrow();
               ^
error: expect(received).toThrow()

Received function did not throw
Received value: Promise { <resolved> }

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/tests/adapters/mcp/session-pr-body-path-refresh-bug.test.ts:170:10)
(fail) Session PR Body Content Bug Fix > Real file reading integration > should handle non-existent body files correctly [0.82ms]

tests/adapters/mcp/session-file-move-tools.test.ts:
(pass) Session File Move Tools Integration > session file tools can be imported without errors [0.29ms]
(pass) Session File Move Tools Integration > registerSessionFileTools registers move and rename commands [0.66ms]
(pass) Session File Move Tools Integration > command parameters validation works correctly [0.34ms]
(pass) Session File Move Tools Integration > parameter validation rejects invalid data [0.96ms]
(pass) Session File Move Tools Integration > default parameter values are set correctly [0.31ms]
(pass) Session File Move Tools Integration > tools are properly exported from module [0.02ms]
(pass) Session File Move Tools Integration > SessionPathResolver can be instantiated [0.05ms]

tests/adapters/cli/rules.test.ts:
(pass) Rules CLI Core Functionality > readContentFromFileIfExists function > returns input string when path doesn't exist [1.53ms]
(pass) Rules CLI Core Functionality > parseGlobs function > handles comma-separated glob patterns [0.14ms]
(pass) Rules CLI Core Functionality > parseGlobs function > handles JSON array glob patterns [0.02ms]
(pass) Rules CLI Core Functionality > parseGlobs function > returns undefined for undefined input
(pass) Rules CLI Core Functionality > parseGlobs function > returns undefined for empty string

tests/adapters/cli/cli-rules-integration.test.ts:
(pass) Rules CLI Helper Functions Integration > parseGlobs handles different format patterns [0.15ms]
(pass) Rules CLI Helper Functions Integration > readContentFromFileIfExists returns input when not a file [0.10ms]

tests/adapters/cli/session-remaining.test.ts:
(pass) session workspace detection > TASK #168 FIX: should correctly parse session name from path structure [0.11ms]
(pass) session workspace detection > TASK #168 FIX: should handle various session name formats [0.03ms]
(pass) session inspect command > placeholder test for inspect command [0.04ms]
(pass) session list operations > placeholder test for list operations
(skip) session pr command > REAL TEST: preparePr should execute switch back command
(pass) session pr command > CORRECT BEHAVIOR: session pr should return to session branch after creating PR [0.22ms]

tests/adapters/cli/session-directory.test.ts:
(pass) session dir command > should return correct session directory for task ID [0.29ms]
(pass) session dir command > should normalize task IDs correctly (with and without # prefix) [0.06ms]
(pass) session dir command > should handle null taskId sessions correctly [0.04ms]
(pass) session dir command > BUG REGRESSION: SQLite filtering implementation [0.07ms]
(pass) session dir command > EDGE CASE: multiple sessions with same task ID but different formats [0.04ms]

tests/adapters/cli/session-update.test.ts:
(pass) session update command > TASK #168 FIX: should auto-detect session name from current directory when not provided [0.35ms]
(pass) session update command > TASK #168 FIX: should automatically register orphaned session when directory exists but not in database [0.18ms]
(pass) session update command > TASK #168 FIX: should handle self-repair failure gracefully [0.26ms]
(pass) session update command > TASK #168 FIX: should extract task ID from session name during self-repair [0.20ms]
(pass) session update command > TASK #168 FIX: should provide clear error message when session workspace directory is missing [0.20ms]
(pass) session update command > TASK #168 FIX: should provide clear error message for uncommitted changes [0.26ms]

tests/adapters/cli/rules-helpers.test.ts:
(pass) Rules CLI Helper Functions > parseGlobs > returns undefined for undefined input [0.02ms]
(pass) Rules CLI Helper Functions > parseGlobs > parses comma-separated string into array [0.03ms]
(pass) Rules CLI Helper Functions > parseGlobs > trims whitespace in comma-separated strings [0.02ms]
(pass) Rules CLI Helper Functions > parseGlobs > parses JSON array string format [0.02ms]
(pass) Rules CLI Helper Functions > parseGlobs > falls back to comma handling if JSON parsing fails [0.01ms]
(pass) Rules CLI Helper Functions > parseGlobs > returns undefined for empty string

tests/adapters/cli/session.test.ts:
(pass) Session CLI Commands > session dir command > should return correct session directory for task ID [0.09ms]
(pass) Session CLI Commands > session dir command > should normalize task IDs correctly (with and without # prefix) [0.08ms]
(pass) Session CLI Commands > session dir command > should handle null taskId sessions correctly [0.01ms]
(pass) Session CLI Commands > session dir command > BUG REGRESSION: SQLite filtering implementation [0.09ms]
(pass) Session CLI Commands > session dir command > EDGE CASE: multiple sessions with same task ID but different formats [0.03ms]
(pass) Session CLI Commands > session update command > TASK #168 FIX: should auto-detect session name from current directory when not provided [0.16ms]
(pass) Session CLI Commands > session update command > TASK #168 FIX: should automatically register orphaned session when directory exists but not in database [0.11ms]
(pass) Session CLI Commands > session update command > TASK #168 FIX: should handle self-repair failure gracefully [0.11ms]
372 |         }
373 |       );
374 | 
375 |       // Assert: Session update should succeed and preserve task ID
376 |       expect(result.session).toBe(sessionName);
377 |       expect(result.taskId).toBe("task#42");
                                  ^
error: expect(received).toBe(expected)

Expected: "task#42"
Received: "42"

      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/tests/adapters/cli/session.test.ts:377:29)
(fail) Session CLI Commands > session update command > TASK #168 FIX: should extract task ID from session name during self-repair [0.19ms]
(pass) Session CLI Commands > session update command > TASK #168 FIX: should provide clear error message when session workspace directory is missing [0.63ms]
(pass) Session CLI Commands > session update command > TASK #168 FIX: should provide clear error message for uncommitted changes [0.25ms]
(pass) Session CLI Commands > session workspace detection > TASK #168 FIX: should correctly parse session name from path structure [0.21ms]
(pass) Session CLI Commands > session workspace detection > TASK #168 FIX: should handle various session name formats [0.07ms]
(pass) Session CLI Commands > session inspect command > placeholder test for inspect command [0.03ms]
(pass) Session CLI Commands > session list operations > placeholder test for list operations
(skip) Session CLI Commands > session pr command > REAL TEST: preparePr should execute switch back command
(pass) Session CLI Commands > session pr command > CORRECT BEHAVIOR: session pr should return to session branch after creating PR [0.15ms]

tests/domain/commands/workspace.commands.test.ts:
(pass) Workspace Domain Methods > isSessionRepository (async workspace checking) > returns true for a path in a session repository [0.14ms]
(pass) Workspace Domain Methods > isSessionRepository (async workspace checking) > returns false for a path not in a session repository [0.02ms]
(pass) Workspace Domain Methods > isSessionRepository (async workspace checking) > returns false when an error occurs during check [0.06ms]
(pass) Workspace Domain Methods > isSessionRepository (async workspace checking) > verifies isSessionRepository consistency [0.04ms]
(pass) Workspace Domain Methods > getSessionFromWorkspace (getSessionFromRepo) > gets session information for a valid session repository [0.16ms]
(pass) Workspace Domain Methods > getSessionFromWorkspace (getSessionFromRepo) > returns null for a non-session repository [0.02ms]
(pass) Workspace Domain Methods > getSessionFromWorkspace (getSessionFromRepo) > returns null when session record is not found [0.11ms]
(pass) Workspace Domain Methods > getSessionFromWorkspace (getSessionFromRepo) > verifies getSessionFromRepo is an alias for getSessionFromWorkspace [0.14ms]
(pass) Workspace Domain Methods > getCurrentSession > returns session name when in a session directory [0.12ms]
(pass) Workspace Domain Methods > getCurrentSession > returns null when not in a session directory [0.03ms]
(pass) Workspace Domain Methods > resolveWorkspacePath > returns explicitly provided workspace path [0.08ms]
(pass) Workspace Domain Methods > resolveWorkspacePath > throws error for invalid workspace path [0.21ms]
(pass) Workspace Domain Methods > resolveWorkspacePath > uses sessionRepo if provided (backwards compatibility) [0.02ms]
(pass) Workspace Domain Methods > resolveWorkspacePath > falls back to current directory when no options provided [0.02ms]
(pass) Workspace Domain Methods > resolveWorkspacePath > uses provided sessionWorkspace path [0.03ms]
(pass) Workspace Domain Methods > isSessionWorkspace returns true for session workspace > returns true for session workspace [0.06ms]
(pass) Workspace Domain Methods > isSessionWorkspace returns true for session workspace > returns false for non-session workspace [0.01ms]

src/adapters/shared/commands/session-context-resolution.test.ts:
53 | 
54 |         return { sessionName, success: true };
55 |       };
56 | 
57 |       // CASE 1: CLI context (session workspace) - should NOT auto-detect in domain
58 |       mockCwd = mockFunction(() => "/Users/edobry/.local/state/minsky/sessions/task#158");
                     ^
ReferenceError: mockFunction is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/adapters/shared/commands/session-context-resolution.test.ts:58:17)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/adapters/shared/commands/session-context-resolution.test.ts:29:84)
(fail) Session Context Resolution Architecture Issues > üö© PROBLEM: Mixed Concerns in Domain Layer > should NOT require different validation logic based on working directory [0.14ms]

# Unhandled error between tests
-------------------------------
20 |     process.cwd = mockCwd;
21 |   });
22 | 
23 |   afterEach(() => {
24 |     process.cwd = originalCwd;
25 |     mockCwd.mockRestore();
         ^
TypeError: undefined is not an object (evaluating 'mockCwd.mockRestore')
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/adapters/shared/commands/session-context-resolution.test.ts:25:5)
-------------------------------


# Unhandled error between tests
-------------------------------
53 | 
54 |         return { sessionName, success: true };
55 |       };
56 | 
57 |       // CASE 1: CLI context (session workspace) - should NOT auto-detect in domain
58 |       mockCwd = mockFunction(() => "/Users/edobry/.local/state/minsky/sessions/task#158");
                     ^
ReferenceError: mockFunction is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/adapters/shared/commands/session-context-resolution.test.ts:58:17)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/adapters/shared/commands/session-context-resolution.test.ts:29:84)
-------------------------------

102 | 
103 |         return { sessionName, success: true };
104 |       };
105 | 
106 |       // CASE 1: Main workspace context - should fail
107 |       mockCwd = mockFunction(() => "/Users/edobry/Projects/minsky");
                      ^
ReferenceError: mockFunction is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/adapters/shared/commands/session-context-resolution.test.ts:107:17)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/adapters/shared/commands/session-context-resolution.test.ts:83:81)
(fail) Session Context Resolution Architecture Issues > üö© PROBLEM: Mixed Concerns in Domain Layer > should NOT have different behavior based on working directory context [0.11ms]

# Unhandled error between tests
-------------------------------
20 |     process.cwd = mockCwd;
21 |   });
22 | 
23 |   afterEach(() => {
24 |     process.cwd = originalCwd;
25 |     mockCwd.mockRestore();
         ^
TypeError: undefined is not an object (evaluating 'mockCwd.mockRestore')
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/adapters/shared/commands/session-context-resolution.test.ts:25:5)
-------------------------------


# Unhandled error between tests
-------------------------------
102 | 
103 |         return { sessionName, success: true };
104 |       };
105 | 
106 |       // CASE 1: Main workspace context - should fail
107 |       mockCwd = mockFunction(() => "/Users/edobry/Projects/minsky");
                      ^
ReferenceError: mockFunction is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/adapters/shared/commands/session-context-resolution.test.ts:107:17)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/adapters/shared/commands/session-context-resolution.test.ts:83:81)
-------------------------------

166 |         // ... business logic only
167 |         return { success: true };
168 |       };
169 | 
170 |       // Should always fail without session, regardless of working directory
171 |       mockCwd = mockFunction(() => "/Users/edobry/.local/state/minsky/sessions/task#158");
                      ^
ReferenceError: mockFunction is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/adapters/shared/commands/session-context-resolution.test.ts:171:17)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/adapters/shared/commands/session-context-resolution.test.ts:150:67)
(fail) Session Context Resolution Architecture Issues > ‚úÖ TARGET: Clean Architecture with Interface-Layer Resolution > should ALWAYS require session parameter in domain layer [0.07ms]

# Unhandled error between tests
-------------------------------
20 |     process.cwd = mockCwd;
21 |   });
22 | 
23 |   afterEach(() => {
24 |     process.cwd = originalCwd;
25 |     mockCwd.mockRestore();
         ^
TypeError: undefined is not an object (evaluating 'mockCwd.mockRestore')
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/adapters/shared/commands/session-context-resolution.test.ts:25:5)
-------------------------------


# Unhandled error between tests
-------------------------------
166 |         // ... business logic only
167 |         return { success: true };
168 |       };
169 | 
170 |       // Should always fail without session, regardless of working directory
171 |       mockCwd = mockFunction(() => "/Users/edobry/.local/state/minsky/sessions/task#158");
                      ^
ReferenceError: mockFunction is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/adapters/shared/commands/session-context-resolution.test.ts:171:17)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/adapters/shared/commands/session-context-resolution.test.ts:150:67)
-------------------------------

228 |           return params;
229 |         },
230 |       };
231 | 
232 |       // CLI adapter should auto-resolve session
233 |       mockCwd = mockFunction(() => "/Users/edobry/.local/state/minsky/sessions/task#158");
                      ^
ReferenceError: mockFunction is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/adapters/shared/commands/session-context-resolution.test.ts:233:17)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/adapters/shared/commands/session-context-resolution.test.ts:205:66)
(fail) Session Context Resolution Architecture Issues > ‚úÖ TARGET: Clean Architecture with Interface-Layer Resolution > should handle session resolution in interface adapters [0.22ms]

# Unhandled error between tests
-------------------------------
20 |     process.cwd = mockCwd;
21 |   });
22 | 
23 |   afterEach(() => {
24 |     process.cwd = originalCwd;
25 |     mockCwd.mockRestore();
         ^
TypeError: undefined is not an object (evaluating 'mockCwd.mockRestore')
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/adapters/shared/commands/session-context-resolution.test.ts:25:5)
-------------------------------


# Unhandled error between tests
-------------------------------
228 |           return params;
229 |         },
230 |       };
231 | 
232 |       // CLI adapter should auto-resolve session
233 |       mockCwd = mockFunction(() => "/Users/edobry/.local/state/minsky/sessions/task#158");
                      ^
ReferenceError: mockFunction is not defined
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/adapters/shared/commands/session-context-resolution.test.ts:233:17)
      at <anonymous> (/Users/edobry/.local/state/minsky/sessions/task176/src/adapters/shared/commands/session-context-resolution.test.ts:205:66)
-------------------------------


src/domain/git/commands/simple-function.test.ts:
(pass) Git Commands Function Tests > should be able to define simple git command functions [0.02ms]
(pass) Git Commands Function Tests > should be able to call git command functions [0.05ms]

src/domain/git/commands/integration.test.ts:
(pass) Git Commands Integration Tests with Dependency Injection > Git Service Integration > should integrate clone operation with session management [0.23ms]
(pass) Git Commands Integration Tests with Dependency Injection > Git Service Integration > should handle clone errors gracefully [0.25ms]
(pass) Git Commands Integration Tests with Dependency Injection > Branch Operations Integration > should verify branch operation interface availability [0.06ms]
(pass) Git Commands Integration Tests with Dependency Injection > Command Execution Integration > should integrate commit operations with git execution [0.06ms]
(pass) Git Commands Integration Tests with Dependency Injection > Command Execution Integration > should integrate push operations with session state [0.03ms]
(pass) Git Commands Integration Tests with Dependency Injection > DI Integration Architecture Verification > should demonstrate comprehensive dependency integration [0.02ms]
(pass) Git Commands Integration Tests with Dependency Injection > DI Integration Architecture Verification > should show zero real git operations in integration testing [0.05ms]
(pass) Git Commands Integration Tests with Dependency Injection > DI Integration Architecture Verification > should demonstrate integration testing benefits with DI [0.02ms]
(pass) Git Commands Integration Tests with Dependency Injection > Phase 2 Enhancement Demonstration > should demonstrate DI readiness for command function enhancement [0.01ms]
(pass) Git Commands Integration Tests with Dependency Injection > Phase 2 Enhancement Demonstration > should show established DI patterns scale to integration scenarios [0.03ms]

src/domain/git/commands/basic-imports.test.ts:
(pass) Git Commands Import Tests > should be able to import git command index [1.12ms]
(pass) Git Commands Import Tests > should be able to import git types [0.20ms]
(pass) Git Commands Import Tests > should be able to import individual command files [0.05ms]
(pass) Git Commands Import Tests > should be able to import subcommands [1.16ms]

14 tests skipped:
(skip) Backend Workspace Integration - Current Behavior > Current Markdown Backend Behavior > markdown backend should use special workspace when no local tasks.md
(skip) Backend Workspace Integration - Current Behavior > Current Complex Workflow > should handle full current workflow for markdown
(skip) Backend Workspace Integration - Current Behavior > Current Complex Workflow > should handle edge case: markdown with local tasks.md file
(skip) Target Backend Architecture - Self-Contained Workspace Resolution > Enhanced Markdown Backend > should handle special workspace resolution with repo URL
(skip) Target Backend Architecture - Self-Contained Workspace Resolution > Simplified Workflow > should eliminate external workspace resolution for repo URLs
(skip) Target Backend Architecture - Self-Contained Workspace Resolution > Simplified Workflow > should support repository-based TaskService creation
(skip) ConflictDetectionService Integration > should detect conflicts in real git repository
(skip) Session Edit Tools > session_edit_file > should create new file when it doesn't exist
(skip) Session Edit Tools > session_edit_file > should handle edit operations with mock setup
(skip) Session Edit Tools > session_search_replace > should replace single occurrence successfully
(skip) Session Edit Tools > session_search_replace > should error when text not found
(skip) Session Edit Tools > session_search_replace > should error when multiple occurrences found
(skip) session pr command > REAL TEST: preparePr should execute switch back command
(skip) Session CLI Commands > session pr command > REAL TEST: preparePr should execute switch back command


93 tests failed:
(fail) Session Git Clone Bug Regression Test > should successfully create session after fixing git directory issues [0.38ms]
(fail) Session Approve > branch cleanup after successful merge > should handle branch cleanup failures gracefully without failing the operation [1.14ms]
(fail) updateSessionFromParams > throws ResourceNotFoundError when session does not exist [0.16ms]
(fail) updateSessionFromParams > returns session information when update is successful [8.30ms]
(fail) updateSessionFromParams > throws error when workspace is dirty and force is not set [0.07ms]
(fail) updateSessionFromParams > updates session when workspace is dirty and force is set
(fail) updateSessionFromParams > skips stashing when noStash is true [8.51ms]
(fail) updateSessionFromParams > skips pushing when noPush is true [7.96ms]
(fail) updateSessionFromParams > throws error when merge conflicts are detected [0.17ms]
(fail) Session PR Command Branch Behavior > should never switch user to PR branch during session pr creation [4.01ms]
(fail) Session PR Command Branch Behavior > should handle branch switch-back failure as critical error [0.58ms]
(fail) resolveWorkspacePath > uses explicitly provided workspace path [0.14ms]
(fail) resolveWorkspacePath > validates that explicitly provided workspace exists [0.04ms]
(fail) interface-agnostic task functions > listTasksFromParams > should list tasks with valid parameters [0.48ms]
(fail) interface-agnostic task functions > getTaskFromParams > should get a task with valid parameters [0.33ms]
(fail) interface-agnostic task functions > getTaskFromParams > should normalize non-canonical task IDs (e.g., '123' -> '#123') [0.08ms]
(fail) interface-agnostic task functions > getTaskFromParams > should handle task IDs without leading zeros [0.09ms]
(fail) interface-agnostic task functions > getTaskStatusFromParams > should get task status with valid parameters [0.17ms]
(fail) interface-agnostic task functions > setTaskStatusFromParams > should set task status with valid parameters [0.33ms]
(fail) Session Creation Bug Fix (TDD) > should NOT create session directory if git operations fail [0.93ms]
(fail) Prepared Merge Commit Workflow (Task #144) > Expected Correct Behavior - What SHOULD happen per Task #025 > preparePr SHOULD create PR branch from base branch and merge feature branch with --no-ff [0.20ms]
(fail) Prepared Merge Commit Workflow (Task #144) > Expected Correct Behavior - What SHOULD happen per Task #025 > sessionPrFromParams SHOULD call preparePr with correct parameters [0.11ms]
(fail) Session Approve Workflow > successfully approves and merges a PR branch with task ID [1542585923.28ms]
(fail) Session Approve Workflow > successfully approves and merges a PR branch with task ID
(fail) Session Approve Workflow > throws ValidationError when session parameter is missing [1542585923.39ms]
(fail) Session Approve Workflow > throws ValidationError when session parameter is missing
(fail) Session Approve Workflow > handles git command failures gracefully [1542585923.47ms]
(fail) s4Õ  git command failures gracefully
(fail) Session Start Consistency Tests > Successful session creation > should only add session to database after git operations succeed [1542585927.10ms]
(fail) Session Start Consistency Tests >         nly add session to database after git operations succeed
(fail) Session Start Consistency Tests > Git clone failure scenarios > should not add session to database when git clone fails [1542585927.14ms]
(fail) Session Start Consistency Tests > Git clone failure scenarios > should not add session to database when git clone fails
(fail) Session Start Consistency Tests > Git clone failure scenarios > should not add session to database when git branch creation fails [1542585927.17ms]
(fail) Session Start Consistency Tests > Git clone failure scenarios > should not add session to database when git branch creation fails
(fail) Session Start Consistency Tests > Git clone failure scenarios > should propagate git errors without modification [1542585927.20ms]
(fail) Session Start Consistency Tests >  s4Õ  ropagate git errors without modification
(fail) Session Start Consistency Tests > Error handling edge cases > should prevent session creation when session already exists [1542585927.23ms]
(fail) Session Start Consistency Tests > Error handling edge cases > should prevent session creation when session already exists
(fail) Session Start Consistency Tests > Error handling edge cases > should prevent session creation when another session exists for same task [1542585927.27ms]
(fail) Session Start Consistency Tests > Error handling edge cases > should prevent session creation when another session exists for same task
(fail) Session Start Consistency Tests > Error handling edge cases > should prevent session creation when task does not exist [1542585927.29ms]
(fail) Session Start Consistency Tests >  ë4Õ  revent session creation when task does not exist
(fail) Session Start Consistency Tests > Critical consistency verification > should never add session record before all git operations complete successfully [1542585927.31ms]
(fail) Session Start Consistency Tests > Critical consistency verification > should never add session record before all git operations complete successfully
(fail) Session Start Consistency Tests > Critical consistency verification > should successfully add session record only after all operations complete [1542585927.32ms]
(fail) Session Start Consistency Tests > @U4Õ  uccessfully add session record only after all operations complete
(fail) Individual Service Mock Factories > createMockTaskService > creates a mock with default behavior [0.16ms]
(fail) Individual Service Mock Factories > createMockTaskService > accepts method overrides [0.32ms]
(fail) Individual Service Mock Factories > Factory Integration > all factories work together in a test scenario [0.10ms]
(fail) Custom Configuration System > CustomConfigurationProvider > should handle configuration overrides consistently [0.10ms]
(fail) Custom Configuration System > Configuration Initialization > should support configuration overrides [0.55ms]
(fail) Custom Configuration System > Configuration Factory > should create provider with custom options [0.45ms]
(fail) CLI-MCP Task Database Consistency Bug > BUG: CLI and MCP should return identical task data for same task ID [2.79ms]
(fail) CLI-MCP Task Database Consistency Bug > BUG: Task list should be identical between CLI and MCP [0.65ms]
(fail) CLI-MCP Task Database Consistency Bug > EXPECTED: All task operations should use special workspace path [0.41ms]
(fail) Enhanced Workspace Integration > Enhanced TaskService Integration > should handle repository-based workspace creation [1.14ms]
(fail) Enhanced Workspace Integration > Architectural Benefits > should demonstrate simplified workspace resolution [0.41ms]
(fail) Enhanced JSON Backend > should create backend with explicit workspace path [0.18ms]
(fail) Enhanced JSON Backend > should resolve workspace using current directory [0.06ms]
(fail) Enhanced JSON Backend > should handle database file path configuration [0.06ms]
(fail) Enhanced JSON Backend > should identify as in-tree backend when using special workspace [0.06ms]
(fail) Backend Workspace Integration - Current Behavior > Current JSON Backend Behavior > json backend should use current directory for external files [0.66ms]
(fail) Target Backend Architecture - Self-Contained Workspace Resolution > Enhanced Markdown Backend > should handle current directory workspace resolution [0.42ms]
(fail) Target Backend Architecture - Self-Contained Workspace Resolution > Simplified Workflow > should support auto-detection TaskService creation [0.34ms]
(fail) GitHubIssuesTaskBackend > formatTaskSpec > should format task specification data [0.12ms]
(fail) Repository Operations with Dependency Injection > should have cloneWithDependencies method available [0.12ms]
(fail) Session Approve - Bug Regression Tests > Bug #2: Fail-Fast on Merge Errors > should restore stash even when merge fails [3.89ms]
(fail) Session Command Domain Logic > sessionDelete domain logic > throws ResourceNotFoundError for non-existent session [0.19ms]
(fail) SessionDB Functional Implementation > getSessionFn > should return the session by name [0.12ms]
(fail) SessionDB Functional Implementation > addSessionFn > should add a new session to the state [0.05ms]
(fail) SessionDB Functional Implementation > updateSessionFn > should update an existing session [0.07ms]
(fail) Session PR Body Validation Bug Fix > should throw ValidationError for new PR without body [11.28ms]
(fail) Session PR Body Content Bug Fix > Real file reading integration > should correctly read body content from file path [0.17ms]
(fail) Session PR Body Content Bug Fix > Real file reading integration > should handle non-existent body files correctly [0.82ms]
(fail) Session CLI Commands > session update command > TASK #168 FIX: should extract task ID from session name during self-repair [0.19ms]
(fail) Session Context Resolution Architecture Issues > üö© PROBLEM: Mixed Concerns in Domain Layer > should NOT require different validation logic based on working directory [0.14ms]
(fail) Session Context Resolution Architecture Issues > üö© PROBLEM: Mixed Concerns in Domain Layer > should NOT have different behavior based on working directory context [0.11ms]
(fail) Session Context Resolution Architecture Issues > ‚úÖ TARGET: Clean Architecture with Interface-Layer Resolution > should ALWAYS require session parameter in domain layer [0.07ms]
(fail) Session Context Resolution Architecture Issues > ‚úÖ TARGET: Clean Architecture with Interface-Layer Resolution > should handle session resolution in interface adapters [0.22ms]

 950 pass
 14 skip
 93 fail
 22 errors
 2890 expect() calls
Ran 1057 tests across 134 files. [2.18s]
